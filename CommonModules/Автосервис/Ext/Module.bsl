///////////////////////////////////////////////////////////////////////////////
// Модуль для работы с блоком документов "Заказ-наряд", "Заявка на ремонт",  //
// "Сводный ремонтный заказ", "Запись на ремонт"                             //
///////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет является ли вид ремонта бесплатным
//
// Параметры:
//  ВидРемонта - СправочникСсылка.ВидыРемонта - Проверяемый вид ремотна.
//
// Возвращаемое значение:
//  Булево.
//  Истина - Вид ремонта бестлатный.
//  Ложь - Вид ремонта платный или пустой.
//
Функция ЭтоБесплатный(ВидРемонта) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВидРемонта) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТипРемонта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРемонта, "ТипРемонта");
	
	Возврат ТипРемонта <> Перечисления.ТипыРемонта.Платный;
	
КонецФункции

// Проверяет является ли вид ремонта комплектацией или сборкой автомобиля
//
// Параметры:
//  ВидРемонта - СправочникСсылка.ВидыРемонта - Проверяемый вид ремонта.
//
// Возвращаемое значение:
//  Булево.
//  Истина - Вид ремонта соответствует типу.
//  Ложь - Вид ремонта платный или пустой, или бесплатный.
//
Функция ЭтоКомплектацияСборкаАвтомобиля(ВидРемонта) Экспорт
	
	ТипРемонта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРемонта, "ТипРемонта");
	ТипыРемонтаПроверкиЗаказчика = Новый Массив;
	ТипыРемонтаПроверкиЗаказчика.Добавить(Перечисления.ТипыРемонта.КомплектацияАвтомобиля);
	ТипыРемонтаПроверкиЗаказчика.Добавить(Перечисления.ТипыРемонта.СборкаАвтомобиля);
	
	Возврат ТипыРемонтаПроверкиЗаказчика.Найти(ТипРемонта) <> Неопределено;
	
КонецФункции

// Заполняет артикул для поиска в справочнике автоработы для элементов у которых об не заполнен.
//
Процедура ЗаполнитьАртикулДляПоискаВАвтоработах() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Автоработы.Ссылка КАК Авторабота,
	|	Автоработы.Артикул КАК Артикул
	|ИЗ
	|	Справочник.Автоработы КАК Автоработы
	|ГДЕ
	|	Автоработы.ЭтоГруппа = ЛОЖЬ
	|	И Автоработы.АртикулДляПоиска = """"
	|	И Автоработы.Артикул <> """"");
	РезультатЗапроса=Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Авторабота.ПолучитьОбъект();
		Объект.АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Выборка.Артикул);
		Объект.ОбменДанными.Загрузка = Истина;
		Попытка
			Объект.Записать();
		Исключение КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАртикулДляПоискаВАвтоработах()

// Процедура - Напоминание о записи на ремонт
//
Процедура НапоминаниеОЗаписиНаРемонт() Экспорт
	
	// Выбираем неотправленные сообщения 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НапоминаниеОЗаписиНаРемонт.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт,
	|	НапоминаниеОЗаписиНаРемонт.ЗаявкаНаРемонт.ВидРемонта КАК ЗаявкаНаРемонтВидРемонта,
	|	НапоминаниеОЗаписиНаРемонт.ЗаявкаНаРемонт.Заказчик КАК ЗаявкаНаРемонтЗаказчик
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	РегистрСведений.НапоминаниеОЗаписиНаРемонт КАК НапоминаниеОЗаписиНаРемонт
	|ГДЕ
	|	НапоминаниеОЗаписиНаРемонт.ДатаЗапланированнойОтправки < &ТекущаяДата
	|	И НапоминаниеОЗаписиНаРемонт.ДатаНачалаРемонта > &ТекущаяДата
	|	И НапоминаниеОЗаписиНаРемонт.ДатаРеальнойОтправки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.ЗаявкаНаРемонтВидРемонта.ШаблонПриЗаписиНаРемонт КАК ШаблонПриЗаписиНаРемонт,
	|	ВременнаяТаблица.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт,
	|	ВременнаяТаблица.ЗаявкаНаРемонтЗаказчик КАК Заказчик
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|ГДЕ
	|	ВременнаяТаблица.ЗаявкаНаРемонтВидРемонта.ВремяНачалаОтправки < &ТекущееВремя
	|	И (ВременнаяТаблица.ЗаявкаНаРемонтВидРемонта.ВремяОкончанияОтправки <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ВременнаяТаблица.ЗаявкаНаРемонтВидРемонта.ВремяОкончанияОтправки > &ТекущееВремя
	|			ИЛИ ВременнаяТаблица.ЗаявкаНаРемонтВидРемонта.ВремяОкончанияОтправки = ДАТАВРЕМЯ(1, 1, 1))
	|	И ВременнаяТаблица.ЗаявкаНаРемонтВидРемонта.ШаблонПриЗаписиНаРемонт <> ЗНАЧЕНИЕ(Справочник.ШаблоныСообщений.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	ВремяОбработки = Дата(1,1,1) +(ТекущаяДатаСеанса() - НачалоДня(ТекущаяДатаСеанса())); 
	
	Запрос.УстановитьПараметр("ТекущееВремя", ВремяОбработки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
	Иначе
		Возврат;
	КонецЕсли;
	
	// Обходим 
	Пока Выборка.Следующий() Цикл
		
		ДокументSMS = Документы.СообщениеSMS.СоздатьДокумент();
		ДокументSMS.Заполнить(Выборка.ЗаявкаНаРемонт);
		ДокументSMS.Дата = ТекущаяДатаСеанса();
		
		ДокументSMS.ДатаКогдаОтправить = ТекущаяДатаСеанса();
		
		ДокументSMS.Состояние   = Перечисления.СостоянияДокументаСообщениеSMS.Исходящее;
		ДокументSMS.Комментарий = НСтр("ru = 'Создан регламентным заданием ""Напоминание о записи на ремонт""'");
		
		ДополнительныеПараметры = Новый Структура;
		
		СтруктураСообщения = ШаблоныСообщений.СформироватьСообщение(
			Выборка.ШаблонПриЗаписиНаРемонт,
			Выборка.ЗаявкаНаРемонт,
			Новый УникальныйИдентификатор,
			ДополнительныеПараметры);
		
		// Получим адресата
		Если СтруктураСообщения.Получатель.Количество() = 1 Тогда
			ДокументSMS.Адресаты.Очистить();
			НоваяСтрока = ДокументSMS.Адресаты.Добавить();
			Если ТипЗнч(СтруктураСообщения.Получатель) = Тип("Массив") Тогда
				НоваяСтрока.КакСвязаться = СтруктураСообщения.Получатель[0].НомерТелефона;
			Иначе
				НоваяСтрока.КакСвязаться = СтруктураСообщения.Получатель[0].Значение;
			КонецЕсли;
			НоваяСтрока.ПредставлениеКонтакта = СтруктураСообщения.Получатель[0].Представление;
			НоваяСтрока.Контакт               = Выборка.Заказчик;
		ИначеЕсли ДокументSMS.Адресаты.Количество() = 0 Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Не указан номер телефона для отправки напоминания.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ЗаявкаНаРемонт,
				Выборка.ЗаявкаНаРемонт,
				НСтр("ru = 'Документ SMS не удалось сформировать и отправить уведомление о записи на ремонт'"));
			Продолжить;
		КонецЕсли;
		
		// Заполним номера телефонов для связи
		НекорректныйТелефон = Ложь;
		Для Каждого ТекущаяСтрока Из ДокументSMS.Адресаты Цикл
			СтруктураПолей = СтруктураПолейПоПредставлениюТелефона(ТекущаяСтрока.КакСвязаться);
			Если КорректноВведенНомерТелефона(СтруктураПолей) Тогда
				ТекущаяСтрока.НомерДляОтправки = ?(ЛЕВ(СтруктураПолей.КодСтраны, 1) = "+",
					СтруктураПолей.КодСтраны,
					"+" + СтруктураПолей.КодСтраны) + СтруктураПолей.КодГорода + СтруктураПолей.НомерТелефона;
			Иначе
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Номер телефона должен быть указан в формате ""+xx (xxx) xxxxxxx"".'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.ЗаявкаНаРемонт,
					Выборка.ЗаявкаНаРемонт,
					НСтр("ru = 'Документ SMS не удалось сформировать и отправить уведомление о записи на ремонт'"));
				НекорректныйТелефон = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НекорректныйТелефон Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполним текст сообщения
		ДокументSMS.ТекстСообщения = СтруктураСообщения.Текст;
		
		Если СтруктураСообщения.Свойство("ОтправлятьВТранслите") Тогда
			ДокументSMS.ОтправлятьВТранслите = СтруктураСообщения.ОтправлятьВТранслите;
		КонецЕсли;
		
		ДокументSMS.Тема = ТемаПоТекстуСообщения(ДокументSMS.ТекстСообщения);
		Взаимодействия.СформироватьСписокУчастников(ДокументSMS);
		
		Попытка
			// Запишем документ
			ДокументSMS.Записать();
			
			СтруктураДляЗаписи = СтруктураРеквизитовВзаимодействияДляЗаписи( , Неопределено, Ложь, Дата(1, 1, 1), Истина);
			СтруктураДляЗаписи.Предмет                 = Выборка.ЗаявкаНаРемонт;
			СтруктураДляЗаписи.РассчитыватьРассмотрено = Истина;
			РегистрыСведений.ПредметыПапкиВзаимодействий.ЗаписатьПредметыПапкиВзаимодействий(
				ДокументSMS.Ссылка,
				СтруктураДляЗаписи);
			
			// Отправим
			МассивНомеров = ДокументSMS.Адресаты.ВыгрузитьКолонку("НомерДляОтправки");
			РезультатОтправки = ОтправкаSMS.ОтправитьSMS(
				МассивНомеров,
				ДокументSMS.ТекстСообщения,
				"",
				ДокументSMS.ОтправлятьВТранслите);
			
			// Внесем запись в регистр
			РегистрыСведений.НапоминаниеОЗаписиНаРемонт.ИзменитьПослеОтправкиИзРегЗадания(
				Выборка.ЗаявкаНаРемонт,
				ДокументSMS.Ссылка);
			
			Взаимодействия.ОтразитьРезультатыОтправкиSMSВДокументе(ДокументSMS, РезультатОтправки);
			ДокументSMS.ДополнительныеСвойства.Вставить("НеЗаписыватьКонтакты", Истина);
			ДокументSMS.Записать();
			
			// Если ошибка, то запишем её в журнал
			Если РезультатОтправки.ОтправленныеСообщения.Количество() = 0 Тогда
				
				ОписаниеОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка отправки документа смс: %1 %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
					РезультатОтправки,
					Строка(ДокументSMS.Ссылка));
					
				ЗаписьЖурналаРегистрации(
					ОписаниеОшибки,
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.ЗаявкаНаРемонт,
					ДокументSMS,
					НСтр("ru = 'Документ SMS не удалось отправить.'"));
				
			КонецЕсли;
			
		Исключение
			
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка записи документа смс: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				Строка(ДокументSMS.Ссылка));
			
			ЗаписьЖурналаРегистрации(
				ОписаниеОшибки,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ЗаявкаНаРемонт,
				ДокументSMS,
				НСтр("ru = 'Документ SMS не удалось записать.'"));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует структуру полей контактной информации типа Телефон или МобильныйТелефон по представлению телефона.
//
// Параметры:
//  Представление  - Строка - строковая информация с номером телефона.
//
// Возвращаемое значение:
//   Структура   - сформированная структура.
//
Функция СтруктураПолейПоПредставлениюТелефона(Представление) Экспорт
	
	текСтр = СокрЛП(Представление);
	
	// Вырежем добавочный номер с комментарием.
	ПозДоб = СтрНайти(ВРЕГ(текСтр), "ДОБ.");
	Если ПозДоб <> 0 Тогда
		ДобавочныйСКомментарием = СокрЛП(Сред(текСтр, ПозДоб+4));
		
		текСтр = СокрЛП(Лев(текСтр, ПозДоб-1));
		
		Если СтрЗаканчиваетсяНа(текСтр, ",") Тогда
			текСтр = Лев(текСтр, СтрДлина(текСтр)-1);
		КонецЕсли;
		
		ПозДоб = СтрНайти(ВРЕГ(ДобавочныйСКомментарием), ", ");
		
		Если ПозДоб <> 0 Тогда
			Добавочный = СокрЛП(Лев(ДобавочныйСКомментарием, ПозДоб-1));
			Комментарий = СокрЛП(Сред(ДобавочныйСКомментарием, ПозДоб+2));
		Иначе
			Добавочный = ДобавочныйСКомментарием;
		КонецЕсли;
		
	КонецЕсли;
	
	// вырежем код города
	Поз = СтрНайти(текСтр, "(");
	Если Поз <> 0 Тогда
		КодСтраны = СокрЛП(Лев(текСтр, Поз-1));
		
		текСтр = СокрЛП(Сред(текСтр, Поз+1));
		Поз = СтрНайти(текСтр, ")");
		
		Если Поз <> 0 Тогда
			КодГорода = СокрЛП(Лев(текСтр, Поз-1));
			текСтр = СокрЛП(Сред(текСтр, Поз+1));
		КонецЕсли;
	КонецЕсли;
	
	Поз = СтрНайти(текСтр, ", ");
	// Если добавочного номера нет - ориентируемся по номеру телефона и комментарию.
	Если ПозДоб = 0 И Поз <> 0 Тогда
		// вырежем комментарий
		НомерТелефона = СокрЛП(Лев(текСтр, Поз-1));
		Комментарий = СокрЛП(Сред(текСтр, Поз+2));
	Иначе
		// все оставшееся это номер
		НомерТелефона = текСтр;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("КодСтраны", КодСтраны);
	Результат.Вставить("КодГорода", КодГорода);
	Результат.Вставить("НомерТелефона", НомерТелефона);
	Результат.Вставить("Добавочный", Добавочный);
	Результат.Вставить("Комментарий", Комментарий);
	
	Возврат Результат;
	
КонецФункции

// Определяет, корректно ли введен номер телефона для сообщения SMS.
//
// Параметры:
//  СтруктураПолей  - Структура - структура описывающая контактную информацию типа Телефон или МобильныйТелефон.
//
// Возвращаемое значение:
//   Булево   - Истина, если номер введен правильно, Ложь в обратном случае.
//
Функция КорректноВведенНомерТелефона(СтруктураПолей) Экспорт
	
	Если НЕ ПустаяСтрока(СтруктураПолей.КодСтраны) Тогда
		КодСтраны = СокрЛП(КодСтраны);
		Если СтрНачинаетсяС(КодСтраны, "+") Тогда
			КодСтраны = Прав(КодСтраны, СтрДлина(СтруктураПолей.КодСтраны)-1);
		КонецЕсли;
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодСтраны) Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтруктураПолей.КодГорода) Тогда
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтруктураПолей.КодГорода) Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтруктураПолей.НомерТелефона) Тогда
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтруктураПолей.НомерТелефона) Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(СтруктураПолей.КодГорода) + СтрДлина(СтруктураПолей.НомерТелефона) <> 10 Тогда
		 Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Формирует тему по тексту сообщения на основании первых трех слов.
//
// Параметры:
//  ТекстСообщения  - Строка - текст сообщения, на основании которого формируется тема.
//
// Возвращаемое значение:
//   Строка   - сформированная тема сообщения.
//
Функция ТемаПоТекстуСообщения(ТекстСообщения) Экспорт

	МассивСтрок = СтрРазделить(ТекстСообщения," ", Ложь);
	Тема = "";
	Для Инд = 0 По МассивСтрок.Количество() - 1 Цикл
		Если Инд > 2 Тогда
			Прервать;
		КонецЕсли;
		Тема = Тема + МассивСтрок[Инд] + " ";
	КонецЦикла;
	
	Возврат Лев(Тема, СтрДлина(Тема) - 1);

КонецФункции

// Формирует структуру для записи в регистр сведений ПредметыПапкиВзаимодействий.
//
// Параметры:
//  Папка       - Справочник.ПапкиЭлектронныхПисем - папка, имеет смысл для документов "Электронное письмо входящее"
//               и "Электронное письмо исходящее".
//  Предмет          - СправочникСсылка, ДокументСсылка, указывает на предмет взаимодействия.
//  Рассмотрено      - Булево - признак рассмотрения взаимодействия.
//  РассмотретьПосле - ДатаВремя - дата, до которой отложено рассмотрение взаимодействия.
//  РассчитыватьРассмотрено - Булево - признак необходимости расчета состояний папки и предмета.
//
// Возвращаемое значение:
//   Структура   - сформированная структура.
//
Функция СтруктураРеквизитовВзаимодействияДляЗаписи(Папка = Неопределено, Предмет = Неопределено, Рассмотрено = Неопределено,
	                                               РассмотретьПосле = Неопределено, РассчитыватьРассмотрено = Истина) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Предмет"                ,Неопределено);
	СтруктураВозврата.Вставить("Папка"                  ,Неопределено);
	СтруктураВозврата.Вставить("Рассмотрено"            ,Неопределено);
	СтруктураВозврата.Вставить("РассмотретьПосле"       ,Неопределено);
	СтруктураВозврата.Вставить("РассчитыватьРассмотрено",Истина);
	
	Если Папка <> Неопределено Тогда
		СтруктураВозврата.Папка = Папка;
	КонецЕсли;
	
	Если Предмет <> Неопределено Тогда
		СтруктураВозврата.Предмет = Предмет;
	КонецЕсли;
	
	Если Рассмотрено <> Неопределено Тогда
		СтруктураВозврата.Рассмотрено = Рассмотрено;
	КонецЕсли;
	
	Если РассмотретьПосле <> Неопределено Тогда
		СтруктураВозврата.РассмотретьПосле = РассмотретьПосле;
	КонецЕсли;
	СтруктураВозврата.РассчитыватьРассмотрено = РассчитыватьРассмотрено;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Проверка заполнения реквизитов "Нормочас" и "Норма времени" в строке табличной части "Автоработы".
//
// Параметры:
//  Объект	 - ДокументОбъект - Документ, на основании которого выполняется событие.
//  Отказ	 - Булево - Признак личия ошибки.
//
Процедура ПроверитьЗаполнениеНормачасаАвтоработы(Объект, Отказ) Экспорт
	
	Для Каждого СтрокаАвтоработы Из Объект.Автоработы Цикл
		
		Если СтрокаАвтоработы.СпособРасчетаСтоимостиРаботы =
			Перечисления.СпособыРасчетаСтоимостиРаботы.ФиксированнойСуммой Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаАвтоработы.Нормочас) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Поле ""%1"" строки %2 таблицы ""%3"" не заполнено'"),
					"Нормочас",
					СтрокаАвтоработы.НомерСтроки,
					"Автоработы"), 
				Объект,
				СтрШаблон("Автоработы[%1].Нормочас", СтрокаАвтоработы.НомерСтроки),,
				Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаАвтоработы.Коэффициент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Поле ""%1"" строки %2 таблицы ""%3"" не заполнено'"),
					"Норма времени",
					СтрокаАвтоработы.НомерСтроки,
					"Автоработы"), 
				Объект,
				СтрШаблон("Автоработы[%1].Коэффициент", СтрокаАвтоработы.НомерСтроки),,
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение себестоимости комплектующих автомобилей в табличной части "Автомобили"
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма, в которой возникло событие.
//  Объект				 - ДанныеФормыСтруктура	 - Объект, в котором производится вывод.
//
Процедура ЗаполнитьСебестоимостьАвтомобилей(Форма, Объект) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если НЕ Объект.Проведен ИЛИ Объект.Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
		КурсУпр        = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		КурсУпр = Объект.КурсВалютыУпр;
	КонецЕсли;
	
	Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбъединенныйЗапрос.Автомобиль КАК Автомобиль,
		|	ОбъединенныйЗапрос.Сумма КАК Сумма,
		|	ОбъединенныйЗапрос.СуммаБезНДС КАК СуммаБезНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
		|		ОстаткиАвтомобилей."+?(Объект.ВалютаДокумента = ВалютаРегл, "Сумма", "СуммаУпр")+" КАК Сумма,
		|		ОстаткиАвтомобилей."+?(Объект.ВалютаДокумента = ВалютаРегл, "СуммаБезНДС", "СуммаБезНДСУпр")+" КАК СуммаБезНДС
		|	ИЗ
		|		РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
		|	ГДЕ
		|		ОстаткиАвтомобилей.Регистратор = &Регистратор
		|		И ОстаткиАвтомобилей.ВидДвижения = &ВидДвиженияРасход
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КомплектацияАвтомобилей.Автомобиль,
		|		КомплектацияАвтомобилей."+?(Объект.ВалютаДокумента = ВалютаРегл, "Сумма", "СуммаУпр")+",
		|		КомплектацияАвтомобилей."+?(Объект.ВалютаДокумента = ВалютаРегл, "СуммаБезНДС", "СуммаБезНДСУпр")+"
		|	ИЗ
		|		РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
		|	ГДЕ
		|		КомплектацияАвтомобилей.Регистратор = &Регистратор
		|		И КомплектацияАвтомобилей.ВидДвижения = &ВидДвиженияРасход) КАК ОбъединенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъединенныйЗапрос.Автомобиль,
		|	ОбъединенныйЗапрос.Сумма,
		|	ОбъединенныйЗапрос.СуммаБезНДС";
	Запрос.УстановитьПараметр("Регистратор"       , Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидДвиженияРасход" , ВидДвиженияНакопления.Расход);
	КэшСуммСписания=Запрос.Выполнить().Выгрузить();
	
	Если Объект.ВалютаДокумента <> ВалютаРегл И Объект.ВалютаДокумента <> ВалютаУпр Тогда
		Для Каждого СтрокаСписания Из КэшСуммСписания Цикл
			СтрокаСписания.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаСписания.Сумма,
																				ВалютаУпр,
																				КурсУпр,
																				Объект.ВалютаДокумента,
																				Объект.КурсДокумента,
																				2);
			СтрокаСписания.СуммаБезНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаСписания.СуммаБезНДС,
																						ВалютаУпр,
																						КурсУпр,
																						Объект.ВалютаДокумента,
																						Объект.КурсДокумента,
																						2);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаАвтомобиля Из Объект.Автомобили Цикл
		НайденныеСтроки = КэшСуммСписания.НайтиСтроки(Новый Структура("Автомобиль", СтрокаАвтомобиля.Автомобиль));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаАвтомобиля.СуммаСписания = НайденныеСтроки[0].Сумма;
			СтрокаАвтомобиля.СуммаСписанияБезНДС = НайденныеСтроки[0].СуммаБезНДС;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Элементы.АвтомобилиСуммаСписания.ТекстПодвала = Формат(КэшСуммСписания.Итог("Сумма"), "ЧДЦ=2");
	Форма.Элементы.АвтомобилиСуммаСписанияБезНДС.ТекстПодвала = Формат(КэшСуммСписания.Итог("СуммаБезНДС"), "ЧДЦ=2");
	Форма.Элементы.АвтомобилиАвтомобиль.ТекстПодвала = НСтр("ru = 'ИТОГО:'");
	
КонецПроцедуры

Функция ВидРемонтаТипаКомплектацияАвтомобиля() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВидыРемонта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыРемонта КАК ВидыРемонта
	|ГДЕ
	|	ВидыРемонта.ТипРемонта = ЗНАЧЕНИЕ(перечисление.ТипыРемонта.КомплектацияАвтомобиля)
	|	И НЕ ВидыРемонта.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.ВидыРемонта.ПустаяСсылка();
	
КонецФункции

#Область Исполнители

// Формирует содержание колонки "Исполнители" в ТЧ Автоработы.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура ОбновитьПредставлениеИсполнителей(Объект) Экспорт
	
	Для Каждого авторабота Из Объект.Автоработы Цикл
		представлениеИсполнителей = Новый Массив;
		массивСтрокИсполнителей = Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", авторабота.ИдентификаторРаботы));
		Для Каждого исполнитель Из массивСтрокИсполнителей Цикл
			представлениеИсполнителей.Добавить(исполнитель.Исполнитель);
		КонецЦикла;
		
		авторабота.Исполнители = стрСоединить(представлениеИсполнителей,", ");
	КонецЦикла;
	
КонецПроцедуры

// Помещает Таблицу исполнителей во временное хранилище
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - объект, для которого выполняется обработка события.
//  Идентификатор           - Строка - идентификатор строки авторабот.
//  УникальныйИдентификатор - Строка - уникальный идентификатор.
//
// Возвращаемое значение:
//  Строка - адрес временного хранилища таблицы исполнителей.
//
Функция ПоместитьТаблицуИсполнителиВХранилище(Объект, Идентификатор, УникальныйИдентификатор) Экспорт
	
	ИсполнителиРаботы = Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Идентификатор));
	КопияИсполнителей = Объект.Исполнители.Выгрузить(ИсполнителиРаботы, "Исполнитель, Цех, Процент");
	
	Возврат ПоместитьВоВременноеХранилище(КопияИсполнителей, УникальныйИдентификатор);
	
КонецФункции

// Заполняет таблицу исполнителей из временного хранилища
//
// Параметры:
//  Объект              - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  АдресВХранилище     - Строка - Адрес во временном хранилище.
//  ИдентификаторРаботы - Строка - Уникальный идентификатор работы.
//
Процедура ЗаполнитьТаблицуИсполнителейИзХранилища(Объект, АдресВХранилище, ИдентификаторРаботы) Экспорт
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Если НЕ ТипЗнч(ТаблицаДляЗагрузки) = Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныРабот         = Объект.Автоработы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторРаботы));
	ИдентификаторПричины = ПричиныРабот[0].ИдентификаторПричиныОбращения;
	ПричинаОбращения = Объект.ПричиныОбращения.НайтиСтроки(Новый Структура(
											"ИдентификаторПричиныОбращения", 
											ИдентификаторПричины));
	Если ПричинаОбращения.Количество() = 0 Тогда
		ИсполнителиОдинаковыеВРамкахПричины = Ложь;
	Иначе
		ИсполнителиОдинаковыеВРамкахПричины = ПричинаОбращения[0].ИсполнителиОдинаковыеВРамкахПричины;
	КонецЕсли;
	
	ЭтоЗаказНаряд = (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказНаряд"));
	
	Если Объект.ИсполнителиОдинаковыеДляВсехРабот Тогда
		Объект.Исполнители.Очистить();
		
		Для Каждого Авторабота Из Объект.Автоработы Цикл
			ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Авторабота);
			Для Каждого ТекущаяСтрока Из ТаблицаДляЗагрузки Цикл
				НовыйИсполнитель = Объект.Исполнители.Добавить();
				НовыйИсполнитель.ИдентификаторРаботы = Авторабота.ИдентификаторРаботы;
				НовыйИсполнитель.Исполнитель         = ТекущаяСтрока.Исполнитель;
				НовыйИсполнитель.Процент             = ТекущаяСтрока.Процент;
				НовыйИсполнитель.Цех                 = ТекущаяСтрока.Цех;
				ЗаполнитьДанныеНачисленийСотрудникам(
					НовыйИсполнитель,
					ТекущаяСтрока,
					ДанныеРасчетаАвтоработы,
					ЭтоЗаказНаряд,
					ИдентификаторРаботы);
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ИсполнителиОдинаковыеВРамкахПричины Тогда
		
		СписокАвторабот = Объект.Автоработы.НайтиСтроки(
			Новый Структура("ИдентификаторПричиныОбращения", ИдентификаторПричины));
		
		Для Каждого Авторабота Из СписокАвторабот Цикл
			
			// Найдем и удалим старых исполнителей
			ИсполнителиАвтоработы = Объект.Исполнители.НайтиСтроки(
				Новый Структура("ИдентификаторРаботы", Авторабота.ИдентификаторРаботы));
			
			Для Каждого ТекущаяСтрока Из ИсполнителиАвтоработы Цикл
				Объект.Исполнители.Удалить(ТекущаяСтрока);
			КонецЦикла;
			
			ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Авторабота);
			
			Для Каждого ТекущаяСтрока Из ТаблицаДляЗагрузки Цикл
				НовыйИсполнитель = Объект.Исполнители.Добавить();
				НовыйИсполнитель.ИдентификаторРаботы = Авторабота.ИдентификаторРаботы;
				НовыйИсполнитель.Исполнитель         = ТекущаяСтрока.Исполнитель;
				НовыйИсполнитель.Процент             = ТекущаяСтрока.Процент;
				НовыйИсполнитель.Цех                 = ТекущаяСтрока.Цех;
				ЗаполнитьДанныеНачисленийСотрудникам(
					НовыйИсполнитель,
					ТекущаяСтрока,
					ДанныеРасчетаАвтоработы,
					ЭтоЗаказНаряд,
					ИдентификаторРаботы);
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		ИсполнителиРаботы = Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторРаботы));
		Для Каждого ТекИсполнитель Из ИсполнителиРаботы Цикл
			Объект.Исполнители.Удалить(ТекИсполнитель);
		КонецЦикла;
		
		СтрокаИсполнители      = "";
		Для Каждого ТекущаяСтрока Из ТаблицаДляЗагрузки Цикл
			НовыйИсполнитель = Объект.Исполнители.Добавить();
			НовыйИсполнитель.ИдентификаторРаботы = ИдентификаторРаботы;
			НовыйИсполнитель.Исполнитель         = ТекущаяСтрока.Исполнитель;
			НовыйИсполнитель.Процент             = ТекущаяСтрока.Процент;
			НовыйИсполнитель.Цех                 = ТекущаяСтрока.Цех;
			Если ЭтоЗаказНаряд Тогда
				НовыйИсполнитель.ВидНачисления       = ТекущаяСтрока.ВидНачисления;
				НовыйИсполнитель.СпособРасчета       = ТекущаяСтрока.СпособРасчета;
				НовыйИсполнитель.ПараметрРасчетаНачисления = ТекущаяСтрока.ПараметрРасчетаНачисления;
				НовыйИсполнитель.Начислено = ТекущаяСтрока.Начислено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьПредставлениеИсполнителей(Объект);
	
КонецПроцедуры

// Процедура - Установить нормочас
//
// Параметры:
//  Объект				 - ДокументСсылка.ЗаказНаряд, ДокументСсылка.ЗаявкаНаРемонт	 - Объект, для которого необходимо установить нормочас.
//  ПараметрыДействия	 - Структура												 - ПараметрыДействия.
//
Процедура УстановитьНормочас(Объект, ПараметрыДействия) Экспорт
	
	// Пробуем взять сначала нормочас из договора, а затем уже из вида ремонта.
	Если НЕ Объект.ДоговорВзаиморасчетов.НормочасПоУмолчанию.Пустая() Тогда
		НовыйНормочас = Объект.ДоговорВзаиморасчетов.НормочасПоУмолчанию;
	ИначеЕсли НЕ Объект.ВидРемонта.НормочасПоУмолчанию.Пустая() Тогда
		НовыйНормочас = Объект.ВидРемонта.НормочасПоУмолчанию;
	Иначе
		НовыйНормочас = Справочники.Нормочасы.ПустаяСсылка();
	КонецЕсли;
	
	Если Объект.Нормочас <> НовыйНормочас Тогда
		
		// получим менеджер объекта
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		Объект.Нормочас = НовыйНормочас;
		Менеджер.НормочасПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаТабличнойЧастиТовары
// Заполняет заменами товаров после завершения подбора замен в табличной части "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, в котором производится подбор замен товаров.
//
//  РезультатОповещения - Строка
//   - Адрес во временном хранилище, по которому лежит таблица подобранных товаров.
//
//  ЗаполнятьИдентификаторПричиныОбращения - Булево
//     - Истина - для всех документов Автосервиса,
//     - Ложь - для документов без ТЧ "ПричиныОбращения".
//
Процедура ВыполнитьЗаменуТоваровВДокументе(Объект, РезультатОповещения, ЗаполнятьИдентификаторПричиныОбращения = Истина) Экспорт
	
	ТаблицаПодбора = ПолучитьИзВременногоХранилища(РезультатОповещения);
	
	Если ЗаполнятьИдентификаторПричиныОбращения Тогда
		ИдентификаторПричиныОбращенияПервой = "";
		Если Объект.ПричиныОбращения.Количество() > 0 Тогда
			ИдентификаторПричиныОбращенияПервой = Объект.ПричиныОбращения[0].ИдентификаторПричиныОбращения;
		КонецЕсли;
	КонецЕсли;
	
	// Заблокируем построчный пересчет скидок
	ПараметрыДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ПолучитьПараметрыДействия(Объект);
	ПересчитатьСкидки = Ложь;
	ПересчитыватьСкидки = Ложь;
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
		ПересчитыватьСкидки = Истина;
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаПодбора Цикл
		СтрокаВДокументе = Объект.Товары.НайтиПоИдентификатору(Строка.СтрокаВДокументе);
		Если СтрокаВДокументе = Неопределено Тогда
			СтрокаВДокументе = Объект.Товары.Добавить();
			Если ЗаполнятьИдентификаторПричиныОбращения Тогда
				СтрокаВДокументе.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращенияПервой;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаВДокументе.Номенклатура = Строка.Номенклатура
			И СтрокаВДокументе.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры
			И СтрокаВДокументе.Количество = Строка.Количество 
			И СтрокаВДокументе.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
			СтрокаВДокументе,
			Строка,
			"Номенклатура,ХарактеристикаНоменклатуры,Количество,ЕдиницаИзмерения,Коэффициент");
		
		РезультатОповещения = Новый Структура;
		ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ТоварыНоменклатураПриИзменении(Объект, СтрокаВДокументе, ПараметрыДействия);
		
	КонецЦикла;
	
	// Пересчет скидок
	Если ПересчитыватьСкидки Тогда
		ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗаменуТоваровВДокументе()

#КонецОбласти

#Область СводныйРемонтныйЗаказ

// Обновление таблиц из документов Заказ-нарядов Сводного ремонтного заказа.
//
// Параметры:
//  Форма					 - УправляемаяФорма	 - Форма, в которой возникло событие.
//  ПодчиненныеТаблицы		 - Структура		 - Список подчиненных таблиц.
//  ДополнительныеПараметры	 - Структура		 - Дополнительные параметры.
//
Процедура ОбновитьДанныеПодчиненныхТаблиц(Форма, ПодчиненныеТаблицы, ДополнительныеПараметры) Экспорт
	
	ПодчиненныеТаблицы.ПодчиненныеАвтоработы.Очистить();
	ПодчиненныеТаблицы.ПодчиненныеТовары.Очистить();
	ПодчиненныеТаблицы.ПодчиненныеМатериалы.Очистить();
	ПодчиненныеТаблицы.ПодчиненныеПричиныОбращений.Очистить();
	ПодчиненныеТаблицы.ПодчиненныеВспомогательныеАвтоработы.Очистить();
	
	// Параметр "Основание" может быть представлен структурой
	ДокументОснования =  ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Основание");
	
	Если ТипЗнч(ДокументОснования) = Тип("Структура") Тогда
		
		ДокументОснования = Неопределено;
		
	КонецЕсли;
	
	Если ТипЗнч(ПодчиненныеТаблицы.ПодчиненныеЗаказНаряды) = Тип("ТаблицаЗначений") Тогда
		СписокЗаказНарядов = ПодчиненныеТаблицы.ПодчиненныеЗаказНаряды.ВыгрузитьКолонку("ЗаказНарядСсылка");
	Иначе
		СписокЗаказНарядов = ПодчиненныеТаблицы.ПодчиненныеЗаказНаряды.Выгрузить().ВыгрузитьКолонку("ЗаказНарядСсылка");
	КонецЕсли;
	
	// получим состав причин обращения
	РезультатЗапроса = ТекстЗапросаСоставаПричинОбращений(ДокументОснования, СписокЗаказНарядов);
	
	ВыборкаСоставПричинОбращений = РезультатЗапроса.Выбрать();
	
	Для Каждого ЗаказНаряд Из ПодчиненныеТаблицы.ПодчиненныеЗаказНаряды Цикл
		СуммаНоменклатурыПоПричинеОбращения = 0;
		
		// Автоработы
		Для Каждого Авторабота Из Форма[ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд].Автоработы Цикл
			
			НоваяСтрока = ПодчиненныеТаблицы.ПодчиненныеАвтоработы.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Авторабота);
			НоваяСтрока.ИдентификаторСтрокиВЗаказНаряде = Авторабота.ПолучитьИдентификатор();
			НоваяСтрока.ИдентификаторОбъектаЗаказНаряд   = ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд;
			НоваяСтрока.ИдентификаторАвтоработы         = Авторабота.ИдентификаторРаботы;
			НоваяСтрока.Артикул                         = Авторабота.Авторабота.Артикул;
			НоваяСтрока.Представление                   = СтрШаблон(
															"[%2] %1",
															Строка(Авторабота.Авторабота), НоваяСтрока.Артикул);
			НоваяСтрока.Цех                             = Форма[ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд].Цех;
			
			// Если причин обращения у заказ-наряда нет, то пропустим заполнение поля причины обращения
			Если Форма[ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд].ПричиныОбращения.Количество() > 0 Тогда
				// Заполним причину обращения
				ВыборкаСоставПричинОбращений.Сбросить();
				Если ВыборкаСоставПричинОбращений.НайтиСледующий(
						Новый Структура("Авторабота,ЗаказНаряд", НоваяСтрока.ИдентификаторАвтоработы, ЗаказНаряд.ЗаказНарядСсылка))
					ИЛИ ВыборкаСоставПричинОбращений.НайтиСледующий(
						Новый Структура("Авторабота", НоваяСтрока.ИдентификаторАвтоработы)) Тогда
					НоваяСтрока.ИдентификаторПричиныОбращения = ВыборкаСоставПричинОбращений.ПричинаОбращения;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Товар Из Форма[ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд].Товары Цикл // товары
			
			НоваяСтрока = ПодчиненныеТаблицы.ПодчиненныеТовары.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар);
			НоваяСтрока.ИдентификаторСтрокиВЗаказНаряде = Товар.ПолучитьИдентификатор();
			НоваяСтрока.ИдентификаторОбъектаЗаказНаряд   = ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд;
			НоваяСтрока.Артикул                         = НоваяСтрока.Номенклатура.Артикул;
			НоваяСтрока.Представление                   = СтрШаблон(
															"[%2] %1, %3",
															Строка(НоваяСтрока.Номенклатура), НоваяСтрока.Артикул, НоваяСтрока.ХарактеристикаНоменклатуры);
			
		КонецЦикла;
		
		// заполним доп поля товаров
		ЗаполнитьДополнительныеПоляТоваров(
			ЗаказНаряд,
			Форма[ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд],
			ПодчиненныеТаблицы.ПодчиненныеТовары,
			ДополнительныеПараметры);
		
		Для Каждого Причина Из Форма[ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд].ПричиныОбращения Цикл // Причины обращения
			НоваяСтрока = ПодчиненныеТаблицы.ПодчиненныеПричиныОбращений.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Причина);
			НоваяСтрока.ИдентификаторСтрокиВЗаказНаряде = Причина.ПолучитьИдентификатор();
			НоваяСтрока.ИдентификаторОбъектаЗаказНаряд   = ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд;
			НоваяСтрока.ПредставлениеПричиныОбращения =
				?(Строка(Причина.ПричинаОбращенияСодержание) = "",
					Строка(НоваяСтрока.ПричинаОбращения),
					Строка(Причина.ПричинаОбращенияСодержание));
			
			НоваяСтрока.СуммаПоАвтоработам = ПричиныОбращенийКлиентСервер.ПодсчитатьСуммуВТаблицеПоПричинеОбращения(
												Причина.ИдентификаторПричиныОбращения, ПодчиненныеТаблицы.ПодчиненныеАвтоработы);
			НоваяСтрока.СуммаПоТоварам     = ПричиныОбращенийКлиентСервер.ПодсчитатьСуммуВТаблицеПоПричинеОбращения(
												Причина.ИдентификаторПричиныОбращения, ПодчиненныеТаблицы.ПодчиненныеТовары);
			НоваяСтрока.Сумма              = НоваяСтрока.СуммаПоАвтоработам + НоваяСтрока.СуммаПоТоварам;
			
		КонецЦикла;
		
		// Вспомогательные автоработы
		Для Каждого ВспомогательнаяАвтоР Из Форма[ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд].ВспомогательныеАвтоработы Цикл
			НоваяСтрока = ПодчиненныеТаблицы.ПодчиненныеВспомогательныеАвтоработы.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВспомогательнаяАвтоР);
			
			НоваяСтрока.ИдентификаторСтрокиВЗаказНаряде = ВспомогательнаяАвтоР.ПолучитьИдентификатор();
			НоваяСтрока.ИдентификаторОбъектаЗаказНаряд   = ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд;
			НоваяСтрока.Артикул                         = ВспомогательнаяАвтоР.Авторабота.Артикул;
			НоваяСтрока.Представление                   = СтрШаблон(
															"[%2] %1",
															Строка(ВспомогательнаяАвтоР.Авторабота), НоваяСтрока.Артикул);
		КонецЦикла;
		
		// Материалы заказчика
		Для Каждого Материал Из Форма[ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд].МатериалыЗаказчика Цикл
			НоваяСтрока = ПодчиненныеТаблицы.ПодчиненныеМатериалы.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Материал);
			
			НоваяСтрока.ИдентификаторСтрокиВЗаказНаряде = Материал.ПолучитьИдентификатор();
			НоваяСтрока.ИдентификаторОбъектаЗаказНаряд   = ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд;
			НоваяСтрока.Артикул = ?(ТипЗнч(НоваяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура"),
									НоваяСтрока.Номенклатура.Артикул, "");
			НоваяСтрока.Представление = СтрШаблон(
									"[%2] %1, %3",
									Строка(НоваяСтрока.Номенклатура), НоваяСтрока.Артикул, НоваяСтрока.ХарактеристикаНоменклатуры);
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьПакетыРабот(
		СписокЗаказНарядов,
		ПодчиненныеТаблицы.ПодчиненныеАвтоработы,
		ПодчиненныеТаблицы.ПодчиненныеЗаказНаряды);
	
КонецПроцедуры // ОбновитьДанныеПодчиненныхТаблиц()

// По указанному заказ-наряду добавление строк в дерево документов.
//
// Параметры:
//  СтрокаДереваЗаказа	 - ДанныеФормыКоллекцияЭлементовДерева	 - Строка дерева, куда добавлять строки.
//  ДанныеСтроки		 - ДанныеФормыЭлементДерева				 - Данные строки дерева заказа.
//  ЗаказНаряд			 - ДокументСсылка.ЗаказНаряд			 - Данные документа заказ-наряда.
//  ПодчиненныеТаблицы	 - Структура							 - Список подчиненных таблиц.
//  ОтображатьТовары	 - Булево								 - Признак вывода деталей заказ-наряда.
//  ОтображатьАвтоработы - Булево								 - Признак вывода авторабот заказ-наряда.
//
Процедура ЗаполнитьДеревоПоЗаказНаряду(
		СтрокаДереваЗаказа,
		ДанныеСтроки,
		ЗаказНаряд,
		ПодчиненныеТаблицы,
		ОтображатьТовары = Истина,
		ОтображатьАвтоработы = Истина) Экспорт
	
	ПодчиненныеАвтоработы                = ПодчиненныеТаблицы.ПодчиненныеАвтоработы;
	ПодчиненныеТовары                    = ПодчиненныеТаблицы.ПодчиненныеТовары;
	ПодчиненныеПричиныОбращений          = ПодчиненныеТаблицы.ПодчиненныеПричиныОбращений;
	ПодчиненныеВспомогательныеАвтоработы = ПодчиненныеТаблицы.ПодчиненныеВспомогательныеАвтоработы;
	ПодчиненныеМатериалы = ПодчиненныеТаблицы.ПодчиненныеМатериалы;
	
	// Заполним причины обращения
	ПричиныОбращенияЗаказНаряда = ПодчиненныеПричиныОбращений.НайтиСтроки(
		Новый Структура("ИдентификаторОбъектаЗаказНаряд", ДанныеСтроки.Идентификатор));
	
	Для Каждого Причина Из ПричиныОбращенияЗаказНаряда Цикл
		
		СтрокаПричины = ДобавитьПричинуОбращения(
			СтрокаДереваЗаказа,
			Истина,
			Причина,
			ЗаказНаряд,
			ДанныеСтроки.ВалютаДокумента);
		
		ДобавитьТоварыПричиныОбращения(
			СтрокаПричины,
			ПодчиненныеТовары,
			ЗаказНаряд,
			ДанныеСтроки,
			ОтображатьТовары);
		
		ДобавитьАвтоработыПричиныОбращения(
			СтрокаПричины,
			ПодчиненныеАвтоработы,
			ЗаказНаряд,
			ДанныеСтроки,
			ОтображатьАвтоработы);
		
	КонецЦикла;
	
	// Добавим пустую причину
	Если ПричиныОбращенияЗаказНаряда.Количество() = 0 Тогда
		
		ПустаяПричина = "                                    ";
		
		ДанныеПричины = Новый Структура;
		ДанныеПричины.Вставить("ИдентификаторПричиныОбращения", ПустаяПричина);
		ДанныеПричины.Вставить("ПредставлениеПричиныОбращения", НСтр("ru = 'Причина обращения не указана.'"));
		ДанныеПричины.Вставить("ИдентификаторСтрокиВЗаказНаряде", "");
		ДанныеПричины.Вставить("ПричинаОбращения", Справочники.ПричиныОбращений.ПустаяСсылка());
		ДанныеПричины.Вставить("Сумма", 0);
		ДанныеПричины.Вставить("СуммаПоТоварам", 0);
		ДанныеПричины.Вставить("СуммаПоАвтоработам", 0);
		
		СтрокаПричины = ДобавитьПричинуОбращения(
			СтрокаДереваЗаказа,
			Истина,
			ДанныеПричины,
			ЗаказНаряд,
			ДанныеСтроки.ВалютаДокумента);
		
		СуммаТоваровДляПустойПричины = 0;
		
		ДобавитьТоварыПричиныОбращения(
			СтрокаПричины,
			ПодчиненныеТовары,
			ЗаказНаряд,
			ДанныеСтроки,
			ОтображатьТовары,
			СуммаТоваровДляПустойПричины);
		
		СуммаАвтоработПоПустойПричине = 0;
		
		ДобавитьАвтоработыПричиныОбращения(
			СтрокаПричины,
			ПодчиненныеАвтоработы,
			ЗаказНаряд,
			ДанныеСтроки,
			ОтображатьАвтоработы,
			СуммаАвтоработПоПустойПричине);
		
		СтрокаПричины.СуммаВсего = СуммаТоваровДляПустойПричины + СуммаАвтоработПоПустойПричине;
		СтрокаПричины.ПричинаОбращения = "";
	КонецЕсли;
	
	// добавим материалы заказчика
	ТоварыПричиныОбращения = ПодчиненныеМатериалы.НайтиСтроки(
		Новый Структура("ИдентификаторОбъектаЗаказНаряд", ДанныеСтроки.Идентификатор));
	
	// Проверим есть ли материалы 
	Если ТоварыПричиныОбращения.Количество() <> 0 Тогда
		
		СтрокаМатериалы = СтрокаДереваЗаказа.Добавить();
		
		СтрокаМатериалы.ИмяТаблицы = "МатериалыЗаказчика";
		СтрокаМатериалы.ЭтоГруппа  = Истина;
		//@skip-check unknown-method-property
		//@skip-check reading-attribute-from-database
		СтрокаМатериалы.Идентификатор = ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд;
		СтрокаМатериалы.Представление = НСтр("ru = 'Материалы заказчика'");
		СтрокаМатериалы.НомерРисунка = 2;
		
		ЭлементыСтрокаПричины = СтрокаМатериалы.ПолучитьЭлементы();
		
		Если ОтображатьТовары Тогда
			
			Для Каждого Товар Из ТоварыПричиныОбращения Цикл
				
				СтрокаТовар = ЭлементыСтрокаПричины.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовар, Товар);
				
				СтрокаТовар.НомерРисунка = 4;
				СтрокаТовар.ИмяТаблицы = "Материалы";
				//@skip-check reading-attribute-from-database
				//@skip-check unknown-method-property
				СтрокаТовар.Идентификатор = ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд;
				СтрокаТовар.ИдентификаторСтроки = Товар.ИдентификаторСтрокиВЗаказНаряде;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// добавим вспомогательные автоработы
	УсловиеПоиска = Новый Структура;
	УсловиеПоиска.Вставить("ИдентификаторОбъектаЗаказНаряд", ДанныеСтроки.Идентификатор);
	ВспомогательныеАвтоработыЗаказНаряда = ПодчиненныеВспомогательныеАвтоработы.НайтиСтроки(УсловиеПоиска);
	
	// Проверим, есть ли вспомогательные автоработы
	Если ВспомогательныеАвтоработыЗаказНаряда.Количество() <> 0 Тогда
		
		СтрокаВспомогательныеАвтоработы = СтрокаДереваЗаказа.Добавить();
		
		СтрокаВспомогательныеАвтоработы.ИмяТаблицы    = "ВспомогательныеАвтоработы";
		СтрокаВспомогательныеАвтоработы.ЭтоГруппа     = Истина;
		//@skip-check reading-attribute-from-database
		//@skip-check unknown-method-property
		СтрокаВспомогательныеАвтоработы.Идентификатор = ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд;
		СтрокаВспомогательныеАвтоработы.Представление = НСтр("ru = 'Вспомогательные автоработы'");
		СтрокаВспомогательныеАвтоработы.НомерРисунка  = 3;
		ЭлементыСтрокаВспомогательныеАвтоработы = СтрокаВспомогательныеАвтоработы.ПолучитьЭлементы();
		
		Для Каждого ВспомогательнаяАРЗН Из ВспомогательныеАвтоработыЗаказНаряда Цикл
			
			СтрокаВспомогательнаяАвторабота = ЭлементыСтрокаВспомогательныеАвтоработы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВспомогательнаяАвторабота, ВспомогательнаяАРЗН);
			
			СтрокаВспомогательнаяАвторабота.НомерРисунка        = 3;
			СтрокаВспомогательнаяАвторабота.ИмяТаблицы          = "ВспомогательнаяАРЗН";
			//@skip-check reading-attribute-from-database
			//@skip-check unknown-method-property
			СтрокаВспомогательнаяАвторабота.Идентификатор       = ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд;
			СтрокаВспомогательнаяАвторабота.ИдентификаторСтроки = ВспомогательнаяАРЗН.ИдентификаторСтрокиВЗаказНаряде;
			СтрокаВспомогательнаяАвторабота.Коэффициент         = ВспомогательнаяАРЗН.НормаВремени;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДеревоПоЗаказНаряду()

// Функция проверки наличия автоработы в пакете работ, по которым ведутся работы
//
// Параметры:
//  ВыбранныеАвтоработы		 - Массив								 - Список выбранных авторабот.
//  ДеревоАвторабот			 - ДанныеФормыКоллекцияЭлементовДерева	 - Дерево авторабот, по которому производится выбор.
//  ПодчиненныеАвтоработы	 - ТалицаЗначений						 - Данные об автоработах заказ-наряда.
//  ПодчиненныеЗаказНаряды	 - ТалицаЗначений						 - Данные о подчиненных заказ-нарядов сводного ремонтного заказа.
// 
// Возвращаемое значение:
//  Булево - Признак возможности переноса авторабот.
//
Функция ПроверитьПеретаскиваниеАвторабот(
		ВыбранныеАвтоработы,
		ДеревоАвторабот,
		ПодчиненныеАвтоработы,
		ПодчиненныеЗаказНаряды) Экспорт
	
	ТаблицаПакетовРабот = Новый ТаблицаЗначений;
	ТаблицаПакетовРабот.Колонки.Добавить("ПакетРабот", Новый ОписаниеТипов("Строка"));
	ТаблицаПакетовРабот.Колонки.Добавить("ЗаказНаряд", Новый ОписаниеТипов("Строка"));
	ТаблицаПакетовРабот.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекущаяСтрока Из ВыбранныеАвтоработы Цикл
		ТекущаяАвторабота = ДеревоАвторабот.НайтиПоИдентификатору(ТекущаяСтрока);
		
		// Проверим наличие покатов работ
		Если ТекущаяАвторабота <> Неопределено Тогда
			
			Если ТекущаяАвторабота.ИмяТаблицы = "ПричиныОбращений" Тогда
				// ПричинаОбращений
				НайденныеСтроки = ПодчиненныеАвтоработы.НайтиСтроки(
					Новый Структура(
						"ИдентификаторПричиныОбращения,ИдентификаторОбъектаЗаказНаряд",
						ТекущаяАвторабота.ПричинаОбращения,
						ТекущаяАвторабота.Идентификатор));
			ИначеЕсли ТекущаяАвторабота.ИмяТаблицы = "Автоработы" Тогда
				// Авторабота
				НайденныеСтроки = ПодчиненныеАвтоработы.НайтиСтроки(
					Новый Структура(
						"ИдентификаторСтрокиВЗаказНаряде,ИдентификаторОбъектаЗаказНаряд",
						ТекущаяАвторабота.ИдентификаторСтроки,
						ТекущаяАвторабота.Идентификатор));
			Иначе
				Продолжить;
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НоваяСтрока = ТаблицаПакетовРабот.Добавить();
				НоваяСтрока.ПакетРабот = НайденнаяСтрока.ПакетРабот;
				НоваяСтрока.ЗаказНаряд = ТекущаяАвторабота.Идентификатор;
				НоваяСтрока.Количество = 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПакетовРабот.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТаблицаПакетовРабот.Свернуть("ПакетРабот,ЗаказНаряд", "Количество");
	СписокПакетовРабот = ТаблицаПакетовРабот.Скопировать();
	СписокПакетовРабот.Свернуть("ПакетРабот");
	
	ЗаказНарядыСПакетами = ПодчиненныеЗаказНаряды.ВыгрузитьКолонку("ЗаказНарядСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СостоянияПакетовРабот.ПакетРабот КАК ПакетРабот
	               |ПОМЕСТИТЬ СписокПакетовРабот
	               |ИЗ
	               |	РегистрСведений.СостоянияПакетовРабот КАК СостоянияПакетовРабот
	               |ГДЕ
	               |	СостоянияПакетовРабот.ПакетРабот В(&ПакетыРабот)
	               |	И СостоянияПакетовРабот.Состояние <> ЗНАЧЕНИЕ(Справочник.ВидыСостоянийПакетовРабот.НеСтартовал)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ПакетРабот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СоставПакетовРабот.ПакетРабот КАК ПакетРабот,
	               |	СоставПакетовРабот.Авторабота КАК Авторабота,
	               |	СоставПакетовРабот.ЗаказНаряд КАК ЗаказНаряд
	               |ПОМЕСТИТЬ СписокСоставаПакетовРабот
	               |ИЗ
	               |	РегистрСведений.СоставПакетовРабот КАК СоставПакетовРабот
	               |ГДЕ
	               |	СоставПакетовРабот.ЗаказНаряд В(&ЗаказНаряды)
	               |	И СоставПакетовРабот.ПакетРабот В(&ПакетыРабот)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ПакетРабот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокПакетовРабот.ПакетРабот КАК ПакетРабот,
	               |	СписокСоставаПакетовРабот.ЗаказНаряд КАК ЗаказНаряд,
	               |	СУММА(ВЫБОР
	               |			КОГДА СписокСоставаПакетовРабот.Авторабота ЕСТЬ NULL
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК Количество
	               |ИЗ
	               |	СписокПакетовРабот КАК СписокПакетовРабот
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СписокСоставаПакетовРабот КАК СписокСоставаПакетовРабот
	               |		ПО СписокПакетовРабот.ПакетРабот = СписокСоставаПакетовРабот.ПакетРабот
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СписокПакетовРабот.ПакетРабот,
	               |	СписокСоставаПакетовРабот.ЗаказНаряд";
	Запрос.УстановитьПараметр("ПакетыРабот", СписокПакетовРабот.ВыгрузитьКолонку("ПакетРабот"));
	Запрос.УстановитьПараметр("ЗаказНаряды", ЗаказНарядыСПакетами);
	
	ТаблицаСоставаРабот = Запрос.Выполнить().Выгрузить();
	
	// Нет данных о пакетах работ в рабочем состоянии
	Если ТаблицаСоставаРабот.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ТаблицаПакетовРабот Цикл
		
		ТекущийЗаказНаряд = ПодчиненныеЗаказНаряды.НайтиСтроки(
			Новый Структура("ИдентификаторОбъектаЗаказНаряд", ТекущаяСтрока.ЗаказНаряд))[0].ЗаказНарядСсылка;
		
		// Найдем количество переносимых строк авторабот и авторабот в данном пакете
		НайденныеАвтоработыПакетовРабот = ТаблицаСоставаРабот.НайтиСтроки(
			Новый Структура("ПакетРабот,ЗаказНаряд", ТекущаяСтрока.ПакетРабот, ТекущийЗаказНаряд));
		
		Если НайденныеАвтоработыПакетовРабот.Количество() > 0
			 И (ТекущаяСтрока.Количество = НайденныеАвтоработыПакетовРабот[0].Количество
			 ИЛИ ПодчиненныеАвтоработы.НайтиСтроки(
				Новый Структура(
					"ПакетРабот,ИдентификаторОбъектаЗаказНаряд",
					ТекущаяСтрока.ПакетРабот, ТекущаяСтрока.ЗаказНаряд)).Количество() = ТекущаяСтрока.Количество) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ПроверитьПеретаскиваниеАвторабот()

#КонецОбласти

#Область ЗагрузкаИзВнешнихКаталогов

// Загрузка выбранных данных из внешних каталогов
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма, в которой возникло событие.
//  Объект				 - ДанныеФормыСтруктура	 - Объект, в котором производится подбор.
//  АдресДанныхЗагрузки	 - Строка				 - Адрес временного хранилища с данными.
//  ПараметрыЗагрузки	 - Структура - Параметры результата загрузки.
//
Процедура ЗагрузитьДанныеИзВнешнихКаталогов(Форма, Объект, АдресДанныхЗагрузки, ПараметрыЗагрузки) Экспорт
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресДанныхЗагрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗагрузки = ПолучитьИзВременногоХранилища(АдресДанныхЗагрузки);
	
	// Проверим наличие необходимых данных
	Если ТипЗнч(ДанныеЗагрузки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаАвторабот = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗагрузки, "Автоработы", Новый Массив);
	ТаблицаТоваров = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗагрузки, "Товары", Новый Массив);
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	ПараметрыОтбора = Новый Структура("Авторабота");
	ПараметрыОтбораТоваров = Новый Структура("Номенклатура");
	ЕстьИдентификаторПричиныОбращения = Ложь;
	ИдентификаторПричиныОбращения = "";
	Если ПараметрыЗагрузки.Свойство("ИдентификаторПричиныОбращения") Тогда
		ПараметрыОтбора.Вставить("ИдентификаторПричиныОбращения", ПараметрыЗагрузки.ИдентификаторПричиныОбращения);
		ПараметрыОтбораТоваров.Вставить("ИдентификаторПричиныОбращения", ПараметрыЗагрузки.ИдентификаторПричиныОбращения);
		ЕстьИдентификаторПричиныОбращения = Истина;
		ИдентификаторПричиныОбращения = ПараметрыЗагрузки.ИдентификаторПричиныОбращения;
	КонецЕсли;
	ПараметрыОтбора.Вставить("Нормочас");
	
	ПараметрыДействия = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗагрузки, "ПараметрыДействия");
	ПараметрыДействия.Вставить("УстановитьСпособРасчетаСуммы", Ложь);
	
	ИдентификаторыРабот = Новый Массив;
	НовыеАвтоработы = Новый Массив;
	
	// Производим перенос подобранной номенклатуры в табличную часть объекта
	Для Каждого СтрокаАвторабот Из ТаблицаАвторабот Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаАвторабот);
		НайденныеСтроки = Объект.Автоработы.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			// Добавим новую строку и заполним ее
			СтрокаТабличнойЧасти = Объект.Автоработы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаАвторабот);
			СтрокаТабличнойЧасти.ИдентификаторРаботы = Новый УникальныйИдентификатор;
			
			Если ЕстьИдентификаторПричиныОбращения Тогда
				СтрокаТабличнойЧасти.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СпособРасчетаСтоимостиРаботы = Перечисления.СпособыРасчетаСтоимостиРаботы.ПоНормеВремени;
			
			// Вызываем обработчик изменения данных объекта
			ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).АвтоработыАвтоработаПриИзменении(
				Объект,
				СтрокаТабличнойЧасти,
				ПараметрыДействия);
			
			СтрокаТабличнойЧасти.Нормочас = СтрокаАвторабот.Нормочас;
			СтрокаТабличнойЧасти.Коэффициент = СтрокаАвторабот.Коэффициент;
			
			ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).АвтоработыНормочасПриИзменении(
				Объект,
				СтрокаТабличнойЧасти,
				ПараметрыДействия);
			
			ИдентификаторыРабот.Добавить(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
			НовыеАвтоработы.Добавить(СтрокаТабличнойЧасти.ИдентификаторРаботы);
			
		Иначе
			
			// Получим строку и увеличим в ней количество
			СтрокаТабличнойЧасти = НайденныеСтроки[0];
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + 1;
			
			// Вызываем обработчик изменения данных объекта
			ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).АвтоработыКоличествоПриИзменении(
				Объект,
				СтрокаТабличнойЧасти,
				ПараметрыДействия);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораТоваров, СтрокаТоваров);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбораТоваров);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			// Добавим новую строку и заполним ее
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТоваров);
			
			Если ЕстьИдентификаторПричиныОбращения Тогда
				СтрокаТабличнойЧасти.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
			КонецЕсли;
			
			// Вызываем обработчик изменения данных объекта
			ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ТоварыНоменклатураПриИзменении(
				Объект,
				СтрокаТабличнойЧасти,
				ПараметрыДействия);
			
			СтрокаТабличнойЧасти.Цена = СтрокаТоваров.Цена;
			СтрокаТабличнойЧасти.Количество = СтрокаТоваров.Количество;
			
			ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ТоварыКоличествоПриИзменении(
				Объект,
				СтрокаТабличнойЧасти,
				ПараметрыДействия);
			
		Иначе
			
			// Получим строку и увеличим в ней количество
			СтрокаТабличнойЧасти = НайденныеСтроки[0];
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + 1;
			
			// Вызываем обработчик изменения данных объекта
			ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ТоварыКоличествоПриИзменении(
				Объект,
				СтрокаТабличнойЧасти,
				ПараметрыДействия);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сформируем результат для дайнейшей обработки
	РезультатЗагрузки = Новый Структура;
	РезультатЗагрузки.Вставить("ЗагруженыАвтоработы", ТаблицаАвторабот.Количество() > 0);
	РезультатЗагрузки.Вставить("ЗагруженыТовары", ТаблицаТоваров.Количество() > 0);
	РезультатЗагрузки.Вставить("СписокНовыхСтрокАвторабот", ИдентификаторыРабот);
	РезультатЗагрузки.Вставить("МассивАвторабот", НовыеАвтоработы);
	
	ПараметрыЗагрузки.Вставить("РезультатЗагрузки", РезультатЗагрузки);
	
КонецПроцедуры // ЗагрузитьДанныеИзВнешнихКаталогов()

#КонецОбласти

#Область РаботаСУведомлениями

// Проверка и установка автоматически признака повторного обращения клиента в сервис.
//
// Параметры:
//  Объект	 - ДокументОбъект - Документ, на основании которого производится проверка.
// 
// Возвращаемое значение:
//  Булево - Признак того, что установлен признак повторного обращения или нет.
//
Функция УстановленПризнакПовторногоОбращенияВСервис(Объект) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗаказНаряд.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ЗакрытыеЗаказНаряды
	               |ИЗ
	               |	Документ.ЗаказНаряд КАК ЗаказНаряд
	               |ГДЕ
	               |	ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль = &Автомобиль
	               |	И ЗаказНаряд.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт)
	               |	И ЗаказНаряд.ДатаЗакрытия МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И ЗаказНаряд.Проведен
	               |	И НЕ ЗаказНаряд.ВидРемонта.НеУчитыватьПриПоискеПовторныхРемонтов";
	
	Автомобиль = Неопределено;
	СводныйРемонтныйЗаказ = Документы.СводныйРемонтныйЗаказ.ПустаяСсылка();
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаявкаНаРемонт") Тогда
		
		// Нет такого реквизита в документе или он уже записан и нам не требуется автоматическая установка
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		// Получим марку по автомобилю
		Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
			
			Автомобиль = Объект.Автомобиль;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СводныйРемонтныйЗаказ") Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			АвтомобильДоЗаписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Автомобиль");
			
			// Автомобиль не менялся, устанавливать признак не надо
			Если АвтомобильДоЗаписи = Объект.Автомобиль Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			               |	И ЗаказНаряд.СводныйРемонтныйЗаказ <> &СводныйРемонтныйЗаказ";
			
			Запрос.УстановитьПараметр("СводныйРемонтныйЗаказ", Объект.Ссылка);
			
			
		КонецЕсли;
		
		// Если автомобили отличаются с заявкой на ремонт, то проведем проверку установки признака
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
			
			АвтомобильЗаявкиНаРемонт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Автомобиль");
			
			Если АвтомобильЗаявкиНаРемонт = Объект.Автомобиль Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Автомобиль = Объект.Автомобиль;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СрокПовторногоОбращения =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Автомобиль, "Марка.ПериодПовторногоОбращенияВСервис");
	
	Объект.ПовторноеОбращение = Ложь;
	Объект.АвторСнятияПовторногоОбращения = Справочники.Пользователи.ПустаяСсылка();
	Объект.ДатаСнятияПовторногоОбращения = Дата(1,1,1);
	Объект.ПричинаСнятияПовторногоОбращения = "";
	
	// Если срок повторного обращения не указан, то не устанавливаем признак
	Если СрокПовторногоОбращения = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ДеньВСекундах = 24 * 60 * 60;
	КонецПериода = Объект.Дата;
	НачалоПериода = НачалоДня(КонецПериода - СрокПовторногоОбращения * ДеньВСекундах);
	
	Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецПериода);
	
	ТекстЗапроса = ТекстЗапроса + "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЗакрытыеЗаказНаряды.Ссылка КАК ПовторныйЗаказНаряд
	               |ИЗ
	               |	ЗакрытыеЗаказНаряды КАК ЗакрытыеЗаказНаряды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.Автоработы КАК ЗаказНарядАвтоработы
	               |		ПО ЗакрытыеЗаказНаряды.Ссылка = ЗаказНарядАвтоработы.Ссылка
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ЗаказНарядАвтоработы.Ссылка ЕСТЬ NULL
	               |				ТОГДА ИСТИНА
	               |			КОГДА НЕ ЗаказНарядАвтоработы.Авторабота.НеУчитыватьПриПоискеПовторныхРемонтов
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	// В заданный период не найдено закрытых заказ-нарядов
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Объект.ПовторноеОбращение = Истина;
	
	Возврат Истина;
	
КонецФункции

// Получение настройки уведомление и отправи по ней документа
//
// Параметры:
//  Объект			 - ДокументОбъект - Документ, на основании которого выполняется уведомление
//  ВидУведомления	 - ПеречислениеСсылка.ВидыУведомлений - Тип уведомления, для которого предназначено уведомление.
//
Процедура ОтправитьУведомление(Объект, ВидУведомления) Экспорт
	
	// Установим параметры поиска настройки уведомления
	ПодразделениеКомпании = Объект.ПодразделениеКомпании;
	
	ПолноеИмя = Метаданные.НайтиПоТипу(ТипЗнч(Объект)).ПолноеИмя();
	ИмяОбъекта = СтрРазделить(ПолноеИмя, ".")[1];
	
	// Найдем настройку уведомления
	РезультатЗапроса = НастройкаУведомленияОбъекта(ПодразделениеКомпании, ИмяОбъекта, ВидУведомления);
	
	// Нет настройки - уведомить не можем
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеНастройки = РезультатЗапроса.Выбрать();
	ДанныеНастройки.Следующий();
	
	// Установлено, что настройка не используется
	Если НЕ ДанныеНастройки.Используется Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Проверим в зависимости от настройки 
	Если ДанныеНастройки.КаналСвязи = Перечисления.ТипыКаналовОтправкиУведомлений.Напоминание Тогда
		
		СформироватьНапоминание(
			Объект.Ссылка,
			ДанныеНастройки.ШаблонСообщения,
			ДанныеНастройки.Ответственный);
		
	ИначеЕсли ДанныеНастройки.КаналСвязи = Перечисления.ТипыКаналовОтправкиУведомлений.СМС Тогда
		
		СформироватьСообщениеSMS(
			Объект.Ссылка,
			ДанныеНастройки.ШаблонСообщения,
			ДанныеНастройки.Контакт,
			ДанныеНастройки.КонтактнаяИнформация,
			ДанныеНастройки.ОтправлятьСразу);
		
	ИначеЕсли ДанныеНастройки.КаналСвязи = Перечисления.ТипыКаналовОтправкиУведомлений.ЭлектронноеПисьмо Тогда
		
		СформироватьЭлектронноеПисьмо(
			Объект.Ссылка,
			ДанныеНастройки.ШаблонСообщения,
			ДанныеНастройки.Контакт,
			ДанныеНастройки.КонтактнаяИнформация,
			ДанныеНастройки.УчетнаяЗапись,
			ДанныеНастройки.ОтправлятьСразу);
		
	КонецЕсли;
	
КонецПроцедуры

// Получение настройки уведомлений по параметрам.
//
// Параметры:
//  ПодразделениеКомпании	 - СправочникСсылка.ПодразделенияКомпании - Подразделение, для которого проверяется настройка
//  ТипДокумента			 - Строка - Имя объекта для поиска настройки.
//  ВидУведомления			 - ПеречислениеСсылка.ВидыУведомлений - Вид уведомления, для которого настроено уведомление.
// 
// Возвращаемое значение:
//  РезультатЗапроса - Результат поиска настройки.
//
Функция НастройкаУведомленияОбъекта(ПодразделениеКомпании, ТипДокумента, ВидУведомления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкаУведомлений.КаналСвязи КАК КаналСвязи,
	               |	НастройкаУведомлений.ШаблонСообщения КАК ШаблонСообщения,
	               |	НастройкаУведомлений.Ответственный КАК Ответственный,
	               |	НастройкаУведомлений.КонтактнаяИнформация КАК КонтактнаяИнформация,
	               |	НастройкаУведомлений.УчетнаяЗапись КАК УчетнаяЗапись,
	               |	НастройкаУведомлений.Используется КАК Используется,
	               |	НастройкаУведомлений.Контакт КАК Контакт,
	               |	НастройкаУведомлений.ОтправлятьСразу КАК ОтправлятьСразу
	               |ИЗ
	               |	РегистрСведений.НастройкаУведомлений КАК НастройкаУведомлений
	               |ГДЕ
	               |	НастройкаУведомлений.ПодразделениеКомпании = &ПодразделениеКомпании
	               |	И НастройкаУведомлений.ТипДокумента = &ТипДокумента
	               |	И НастройкаУведомлений.ВидУведомления = &ВидУведомления";
	Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеКомпании);
	Запрос.УстановитьПараметр("ТипДокумента", ТипДокумента);
	Запрос.УстановитьПараметр("ВидУведомления", ВидУведомления);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#Область НачисленияСотрудникам

// Формирует структуру данных для расчета начислений сотрудника по автоработе
//
// Параметры:
//  ЗаказНаряд		 - ДокументСсылка.ЗаказНаряд - Документ, для которого получаем данные.
//  СтрокаАвторабот	 - ДанныеФормыЭлементКоллекции - Данные строки автоработы.
// 
// Возвращаемое значение:
//  Структура - Данные для расчета суммы начислений сотрудникам.
//
Функция ПараметрыРасчетаНачисленийАвтоработы(ЗаказНаряд, СтрокаАвторабот) Экспорт
	
	ПараметрыРасчетаНачислений = АвтосервисКлиентСервер.ДанныеАвтоработыДляРасчетаНачисления();
	ЗаполнитьЗначенияСвойств(ПараметрыРасчетаНачислений, ЗаказНаряд);
	ЗаполнитьЗначенияСвойств(ПараметрыРасчетаНачислений, СтрокаАвторабот);
	
	// Расчитаем сумму всего без НДС
	ПараметрыРасчетаНачислений.СуммаБезНДС = 
		?(СтрокаАвторабот.СуммаВсего > СтрокаАвторабот.СуммаНДС,
			СтрокаАвторабот.СуммаВсего - СтрокаАвторабот.СуммаНДС,
			0);
	
	// Заполним параметры регл. валюты
	ПараметрыРасчетаНачислений.ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ПараметрыРасчетаНачислений.КурсРегл   = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(
		ПараметрыРасчетаНачислений.ВалютаРегл,
		ЗаказНаряд.Дата);
	ПараметрыРасчетаНачислений.КоличествоНормочасов = СтрокаАвторабот.Коэффициент * СтрокаАвторабот.Количество;
	
	Возврат ПараметрыРасчетаНачислений;
	
КонецФункции

// Определяет доступ к начислениям сотрудникам.
// 
// Возвращаемое значение:
//  Булево - Признак настройки системы на работу с начислениями.
//
Функция ДоступноНачислениеСотрудникам() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыНачисленийСотрудникамВЗаказНарядах");
	
КонецФункции

// Групполвое заполнение параметров и суммы начисления исполнителям документа.
//
// Параметры:
//  ЗаказНаряд						 - ДокументСсылка.ЗаказНаряд - Документ, для которого выполняются изменения.
//  Исполнители						 - ТаблицаЗначений - Исполнители документа.
//  Автоработы						 - ТаблицаЗначений - Автоработы, для которых необходимо сформировать сумму начислений.
//  НуженРасчетПараметровАтоработы	 - Булево - Признак того, что должны расчитать параметры для формирования суммы начислений.
//  ТребуетсяЗаполнитьНастройки		 - Булево - Признак того, что должны заполнить настройки заполнения начислений.
//
Процедура ЗаполнитьИсполнителямНачисления(
		ЗаказНаряд,
		Исполнители,
		Автоработы,
		НуженРасчетПараметровАтоработы = Ложь,
		ТребуетсяЗаполнитьНастройки = Истина) Экспорт
	
	Если НЕ ДоступноНачислениеСотрудникам() Тогда
		Возврат;
	КонецЕсли;
	
	Если НуженРасчетПараметровАтоработы Тогда
		ДанныеРасчетаАвтоработы = Новый Массив;
		Для Каждого СтрокаАвтоработы Из Автоработы Цикл
			ДанныеРасчетаАвтоработы.Добавить(
				ПараметрыРасчетаНачисленийАвтоработы(ЗаказНаряд, СтрокаАвтоработы));
		КонецЦикла;
	Иначе
		ДанныеРасчетаАвтоработы = Автоработы;
	КонецЕсли;
	
	Если ТипЗнч(Исполнители) = Тип("ДанныеФормыКоллекция") Тогда
		ТаблицаИсполнителей = Исполнители.Выгрузить();
	Иначе
		ТаблицаИсполнителей = Исполнители;
	КонецЕсли;
	
	// Получим настройки для расчета суммы начислений
	НастройкиНачислений = Неопределено;
	Если ТребуетсяЗаполнитьНастройки И ДанныеРасчетаАвтоработы.Количество() > 0 Тогда
		СписокСотрудников = ТаблицаИсполнителей.ВыгрузитьКолонку("Исполнитель");
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Сотрудники", СписокСотрудников);
		ПараметрыПоиска.Вставить("Организация", ЗаказНаряд.Организация);
		НастройкиНачислений = ПолучитьПараметрыНачисленийСотрудников(ПараметрыПоиска, ДанныеРасчетаАвтоработы[0]);
	КонецЕсли;
	
	// Пересчет суммы начислений
	Для Каждого СтрокаАвтоработы Из ДанныеРасчетаАвтоработы Цикл
		
		// Найдем исполнителей
		Если ЕстьРеквизит(ТаблицаИсполнителей, "ИдентификаторРаботы") Тогда
			СтруктураПоиска = Новый Структура("ИдентификаторРаботы", СтрокаАвтоработы.ИдентификаторРаботы);
			ИсполнителиАвтоработы = Исполнители.НайтиСтроки(СтруктураПоиска);
		Иначе
			ИсполнителиАвтоработы = Исполнители;
		КонецЕсли;
		
		Для Каждого Исполнитель Из ИсполнителиАвтоработы Цикл
			
			Если ТребуетсяЗаполнитьНастройки Тогда
				НастройкиСотрудника = НастройкиНачислений.Получить(Исполнитель.Исполнитель);
				Если НастройкиСотрудника <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(Исполнитель, НастройкиСотрудника);
				КонецЕсли;
			КонецЕсли;
			
			АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(Исполнитель, СтрокаАвтоработы);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Групповое получение параметров настройки начислений сотрудников.
//
// Параметры:
//  ПараметрыПоиска	 - Структура - Параметры, по которым осуществляется поиск настроек.
//  ДанныеРасчетов	 - Структура - Параметры, для перерасчета суммовых показателей.
// 
// Возвращаемое значение:
//  Соответствие - Данные настроек начислений сотрудникам.
//
Функция ПолучитьПараметрыНачисленийСотрудников(ПараметрыПоиска, ДанныеРасчетов = Неопределено) Экспорт
	
	НастройкиНачисления = НастройкиНачисленияСотрудников(ПараметрыПоиска);
	
	// Пересчитаем параметры расчетов согдасно валюте документа
	Если ДанныеРасчетов = Неопределено
		И ДанныеРасчетов.ВалютаДокумента <> ДанныеРасчетов.ВалютаРегл Тогда
		Для Каждого НастройкаНачисления Из НастройкиНачисления Цикл
			Если НастройкаНачисления.СпособРасчета <> ПредопределенноеЗначение("Перечисление.СпособыРасчета.Процентом") Тогда
				НастройкаНачисления.ПараметрРасчетаНачисления =
					РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						НастройкаНачисления.ПараметрРасчетаНачисления,
						ДанныеРасчетов.ВалютаРегл,
						ДанныеРасчетов.КурсРегл,
						ДанныеРасчетов.ВалютаДокумента,
						ДанныеРасчетов.КурсДокумента);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НастройкиНачисления;
	
КонецФункции

// Получение настроек начислений сотрудников.
//
// Параметры:
//  ПараметрыНастройки	 - Структура - Параметры получения настройки.
// 
// Возвращаемое значение:
//  Соответствие - Данные настроек в разрезе сотрудников.
//
Функция НастройкиНачисленияСотрудников(ПараметрыНастройки) Экспорт
	
	Результат = Новый Соответствие;
	
	Организация = ПолучитьЗначениеПараметраСтруктуры(ПараметрыНастройки, "Организация");
	Сотрудники = ПолучитьЗначениеПараметраСтруктуры(ПараметрыНастройки, "Сотрудники");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиНачисленийСотрудникам.Сотрудник КАК Сотрудник,
	               |	НастройкиНачисленийСотрудникам.ВидНачисления КАК ВидНачисления,
	               |	НастройкиНачисленийСотрудникам.ВидНачисления.СпособРасчета КАК СпособРасчета,
	               |	НастройкиНачисленийСотрудникам.ПараметрРасчета КАК ПараметрРасчетаНачисления
	               |ИЗ
	               |	РегистрСведений.НастройкиНачисленийСотрудникам КАК НастройкиНачисленийСотрудникам
	               |ГДЕ
	               |	НастройкиНачисленийСотрудникам.Организация = &Организация
	               |	И НастройкиНачисленийСотрудникам.Сотрудник В(&Сотрудники)";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НастройкиНачисления = Новый Структура("ВидНачисления,СпособРасчета,ПараметрРасчетаНачисления");
		ЗаполнитьЗначенияСвойств(НастройкиНачисления, Выборка);
		Результат.Вставить(Выборка.Сотрудник, НастройкиНачисления);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Для выполнения фонового задания по поиску заказ-нарядов с исполнителями.
//
// Параметры:
//  Параметры		 - Структура - Параметры поиска документов.
//  АдресХранилища	 - Строка - Адрес хранения результата.
//
Процедура ПолучитьЗаказНарядыНачисленияСотрудников(Параметры, АдресХранилища) Экспорт
	
	ПоместитьВоВременноеХранилище(ЗапросПолученияЗаказНарядов(Параметры.Фильтры), АдресХранилища);
	
КонецПроцедуры

// Получение данных о документах с исполнителями.
//
// Параметры:
//  ПараметрыОтбора	 - Структура - Параметры, по которым происходит поиск данных о документах.
// 
// Возвращаемое значение:
//  РезультатЗапроса - Данные о выбранных документах.
//
Функция ЗапросПолученияЗаказНарядов(ПараметрыОтбора) Экспорт
	
	ОтборПоСотруднику = "";
	УсловияОтбораЗаказНарядов = Новый Массив;
	
	Если ПараметрыОтбора.Свойство("ЗаказНаряд") Тогда
		ТекстВыбораЗаказНаряда = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказНаряд.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ СписокЗаказНарядов
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.Ссылка = &ЗаказНаряд";
	Иначе
		ТекстВыбораЗаказНаряда = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказНаряд.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ СписокЗаказНарядов
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ЗаказНаряд.Состояние <> ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Выполнен)
		|	И ЗаказНаряд.Состояние <> ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт)
		|	И НЕ ЗаказНаряд.ПометкаУдаления #ДополнительныйОтборЗаказнарядов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказНаряд.Ссылка
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.ДатаОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ЗаказНаряд.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Выполнен)
		|	И НЕ ЗаказНаряд.ПометкаУдаления #ДополнительныйОтборЗаказнарядов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказНаряд.Ссылка
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.ДатаЗакрытия МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ЗаказНаряд.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт)
		|	И НЕ ЗаказНаряд.ПометкаУдаления #ДополнительныйОтборЗаказнарядов";
		Если ЗначениеЗаполнено(ПараметрыОтбора.Организация) Тогда
			УсловияОтбораЗаказНарядов.Добавить("И ЗаказНаряд.Организация = &Организация");
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыОтбора.ПодразделениеКомпании) Тогда
			УсловияОтбораЗаказНарядов.Добавить("И ЗаказНаряд.ПодразделениеКомпании = &ПодразделениеКомпании");
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыОтбора.Сотрудник) Тогда
			ОтборПоСотруднику = "
			|ГДЕ
			|	ЗаказНарядИсполнители.Исполнитель = &Сотрудник";
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = ТекстВыбораЗаказНаряда + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокЗаказНарядов.Ссылка КАК ЗаказНаряд,
	|	ЗаказНарядАвтоработы.Авторабота КАК Авторабота,
	|	ЗаказНарядАвтоработы.ИдентификаторРаботы КАК ИдентификаторРаботы,
	|	ЗаказНарядАвтоработы.Коэффициент * ЗаказНарядАвтоработы.Количество КАК КоличествоНормочасов,
	|	ЗаказНарядАвтоработы.СуммаВсего КАК Сумма,
	|	ЗаказНарядАвтоработы.СуммаВсего + ЗаказНарядАвтоработы.СуммаСкидки + ЗаказНарядАвтоработы.СуммаСкидкиСтроки + ЗаказНарядАвтоработы.СуммаСкидкиБонусами КАК ВыручкаДоПримененияСкидки
	|ПОМЕСТИТЬ СписокАвторабот
	|ИЗ
	|	СписокЗаказНарядов КАК СписокЗаказНарядов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.Автоработы КАК ЗаказНарядАвтоработы
	|		ПО СписокЗаказНарядов.Ссылка = ЗаказНарядАвтоработы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокЗаказНарядов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНарядИсполнители.Ссылка КАК ЗаказНаряд,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаказНарядИсполнители.Ссылка) КАК ЗаказНарядПредставление,
	|	ЗаказНарядИсполнители.ИдентификаторРаботы КАК ИдентификаторРаботы,
	|	ЗаказНарядИсполнители.Исполнитель КАК Исполнитель,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаказНарядИсполнители.Исполнитель) КАК ИсполнительПредставление,
	|	ЗаказНарядИсполнители.Цех КАК Цех,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаказНарядИсполнители.Цех) КАК ЦехПредставление,
	|	ЗаказНарядИсполнители.Процент КАК Процент,
	|	ЗаказНарядИсполнители.ВидНачисления КАК ВидНачисления,
	|	ЗаказНарядИсполнители.СпособРасчета КАК СпособРасчета,
	|	ЗаказНарядИсполнители.ПараметрРасчетаНачисления КАК ПараметрРасчетаНачисления,
	|	ЗаказНарядИсполнители.Начислено КАК Начислено,
	|	СписокАвторабот.Авторабота КАК Авторабота,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СписокАвторабот.Авторабота) КАК АвтоработаПредставление,
	|	СписокАвторабот.КоличествоНормочасов КАК КоличествоНормочасов,
	|	СписокАвторабот.Сумма КАК Сумма,
	|	СписокАвторабот.ВыручкаДоПримененияСкидки КАК ВыручкаДоПримененияСкидки,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаказНарядИсполнители.Ссылка.ВалютаДокумента) КАК ВалютаДокументаПредставление
	|ИЗ
	|	СписокАвторабот КАК СписокАвторабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.Исполнители КАК ЗаказНарядИсполнители
	|		ПО СписокАвторабот.ЗаказНаряд = ЗаказНарядИсполнители.Ссылка
	|			И СписокАвторабот.ИдентификаторРаботы = ЗаказНарядИсполнители.ИдентификаторРаботы
	|#ОтборПоСотруднику
	|ИТОГИ
	|	МАКСИМУМ(КоличествоНормочасов),
	|	МАКСИМУМ(Сумма),
	|	МАКСИМУМ(ВыручкаДоПримененияСкидки)
	|ПО
	|	ЗаказНаряд,
	|	Авторабота";
	
	// Дополним отборами текст запроса
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"#ДополнительныйОтборЗаказнарядов",
		СтрСоединить(УсловияОтбораЗаказНарядов, " "));
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"#ОтборПоСотруднику",
		ОтборПоСотруднику);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр(
		"ДатаНачала",
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыОтбора, "ДатаНачала", Дата(1,1,1)));
	Запрос.УстановитьПараметр(
		"ДатаОкончания",
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыОтбора, "ДатаОкончания", Дата(1,1,1)));
	Запрос.УстановитьПараметр(
		"Организация",
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыОтбора, "Организация", Справочники.Организации.ПустаяСсылка()));
	Запрос.УстановитьПараметр(
		"ПодразделениеКомпании",
		ПолучитьЗначениеПараметраСтруктуры(
			ПараметрыОтбора,
			"ПодразделениеКомпании",
			Справочники.ПодразделенияКомпании.ПустаяСсылка()));
	Запрос.УстановитьПараметр(
		"Сотрудник", 
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыОтбора, "Сотрудник", Справочники.Сотрудники.ПустаяСсылка()));
	Запрос.УстановитьПараметр(
		"ЗаказНаряд", 
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыОтбора, "ЗаказНаряд", Документы.ЗаказНаряд.ПустаяСсылка()));
	
	Возврат Запрос.Выполнить();
	
	
КонецФункции

// Для выполнения фонового задания по записи изменений начислений исполнителям.
//
// Параметры:
//  ДанныеЗаполнения - Структура - Список параметров поиска документов.
//  АдресХранилища	 - Строка - Адрес хранения результата во временном хранилище.
//
Процедура ОбновитьДанныеОНачисленияхСотрудникам(ДанныеЗаполнения, АдресХранилища) Экспорт
	
	Результат = Новый Структура("Сообщение");
	УстановитьПривилегированныйРежим(Истина);
	ДанныеОбновления = ДанныеЗаполнения.Начисления;
	
	// Получим список документов Заказ-нарядов
	КопияТаблицыЗаказНарядов = ДанныеОбновления.Скопировать();
	КопияТаблицыЗаказНарядов.Свернуть("ЗаказНаряд");
	СписокЗаказНарядов = КопияТаблицыЗаказНарядов.ВыгрузитьКолонку("ЗаказНаряд");
	
	НачатьТранзакцию();
	
	Попытка
		
		СтруктураПоискаИсполнителей = Новый Структура("ЗаказНаряд");
		СтруктураПоискаИсполнителейЗаказНаряда = Новый Структура("ИдентификаторРаботы,Исполнитель,Цех");
		Для Каждого ЗаказНаряд Из СписокЗаказНарядов Цикл
			
			// Обновим данные по исполнителям в документах в режиме "Загрузка"
			ОбъектЗаказНаряда = ЗаказНаряд.ПолучитьОбъект();
			
			// Найдем измененых исполнителей
			СтруктураПоискаИсполнителей.ЗаказНаряд = ЗаказНаряд;
			НачисленияСотрудникам = ДанныеОбновления.НайтиСтроки(СтруктураПоискаИсполнителей);
			
			Для Каждого НачислениеСотрудника Из НачисленияСотрудникам Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураПоискаИсполнителейЗаказНаряда, НачислениеСотрудника);
				СтрокаИсполнителей = ОбъектЗаказНаряда.Исполнители.НайтиСтроки(СтруктураПоискаИсполнителейЗаказНаряда);
				
				Если СтрокаИсполнителей.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(СтрокаИсполнителей[0], НачислениеСотрудника);
				КонецЕсли;
				
			КонецЦикла;
			
			// Запишем изменения
			ОбъектЗаказНаряда.ОбменДанными.Загрузка = Истина;
			ОбъектЗаказНаряда.Записать();
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Обновлены начисления сотрудникам по документу %1'"),ЗаказНаряд)
			);
			
			// Внесем изменения в регистр начислений
			Если ОбъектЗаказНаряда.ВыработкаСотрудниковПоВыполнениюЗаказНаряда
				И ОбъектЗаказНаряда.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен Тогда
				ДатаВыработкиСотрудников = ОбъектЗаказНаряда.ДатаОкончания;
			ИначеЕсли ОбъектЗаказНаряда.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
				Если ОбъектЗаказНаряда.ВыработкаСотрудниковПоВыполнениюЗаказНаряда Тогда
					ДатаВыработкиСотрудников = ОбъектЗаказНаряда.ДатаОкончания;
				Иначе
					ДатаВыработкиСотрудников = ОбъектЗаказНаряда.ДатаЗакрытия;
				КонецЕсли; 
			Иначе
				Продолжить;
			КонецЕсли;
			
			НаборЗаписейНачислений = РегистрыНакопления.НачисленияСотрудникамПоЗаказНарядам.СоздатьНаборЗаписей();
			НаборЗаписейНачислений.Отбор.Регистратор.Значение = ЗаказНаряд;
			НаборЗаписейНачислений.Прочитать();
			НаборЗаписейНачислений.Очистить();
			НаборЗаписейНачислений.РежимПроведения = РежимПроведенияДокумента.Неоперативный;
			НаборЗаписейНачислений.ДокументОбъект = ОбъектЗаказНаряда;
			НаборЗаписейНачислений.РезультатЗапросаПоРаботам = Неопределено;
			НаборЗаписейНачислений.РезультатЗапросаПоИсполнителям = Неопределено;
			НаборЗаписейНачислений.ПериодДвижения = ДатаВыработкиСотрудников;
			НаборЗаписейНачислений.Движение();
			
		КонецЦикла;
	
	Исключение
		ОтменитьТранзакцию();
		Результат.Сообщение = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При обновлении данных заказ-нарядов возникала ошибка: %1'"),
				ОписаниеОшибки());
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		Возврат;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Результат.Сообщение =
		НСтр("ru = 'Запись изменений в заказ-наряды выполнена успешно. Рекомендуется обновить список заказ-нарядов.'");
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ПоказателиЗапасов

// Обновляет показатели запасов 
//
// Параметры:
//  ПараметрыДО    - Структура - Список параметров (ссылка на документ, табличная часть Товары).
//  АдресРезультата	 - Строка - Адрес хранения результата во временном хранилище.
//
&НаСервере
Процедура ОбновитьПоказателиТоваровФЗ(ПараметрыДО, АдресРезультата) Экспорт
	
	ДополнительныеПараметры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыДО,
		"ДополнительныеПараметры",
		Неопределено
	);
	
	ПоказателиЗапасов = АвтосервисВызовСервера.ПоказателиЗапасов(
		ПараметрыДО.Ссылка,
		ПараметрыДО.Товары,
		ДополнительныеПараметры
	);
	
	ПоместитьВоВременноеХранилище(ПоказателиЗапасов, АдресРезультата);
	
КонецПроцедуры
	
#КонецОбласти

// Получение значения настройки обязательности заполнения поля "Артикул" в справочниках "Номенклатура",
// "Опции" и "Причины обращений"
// 
// Возвращаемое значение:
//  Булево - Значение константы.
//
Функция АртикулОбязательный() Экспорт
	
	Возврат Константы.НомерПоКаталогуОбязательный.Получить();
	
КонецФункции

// Получение значения настройки уникальности заполнения поля "Артикул" в справочниках "Номенклатура",
// "Опции" и "Причины обращений".
//
// Возвращаемое значение:
//  ПеречислениеСсылка.РежимыКонтроляУникальностиНомераПоКаталогу - Значение константы.
//
Функция РежимКонтроляУникальностиАртикула() Экспорт
	
	Если НЕ АртикулОбязательный() Тогда
		Возврат Перечисления.РежимыКонтроляУникальностиНомераПоКаталогу.НеКонтролировать;
	КонецЕсли;
	
	Возврат Константы.РежимКонтроляУникальностиНомераПоКаталогу.Получить();
	
КонецФункции

// Получение списка документов с признаком "Это универсальный документ".
//
Функция ДокументыСПризнакомУниверсальныйДокумент() Экспорт
	
	Результат = Новый Массив;
	
	ДокументыПоступления = Новый Массив;
	ДокументыПоступления.Добавить(Метаданные.Документы.ПоступлениеАвтомобилей);
	ДокументыПоступления.Добавить(Метаданные.Документы.ПоступлениеДопРасходов);
	ДокументыПоступления.Добавить(Метаданные.Документы.ПоступлениеТоваров);
	ДокументыПоступления.Добавить(Метаданные.Документы.КорректировкаПоступления);
	ДокументыПоступления.Добавить(Метаданные.Документы.КорректировкаПоступленияАвтомобилей);
	
	Для Каждого ОбъектМетаданных Из Метаданные.Документы Цикл
		ДанныеДокумента = Новый Структура("Документ, ЭтоПоступление");
		Если ОбъектМетаданных.Реквизиты.Найти("ЭтоУниверсальныйДокумент") <> Неопределено Тогда
			ДанныеДокумента.Документ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
			ДанныеДокумента.ЭтоПоступление = ДокументыПоступления.Найти(ОбъектМетаданных) <> Неопределено;
			Результат.Добавить(ДанныеДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполнение нового реквизита в документах автосервиса "СпособРасчетаСтоимостиРаботы"
//
// Параметры:
//  Параметры	 - Структура - Параметры выполнения заполнения.
//
Процедура ЗаполнитьВДокументахСпособРасчетаСуммы(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НеустановленныеДокументы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ЗаказНарядАвтоработы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаряд.Автоработы КАК ЗаказНарядАвтоработы
	|ГДЕ
	|	ЗаказНарядАвтоработы.СпособРасчетаСтоимостиРаботы = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСтоимостиРаботы.ПустаяСсылка)
	|	И НЕ ЗаказНарядАвтоработы.Ссылка В (&НеустановленныеДокументы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ЗаявкаНаРемонтАвтоработы.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРемонт.Автоработы КАК ЗаявкаНаРемонтАвтоработы
	|ГДЕ
	|	ЗаявкаНаРемонтАвтоработы.СпособРасчетаСтоимостиРаботы = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСтоимостиРаботы.ПустаяСсылка)
	|	И НЕ ЗаявкаНаРемонтАвтоработы.Ссылка В (&НеустановленныеДокументы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	КорректировкаРеализацииАвтоработы.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации.Автоработы КАК КорректировкаРеализацииАвтоработы
	|ГДЕ
	|	КорректировкаРеализацииАвтоработы.СпособРасчетаСтоимостиРаботы = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСтоимостиРаботы.ПустаяСсылка)
	|	И НЕ КорректировкаРеализацииАвтоработы.Ссылка В (&НеустановленныеДокументы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	АктРазногласийАвтоработы.Ссылка
	|ИЗ
	|	Документ.АктРазногласий.Автоработы КАК АктРазногласийАвтоработы
	|ГДЕ
	|	АктРазногласийАвтоработы.СпособРасчетаСтоимостиРаботы = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСтоимостиРаботы.ПустаяСсылка)
	|	И НЕ АктРазногласийАвтоработы.Ссылка В (&НеустановленныеДокументы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	СчетНаОплатуАвтоработы.Ссылка
	|ИЗ
	|	Документ.СчетНаОплату.Автоработы КАК СчетНаОплатуАвтоработы
	|ГДЕ
	|	СчетНаОплатуАвтоработы.СпособРасчетаСтоимостиРаботы = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСтоимостиРаботы.ПустаяСсылка)
	|	И НЕ СчетНаОплатуАвтоработы.Ссылка В (&НеустановленныеДокументы)";
	
	Пока Истина Цикл
		
		Запрос.УстановитьПараметр("НеустановленныеДокументы", НеустановленныеДокументы);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументРаботы = Выборка.Ссылка.ПолучитьОбъект();
			
			Для Каждого СтрокаАвтоработы Из ДокументРаботы.Автоработы Цикл
				
				Если СтрокаАвтоработы.СпособРасчетаСтоимостиРаботы =
					Перечисления.СпособыРасчетаСтоимостиРаботы.ПустаяСсылка() Тогда
					СтрокаАвтоработы.СпособРасчетаСтоимостиРаботы = Перечисления.СпособыРасчетаСтоимостиРаботы.ПоНормеВремени;
				КонецЕсли;
				
			КонецЦикла;
			
			ДокументРаботы.ОбменДанными.Загрузка = Истина;
			
			Попытка
				ДокументРаботы.Записать();
			Исключение
				НеустановленныеДокументы.Добавить(ДокументРаботы.Ссылка);
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не удалось заполнить способ расчета стоимости работ в документе %1'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					СокрЛП(Строка(ДокументРаботы.Ссылка)));
				ЗаписьЖурналаРегистрации(
					ТекстОшибки,
					УровеньЖурналаРегистрации.Предупреждение,
					, ,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Получение марки и модели автомобиля для вывода в печатной форме
//
// Параметры:
//  Автомобиль	 - СправочникСсылка.Автомобиль - Автомобиль вывода в печатной форме.
// 
// Возвращаемое значение:
//  Строка - Представление марки и модели автомобиля.
//
Функция МаркаМодельАвтомобиля(Автомобиль) Экспорт
	
	Если ТипЗнч(Автомобиль) = Тип("Структура") Тогда
		ДанныеАвтомобиля = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Автомобиль);
	Иначе
		ДанныеАвтомобиля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Автомобиль, "Марка,Модель");
	КонецЕсли;
	
	МодельАвтомобиля = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ДанныеАвтомобиля.Модель);
	МаркаАвтомобиля = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ДанныеАвтомобиля.Марка);
	Возврат СтрШаблон(
		"%1, %2",
		СокрЛП(МаркаАвтомобиля),
		СокрЛП(МодельАвтомобиля));
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаСоставаПричинОбращений(ЗаявкаНаРемонт, СписокЗаказНарядов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставПричинОбращенийЗаказНарядов.ПричинаОбращения КАК ПричинаОбращения,
	|	СоставПричинОбращенийЗаказНарядов.Авторабота КАК Авторабота,
	|	СоставПричинОбращенийЗаказНарядов.ЗаказНаряд КАК ЗаказНаряд,
	|	1 КАК Приоритет
	|ИЗ
	|	РегистрСведений.СоставПричинОбращенийЗаказНарядов КАК СоставПричинОбращенийЗаказНарядов
	|ГДЕ
	|	СоставПричинОбращенийЗаказНарядов.Использование = ИСТИНА
	|	И СоставПричинОбращенийЗаказНарядов.ЗаказНаряд В(&ЗаказНаряды)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаРемонтАвтоработы.ИдентификаторПричиныОбращения,
	|	ЗаявкаНаРемонтАвтоработы.ИдентификаторРаботы,
	|	NULL,
	|	2
	|ИЗ
	|	Документ.ЗаявкаНаРемонт.Автоработы КАК ЗаявкаНаРемонтАвтоработы
	|ГДЕ
	|	ЗаявкаНаРемонтАвтоработы.Ссылка = &Основание
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("Основание", ЗаявкаНаРемонт);
	Запрос.УстановитьПараметр("ЗаказНаряды", СписокЗаказНарядов);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ТекстЗапросаСоставаПричинОбращений()

Процедура ЗаполнитьДополнительныеПоляТоваров(ЗаказНаряд, ЗаказНарядОбъект, ПодчиненныеТовары, ДополнительныеПараметры)
	
	ПоказателиЗапасов = Документы.ЗаказНаряд.ПолучитьПоказателиЗапасов(
		ЗаказНарядОбъект.Ссылка,
		ЗаказНарядОбъект.Товары,
		Новый Структура("Основание", ДополнительныеПараметры.ДокументОснование));
	
	Для Каждого Показатель Из ПоказателиЗапасов Цикл
		Для Каждого Товар Из ПодчиненныеТовары Цикл
			Если Показатель.ИдентификаторСтроки = Товар.ИдентификаторСтрокиВЗаказНаряде
				И ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд = Товар.ИдентификаторОбъектаЗаказНаряд Тогда
				
				Коэффициент         = ?(Товар.Коэффициент = 0, 1, Товар.Коэффициент);
				Заказано            = 0;
				Зарезервировано     = 0;
				ВПроизводстве       = 0;
				ОсталосьПереместить = Товар.Количество * Коэффициент;
				ВозможноПереместить = 0;
				
				Заказано            = Показатель.Заказано;
				Зарезервировано     = Показатель.Зарезервировано;
				ВПроизводстве       = Показатель.ВПроизводстве;
				ОсталосьПереместить = Показатель.ОсталосьПереместить;
				ВозможноПереместить = Показатель.ВозможноПереместить;
				
				Товар.ВПроизводстве       = ВПроизводстве / Коэффициент;
				Товар.Заказано            = Заказано / Коэффициент;
				Товар.ВРезерве            = Зарезервировано / Коэффициент;
				Товар.ОсталосьПереместить = ОсталосьПереместить / Коэффициент;
				Товар.ВозможноПереместить = ВозможноПереместить / Коэффициент;
				
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаТоваров = ПодчиненныеТовары.НайтиСтроки(
		Новый Структура("ИдентификаторОбъектаЗаказНаряд", ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд));
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ИмяСкладаВСтроке",      "СкладКомпании");
	ПараметрыДействия.Вставить("ТаблицаТоваров",        ТаблицаТоваров);
	ПараметрыДействия.Вставить("РезервыДляКонтрагента", ЗаказНарядОбъект.Контрагент);
	ПараметрыДействия.Вставить("Момент",                ТекущаяДатаСеанса());
	
	ЗащищенныеФункцииСервер.ЗаполнитьРеквизитОстаткомПоСкладу(
		ЗаказНарядОбъект, "ОстатокНаСкладе",, "Товары", ПараметрыДействия);
	
	// установим раскраску строки
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		ТекущийЗН = ЗаказНарядОбъект;
		Если ТекущийЗН.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен
			ИЛИ ТекущийЗН.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт
			ИЛИ СтрокаТоваров.ОсталосьПереместить = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаТоваров.ОсталосьПереместить <= СтрокаТоваров.ВозможноПереместить Тогда
			Если СтрокаТоваров.ВРезерве >= СтрокаТоваров.ОсталосьПереместить Тогда
				СтрокаТоваров.ЦветРаскраскиСтроки = 1;
			Иначе
				СтрокаТоваров.ЦветРаскраскиСтроки = 2;
			КонецЕсли;
		ИначеЕсли СтрокаТоваров.ОсталосьПереместить <= (СтрокаТоваров.Заказано + СтрокаТоваров.ВозможноПереместить) Тогда
			СтрокаТоваров.ЦветРаскраскиСтроки = 3;
		Иначе
			СтрокаТоваров.ЦветРаскраскиСтроки = 4;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДополнительныеПоляТоваров()

Процедура ЗаполнитьПакетыРабот(СписокЗаказНарядов, ПодчиненныеАвтоработы, ПодчиненныеЗаказНаряды)
	
	ПараметрОпции = Новый Структура("ДоступностьПодсистемПоКлючуМаскаКлюча", ПараметрыСеанса.МаскаЛицензирования);
	ИспользоватьУчетРабочегоВремени = ПолучитьФункциональнуюОпцию("ДоступенУчетРабочегоВремени", ПараметрОпции);
	
	Если ИспользоватьУчетРабочегоВремени Тогда
		
		РазрешитьУдалениеПакетовВРаботе =  ПраваИНастройкиПользователя.Значение("УРВ_РазрешитьУдалениеПакетовВРаботе");
		
		ПустойПакетРабот = РаботаСПакетамиРаботПовтИсп.ИнформацияПоПустомуПакету();
		
		// получим состав пакетов
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовРабот.ЗаказНаряд,
		|	СоставПакетовРабот.ПакетРабот,
		|	СоставПакетовРабот.Авторабота
		|ИЗ
		|	РегистрСведений.СоставПакетовРабот КАК СоставПакетовРабот
		|ГДЕ
		|	СоставПакетовРабот.ЗаказНаряд В(&ЗаказНаряды)";
		Запрос.УстановитьПараметр("ЗаказНаряды", СписокЗаказНарядов);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Для Каждого ПодчиненнаяАвторабота Из ПодчиненныеАвтоработы Цикл
			ЗаказНарядАвтоработы = ПодчиненныеЗаказНаряды.НайтиСтроки(
				Новый Структура("ИдентификаторОбъектаЗаказНаряд", ПодчиненнаяАвторабота.ИдентификаторОбъектаЗаказНаряд));
			Если Выборка.НайтиСледующий(
					Новый Структура("Авторабота,ЗаказНаряд",
					ПодчиненнаяАвторабота.ИдентификаторАвтоработы, ЗаказНарядАвтоработы[0].ЗаказНарядСсылка)) Тогда
				ПодчиненнаяАвторабота.ПакетРабот = Выборка.ПакетРабот;
			Иначе
				ПодчиненнаяАвторабота.ПакетРабот = ПустойПакетРабот.ПакетРабот;
			КонецЕсли;
			
			Выборка.Сбросить();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПакетыРабот()

Функция ДобавитьПричинуОбращения(СтрокаДереваЗаказа, ЭтоГруппа, Причина, ЗаказНаряд, ВалютаДокумента)
	
	СтрокаПричины = СтрокаДереваЗаказа.Добавить();
	
	СтрокаПричины.ИмяТаблицы          = "ПричиныОбращений";
	СтрокаПричины.ЭтоГруппа           = ЭтоГруппа;
	СтрокаПричины.ПричинаОбращения    = Причина.ИдентификаторПричиныОбращения;
	//@skip-check reading-attribute-from-database
	//@skip-check unknown-method-property
	СтрокаПричины.Идентификатор       = ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд;
	СтрокаПричины.Представление       = Причина.ПредставлениеПричиныОбращения;
	СтрокаПричины.НомерРисунка        = 1;
	СтрокаПричины.ИдентификаторСтроки = Причина.ИдентификаторСтрокиВЗаказНаряде;
	//@skip-check reading-attribute-from-database
	//@skip-check unknown-method-property
	СтрокаПричины.ПризнакБлокировки   = ЗаказНаряд.ПризнакБлокировки;
	//@skip-check reading-attribute-from-database
	СтрокаПричины.Артикул             = Причина.ПричинаОбращения.Артикул;
	СтрокаПричины.СуммаВсего          = Причина.Сумма;
	СтрокаПричины.ВалютаДокумента     = ВалютаДокумента;
	
	Если ЗначениеЗаполнено(Причина.ПричинаОбращения) Тогда
		СтрокаПричины.СуммаПоАвтоработамИТоварам = СтрШаблон(
			НСтр("ru = 'По товарам: %1, по автоработам: %2, итого: %3'"),
			Причина.СуммаПоТоварам,
			Причина.СуммаПоАвтоработам,
			Причина.Сумма);
	КонецЕсли;
	
	Возврат СтрокаПричины;
	
КонецФункции // ДобавитьПричинуОбращения()

Процедура ДобавитьТоварыПричиныОбращения(
	СтрокаПричины,
	ПодчиненныеТовары,
	ЗаказНаряд,
	ДанныеСтроки,
	ОтображатьТовары,
	СуммаТоваров = 0)
	
	Если НЕ ОтображатьТовары Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыСтрокаПричины = СтрокаПричины.ПолучитьЭлементы();
	
	УсловиеПоиска = Новый Структура;
	УсловиеПоиска.Вставить("ИдентификаторОбъектаЗаказНаряд", ДанныеСтроки.Идентификатор);
	УсловиеПоиска.Вставить("ИдентификаторПричиныОбращения", СтрокаПричины.ПричинаОбращения);
	ТоварыПричиныОбращения = ПодчиненныеТовары.НайтиСтроки(УсловиеПоиска);
	
	Для Каждого Товар Из ТоварыПричиныОбращения Цикл
		
		СтрокаТовар = ЭлементыСтрокаПричины.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовар, Товар);
		
		СтрокаТовар.НомерРисунка = 4;
		СтрокаТовар.ВалютаДокумента = СтрокаПричины.ВалютаДокумента;
		СтрокаТовар.ИмяТаблицы = "Товары";
		//@skip-check reading-attribute-from-database
		//@skip-check unknown-method-property
		СтрокаТовар.Идентификатор = ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд;
		СтрокаТовар.ИдентификаторСтроки = Товар.ИдентификаторСтрокиВЗаказНаряде;
		//@skip-check reading-attribute-from-database
		//@skip-check unknown-method-property
		СтрокаТовар.ПризнакБлокировки   = ЗаказНаряд.ПризнакБлокировки;
		
		СуммаТоваров = СуммаТоваров + Товар.СуммаВсего;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьТоварыПричиныОбращения()

Процедура ДобавитьАвтоработыПричиныОбращения(
	СтрокаПричины,
	ПодчиненныеАвтоработы,
	ЗаказНаряд,
	ДанныеСтроки,
	ОтображатьАвтоработы,
	СуммаАвторабот = 0)
	
	Если НЕ ОтображатьАвтоработы Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыСтрокаПричины = СтрокаПричины.ПолучитьЭлементы();
	
	УсловиеПоиска = Новый Структура;
	УсловиеПоиска.Вставить("ИдентификаторОбъектаЗаказНаряд", ДанныеСтроки.Идентификатор);
	УсловиеПоиска.Вставить("ИдентификаторПричиныОбращения", СтрокаПричины.ПричинаОбращения);
	АвтоработыПричиныОбращения = ПодчиненныеАвтоработы.НайтиСтроки(УсловиеПоиска);
	
	Для Каждого Авторабота Из АвтоработыПричиныОбращения Цикл
		
		СтрокаАвторабота = ЭлементыСтрокаПричины.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаАвторабота, Авторабота);
		
		СтрокаАвторабота.Номенклатура = Авторабота.Авторабота;
		СтрокаАвторабота.ЕдиницаИзмерения = Авторабота.Нормочас;
		СтрокаАвторабота.СкладКомпании = Авторабота.Цех;
		СтрокаАвторабота.НомерРисунка = 3;
		СтрокаАвторабота.ВалютаДокумента = СтрокаПричины.ВалютаДокумента;
		СтрокаАвторабота.ИмяТаблицы = "Автоработы";
		//@skip-check reading-attribute-from-database
		//@skip-check unknown-method-property
		СтрокаАвторабота.Идентификатор = ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд;
		СтрокаАвторабота.ИдентификаторСтроки = Авторабота.ИдентификаторСтрокиВЗаказНаряде;
		//@skip-check reading-attribute-from-database
		//@skip-check unknown-method-property
		СтрокаАвторабота.ПризнакБлокировки   = ЗаказНаряд.ПризнакБлокировки;
		
		СуммаАвторабот = СуммаАвторабот + Авторабота.СуммаВсего;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьАвтоработыПричиныОбращения()

Процедура СформироватьНапоминание(Объект, ШаблонСообщения, Кому)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДополнительныеПараметры = Новый Структура;
	
	СтруктураСообщения = ШаблоныСообщений.СформироватьСообщение(
		ШаблонСообщения,
		Объект,
		Новый УникальныйИдентификатор,
		ДополнительныеПараметры);
	
	НаборЗаписей = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Источник.Установить(Объект);
	НаборЗаписей.Прочитать();
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Пользователь                      = Кому;
	НоваяЗапись.Автор                             = Пользователи.ТекущийПользователь();
	НоваяЗапись.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
	НоваяЗапись.ВремяСобытия                      = ТекущаяДатаСеанса();
	НоваяЗапись.СрокНапоминания                   = ТекущаяДатаСеанса();
	НоваяЗапись.Описание                          = СтруктураСообщения.Текст;
	НоваяЗапись.ПредставлениеИсточника            = СтруктураСообщения.Тема;
	НоваяЗапись.Источник                          = Объект;
	НоваяЗапись.Расписание                        = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(9));
	НоваяЗапись.Активность                        = Истина;
	НоваяЗапись.ДатаСоздания                      = ТекущаяДатаСеанса();
	НоваяЗапись.ИнтервалВремениНапоминания        = 0;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Отправка уведомления'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Объект,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьЭлектронноеПисьмо(
		Объект, ШаблонСообщения, Контакт, АдресПолучателя, УчетнаяЗапись, ОтправлятьСразу)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовоеЭлектронноеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	НовоеЭлектронноеПисьмо.Заполнить(Неопределено);
	НовоеЭлектронноеПисьмо.Дата = ТекущаяДатаСеанса();
	НовоеЭлектронноеПисьмо.УстановитьНовыйНомер();
	НовоеЭлектронноеПисьмо.ОбменДанными.Загрузка = Истина;
	НовоеЭлектронноеПисьмо.ХозОперация = Справочники.ХозОперации.ЭлектронноеПисьмоИсходящее;
	НовоеЭлектронноеПисьмо.УчетнаяЗапись = УчетнаяЗапись;
	НовоеЭлектронноеПисьмо.ОтправительПредставление = УчетнаяЗапись.АдресЭлектроннойПочты;
	НовоеЭлектронноеПисьмо.Комментарий = НСтр("ru = 'Автоматически создано при отправке напоминания сотруднику'");
	НовоеЭлектронноеПисьмо.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	
	
	Получатель = НовоеЭлектронноеПисьмо.ПолучателиПисьма.Добавить();
	Получатель.Адрес = АдресПолучателя;
	Получатель.Контакт = Контакт;
	Получатель.Представление = АдресПолучателя;
	
	СписокАдресатов = 
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(НовоеЭлектронноеПисьмо.ПолучателиПисьма, Ложь);
	НовоеЭлектронноеПисьмо.СписокПолучателейПисьма = СписокАдресатов;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПреобразовыватьHTMLДляФорматированногоДокумента", Истина);
	
	ТаблицаСоответствийИменВложенийИдентификаторам = Новый ТаблицаЗначений;
	ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("ИмяФайла");
	ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("ИдентификаторФайлаДляHTML");
	ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("Картинка");
	
	СтруктураСообщения = ШаблоныСообщений.СформироватьСообщение(
		ШаблонСообщения,
		Объект,
		Новый УникальныйИдентификатор,
		ДополнительныеПараметры);
		
	Если
		СтруктураСообщения.ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML
	Тогда
		НовоеЭлектронноеПисьмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками;
		
		СтруктураВложений = Новый Структура();
		
		Индекс = СтруктураСообщения.Вложения.Количество() - 1;
		Пока Индекс >= 0 Цикл
			Вложение = СтруктураСообщения.Вложения[Индекс];
			Если ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
				Картинка = Новый Картинка(ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище));
				СтруктураВложений.Вставить(Вложение.Представление, Картинка);
				СтруктураСообщения.Вложения.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
		ТекстHTML = СтрЗаменить(СтруктураСообщения.Текст, "cid:", "_");
		ТекстПисьмаФорматированныйДокумент = Новый ФорматированныйДокумент;
		ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ТекстHTML, СтруктураВложений);
		
		СтруктураВложений = Новый Структура;
		ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекстHTML, СтруктураВложений);
		Для Каждого Вложение Из СтруктураВложений Цикл
			
			НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
			НоваяСтрока.ИмяФайла = Вложение.Ключ;
			НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
			НоваяСтрока.Картинка = Вложение.Значение;
			
		КонецЦикла;
		
		ДокументHTMLТекущегоПисьмаПодготовлен = Ложь;
		Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
			
			ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
			Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
			    ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Скопировать());
			ДокументHTMLТекущегоПисьмаПодготовлен = Истина;
			
		КонецЕсли;
		
		Если ДокументHTMLТекущегоПисьмаПодготовлен Тогда
			
			НовоеЭлектронноеПисьмо.ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
		Иначе
			
			НовоеЭлектронноеПисьмо.ТекстHTML = ТекстHTML;
			
		КонецЕсли;
		
		НовоеЭлектронноеПисьмо.Текст = Взаимодействия.ПолучитьОбычныйТекстИзHTML(НовоеЭлектронноеПисьмо.ТекстHTML);
		
	Иначе
		
		НовоеЭлектронноеПисьмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		НовоеЭлектронноеПисьмо.Текст = СтруктураСообщения.Текст;
		
	КонецЕсли;
	
	НовоеЭлектронноеПисьмо.Тема = СтруктураСообщения.Тема;
	НовоеЭлектронноеПисьмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
	
	Попытка
		
		НовоеЭлектронноеПисьмо.Записать();
		
		Идентификатор = Новый УникальныйИдентификатор;
		Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
			
			ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, Идентификатор);
			ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			                     НовоеЭлектронноеПисьмо.Ссылка,
			                     АдресКартинкиВоВременномХранилище,
			                     "_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_"),
			                     ДвоичныеДанныеКартинки.Размер());
			
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Отправка уведомления'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Объект,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
	СтруктураДляЗаписи = 
		ВзаимодействияАльфаАвто.СтруктураРеквизитовВзаимодействияДляЗаписи( , Неопределено, Ложь, Дата(1,1,1), Истина);
	СтруктураДляЗаписи.Предмет                 = Объект;
	СтруктураДляЗаписи.РассчитыватьРассмотрено = Истина;
	РегистрыСведений.ПредметыПапкиВзаимодействий.ЗаписатьПредметыПапкиВзаимодействий(
		НовоеЭлектронноеПисьмо.Ссылка,
		СтруктураДляЗаписи);
	
	// Отправка документа
	Если НЕ ОтправлятьСразу
		ИЛИ РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СозданПрофиль = Истина;
	
	Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	
	Попытка
		
		Соединение = Новый ИнтернетПочта;
		Соединение.Подключиться(Профиль);
		
	Исключение
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
			|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка уведомления'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстСообщенияОбОшибке);
		СозданПрофиль = Ложь;
		Возврат;
	КонецПопытки;
		
	Попытка
		
		ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(
			НовоеЭлектронноеПисьмо,
			Соединение).ИдентификаторПисьмаSMTP;
		
	Исключение
		
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Во время отправки электронного письма %1 произошла ошибка
			|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			НовоеЭлектронноеПисьмо.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка уведомления'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстСообщенияОбОшибке);
		
		Возврат;
		
	КонецПопытки;
	
	Если НовоеЭлектронноеПисьмо.УдалятьПослеОтправки Тогда
		
		НовоеЭлектронноеПисьмо.Удалить();
		
	Иначе
		
		НовоеЭлектронноеПисьмо.ИдентификаторСообщения = ИдентификаторПисьма;
		НовоеЭлектронноеПисьмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
		НовоеЭлектронноеПисьмо.Размер =
			Взаимодействия.ОценитьРазмерИсходящегоЭлектронногоПисьма(НовоеЭлектронноеПисьмо.Ссылка);
		НовоеЭлектронноеПисьмо.ДатаОтправления = ТекущаяДатаСеанса();
		НовоеЭлектронноеПисьмо.ДополнительныеСвойства.Вставить("НеЗаписыватьКонтакты", Истина);
		
		Попытка
			
			НовоеЭлектронноеПисьмо.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Отправка уведомления'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				Объект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСообщениеSMS(
		Объект, ШаблонСообщения, Контакт, НомерТелефона, ОтправлятьСразу)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументSMS = Документы.СообщениеSMS.СоздатьДокумент();
	ДокументSMS.Заполнить(Неопределено);
	ДокументSMS.Дата = ТекущаяДатаСеанса();
	ДокументSMS.УстановитьНовыйНомер();
	ДокументSMS.ДатаКогдаОтправить = ТекущаяДатаСеанса();
	
	ДокументSMS.Состояние   = Перечисления.СостоянияДокументаСообщениеSMS.Исходящее;
	ДокументSMS.Комментарий = НСтр("ru = 'Автоматически создано при отправке напоминания сотруднику'");
	
	Получатель = ДокументSMS.Адресаты.Добавить();
	Получатель.Контакт       = Контакт;
	Получатель.ПредставлениеКонтакта = Контакт.Наименование;
	Получатель.НомерДляОтправки = НомерТелефона;
	Получатель.КакСвязаться     = НомерТелефона;
	Получатель.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Исходящее;
	
	ДополнительныеПараметры = Новый Структура();
	
	СтруктураСообщения = ШаблоныСообщений.СформироватьСообщение(
		ШаблонСообщения,
		Объект,
		Новый УникальныйИдентификатор,
		ДополнительныеПараметры);
	
	ДокументSMS.ТекстСообщения = СтруктураСообщения.Текст;
	ДокументSMS.Тема = Взаимодействия.ТемаПоТекстуСообщения(ДокументSMS.ТекстСообщения);
	Взаимодействия.СформироватьСписокУчастников(ДокументSMS);
	
	ДокументSMS.ОбменДанными.Загрузка = Истина;
	
	Попытка
		ДокументSMS.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Отправка уведомления'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Объект,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
	СтруктураДляЗаписи = 
		ВзаимодействияАльфаАвто.СтруктураРеквизитовВзаимодействияДляЗаписи( , Неопределено, Ложь, Дата(1,1,1), Истина);
	СтруктураДляЗаписи.Предмет                 = Объект;
	СтруктураДляЗаписи.РассчитыватьРассмотрено = Истина;
	РегистрыСведений.ПредметыПапкиВзаимодействий.ЗаписатьПредметыПапкиВзаимодействий(
		ДокументSMS.Ссылка,
		СтруктураДляЗаписи);
	
	// Отправка документа
	Если НЕ ОтправлятьСразу
		ИЛИ РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаАдресатовСообщения = Новый ТаблицаЗначений;
	ТаблицаАдресатовСообщения.Колонки.Добавить("НомерСтроки");
	ТаблицаАдресатовСообщения.Колонки.Добавить("НомерДляОтправки");
	ТаблицаАдресатовСообщения.Колонки.Добавить("КакСвязаться");
	
	Для Каждого ТекущаяСтрока Из ДокументSMS.Адресаты Цикл
		
		НоваяСтрока = ТаблицаАдресатовСообщения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
	КонецЦикла;
	
	Если ТаблицаАдресатовСообщения.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивНомеров = ТаблицаАдресатовСообщения.ВыгрузитьКолонку("НомерДляОтправки");
	РезультатОтправки = ОтправкаSMS.ОтправитьSMS(
		МассивНомеров, ДокументSMS.ТекстСообщения, "", ДокументSMS.ОтправлятьВТранслите);
	
	Если РезультатОтправки.ОтправленныеСообщения.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Взаимодействия.ОтразитьРезультатыОтправкиSMSВДокументе(ДокументSMS, РезультатОтправки);
	ДокументSMS.ДополнительныеСвойства.Вставить("НеЗаписыватьКонтакты", Истина);
	
	Попытка
		
		ДокументSMS.Записать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Отправка уведомления'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Объект,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеНачисленийСотрудникам(
		СтрокаИсполнителя,
		ДанныеИсполнителя,
		ДанныеАвтоработы,
		ЭтоЗаказНаряд,
		ИдентификаторРаботы)
	
	Если НЕ ЭтоЗаказНаряд Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИсполнителя.ВидНачисления = ДанныеИсполнителя.ВидНачисления;
	СтрокаИсполнителя.СпособРасчета = ДанныеИсполнителя.СпособРасчета;
	СтрокаИсполнителя.ПараметрРасчетаНачисления = ДанныеИсполнителя.ПараметрРасчетаНачисления;
	
	Если СтрокаИсполнителя.ИдентификаторРаботы = ИдентификаторРаботы Тогда
		СтрокаИсполнителя.Начислено = ДанныеИсполнителя.Начислено;
	Иначе
		АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(
			СтрокаИсполнителя,
			ДанныеАвтоработы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
