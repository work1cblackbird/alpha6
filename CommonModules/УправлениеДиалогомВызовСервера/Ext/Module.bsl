// Общий модуль "Управление диалогом (вызов сервера)"


#Область ПрограммныйИнтерфейс

// Получает представление периода.
//
// Параметры:
//  Период      - СтандартныйПериод - период динамического списка.
//
// Возвращаемое значение:
//  Представление - Строка - представление периода динамического списка.
//
Функция ПолучитьПредставлениеПериода(Период) Экспорт
	
	Представление = "";
	
	// Определим общий шаблон получения представления даты
	ШаблонФорматаДаты = "ДЛФ=DD; ДП=...";
	
	ДатаНачала     = Период.ДатаНачала;
	ДатаОкончания  = Период.ДатаОкончания;
	
	// Получим параметру установленного отбора по периоду
	Если НачалоДня(ДатаНачала)=НачалоДня(ДатаОкончания) И НЕ ДатаНачала = Дата(1,1,1) Тогда
		Вариант = ВариантСтандартногоПериода.Сегодня;
	ИначеЕсли ДатаНачала = НачалоМесяца(ДатаНачала) И ДатаОкончания = КонецМесяца(ДатаНачала) Тогда
		Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	Иначе
		Вариант = Период.Вариант;
	КонецЕсли;
	
	// Получим представление периода установленного отбора в зависимости от варианта стандартного периода.
	Если Вариант=ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		Если ЗначениеЗаполнено(ДатаНачала) ИЛИ ЗначениеЗаполнено(ДатаОкончания) Тогда
			Представление = Формат(ДатаНачала, ШаблонФорматаДаты) + " - " + Формат(ДатаОкончания, ШаблонФорматаДаты);
		Иначе
			Представление = "";
		КонецЕсли;
		
	ИначеЕсли Вариант=ВариантСтандартногоПериода.Вчера ИЛИ Вариант=ВариантСтандартногоПериода.Сегодня ИЛИ Вариант=ВариантСтандартногоПериода.Завтра Тогда
		Представление = Формат(ДатаНачала, ШаблонФорматаДаты);
		
	ИначеЕсли Вариант=ВариантСтандартногоПериода.ПрошлыйМесяц ИЛИ Вариант=ВариантСтандартногоПериода.ЭтотМесяц ИЛИ Вариант=ВариантСтандартногоПериода.СледующийМесяц Тогда
		Представление = Формат(ДатаНачала, "Л=; ДФ='MMMM yyyy'") + " г.";
		
	ИначеЕсли Вариант=ВариантСтандартногоПериода.ПрошлыйКвартал ИЛИ Вариант=ВариантСтандартногоПериода.ЭтотКвартал ИЛИ Вариант=ВариантСтандартногоПериода.СледующийКвартал Тогда
		Если ДатаНачала=Дата(Год(ТекущаяДатаСеанса()), 1, 1, 0, 0, 0) Тогда
			Представление = "I квартал";
		ИначеЕсли ДатаНачала=Дата(Год(ТекущаяДатаСеанса()), 4, 1, 0, 0, 0) Тогда
			Представление = "II квартал";
		ИначеЕсли ДатаНачала=Дата(Год(ТекущаяДатаСеанса()), 7, 1, 0, 0, 0) Тогда
			Представление = "III квартал";
		ИначеЕсли ДатаНачала=Дата(Год(ТекущаяДатаСеанса()), 10, 1, 0, 0, 0) Тогда
			Представление = "IV квартал";
		КонецЕсли;
		
	ИначеЕсли Вариант=ВариантСтандартногоПериода.ПрошлыйГод ИЛИ Вариант=ВариантСтандартногоПериода.ЭтотГод ИЛИ Вариант=ВариантСтандартногоПериода.СледующийГод Тогда
		Представление = Формат(ДатаНачала, "ДФ=yyyy") + " г.";
		
	Иначе
		Представление = Строка(Период);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции // ПолучитьПредставлениеПериода()

// Функция производит запись переданного объекта
//
// Параметры:
//  Объект             - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  РежимЗаписиОбъекта - Булево               - Режим записи объекта Загрузка.
//  ЗначенияЗаполнения - Структура            - Данные заполнения объекта.
// 
// Возвращаемое значение:
//  Булево - Истина объект записан, иначе ложь.
//
Функция ЗаписатьОбъект(Знач Объект, РежимЗаписиОбъекта=Неопределено, ЗначенияЗаполнения=Неопределено) Экспорт
	
	// Выполняем запись переданного объекта
	Попытка
		
		// Получим переменную типа Объект
		Если Объект=Объект.Ссылка Тогда
			Объект = Объект.ПолучитьОбъект();
		КонецЕсли;
		Если ТипЗнч(Объект)=Тип("ДанныеФормыСтруктура") Тогда
			Объект = ДанныеФормыВЗначение(Объект, УправлениеДиалогомСервер.ПолучитьТипОбъектаПоДаннымФормы(Объект));
		КонецЕсли;
		
		// Заполним объекта переданными параметрами
		Если ТипЗнч(ЗначенияЗаполнения)=Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Объект, ЗначенияЗаполнения);
		КонецЕсли;
		
		// Установим признак упрощенной записи объекта
		Объект.ОбменДанными.Загрузка = (РежимЗаписиОбъекта=ИСТИНА);
		
		// Обработаем в зависимости от типа операции
		Если Метаданные.Документы.Содержит(Объект.Метаданные()) Тогда
			
			// Определим параметры записи документа
			Если РежимЗаписиОбъекта=ИСТИНА Тогда
				РежимЗаписи     = РежимЗаписиДокумента.Запись;
				РежимПроведения = Неопределено;
				
			ИначеЕсли ТипЗнч(РежимЗаписиОбъекта)=Тип("РежимПроведенияДокумента") Тогда
				
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
				
				// Если оперативное проведение документа запрещено, то провести надо неоперативно
				Если Объект.Метаданные().ОперативноеПроведение=Метаданные.СвойстваОбъектов.ОперативноеПроведение.Запретить Тогда
					РежимПроведения = РежимПроведенияДокумента.Неоперативный;
				Иначе
					РежимПроведения = РежимЗаписиОбъекта;
				КонецЕсли;
				
			Иначе
				РежимЗаписи     = РежимЗаписиОбъекта;
				РежимПроведения = Неопределено;
			КонецЕсли;
			
			// Производим запись объекта
			Объект.Записать(РежимЗаписи, РежимПроведения);
			
		Иначе
			Объект.Записать();
		КонецЕсли;
		
	Исключение
		ПричинаОшибки(Объект, РежимЗаписиДокумента, ЗначенияЗаполнения);
		Возврат ЛОЖЬ;
	КонецПопытки;
	
	// Возвращаем статус успешного выполнения операции
	Возврат ИСТИНА;
	
КонецФункции // ЗаписатьОбъект()

// Получение параметров организации.
//
// Параметры:
//  Организация				 - СправочникСсылка.Организации				 - Организация.
//  ПодразделениеКомпании	 - СправочникСсылка.ПодразделенияКомпании	 - Подразделение компании.
//  СкладКомпании			 - СправочникСсылка.СкладыКомпании			 - Склад компании.
//  Дата					 - Дата										 - Дата получения данных.
// 
// Возвращаемое значение:
//  Структура - Параметры заполнения.
//
Функция ПолучитьПараметрыОрганизации(Организация, ПодразделениеКомпании, СкладКомпании, Дата) Экспорт
	
	Возврат УправлениеДиалогомДокументаСервер.ПолучитьПараметрыОрганизации(Организация, ПодразделениеКомпании, СкладКомпании, Дата);
	
КонецФункции //ПолучитьПараметрыОрганизации()

// Универсальная функция используется для обращения к серверу, выполнения не нем произвольного запроса
//  и возврата результата работы.
//
// Параметры:
//  ТекстЗапроса     - Строка    - Текст к запросу данных.
//  ИмяПоля          - Строка    - Имя колонки для выгрузки.
//  ПараметрыЗапроса - Структура - Параметры выполняемого запроса.
//  ПерваяСтрока     - Булево    - Получение первого элемента запроса.
// 
// Возвращаемое значение:
//  Массив - Список результата запроса, элемент результата.
//
Функция ВыполнитьПроизвольныйЗапрос(ТекстЗапроса, ИмяПоля=Неопределено, ПараметрыЗапроса=Неопределено, ПерваяСтрока=ЛОЖЬ) Экспорт
	
	// Создаем объект запроса
	Запрос = Новый Запрос(ТекстЗапроса);
	
	// Производим установку параметров
	Если НЕ ПараметрыЗапроса=Неопределено Тогда
		Для каждого Параметр Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Выполняем запрос
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// Получаем интересующую строку таблицы результата запроса
	Если ПерваяСтрока Тогда
		Если ТаблицаРезультатаЗапроса.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			СтрокаТаблицыЗначений = ТаблицаРезультатаЗапроса.Получить(0);
		КонецЕсли;
	КонецЕсли;
	
	// Возвращаем результат работы запроса
	Если ИмяПоля=Неопределено Тогда
		
		// Создаем массив строк результата запроса
		МассивРезультатаЗапроса = Новый Массив();
		
		// Формируем список реквизитов строки
		ИменаКолонок = "";
		Для каждого КолонкаТаблицыЗначений Из ТаблицаРезультатаЗапроса.Колонки Цикл
			ИменаКолонок = ИменаКолонок + "," + КолонкаТаблицыЗначений.Имя;
		КонецЦикла;
		ИменаКолонок = Сред(ИменаКолонок,2);
		
		// Обработаем в зависимости от режима
		Если ПерваяСтрока Тогда
			
			// Создаем и заполняем объект для хранения данных строки
			РеквизитыСтроки = Новый Структура(ИменаКолонок);
			ЗаполнитьЗначенияСвойств(РеквизитыСтроки, СтрокаТаблицыЗначений);
			
			// Возвращаем данные строки
			Возврат РеквизитыСтроки;
			
		Иначе
			
			// Заполняем массив данными из таблицы значений
			Для каждого СтрокаТаблицыЗначений Из ТаблицаРезультатаЗапроса Цикл
				
				// Создаем и заполняем объект для хранения данных строки
				РеквизитыСтроки = Новый Структура(ИменаКолонок);
				ЗаполнитьЗначенияСвойств(РеквизитыСтроки, СтрокаТаблицыЗначений);
				
				// Помещаем данные строки в массив
				МассивРезультатаЗапроса.Добавить(РеквизитыСтроки);
				
			КонецЦикла;
			
			// Возвращаем массив строк результата запроса
			Возврат МассивРезультатаЗапроса;
			
		КонецЕсли;
		
	Иначе
		
		// Обработаем в зависимости от режима
		Если ПерваяСтрока Тогда
			Возврат СтрокаТаблицыЗначений[ИмяПоля];
		Иначе
			Возврат ТаблицаРезультатаЗапроса.ВыгрузитьКолонку(ИмяПоля);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ВыполнитьПроизвольныйЗапрос()

// Выполняет проверку возможности проведения документа
//
// Параметры:
//  Ссылка - ДокументСсылка - Документ проверки возможности проведения.
// 
// Возвращаемое значение:
//  Булево - Для данного документа разрешено проведение (истина) или запрещено (ложь).
//
Функция ПроведениеРазрешено(Знач Ссылка) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	
	Возврат (ОбъектМетаданных.Проведение=Метаданные.СвойстваОбъектов.Проведение.Разрешить);
	
КонецФункции // ПроведениеРазрешено()

// Выполняет проведение документа
//
// Параметры:
//  Ссылка - ДокументСсылка - Ссылка на документ проведения.
// 
// Возвращаемое значение:
//  Булево - Документ проведен (истина) или не удалось провести (ложь).
//
Функция ПровестиДокумент(Знач Ссылка) Экспорт
	
	// Очень узкий функционал, возможно расширение и переименование
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Попытка
		Объект.Записать(РежимЗаписиДокумента.Проведение);
		Возврат ИСТИНА;
	Исключение
		ПричинаОшибки(Объект);
		Возврат ЛОЖЬ;
	КонецПопытки;
	
КонецФункции // ПровестиДокумент()

// В данной функции формируется сообщение пользователю о еще не реализованной функциональности программы.
//
// Возвращаемое значение:
//   Булево - Истина - Выбранный пользователем операции не может быть завершена,
//                    так как ее обработка еще не реализована.
//
Функция ОбработкаДействияНеРеализована() Экспорт
	
	// !!!_ Удалить функцию когда будет доработан весь функционал
	ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Выбранное действие не может быть завершено. Обработка действия еще не реализована.'"));
	Возврат Истина;
	
КонецФункции // ОбработкаДействияНеРеализована()

// Обработчик события возникающего возникающего на сервере при окончании перетаскивания в поле-приемнике данных.
//
// Параметры:
//  ПараметрыДействия - Структура - Значение, которое было указано при создании объекта описания оповещения.
//
Процедура СписокПеретаскиваниеНаСервере(ПараметрыДействия) Экспорт
	
	Попытка
		Если ТипЗнч(ПараметрыДействия.Элемент)=Тип("Массив") И ПараметрыДействия.Элемент.Количество() > 1 Тогда
			
			Для Каждого Строка Из ПараметрыДействия.Элемент Цикл
				Элемент = Строка.ПолучитьОбъект();
				Элемент.Родитель = ПараметрыДействия.Приемник;
				Элемент.Записать();
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ПараметрыДействия.Элемент)=Тип("Массив") И ПараметрыДействия.Элемент.Количество() = 1 Тогда
			
			Элемент = ПараметрыДействия.Элемент[0].ПолучитьОбъект();
			Элемент.Родитель = ПараметрыДействия.Приемник;
			Элемент.Записать();
			
		ИначеЕсли ТипЗнч(ПараметрыДействия.Элемент) = Тип("СправочникСсылка.Карточки") Тогда
			
			Справочники.Карточки.ЗаполнитьВидКарточки(ПараметрыДействия.Элемент, ПараметрыДействия.Приемник);
			
		Иначе
			
			Элемент = ПараметрыДействия.Элемент.ПолучитьОбъект();
			Элемент.Родитель = ПараметрыДействия.Приемник;
			Элемент.Записать();
			
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки=ИнформацияОбОшибке();
		Если ТекстОшибки.Причина.Описание=НСтр("ru = 'Зацикливание уровней.'") 
			ИЛИ ТекстОшибки.Причина.Описание=НСтр("ru = 'Нарушение прав доступа.'") Тогда
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки.Причина.Описание);
		Иначе
			ВызватьИсключение;
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры // СписокПеретаскиваниеНаСервере()

// Получение полного имени объекта по ссылке.
//
// Параметры:
//  Ссылка	 - ЛюбаяСсылка	 - Ссылка объекта.
// 
// Возвращаемое значение:
//  Строка - Имя объекта.
//
Функция ПолучитьПолноеИмя(Ссылка) Экспорт
	Возврат Ссылка.Метаданные().ПолноеИмя();
КонецФункции

// Обновление значения реквизита комментарий объекта по ссылке.
//
// Параметры:
//  СсылкаНаОбъект	     - ЛюбаяСсылка				 - Ссылка на объект.
//  ДанныеКомментарий 	 - Структура				 - Данные по комментарию.
// 
Процедура ОбновитьЗначениеПоляКомментарий(СсылкаНаОбъект, ДанныеКомментарий) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	ОбновитьЗначенияРеквизитовОбъектаПоСсылке(СсылкаНаОбъект, ДанныеКомментарий, Неопределено, Истина);
	УстановитьПривилегированныйРежим(Ложь);	

КонецПроцедуры

// Обновление значения реквизитов объекта по ссылке.
//
// Параметры:
//  СсылкаНаОбъект	 - ЛюбаяСсылка				 - Ссылка на объект.
//  ДанныеОбъекта	 - Структура				 - Данные объекта.
//  РежимПроведения	 - РежимПроведенияДокумента	 - Режим, в котором необходимо проводить документы.
//  РежимЗагрузки	 - РежимЗаписиДокумента		 - Режим, в котором необходимо записывать документы.
// 
// Возвращаемое значение:
//  Неопределено - Возврат пустого результата действия.
//
Функция ОбновитьЗначенияРеквизитовОбъектаПоСсылке(СсылкаНаОбъект, ДанныеОбъекта, РежимПроведения, РежимЗагрузки) Экспорт
	
	// Получим объект базы данных и произведем обновление его данных
	Объект = СсылкаНаОбъект.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	// Установим режим упрощенной записи объекта
	Если РежимЗагрузки Тогда
		Объект.ОбменДанными.Загрузка = ИСТИНА;
	КонецЕсли;
	
	// Производим запись объекта
	НачатьТранзакцию();
	Попытка
		Объект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		Информация = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецФункции // ОбновитьЗначенияРеквизитовОбъектаПоСсылке()

// Проверяет наличие у объекта дополнительной формы редактирования и возвращает ее полное имя.
//
// Параметры:
//  СсылкаНаОбъект - ЛюбаяСсылка - Ссылка на текущий объект.
// 
// Возвращаемое значение:
//  Строка - Имя формы.
//
Функция ПолучитьИмяФормаОбъектаПоСсылке(СсылкаНаОбъект) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект));
	
	Если ОбъектМетаданных=Неопределено Тогда
		Возврат Неопределено;
		
	ИначеЕсли (Метаданные.Справочники.Содержит(ОбъектМетаданных) ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)) И СсылкаНаОбъект.ЭтоГруппа Тогда
		Возврат ОбъектМетаданных.ПолноеИмя() + ".ФормаГруппы";
		
	Иначе
		Возврат ОбъектМетаданных.ПолноеИмя() + ".ФормаОбъекта";
	КонецЕсли;
	
КонецФункции // ПолучитьИмяФормаОбъектаПоСсылке()

// Проверяет наличие у объекта дополнительной формы редактирования и возвращает ее полное имя.
//
// Параметры:
//  Объект - Строка, ЛюбаяСсылка - Описание объекта.
// 
// Возвращаемое значение:
//  Строка - Имя дополнительной формы объекта.
//
Функция ПолучитьИмяДополнительнойФормыОбъекта(Объект) Экспорт
	
	// Получаем объект метаданных переданной ссылки
	Если ТипЗнч(Объект) = Тип("Строка") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Объект);
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	КонецЕсли;
	
	Если ОбъектМетаданных.ОсновнаяФормаОбъекта <> Неопределено Тогда
		// Найдем "дополнительную" среди подчиненных форм объекта
		ДополнительнаяФорма = ОбъектМетаданных.Формы.Найти(ОбъектМетаданных.ОсновнаяФормаОбъекта.Имя + "Дополнительная")
	Иначе
		ДополнительнаяФорма = Неопределено;
	КонецЕсли;
		
	// Возвращаем полное имя формы, по которому можно будет произвести ее открытие
	Возврат ?(ДополнительнаяФорма = Неопределено, "", ДополнительнаяФорма.ПолноеИмя());
	
КонецФункции // ПолучитьИмяДополнительнойФормыОбъекта()

// Возвращает список подчиненных документов.
//
// Параметры:
//  Основание          - ДокументСсылка - Тот документ, подчиненных для которого ищем;
//  МассивВидов        - Массив - Массив строк с видами подчиненных документов. Если МассивВидов не определен,
//                                то возвращаются все подчиненные документы.
//  ТолькоНеПомеченные - Булево - признак добавления в список.
//
// Возвращаемое значение:
//  СписокЗначений - Список ссылок документов:
//                     Значение - ссылка документа.
//                     Пометка  - ПометкаУдаления документа.
//
Функция ПолучитьСписокПодчиненных(Основание, МассивВидов = Неопределено, ТолькоНеПомеченные = Ложь)Экспорт
	
	// проверим на пустое основание
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокПодчиненных = Новый СписокЗначений;
	
	// получим массив подчиненных документов
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодчиненныеДокументы.Ссылка
	|ИЗ
	|	КритерийОтбора.ПодчиненныеДокументы(&Основание) КАК ПодчиненныеДокументы";
	Запрос.УстановитьПараметр("Основание", Основание);
	МассивПодчиненных = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// Если задан фильтр на виды документов, то пропустим полученный массив через этот фильтр.
	Если (МассивВидов <> Неопределено) И (МассивПодчиненных.Количество() > 0) Тогда
		ТекИндекс = 0;
		Пока ТекИндекс <= МассивПодчиненных.ВГраница() Цикл
			НайденВФильтре = Ложь;
			Для Сч = 0 По МассивВидов.ВГраница() Цикл
				Если МассивПодчиненных[ТекИндекс].Ссылка.Метаданные().Имя = МассивВидов[Сч] Тогда
					НайденВФильтре = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НайденВФильтре И (НЕ ТолькоНеПомеченные ИЛИ НЕ МассивПодчиненных[ТекИндекс].Ссылка.ПометкаУдаления) Тогда
				ТекИндекс = ТекИндекс + 1;
			Иначе
				МассивПодчиненных.Удалить(ТекИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Преобразуем массив в список значений.
	Сч = 0;
	Для Каждого ЭлементМассива Из МассивПодчиненных Цикл
		СписокПодчиненных.Вставить(Сч, ЭлементМассива, , ЭлементМассива.ПометкаУдаления);
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат СписокПодчиненных;
	
КонецФункции // ПолучитьСписокПодчиненных()

// Производит смену значения регламентного учета документа на противоположный
//
// Параметры:
//  ВыбраннаяСтрока			 - ДокументСсылка	 - Документ, у которого производится смена регламентного учета.
//  СтандартнаяОбработка	 - Булево			 - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ИнверсияРегламентногоУчета(ВыбраннаяСтрока, СтандартнаяОбработка=ИСТИНА) Экспорт
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ОткрытиеФормыПараметрыДокументаВРежимеРедактирование", ВыбраннаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Получаем объект и производим инверсию признака
	Объект = ВыбраннаяСтрока.ПолучитьОбъект();
	Если НЕ ЕстьРеквизит(Объект, "РегламентированныйУчет") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РегламентированныйУчет = НЕ Объект.РегламентированныйУчет;
		
	Попытка
		Объект.ОбменДанными.Загрузка = ИСТИНА;
		Объект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru='При записи документа %1 возникла ошибка. Запись отменена.'"), ВыбраннаяСтрока)
		);
	КонецПопытки;
	
КонецПроцедуры // ИнверсияРегламентногоУчета()


// Обновление параметров выбора
//
// Параметры:
//  ПараметрыВыбора		 - ФиксированныйМассив	 - Параметры выбора.
//  ИмяПараметра		 - Строка				 - Имя параметра выбора.
//  ЗначениеПараметра	 - Произвольный			 - Значение параметра выбора.
//
Процедура ОбновитьПараметрВыбора(ПараметрыВыбора, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(ПараметрыВыбора, ИмяПараметра, ЗначениеПараметра);
	
КонецПроцедуры // ОбновитьПараметрВыбора()

// Удаление параметра выбора.
//
// Параметры:
//  ПараметрыВыбора		 - ФиксированныйМассив	 - Параметры выбора.
//  ИмяПараметра		 - Строка				 - Имя параметра выбора.
//
Процедура УдалитьПараметрВыбора(ПараметрыВыбора, ИмяПараметра) Экспорт
	
	УправлениеДиалогомСервер.УдалитьПараметрВыбора(ПараметрыВыбора, ИмяПараметра);
	
КонецПроцедуры // УдалитьПараметрВыбора()

// Проверка запрета редактирования данных
//
// Параметры:
//  Ссылка						 - ЛюбаяСсылка				 - Ссылка на объект.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор	 - Идентификатор формы.
// 
// Возвращаемое значение:
//  Булево - Признак запрета редактирования данных.
//
Функция ПроверитьЗапретРедактированияДанных(Знач Ссылка, УникальныйИдентификаторФормы) Экспорт
	
	Возврат УправлениеДиалогомСервер.ПроверитьЗапретРедактированияДанных(Ссылка, УникальныйИдентификаторФормы);
	
КонецФункции // ПроверитьЗапретРедактированияДанных()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ТОВАРЫ"

// Общий обработчик события возникающего при выходе из режима редактирования строки.
//
// Параметры:
//  Объект               - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  НоваяСтрока          - Булево               - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево               - Истина, если произошла отмена редактирования.
//  ИмяТабличнойЧасти    - Строка               - Имя таблицы, при редактировании которой возникло данное событие.
//  СписокРеквизитов     - Строка               - Имена реквизитов, перечисленные через запятую, в формате
//                                                требований к свойствам структуры.
//                                                Например, "Код, Наименование, Родитель".
//                       - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//                                                псевдоним поля для возвращаемой структуры с результатом, а в качестве
//                                                значения (опционально) фактическое имя поля в таблице.
//                                                Если значение не определено, то имя поля берется из ключа.
//                       - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//                                                к свойствам структуры.
//                                                Служебные поля для получения данных:
//                                                _ИтогиОпераций, _Константа, _Право.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов с префиксом "Представление".
//
Функция ПриОкончанииРедактирования(Знач Объект,
		НоваяСтрока,
		ОтменаРедактирования,
		ИмяТабличнойЧасти = "Товары",
		СписокРеквизитов = Неопределено) Экспорт
	
	Возврат УправлениеДиалогомДокументаСервер.
				ПриОкончанииРедактирования(Объект, НоваяСтрока, ОтменаРедактирования, ИмяТабличнойЧасти, СписокРеквизитов);

КонецФункции // ПолучитьДанныеПриОкончанииРедактирования()

// Общий обработчик события получения состава полей, из которых формируется представление объекта или ссылки.
//
// Параметры:
//  Источник             - ДокументОбъект - Объект, для которого происходит формирование представления.
//  Поля                 - Массив - Массив, содержащий имена полей, которые нужны для формирования представления.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаПолученияПолейПредставления(Источник, Поля, СтандартнаяОбработка=ИСТИНА) Экспорт
		
	// Получим объект описания метаданных переданного источника
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Источник);
	
	// Проверим возможность выполнения дальнейших действий
	Если ОбъектМетаданных=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Получим объект описания параметров использования общего реквизита "Хоз.операция"
	ЭлементСостава = Метаданные.ОбщиеРеквизиты.ХозОперация.Состав.Найти(ОбъектМетаданных);
	
	// Получение специфического представление имеет смысл только для объектов имеющих общий реквизит "Хоз.операция".
	Если НЕ ЭлементСоставаОбщегоРеквизитаИспользуется(ЭлементСостава, Метаданные.ОбщиеРеквизиты.ХозОперация) Тогда
		Возврат;
	КонецЕсли;
	
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Указываем перечень полей на основании которых будет выполняться формирование представления.
	Поля.Добавить("ХозОперация");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("Ссылка");
	Поля.Добавить("ПометкаУдаления");
	Поля.Добавить("Проведен");
	
	Если ОбъектМетаданных.Реквизиты.Найти("ПризнакСпособаРасчета") <> Неопределено Тогда
		Поля.Добавить("ПризнакСпособаРасчета");
		
		Если ОбъектМетаданных.Реквизиты.Найти("ДляПробитияНаФР") <> Неопределено Тогда
			Поля.Добавить("ДляПробитияНаФР");	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаПолученияПолейПредставления()

// Устарела. Не используется.
// Общий обработчик события возникающего при получении представления объекта или ссылки.
//
// Параметры:
//  Данные- ДокументОбъект - Документ менеджер, для которого происходит формирование представления.
// 
// Возвращаемое значение:
//  Строка - Представление состояния объекта.
//
Функция ПолучитьСостояниеДокумента(Данные) Экспорт
	
	Состояние = "";
	Если НЕ ЗначениеЗаполнено(Данные.Ссылка) Тогда
		Состояние = " ("+ НСтр("ru = 'создание'") + ")";
	ИначеЕсли Данные.ПометкаУдаления Тогда
		Состояние = " ("+ НСтр("ru = 'помечен на удаление'") + ")";
	ИначеЕсли Данные.Проведен Тогда
		Состояние = " ("+ НСтр("ru = 'проведен'") + ")";
	КонецЕсли;
	Возврат Состояние;
	
КонецФункции // ПолучитьСостояниеДокумента()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОДГОТОВКИ ДАННЫХ ДЛЯ ПРОБИТИЯ ДОКУМЕНТА

// Получение шаблона чека.
//
// Параметры:
//  ОбщиеПараметры		 - Структура - Входные параметры чека.
//  ОписаниеОшибки		 - Строка	 - Описание ошибки шаблона чека.
//  ПараметрыПробития	 - Структура - Дополнительные параметры.
//
Процедура ПолучитьШаблонЧека(ОбщиеПараметры, ОписаниеОшибки, ПараметрыПробития) Экспорт
	
	УправлениеДиалогомДокументаСервер.ПолучитьШаблонЧека(ОбщиеПараметры, ОписаниеОшибки, ПараметрыПробития);
	
КонецПроцедуры // ПолучитьШаблонЧека()

// Получение шаблона чека.
//
// Параметры:
//  ОбщиеПараметры		 - Структура - Входные параметры чека.
//  ОписаниеОшибки		 - Строка	 - Описание ошибки шаблона чека.
//  ПараметрыПробития	 - Структура - Дополнительные параметры.
//
Процедура ПолучитьШаблонЧекаКоррекции(ОбщиеПараметры, ОписаниеОшибки, ПараметрыПробития) Экспорт
	
	УправлениеДиалогомДокументаСервер.ПолучитьШаблонЧекаКоррекции(ОбщиеПараметры, ОписаниеОшибки, ПараметрыПробития);
	
КонецПроцедуры // ПолучитьШаблонЧекаКоррекции()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОЛУЧЕНИЯ ПРЕДСТАВЛЕНИЯ ДОКУМЕНТА

// Возвращает состояние использования элемента состава общего реквизита.
//
// Параметры:
//  ЭлементСостава            - ОбъектМетаданных - элемент состава общего реквизита, использование которого требуется
//                                                 проверить.
//  МетаданныеОбщегоРеквизита - ОбъектМетаданных - объект метаданных общего реквизита, которому принадлежит
//                                                 ЭлементСостава.
//
// Возвращаемое значение:
//  Булево - Истина, если элемент состава используется, иначе Ложь.
//
Функция ЭлементСоставаОбщегоРеквизитаИспользуется(Знач ЭлементСостава, Знач МетаданныеОбщегоРеквизита) Экспорт
	
	Если ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
		Возврат Истина;
	ИначеЕсли ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда
		Возврат Ложь;
	Иначе
		Возврат МетаданныеОбщегоРеквизита.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ АВТОЗАПОЛНЕНИЯ СЧЕТОВ-ФАКТУР
// Определяет, нужно ли вызывать диалого с пользователем при перезаполнении счета-фактуры.
//
// Параметры:
//  Объект            - документ, при записи которого определяется необходимость вызова диалога.
//  
// Возвращаемое значение:
//  Булево - Истина, если диалог не нужен, иначе Ложь.
//
Функция ПерезаполнятьСчетФактуруБезусловно(Объект, ВидСчетФактуры) Экспорт
	
	Если ВидСчетФактуры = "СчетФактураВыданный" Тогда
		ВариантСоздания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ПодразделениеКомпании,
			"СозданиеОбновлениеСчетовФактурВыданных"
		);
	ИначеЕсли ВидСчетФактуры = "СчетФактураПолученный" Тогда
		ВариантСоздания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ПодразделениеКомпании,
			"СозданиеОбновлениеСчетовФактурПолученных"
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВариантСоздания) Тогда
		ПерезаполнятьСФВходящиеБезусловно = Перечисления.ВариантыСозданияОбновленияСФ.НеСоздавать;
	КонецЕсли;
	
	// Для УПД или при уч. политике СоздаватьОбновлять - обновляем безусловно, не спрашивая.	
	Если (ЕстьРеквизит(Объект, "ЭтоУниверсальныйДокумент") И Объект.ЭтоУниверсальныйДокумент)
		Или ВариантСоздания = Перечисления.ВариантыСозданияОбновленияСФ.СоздаватьОбновлять Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции 

// Получает итоговые суммовые показатели объекта.
//
// Параметры:
//  Объект - ЛюбаяСсылка - Описание объекта.
// 
// Возвращаемое значение:
//  Стуруктура - Суммовые показатели документа.
//
Функция СуммовыеИтогиПоДокументу(Объект) Экспорт
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ИтоговыеСуммы = МенеджерДокумента.РассчитатьИтогиОперации(Объект);
	
	Возврат ИтоговыеСуммы;
	
КонецФункции

#КонецОбласти