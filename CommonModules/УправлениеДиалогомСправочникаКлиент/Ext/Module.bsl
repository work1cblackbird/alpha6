// Общий модуль "Управление диалогом справочника (клиент)"

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ СПРАВОЧНИКА

// Общий обработчик события выбора одного из пунктов меню доступных хоз. операций
// 
// Параметры:
//  Форма             - УправляемаяФорма          - Форма, в которой возникло событие.
//  Команда           - КомандаФормы              - Команда, в которой возникло данное событие.
//  Объект            - ДанныеФормыСтруктура      - Объект, для которого выполняется обработка события.
//  Окно              - ОкноКлиентскогоПриложения - Содержит окно, в котором требуется открыть форму.
//  ПараметрыДействия - Структура                 - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаКомандыФормы(Форма, Команда, Объект, Окно=Неопределено, ПараметрыДействия=Неопределено) Экспорт
	
	// Обработаем в зависимости от выбранной команды
	Если Команда.Имя="РедактироватьСоставДополнительныхРеквизитов" Тогда
		УправлениеСвойствамиКлиент.ВыполнитьКоманду(Форма, Команда);
		
	ИначеЕсли Команда.Имя="РазрешитьРедактированиеРеквизитовОбъекта" Тогда
		ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(Форма,Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, "РазрешитьРедактированиеРеквизитовОбъекта"));
	ИначеЕсли ЛЕВ(Команда.Имя, 30)="КомандаДополнительнойОбработки" Тогда
		Возврат НЕ ДополнительныеОтчетыИОбработкиКлиентАльфаАвто.ВыполнитьНазначаемуюКомандуНаКлиенте(Форма, Команда.Имя);
		
	ИначеЕсли СтрНачинаетсяС(Команда.Имя, "ДополнительнаяФорма") Тогда
		
		УправлениеДиалогомКлиент.ОткрытьДополнительнуюФормуОбъекта(Форма, Объект.Ссылка, Форма.ИмяДополнительнойФормы);
		
	Иначе
		
		ПараметрыЗаписиНового = ЗащищенныеФункцииКлиент.СоздатьПараметрыЗаписиНовогоОбъектаНаКлиенте();
		ПараметрыЗаписиНового.ОбновитьИзмененный = Истина;
		ПараметрыЗаписиНового.РезультатСобытия   = Команда;

		// Общие команды списка и объекта могут быть обработаны только в случае существования ссылки в базе на объект.
		Если ЗащищенныеФункцииКлиент.ЗаписатьНовыйОбъектНаКлиенте(Форма, ПараметрыЗаписиНового) Тогда
			Возврат ЛОЖЬ;
		КонецЕсли;
		
		// Обработаем текущую команду как команду списка
		Возврат УправлениеСпискомСправочникаКлиент.ОбработкаКомандыФормы(Форма, Команда, Объект, Окно, ПараметрыДействия);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ЛОЖЬ;
	
КонецФункции // ОбработкаКомандыФормы()

// Обработчик события возникающего на клиенте при изменении программно добавленного реквизита.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ПолеФормы        - Элемент управления, в котором возникло данное событие.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПриИзмененииДополнительногоРеквизита(Форма, Элемент) Экспорт
	
	// Обработаем в зависимости от имени реквизита
	Если СтрНачинаетсяС(Элемент.Имя, "ДополнительныйРеквизитЗначение_") Тогда
		УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(Форма);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ЛОЖЬ;
	
КонецФункции // ПриИзмененииДополнительногоРеквизита()

// Общий обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Форма					- УправляемаяФорма		- Форма, в которой возникло событие.
//  РезультатОповещения		- Произвольный			- Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры	- Произвольный 			- Значение, которое было указано при создании описания оповещения.
//  Объект					- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры=Неопределено, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	// Вызываем общий обработчик действия
	Возврат УправлениеДиалогомКлиент.ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры, Объект);
	
КонецФункции // ОбработкаРезультатаОповещения()

// Отображает результат выполнения действия.
//
// Параметры:
//  Форма             - УправляемаяФорма          - Форма, в которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаРезультатаВыполненияДействия(Форма, ПараметрыДействия) Экспорт
	
	// Обработаем в зависимости от параметров действия
	Если ТипЗнч(ПараметрыДействия) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УправлениеДиалогомКлиент.ПоказатьРезультатВыполнения(Форма, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ - Булево           - Признак отказа от создания формы.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПриОткрытии(Форма, Отказ) Экспорт
	
	// !!!_view Изменение параметров отображения кнопок командной панели совершает лишний серверный вызов.
	// Требуется перенести в обработчик создания формы, но после того как будет исправлена ошибка платформы
	// по обращению SW788871.
	
	// Изменим режим отображения стандартных кнопок командной панели формы
	Форма.Элементы.ФормаСоздатьНаОсновании.Картинка              = БиблиотекаКартинок.ВводНаОсновании;
	Форма.Элементы.ФормаСоздатьНаОсновании.Отображение           = ОтображениеКнопки.Картинка;
	Форма.Элементы.ФормаЗаписать          .Отображение           = ОтображениеКнопки.Картинка;
	
	// Перенесем дублирующие действия командной панели "Взаимодействия" в подменю "Еще"
	Если ТипЗнч(Форма.Элементы.ФормаВзаимодействия)=Тип("ГруппаФормы") Тогда
		Для каждого ЭлементФормы Из Форма.Элементы.ФормаВзаимодействия.ПодчиненныеЭлементы Цикл
			ЭлементФормы.ТолькоВоВсехДействиях = ИСТИНА;
		КонецЦикла;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ПриОткрытии()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ                - Булево - Признак отказа от создания формы.
//  ЗавершениеРаботы     - Булево - Признак закрытия формы в процессе завершения работы приложения.
//  ТекстПредупреждения  - Булево - Сообщение пользователю не завершенной работе в данном окне.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПередЗакрытием(Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ПередЗакрытием()

// Устарелаю Будет удалена.
// Общий обработчик события возникающего на клиенте при закрытии формы.
//
// Параметры:
//  Форма            - УправляемаяФорма - Форма, в которой возникло событие.
//  ЗавершениеРаботы - Булево - Признак закрытия формы в процессе завершения работы приложения.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПриЗакрытии(Форма, ЗавершениеРаботы) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ПриЗакрытии()

// Устарела. Будет удалена.
// Обработчик события возникающего на клиенте при выборе объекта без привязки к элементу формы.
//
// Параметры:
//  Форма             - УправляемаяФорма          - Форма, в которой возникло событие.
//  ВыбранноеЗначение - Произвольный - Результат выбора в подчиненной форме.
//  Объект            - ДанныеФормыСтруктура      - Объект, для которого выполняется обработка события.
//  Окно              - ОкноКлиентскогоПриложения - Содержит окно, в котором требуется открыть форму.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаВыбора(Форма, ВыбранноеЗначение, Объект, Окно, ПараметрыДействия) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаВыбора()

// Устарела. Будет удалена
// Общий обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить.
//
// Параметры:
//  Форма               - УправляемаяФорма - Форма, в которой возникло событие.
//  ИмяСобытия          - Строка           - Имя, идентифицирующее событие.
//  Параметр            - Произвольный     - Параметр сообщения.
//  Источник            - Произвольный     - Источник события.
//  ПараметрыДействия   - Структура        - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ПараметрыДействия=Неопределено) Экспорт
	
	// Обработаем в зависимости от вида события
	Если Источник="ПодключаемоеОборудование" Тогда
		Если НЕ Форма.ВводДоступен() Тогда
			Возврат ЛОЖЬ;
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПараметрыДействия.Вставить("КодКарты", Параметр[0]);
			Возврат ИСТИНА;
			
		ИначеЕсли ИмяСобытия = "ScanData" Тогда
			
			ШтрихКод = ?((Параметр.Количество() > 1) И (Параметр[1] <> Неопределено), Параметр[1][1], Параметр[0]);
			
			// Удалим из кода маркировки криптохвосты
			СтруктураМаркировки = МаркировкаТоваровКлиент.РазобратьШтриховойКодТовара(ШтрихКод);
			
			Если МаркировкаТоваровКлиентСервер.ЭтоКодТовараВФорматеDataMatrixGS1(ШтрихКод, СтруктураМаркировки) Тогда
				МаркировкаТоваровКлиентСервер.ЗаписатьПолныйШтрихкод(СтруктураМаркировки);
				ШтрихКод = МаркировкаТоваровКлиентСервер.СформироватьКодМаркировки(СтруктураМаркировки);
			КонецЕсли;
			
			ПараметрыДействия.Вставить("ШтрихКод", ШтрихКод);
			Возврат ИСТИНА;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ПрисоединенныйФайл"
		И ПолучитьЗначениеПараметраСтруктуры(Параметр, "ВладелецФайла") = Форма.Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ДополнительныеПараметры") И ПолучитьЗначениеПараметраСтруктуры(Параметр.ДополнительныеПараметры, "ТипОперации") = "ДобавлениеКартинки"
			И Источник <> Неопределено Тогда
			ПараметрыДействия.Вставить("НоваяКартинкаОписания", ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник));
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		Возврат УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(Форма, ИмяСобытия, Параметр);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ЛОЖЬ;
	
КонецФункции // ОбработкаОповещения()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте перед выполнением записи объекта из формы.
//
// Параметры:
//  Форма           - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ           - Булево         - Признак отказа от записи.
//  ПараметрыЗаписи - Структура      - Структура, содержащая параметры записи.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	Справочник = СтрНайти(Форма.ПолноеИмяОбъекта, "Справочник") > 0;
	КлючеваяОперация = "Запись"
		+ ?(Справочник, "Справочника", "ПланаВидаХарактеристик")
		+ СтрЗаменить(Форма.ПолноеИмяОбъекта, ?(Справочник, "Справочник.", "ПланВидовХарактеристик."), "");
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(, КлючеваяОперация);
		
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ПередЗаписью()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте после записи объекта и после завершения транзакции.
//
// Параметры:
//  Форма           - УправляемаяФорма - Форма, в которой возникло событие.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ПослеЗаписи()

#КонецОбласти
