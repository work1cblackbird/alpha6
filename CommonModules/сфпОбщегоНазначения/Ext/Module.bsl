#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Позволяет определить, есть ли среди реквизитов объекта реквизит с переданным именем.
//
// Параметры:
//  ИмяРеквизита - Строка - имя реквизита;
//  МетаданныеОбъекта - ОбъектМетаданных - объект, в котором требуется проверить наличие реквизита.
//
// Возвращаемое значение:
//  Булево.
//
Функция сфпЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта) Экспорт

	Возврат НЕ (МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция сфпЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = сфпРазложитьСтрокуВМассивПодстрок(Реквизиты, ",", Ложь);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение сфпПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"), Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка       - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  ИмяРеквизита - Строка - имена реквизитов, перечисленные через запятую, в формате
//                 требований к свойствам структуры.
//                 Например, "Код, Наименование, Родитель".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция сфпЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = сфпЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции 

// Проверка того, что переданный тип является ссылочным типом данных.
// Для типа "Неопределено" возвращается Ложь.
//
// Параметры:
//  Тип - Тип - Проверяемый тип.
//
// Возвращаемое значение:
//  Булево.
//
Функция сфпЭтоСсылка(Тип) Экспорт
	
	Возврат Тип <> Тип("Неопределено") 
		И (Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип));
	
КонецФункции

// Отключает напоминание, если оно есть.
// Если напоминание периодическое, подключает его на ближайшую дату по расписанию.
//
// Параметры:
//  ПараметрыНапоминания   - Структура - Параметры напоминания.
//  ПодключатьПоРасписанию - Булево - Подключать по расписанию.
//
Процедура сфпОтключитьНапоминание(ПараметрыНапоминания, ПодключатьПоРасписанию = Истина) Экспорт
	
	Если Метаданные.РегистрыСведений.Найти("НапоминанияПользователя") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ищем существующую запись
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НапоминанияПользователя.Пользователь,
	|	НапоминанияПользователя.ВремяСобытия,
	|	НапоминанияПользователя.Источник,
	|	НапоминанияПользователя.СрокНапоминания,
	|	НапоминанияПользователя.Описание,
	|	НапоминанияПользователя.СпособУстановкиВремениНапоминания,
	|	НапоминанияПользователя.Расписание,
	|	НапоминанияПользователя.ИнтервалВремениНапоминания,
	|	НапоминанияПользователя.ИмяРеквизитаИсточника
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|ГДЕ
	|	НапоминанияПользователя.Пользователь = &Пользователь
	|	И НапоминанияПользователя.ВремяСобытия = &ВремяСобытия
	|	И НапоминанияПользователя.Источник = &Источник";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыНапоминания.Пользователь);
	Запрос.УстановитьПараметр("ВремяСобытия", ПараметрыНапоминания.ВремяСобытия);
	Запрос.УстановитьПараметр("Источник", ПараметрыНапоминания.Источник);
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Напоминание = Неопределено;
	Если РезультатЗапроса.Количество() > 0 Тогда
		Напоминание = РезультатЗапроса[0];
	КонецЕсли;
	
	// Удаляем существующую запись.
	НаборЗаписей = РегистрыСведений["НапоминанияПользователя"].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыНапоминания.Пользователь);
	НаборЗаписей.Отбор.Источник.Установить(ПараметрыНапоминания.Источник);
	НаборЗаписей.Отбор.ВремяСобытия.Установить(ПараметрыНапоминания.ВремяСобытия);
	
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	СледующаяДатаПоРасписанию = Неопределено;
	ОпределенаСледующаяДатаПоРасписанию = Ложь;
	
	// Подключаем следующее напоминание по расписанию.
	Если ПодключатьПоРасписанию И Напоминание <> Неопределено Тогда
		Расписание = Напоминание.Расписание.Получить();
		Если Расписание <> Неопределено Тогда
			Если Расписание.ПериодПовтораДней > 0 Тогда
				СледующаяДатаПоРасписанию = сфпПолучитьБлижайшуюДатуСобытияПоРасписанию(Расписание, ПараметрыНапоминания.ВремяСобытия + 1);
			КонецЕсли;
			ОпределенаСледующаяДатаПоРасписанию = СледующаяДатаПоРасписанию <> Неопределено;
		КонецЕсли;
		
		Если ОпределенаСледующаяДатаПоРасписанию Тогда
			Напоминание.ВремяСобытия = СледующаяДатаПоРасписанию;
			Напоминание.СрокНапоминания = Напоминание.ВремяСобытия - Напоминание.ИнтервалВремениНапоминания;
			сфпПодключитьНапоминание(Напоминание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Создает напоминание пользователя. Если по объекту уже есть напоминание, то перезаписывает его.
//
// Параметры:
//  ПараметрыНапоминания    - Структура - Параметры напоминания.
//  ОбновитьСрокНапоминания - Булево - Обновить срок напоминания.
//
Процедура сфпПодключитьНапоминание(ПараметрыНапоминания, ОбновитьСрокНапоминания = Ложь) Экспорт
	
	Если Метаданные.РегистрыСведений.Найти("НапоминанияПользователя") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений["НапоминанияПользователя"].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыНапоминания.Пользователь);
	НаборЗаписей.Отбор.Источник.Установить(ПараметрыНапоминания.Источник);
	
	Если ОбновитьСрокНапоминания Тогда
		НаборЗаписей.Отбор.ВремяСобытия.Установить(ПараметрыНапоминания.ВремяСобытия);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		Для Каждого Запись Из НаборЗаписей Цикл
			ЗаполнитьЗначенияСвойств(Запись, ПараметрыНапоминания);
		КонецЦикла;
	Иначе
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			ЗанятоеВремя = НаборЗаписей.Выгрузить(,"ВремяСобытия").ВыгрузитьКолонку("ВремяСобытия");
			Пока ЗанятоеВремя.Найти(ПараметрыНапоминания.ВремяСобытия) <> Неопределено Цикл
				ПараметрыНапоминания.ВремяСобытия = ПараметрыНапоминания.ВремяСобытия + 1;
			КонецЦикла;
			
			Для Каждого ТекЗапись Из НаборЗаписей Цикл
				НаборЗаписей.Удалить(ТекЗапись);
			КонецЦикла;
		КонецЕсли;
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыНапоминания);
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Проверяет физическое наличие записи в информационной базе данных о переданном значении ссылки.
//
// Параметры:
//  ЛюбаяСсылка - ЛюбаяСсылка - значение любой ссылки информационной базы данных.
// 
// Возвращаемое значение:
//  Булево.
//
Функция сфпСсылкаСуществует(ЛюбаяСсылка) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	[ИмяТаблицы]
	|ГДЕ
	|	Ссылка = &Ссылка
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяТаблицы]", сфпИмяТаблицыПоСсылке(ЛюбаяСсылка));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ЛюбаяСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает доступность хотя бы одной из указанных ролей или полноправность
// пользователя (текущего или указанного) без учета привилегированного режима.
//
// Параметры:
//  ИменаРолей   - Строка - имена ролей, разделенные запятыми, доступность которых проверяется.
//
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ;
//                 СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи - осуществляется поиск
//                    пользователя ИБ по уникальному идентификатору,
//                    заданному в реквизите ИдентификаторПользователяИБ
//                    Прим.: если пользователь ИБ не найден, возвращается Ложь.
//                 ПользовательИнформационнойБазы - проверяется указанный
//                    пользователь ИБ
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из указанных ролей доступна,
//           или функция ЭтоПолноправныйПользователь(Пользователь) возвращает Истина.
//
Функция сфпРолиДоступны(Знач ИменаРолей, Пользователь = Неопределено) Экспорт
	
	Если сфпЭтоПолноправныйПользователь(Пользователь, , Ложь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователь = Неопределено ИЛИ Пользователь = сфпАвторизованныйПользователь() Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		
	ИначеЕсли ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
		
	Иначе
		// Указан не текущий пользователь.
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			сфпЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
		
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УказанТекущийПользовательИБ = ПользовательИБ.УникальныйИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	
	МассивИменРолей = сфпОбщегоНазначенияКлиентСервер.сфпРазложитьСтрокуВМассивПодстрок(ИменаРолей);
	Для каждого ИмяРоли Из МассивИменРолей Цикл
		
		Если УказанТекущийПользовательИБ Тогда
			Если РольДоступна(СокрЛП(ИмяРоли)) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.Найти(СокрЛП(ИмяРоли))) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание:
//  В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//  рекомендуется использовать функцию платформы СтрШаблон.
Функция сфпПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт 
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = сфпПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

// Функция - аналог платформенной функции СтрРазделить (см. Справку)
//
Функция сфпРазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
	Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции  

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
Функция сфпПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

// Возвращает ближайшую дату по расписанию относительно даты, переданной в параметре.
//
// Параметры:
//  Расписание - РасписаниеРегламентногоЗадания - любое расписание.
//  ПредыдущаяДата - Дата - дата предыдущего события по расписанию.
//
// Возвращаемое значение:
//   Дата - дата и время следующего события по расписанию.
//
Функция сфпПолучитьБлижайшуюДатуСобытияПоРасписанию(Расписание, ПредыдущаяДата = '000101010000') 

	Результат = Неопределено;
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ДатаОтсчета = ПредыдущаяДата;
	Если Не ЗначениеЗаполнено(ДатаОтсчета) Тогда
		ДатаОтсчета = ТекущаяДатаСеанса;
	КонецЕсли;
	ДатаОтсчета = Макс(ДатаОтсчета, ТекущаяДатаСеанса);
	
	Календарь = сфпПолучитьКалендарьНаБудущее(365*4+1, ДатаОтсчета, Расписание.ДатаНачала, Расписание.ПериодПовтораДней, Расписание.ПериодНедель);
	
	ДниНедели = Расписание.ДниНедели;
	Если ДниНедели.Количество() = 0 Тогда
		ДниНедели = Новый Массив;
		Для День = 1 По 7 Цикл
			ДниНедели.Добавить(День);
		КонецЦикла;
	КонецЕсли;
	
	Месяцы = Расписание.Месяцы;
	Если Месяцы.Количество() = 0 Тогда
		Месяцы = Новый Массив;
		Для Месяц = 1 По 12 Цикл
			Месяцы.Добавить(Месяц);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ Календарь ИЗ &Календарь КАК Календарь";
	Запрос.УстановитьПараметр("Календарь", Календарь);
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ДатаНачала",			Расписание.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца",			Расписание.ДатаКонца);
	Запрос.УстановитьПараметр("ДниНедели",			ДниНедели);
	Запрос.УстановитьПараметр("Месяцы",				Месяцы);
	Запрос.УстановитьПараметр("ДеньВМесяце",		Расписание.ДеньВМесяце);
	Запрос.УстановитьПараметр("ДеньНеделиВМесяце",	Расписание.ДеньНеделиВМесяце);
	Запрос.УстановитьПараметр("ПериодПовтораДней",	?(Расписание.ПериодПовтораДней = 0,1,Расписание.ПериодПовтораДней));
	Запрос.УстановитьПараметр("ПериодНедель",		?(Расписание.ПериодНедель = 0,1,Расписание.ПериодНедель));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Календарь.Дата,
	|	Календарь.НомерМесяца,
	|	Календарь.НомерДняНеделиВМесяце,
	|	Календарь.НомерДняНеделиСКонцаМесяца,
	|	Календарь.НомерДняВМесяце,
	|	Календарь.НомерДняВМесяцеСКонцаМесяца,
	|	Календарь.НомерДняВНеделе,
	|	Календарь.НомерДняВПериоде,
	|	Календарь.НомерНеделиВПериоде
	|ИЗ
	|	Календарь КАК Календарь
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Календарь.Дата >= &ДатаНачала
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ДатаКонца = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Календарь.Дата <= &ДатаКонца
	|		КОНЕЦ
	|	И Календарь.НомерДняВНеделе В(&ДниНедели)
	|	И Календарь.НомерМесяца В(&Месяцы)
	|	И ВЫБОР
	|			КОГДА &ДеньВМесяце = 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ДеньВМесяце > 0
	|						ТОГДА Календарь.НомерДняВМесяце = &ДеньВМесяце
	|					ИНАЧЕ Календарь.НомерДняВМесяцеСКонцаМесяца = -&ДеньВМесяце
	|				КОНЕЦ
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ДеньНеделиВМесяце = 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ДеньНеделиВМесяце > 0
	|						ТОГДА Календарь.НомерДняНеделиВМесяце = &ДеньНеделиВМесяце
	|					ИНАЧЕ Календарь.НомерДняНеделиСКонцаМесяца = -&ДеньНеделиВМесяце
	|				КОНЕЦ
	|		КОНЕЦ
	|	И Календарь.НомерДняВПериоде = &ПериодПовтораДней
	|	И Календарь.НомерНеделиВПериоде = &ПериодНедель";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		БлижайшаяДата = Выборка.Дата;
		ВремяОтсчета = '00010101';
		Если НачалоДня(БлижайшаяДата) = НачалоДня(ДатаОтсчета) Тогда
			ВремяОтсчета = ВремяОтсчета + (ДатаОтсчета-НачалоДня(ДатаОтсчета));
		КонецЕсли;
		
		БлижайшееВремя = сфпПолучитьБлижайшееВремяИзРасписания(Расписание, ВремяОтсчета);
		Если БлижайшееВремя <> Неопределено Тогда
			Результат = БлижайшаяДата + (БлижайшееВремя - '00010101');
		Иначе
			Если Выборка.Следующий() Тогда
				Время = сфпПолучитьБлижайшееВремяИзРасписания(Расписание);
				Результат = Выборка.Дата + (Время - '00010101');
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция сфпПолучитьКалендарьНаБудущее(КоличествоДнейКалендаря, ДатаОтсчета, Знач ДатаНачалаПериодичности = Неопределено, Знач ПериодДней = 1, Знач ПериодНедель = 1) 
	
	Если ПериодНедель = 0 Тогда 
		ПериодНедель = 1;
	КонецЕсли;
	
	Если ПериодДней = 0 Тогда
		ПериодДней = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачалаПериодичности) Тогда
		ДатаНачалаПериодичности = ДатаОтсчета;
	КонецЕсли;
	
	Календарь = Новый ТаблицаЗначений;
	Календарь.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты()));
	Календарь.Колонки.Добавить("НомерМесяца", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
	Календарь.Колонки.Добавить("НомерДняНеделиВМесяце", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1,0,ДопустимыйЗнак.Неотрицательный)));
	Календарь.Колонки.Добавить("НомерДняНеделиСКонцаМесяца", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1,0,ДопустимыйЗнак.Неотрицательный)));
	Календарь.Колонки.Добавить("НомерДняВМесяце", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
	Календарь.Колонки.Добавить("НомерДняВМесяцеСКонцаМесяца", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
	Календарь.Колонки.Добавить("НомерДняВНеделе", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));	
	Календарь.Колонки.Добавить("НомерДняВПериоде", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0,ДопустимыйЗнак.Неотрицательный)));	
	Календарь.Колонки.Добавить("НомерНеделиВПериоде", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0,ДопустимыйЗнак.Неотрицательный)));
	
	Дата = НачалоДня(ДатаОтсчета);
	ДатаНачалаПериодичности = НачалоДня(ДатаНачалаПериодичности);
	НомерДняВПериоде = 0;
	НомерНеделиВПериоде = 0;
	
	Если ДатаНачалаПериодичности <= Дата Тогда
		КоличествоДней = (Дата - ДатаНачалаПериодичности)/60/60/24;
		НомерДняВПериоде = КоличествоДней - Цел(КоличествоДней/ПериодДней)*ПериодДней;
		
		КоличествоНедель = Цел(КоличествоДней / 7);
		НомерНеделиВПериоде = КоличествоНедель - Цел(КоличествоНедель/ПериодНедель)*ПериодНедель;
	КонецЕсли;
	
	Если НомерДняВПериоде = 0 Тогда 
		НомерДняВПериоде = ПериодДней;
	КонецЕсли;
	
	Если НомерНеделиВПериоде = 0 Тогда 
		НомерНеделиВПериоде = ПериодНедель;
	КонецЕсли;
	
	Для Счетчик = 0 По КоличествоДнейКалендаря - 1 Цикл
		
		Дата = НачалоДня(ДатаОтсчета) + Счетчик * 60*60*24;
		НоваяСтрока = Календарь.Добавить();
		НоваяСтрока.Дата = Дата;
		НоваяСтрока.НомерМесяца = Месяц(Дата);
		НоваяСтрока.НомерДняНеделиВМесяце = Цел((Дата - НачалоМесяца(Дата))/60/60/24/7) + 1;
		НоваяСтрока.НомерДняНеделиСКонцаМесяца = Цел((КонецМесяца(НачалоДня(Дата)) - Дата)/60/60/24/7) + 1;
		НоваяСтрока.НомерДняВМесяце = День(Дата);
		НоваяСтрока.НомерДняВМесяцеСКонцаМесяца = День(КонецМесяца(НачалоДня(Дата))) - День(Дата) + 1;
		НоваяСтрока.НомерДняВНеделе = ДеньНедели(Дата);
		
		Если ДатаНачалаПериодичности <= Дата Тогда
			НоваяСтрока.НомерДняВПериоде = НомерДняВПериоде;
			НоваяСтрока.НомерНеделиВПериоде = НомерНеделиВПериоде;
			
			НомерДняВПериоде = ?(НомерДняВПериоде+1 > ПериодДней, 1, НомерДняВПериоде+1);
			
			Если НоваяСтрока.НомерДняВНеделе = 1 Тогда
				НомерНеделиВПериоде = ?(НомерНеделиВПериоде+1 > ПериодНедель, 1, НомерНеделиВПериоде+1);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Календарь;
	
КонецФункции

Функция сфпПолучитьБлижайшееВремяИзРасписания(Расписание, Знач ВремяОтсчета = '000101010000')
	
	Результат = Неопределено;
	
	СписокЗначений = Новый СписокЗначений;
	
	Если Расписание.ДетальныеРасписанияДня.Количество() = 0 Тогда
		СписокЗначений.Добавить(Расписание.ВремяНачала);
	Иначе
		Для Каждого РасписаниеДня Из Расписание.ДетальныеРасписанияДня Цикл
			СписокЗначений.Добавить(РасписаниеДня.ВремяНачала);
		КонецЦикла;
	КонецЕсли;
	
	СписокЗначений.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Для Каждого ВремяДня Из СписокЗначений Цикл
		Если ВремяОтсчета <= ВремяДня.Значение Тогда
			Результат = ВремяДня.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает полное имя объекта метаданных по переданному значению ссылки.
// Примеры:
//  "Справочник.Номенклатура";
//  "Документ.ПриходнаяНакладная".
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - объект, для которого необходимо получить имя таблицы ИБ.
// 
// Возвращаемое значение:
//  Строка - полное имя объекта метаданных для указанного объекта.
//
Функция сфпИмяТаблицыПоСсылке(Ссылка) Экспорт
	
	Возврат Ссылка.Метаданные().ПолноеИмя();
	
КонецФункции

Функция сфпАвторизованныйПользователь()
	
	Возврат сфпОбщегоНазначенияКлиентСервер.сфпАвторизованныйПользователь();
	
КонецФункции

// Проверяет, является ли текущий или указанный пользователь полноправным.
// 
// Полноправным считается пользователь, который
// а) при не пустом списке пользователей информационной базы:
// - в локальном режиме работы (без разделения данных) имеет роль ПолныеПрава и
//   роль для администрирования системы,
// - в модели сервиса (с разделением данных) имеет роль ПолныеПрава;
// б) при пустом списке пользователей информационной базы
//    основная роль конфигурации не задана или ПолныеПрава.
//
// Параметры:
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ;
//                 СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи - осуществляется поиск
//                    пользователя ИБ по уникальному идентификатору,
//                    заданному в реквизите ИдентификаторПользователяИБ.
//                    Прим.: если пользователь ИБ не найден, возвращается Ложь.
//                 ПользовательИнформационнойБазы - проверяется указанный
//                    пользователь ИБ.
//
//  ПроверятьПраваАдминистрированияСистемы - Булево - если задано Истина, тогда
//                 проверяется наличие роли для администрирования системы.
//                 Начальное значение: Ложь.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда
//                 функция возвращает Истина, когда установлен привилегированный режим.
//                 Начальное значение: Истина.
//
// Возвращаемое значение:
//  Булево.
//
Функция сфпЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	Если УчитыватьПривилегированныйРежим И ПривилегированныйРежим() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
		
	ИначеЕсли Пользователь = Неопределено ИЛИ Пользователь = сфпАвторизованныйПользователь() Тогда
		ПользовательИБ = ТекущийПользовательИБ;
	Иначе
		
		Если Не ЗначениеЗаполнено(Пользователь) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Задан не текущий пользователь.
		Если Не ЗначениеЗаполнено(Пользователь) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			сфпЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
		
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьРольПолныеПрава = Истина;
	ПроверитьРольАдминистратораСистемы = Истина;
	
	Если сфпОбщегоНазначенияПовтИсп.сфпРазделениеВключено() Тогда
		Если ПроверятьПраваАдминистрированияСистемы Тогда
			ПроверитьРольПолныеПрава = Ложь;
		Иначе
			ПроверитьРольАдминистратораСистемы = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПользовательИБ.УникальныйИдентификатор <> ТекущийПользовательИБ.УникальныйИдентификатор Тогда
		// Для не текущего пользователя ИБ проверяются роли в записанном пользователе ИБ.
		Если ПроверитьРольПолныеПрава
		   И НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли["ПолныеПрава"]) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьРольАдминистратораСистемы
		   И НЕ ПользовательИБ.Роли.Содержит(сфпРольАдминистратораСистемы()) Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	Иначе
		Если сфпОбщегоНазначенияПовтИсп.сфпПривилегированныйРежимУстановленПриЗапуске() Тогда
			// Когда клиентское приложение запущено с параметром UsePrivilegedMode, тогда
			// пользователь является полноправным, если привилегированный режим установлен.
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПользовательИБ.Имя) И Метаданные.ОсновныеРоли.Количество() = 0 Тогда
			// Когда основная роль не указана, тогда у неуказанного пользователя
			// есть все права (как в привилегированном режиме).
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПользовательИБ.Имя)
		   И ПривилегированныйРежим()
		   И ПравоДоступа("Администрирование", Метаданные, ПользовательИБ) Тогда
			// Когда у неуказанного пользователя есть право Администрирование,
			// тогда привилегированный режим учитывается всегда для поддержки
			// параметра запуска UsePrivilegedMode у не клиентских приложений.
			Возврат Истина;
		КонецЕсли;
		
		// Для текущего пользователя ИБ проверяются роли не в записанном пользователе ИБ,
		// а роли в текущем сеансе.
		Если ПроверитьРольПолныеПрава И Метаданные.Роли.Найти("ПолныеПрава") <> Неопределено Тогда
			Если НЕ РольДоступна("ПолныеПрава") Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
		
		Если ПроверитьРольАдминистратораСистемы Тогда
			ИмяРоли = сфпРольАдминистратораСистемы();
			Если Метаданные.Роли.Найти(ИмяРоли) <> Неопределено Тогда
		  		Если НЕ РольДоступна(ИмяРоли) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает роль, предоставляющую права администрирования системы.
//
// Возвращаемое значение:
//  ОбъектМетаданных: Роль.
//
Функция сфпРольАдминистратораСистемы() Экспорт
	
	Если Метаданные.Роли.Найти("ПолныеПрава") <> Неопределено Тогда
		Возврат Метаданные.Роли["ПолныеПрава"];
		
	ИначеЕсли Метаданные.Роли.Найти("АдминистраторСистемы") <> Неопределено Тогда
		РольАдминистратораСистемы = Метаданные.Роли["АдминистраторСистемы"];
		Если ПравоДоступа("Администрирование", Метаданные, РольАдминистратораСистемы) Тогда
			Возврат РольАдминистратораСистемы;
		КонецЕсли;

	Иначе
		Возврат Метаданные.Роли.Получить(0);
	КонецЕсли;

КонецФункции

// Копирует значения свойств пользователя ИБ с преобразованием
// в/из строковых идентификаторов для основного интерфейса,
// языка, режима запуска и ролей.
//
//  Несуществующие свойства в источнике или приемнике не копируются.
//
//  Свойства Пароль и СохраняемоеЗначениеПароля не копируются, если
// значения в Источнике равно Неопределено.
//
//  Свойства АутентификацияОС, АутентификацияСтандартная,
// АутентификацияOpenID и ПользовательОС не переустанавливается,
// если совпадают, когда Приемник типа ПользовательИнформационнойБазы.
//
//  Свойства УникальныйИдентификатор, ПарольУстановлен, СтарыйПароль
// не копируются, если Приемник типа ПользовательИнформационнойБазы.
//
//  Преобразование выполняется только для типа Источника или Приемника.
// ПользовательИнформационнойБазы.
//
// Параметры:
//  Приемник     - Структура, ПользовательИнформационнойБазы, УправляемаяФорма - подмножество
//                 свойств из НовоеОписаниеПользователяИБ().
//
//  Источник     - Структура, ПользовательИнформационнойБазы, УправляемаяФорма - как и приемник,
//                 но типы обратные, т.е. когда Приемник типа ПользовательИнформационнойБазы,
//                 тогда в Источник не типа ПользовательИнформационнойБазы.
// 
//  КопируемыеСвойства  - Строка - список свойств через запятую, которые нужно скопировать (без префикса).
//  ИсключаемыеСвойства - Строка - список свойств через запятую, которые не нужно копировать (без префикса).
//  ПрефиксСвойств      - Строка - начальное имя для Источника или Приемника типа НЕ Структура.
//
Процедура СкопироватьСвойстваПользователяИБ(Приемник,
                                            Источник,
                                            КопируемыеСвойства = "",
                                            ИсключаемыеСвойства = "",
                                            ПрефиксСвойств = "") Экспорт
	
	Если ТипЗнч(Приемник) = Тип("ПользовательИнформационнойБазы")
	   И ТипЗнч(Источник) = Тип("ПользовательИнформационнойБазы")
	   
	 Или ТипЗнч(Приемник) = Тип("ПользовательИнформационнойБазы")
	   И ТипЗнч(Источник) <> Тип("Структура")
	   И ТипЗнч(Источник) <> Тип("ФормаКлиентскогоПриложения")
	   
	 Или ТипЗнч(Источник) = Тип("ПользовательИнформационнойБазы")
	   И ТипЗнч(Приемник) <> Тип("Структура")
	   И ТипЗнч(Приемник) <> Тип("ФормаКлиентскогоПриложения") Тогда
		
		ВызватьИсключение
			НСтр("ru = 'Недопустимое значение параметра Приемник или Источник
			           |в процедуре СкопироватьСвойстваПользователяИБ общего модуля Пользователи.'");
	КонецЕсли;
	
	ВсеСвойства = НовоеОписаниеПользователяИБ();
	
	Если ЗначениеЗаполнено(КопируемыеСвойства) Тогда
		СтруктураКопируемыхСвойств = Новый Структура(КопируемыеСвойства);
	Иначе
		СтруктураКопируемыхСвойств = ВсеСвойства;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсключаемыеСвойства) Тогда
		СтруктураИсключаемыхСвойств = Новый Структура(ИсключаемыеСвойства);
	Иначе
		СтруктураИсключаемыхСвойств = Новый Структура;
	КонецЕсли;
	
	// СофтФон
	//Если СтандартныеПодсистемыСервер.ЭтоУчебнаяПлатформа() Тогда
	//	СтруктураИсключаемыхСвойств.Вставить("АутентификацияОС");
	//	СтруктураИсключаемыхСвойств.Вставить("ПользовательОС");
	//КонецЕсли;
	
	ПарольУстановлен = Ложь;
	
	Для каждого КлючИЗначение Из ВсеСвойства Цикл
		Свойство = КлючИЗначение.Ключ;
		
		Если НЕ СтруктураКопируемыхСвойств.Свойство(Свойство)
		 ИЛИ СтруктураИсключаемыхСвойств.Свойство(Свойство) Тогда
		
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Источник) = Тип("ПользовательИнформационнойБазы")
		   И (    ТипЗнч(Приемник) = Тип("Структура")
		      Или ТипЗнч(Приемник) = Тип("ФормаКлиентскогоПриложения") ) Тогда
			
			Если Свойство = "Пароль"
			 ИЛИ Свойство = "СтарыйПароль" Тогда
				
				ЗначениеСвойства = Неопределено;
				
			ИначеЕсли Свойство = "ОсновнойИнтерфейс" Тогда
				ЗначениеСвойства = ?(Источник.ОсновнойИнтерфейс = Неопределено,
				                     "",
				                     Источник.ОсновнойИнтерфейс.Имя);
			
			ИначеЕсли Свойство = "РежимЗапуска" Тогда
				ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(Источник.РежимЗапуска);
				ЗначениеСвойства = Сред(ПолноеИмяЗначения, Найти(ПолноеИмяЗначения, ".") + 1);
				
			ИначеЕсли Свойство = "Язык" Тогда
				ЗначениеСвойства = ?(Источник.Язык = Неопределено,
				                     "",
				                     Источник.Язык.Имя);
				
			ИначеЕсли Свойство = "Роли" Тогда
				
				ВременнаяСтруктура = Новый Структура("Роли", Новый ТаблицаЗначений);
				ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Приемник);
				Если ТипЗнч(ВременнаяСтруктура.Роли) = Тип("ТаблицаЗначений") Тогда
					Продолжить;
				ИначеЕсли ВременнаяСтруктура.Роли = Неопределено Тогда
					Приемник.Роли = Новый Массив;
				Иначе
					Приемник.Роли.Очистить();
				КонецЕсли;
				
				Для каждого Роль Из Источник.Роли Цикл
					Приемник.Роли.Добавить(Роль.Имя);
				КонецЦикла;
				
				Продолжить;
			Иначе
				ЗначениеСвойства = Источник[Свойство];
			КонецЕсли;
			
			ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
			ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, ЗначениеСвойства);
			ЗаполнитьЗначенияСвойств(Приемник, ВременнаяСтруктура);
		Иначе
			Если ТипЗнч(Источник) = Тип("Структура") Тогда
				Если Источник.Свойство(Свойство) Тогда
					ЗначениеСвойства = Источник[Свойство];
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
				ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, Новый ТаблицаЗначений);
				ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Источник);
				ЗначениеСвойства = ВременнаяСтруктура[ПолноеИмяСвойства];
				Если ТипЗнч(ЗначениеСвойства) = Тип("ТаблицаЗначений") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(Приемник) = Тип("ПользовательИнформационнойБазы") Тогда
			
				Если Свойство = "УникальныйИдентификатор"
				 ИЛИ Свойство = "СтарыйПароль"
				 ИЛИ Свойство = "ПарольУстановлен" Тогда
					
					Продолжить;
					
				ИначеЕсли Свойство = "АутентификацияOpenID"
				      ИЛИ Свойство = "АутентификацияСтандартная"
				      ИЛИ Свойство = "АутентификацияОС"
				      ИЛИ Свойство = "ПользовательОС" Тогда
					
					Если Приемник[Свойство] <> ЗначениеСвойства Тогда
						Приемник[Свойство] = ЗначениеСвойства;
					КонецЕсли;
					
				ИначеЕсли Свойство = "Пароль" Тогда
					Если ЗначениеСвойства <> Неопределено Тогда
						Приемник.Пароль = ЗначениеСвойства;
						ПарольУстановлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Свойство = "СохраняемоеЗначениеПароля" Тогда
					Если ЗначениеСвойства <> Неопределено
					   И НЕ ПарольУстановлен Тогда
						Приемник.СохраняемоеЗначениеПароля = ЗначениеСвойства;
					КонецЕсли;
					
				ИначеЕсли Свойство = "ОсновнойИнтерфейс" Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						Приемник.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Найти(ЗначениеСвойства);
					Иначе
						Приемник.ОсновнойИнтерфейс = Неопределено;
					КонецЕсли;
				
				ИначеЕсли Свойство = "РежимЗапуска" Тогда
					Если ЗначениеСвойства = "Авто"
					 ИЛИ ЗначениеСвойства = "ОбычноеПриложение"
					 ИЛИ ЗначениеСвойства = "УправляемоеПриложение" Тогда
						
						Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения[ЗначениеСвойства];
					Иначе
						Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто;
					КонецЕсли;
					
				ИначеЕсли Свойство = "Язык" Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						Приемник.Язык = Метаданные.Языки.Найти(ЗначениеСвойства);
					Иначе
						Приемник.Язык = Неопределено;
					КонецЕсли;
					
				ИначеЕсли Свойство = "Роли" Тогда
					Приемник.Роли.Очистить();
					Если ЗначениеСвойства <> Неопределено Тогда
						Для каждого ИмяРоли Из ЗначениеСвойства Цикл
							Роль = Метаданные.Роли.Найти(ИмяРоли);
							Если Роль <> Неопределено Тогда
								Приемник.Роли.Добавить(Роль);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе
					Если Свойство = "Имя"
					   И Приемник[Свойство] <> ЗначениеСвойства Тогда
					
						Если СтрДлина(ЗначениеСвойства) > 64 Тогда
							ВызватьИсключение сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("en='An error occurred when writing the infobase user."
"Login: ""%1"""
"is longer than 64 characters.';ru='Ошибка записи пользователя информационной базы"
"Имя (для входа): ""%1"""
"превышает длину 64 символа.'"),
								ЗначениеСвойства);
							
						ИначеЕсли Найти(ЗначениеСвойства, ":") > 0 Тогда
							ВызватьИсключение сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("en='An error occurred when writing the infobase user"
"Login ""%1"""
"contains forbidden character "":"".';ru='Ошибка записи пользователя информационной базы"
"Имя (для входа): ""%1"""
"содержит запрещенный символ "":"".'"),
								ЗначениеСвойства);
						КонецЕсли;
					КонецЕсли;
					Приемник[Свойство] = Источник[Свойство];
				КонецЕсли;
			Иначе
				Если Свойство = "Роли" Тогда
					
					ВременнаяСтруктура = Новый Структура("Роли", Новый ТаблицаЗначений);
					ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Приемник);
					Если ТипЗнч(ВременнаяСтруктура.Роли) = Тип("ТаблицаЗначений") Тогда
						Продолжить;
					ИначеЕсли ВременнаяСтруктура.Роли = Неопределено Тогда
						Приемник.Роли = Новый Массив;
					Иначе
						Приемник.Роли.Очистить();
					КонецЕсли;
					
					Если Источник.Роли <> Неопределено Тогда
						Для каждого Роль Из Источник.Роли Цикл
							Приемник.Роли.Добавить(Роль.Имя);
						КонецЦикла;
					КонецЕсли;
					Продолжить;
					
				ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
					ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
				Иначе
					ПолноеИмяСвойства = Свойство;
				КонецЕсли;
				ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, ЗначениеСвойства);
				ЗаполнитьЗначенияСвойств(Приемник, ВременнаяСтруктура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пользователя из справочника Пользователи, с которым сопоставлен
// пользователь ИБ с указанным именем.
//  Для поиска требуются административные права. Если административных прав нет,
// допустимо искать только пользователя для текущего пользователя ИБ.
// 
// Параметры:
//  ИмяДляВхода - Строка - имя пользователя информационной базы, используемое для входа.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи           - если пользователь найден.
//  Справочники.Пользователи.ПустаяСсылка() - если пользователь ИБ найден.
//  Неопределено                            - если пользователь ИБ не найден.
//
Функция НайтиПользователяПоИмени(Знач ИмяДляВхода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяДляВхода);
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		// СофтФон
		//НайтиНеоднозначныхПользователейИБ(Неопределено, ПользовательИБ.УникальныйИдентификатор);
		
		Возврат Справочники.Пользователи.НайтиПоРеквизиту(
			"ИдентификаторПользователяИБ",
			ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

// Возвращает пустую структуру описания пользователя ИБ.
// Назначение свойств структуры соответствует свойствам объекта ПользовательИнформационнойБазы.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//   * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор пользователя информационной базы.
//   * Имя                       - Строка - имя пользователя информационной базы. Например, "Иванов".
//   * ПолноеИмя                 - Строка - полное имя пользователя информационной базы. 
//                                          Например, "Иванов Иван Иванович (менеджер по продажам)"
//   * АутентификацияOpenID      - Булево - разрешена ли пользователю аутентификация по протоколу OpenID.
//
//   * АутентификацияСтандартная - Булево - разрешена ли стандартная аутентификация (по пользователю и паролю).
//   * ПоказыватьВСпискеВыбора   - Булево - показывать ли полное имя пользователя в списке для выбора при запуске.
//   * Пароль                    - Строка, Неопределено - пароль, используемый при стандартной аутентификации.
//   * СохраняемоеЗначениеПароля - Строка, Неопределено - хранимые значения пароля (хеш).
//   * ПарольУстановлен          - Булево - установлен ли пароль у пользователя.
//   * ЗапрещеноИзменятьПароль   - Булево - определяет возможность пользователя изменять свой пароль.
//
//   * АутентификацияОС          - Булево - разрешена ли аутентификация средствами операционной системы.
//   * ПользовательОС            - Строка - имя соответствующей учетной записи пользователя операционной системы 
//                                          (не учитывается в учебной версии платформы).
//
//   * ОсновнойИнтерфейс         - Строка, Неопределено - имя основного интерфейса пользователя информационной базы
//                                         (из коллекции Метаданные.Интерфейсы).
//   * РежимЗапуска              - Строка, Неопределено - "Авто", "ОбычноеПриложение" или "УправляемоеПриложение".
//   * Язык                      - Строка, Неопределено - имя языка из коллекции Метаданные.Языки.
//   * Роли                      - Неопределено - роли не указаны.
//                               - Массив - коллекция имен ролей пользователя информационной базы.
//
Функция НовоеОписаниеПользователяИБ() Экспорт
	
	// Подготовка структур возвращаемых данных.
	Свойства = Новый Структура;
	
	Свойства.Вставить("УникальныйИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Свойства.Вставить("Имя",                       "");
	Свойства.Вставить("ПолноеИмя",                 "");
	Свойства.Вставить("АутентификацияOpenID",      Ложь);
	Свойства.Вставить("АутентификацияСтандартная", Ложь);
	Свойства.Вставить("ПоказыватьВСпискеВыбора",   Ложь);
	Свойства.Вставить("СтарыйПароль",              Неопределено);
	Свойства.Вставить("Пароль",                    Неопределено);
	Свойства.Вставить("СохраняемоеЗначениеПароля", Неопределено);
	Свойства.Вставить("ПарольУстановлен",          Ложь);
	Свойства.Вставить("ЗапрещеноИзменятьПароль",   Ложь);
	Свойства.Вставить("АутентификацияОС",          Ложь);
	Свойства.Вставить("ПользовательОС",            "");
	
	Свойства.Вставить("ОсновнойИнтерфейс",
		?(Метаданные.ОсновнойИнтерфейс = Неопределено, "", Метаданные.ОсновнойИнтерфейс.Имя));
	
	Свойства.Вставить("РежимЗапуска",              "Авто");
	
	Свойства.Вставить("Язык",
		?(Метаданные.ОсновнойЯзык = Неопределено, "", Метаданные.ОсновнойЯзык.Имя));
	
	Свойства.Вставить("Роли", Неопределено);
	
	Возврат Свойства;
	
КонецФункции

// Перезаписывает свойства пользователя ИБ, найденного по строковому или
// уникальному идентификатору, либо создает нового пользователя ИБ
// (при попытке создания существующего пользователя будет ошибка).
//
// Параметры:
//  Идентификатор - Строка, УникальныйИдентификатор - идентификатор пользователя.
//
//  ОбновляемыеСвойства - Структура - см. Пользователи.НовоеОписаниеПользователяИБ.
//    Если свойство в структуре не задано, то используется прочитанное или начальное значение.
//    Следующие свойства структуры имеют особенности:
//      * УникальныйИдентификатор - УникальныйИдентификатор - в него устанавливается уникальный идентификатор 
//                                  пользователя ИБ после его записи.
//      * СтарыйПароль            - Неопределено, Строка - если заданный пароль
//                                  не совпадет с существующим, то возникнет ошибка (см. параметр ОписаниеОшибки).
//
//  СоздатьНового - Ложь  - никаких дополнительных действий.
//                - Неопределено, Истина - создается новый пользователь ИБ,
//                  когда ПользовательИБ не найден по указанному идентификатору.
//                  При значении Истина, если Пользователь ИБ найден
//                  по указанному идентификатору - будет ошибка.
//
//  ОписаниеОшибки - Строка - содержит описание ошибки, если чтение не удалось.
//
//  Пользователь   - СправочникСсылка.Пользователи, СправочникОбъект.Пользователи,
//                   СправочникСсылка.ВнешниеПользователи, СправочникОбъект.ВнешниеПользователи - это
//                     пользователь с которым сопоставлен ПользовательИБ.
//                 - Неопределено - ссылка или объект пользователя в справочнике, если существует.
//                 - ПользовательИнформационнойБазы - (Возвращаемое значение), если запись удалась.
//
// Возвращаемое значение:
//  Булево - если Истина, тогда пользователь записан, иначе см. ОписаниеОшибки.
//
Функция ЗаписатьПользователяИБ(Знач Идентификатор,
                               Знач ОбновляемыеСвойства,
                               Знач СоздатьНового = Ложь,
                               ОписаниеОшибки = "",
                               Пользователь = Неопределено) Экспорт
	
	СтарыеСвойства = СвойстваПользователяИБ(Идентификатор);
	ПредварительноеЧтение = СтарыеСвойства <> Неопределено;
	Если СтарыеСвойства <> Неопределено Тогда
		ПользовательИБ = СтарыеСвойства.ПользовательИБ;
	Иначе	
		ПользовательИБ = Неопределено;
		СтарыеСвойства = НовоеОписаниеПользователяИБ();
		СтарыеСвойства.Роли = Новый Массив;
	КонецЕсли;	
		
	Если НЕ ПредварительноеЧтение Тогда
		
		Если СоздатьНового = Неопределено ИЛИ СоздатьНового = Истина Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
			ПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли СоздатьНового = Истина Тогда
		ОписаниеОшибки = ОписаниеОшибкиПриЗаписиПользователяИБ(
			НСтр("en='Cannot create user of infobase"
"%1,"
"as the user already exists.';ru='Невозможно создать пользователя информационной базы"
"%1,"
"так как он уже существует.'"),
			СтарыеСвойства.Имя,
			СтарыеСвойства.УникальныйИдентификатор);
		Возврат Ложь;
	Иначе
		Если ОбновляемыеСвойства.Свойство("СтарыйПароль")
		   И ТипЗнч(ОбновляемыеСвойства.СтарыйПароль) = Тип("Строка") Тогда
			
			СтарыйПарольСовпадает = Ложь;
			
			СохраняемоеЗначениеСтрокиПароля(
				ОбновляемыеСвойства.СтарыйПароль,
				СтарыеСвойства.УникальныйИдентификатор,
				СтарыйПарольСовпадает);
			
			Если НЕ СтарыйПарольСовпадает Тогда
				ОписаниеОшибки = ОписаниеОшибкиПриЗаписиПользователяИБ(
					НСтр("en='When writing user of infobase"
"%1,"
"old password was specified incorrectly.';ru='При записи пользователя информационной базы"
"%1,"
"старый пароль указан не верно.'"),
					СтарыеСвойства.Имя,
					СтарыеСвойства.УникальныйИдентификатор);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка новых значений свойств.
	НовыеСвойства = сфпОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтарыеСвойства);
	
	Для каждого КлючИЗначение Из НовыеСвойства Цикл
		
		Если ОбновляемыеСвойства.Свойство(КлючИЗначение.Ключ)
		   И ОбновляемыеСвойства[КлючИЗначение.Ключ] <> Неопределено Тогда
		
			НовыеСвойства[КлючИЗначение.Ключ] = ОбновляемыеСвойства[КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	СкопироватьСвойстваПользователяИБ(ПользовательИБ, НовыеСвойства);
	
	// СофтФон
	//Если ОбщегоНазначения.РазделениеВключено() Тогда
	//	ПользовательИБ.ПоказыватьВСпискеВыбора = Ложь;
	//КонецЕсли;
	
	// Попытка записи нового или измененного пользователяИБ.
	Попытка
		ЭтоВнешнийПользователь = (Пользователь.Метаданные().Имя = "ВнешниеПользователи");
	Исключение
		ЭтоВнешнийПользователь = Ложь;
	КонецПопытки;
	
	Попытка
		ЗаписатьПользователяИнформационнойБазы(ПользовательИБ, ЭтоВнешнийПользователь);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ОписаниеОшибкиПриЗаписиПользователяИБ(
			НСтр("en='An error occurred when writing user of infobase"
"%1:"
""
"""%2"".';ru='При записи пользователя информационной базы"
"%1 произошла ошибка:"
""
"""%2"".'"),
			ПользовательИБ.Имя,
			?(ПредварительноеЧтение, СтарыеСвойства.УникальныйИдентификатор, Неопределено),
			ИнформацияОбОшибке);
		Возврат Ложь;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(СтарыеСвойства.Имя)
	   И СтарыеСвойства.Имя <> НовыеСвойства.Имя Тогда
		// Перемещение настроек.
		СкопироватьНастройкиПользователя(
			СтарыеСвойства.Имя, НовыеСвойства.Имя, Истина);
	КонецЕсли;
	
	Если СоздатьНового = Неопределено Или СоздатьНового = Истина Тогда
		УстановитьНачальныеНастройки(ПользовательИБ.Имя, ЭтоВнешнийПользователь);
	КонецЕсли;
	
	ОбновляемыеСвойства.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
	Пользователь = ПользовательИБ;
	Возврат Истина;
	
КонецФункции

// Возвращает свойства пользователя информационной базы в виде структуры.
// Если пользователь с указанным идентификатором или именем не существует, то возвращается Неопределено.
//
// Параметры:
//  ИмяИлиИдентификатор  - Строка, УникальныйИдентификатор - имя или идентификатор пользователя ИБ.
//
// Возвращаемое значение:
//  Структура, Неопределено - свойства пользователя, см. Пользователи.НовоеОписаниеПользователяИБ.
//                            Неопределено, если пользователь с указанным идентификатором или именем не существует.
//
Функция СвойстваПользователяИБ(Знач ИмяИлиИдентификатор) Экспорт
	
	сфпОбщегоНазначенияКлиентСервер.ПроверитьПараметр("Пользователи.СвойстваПользователяИБ", "ИмяИлиИдентификатор",
		ИмяИлиИдентификатор, Новый ОписаниеТипов("Строка, УникальныйИдентификатор"));
		 
	Свойства = НовоеОписаниеПользователяИБ();
	Свойства.Роли = Новый Массив;
	
	Если ТипЗнч(ИмяИлиИдентификатор) = Тип("УникальныйИдентификатор") Тогда
		// СофтФон
		//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		//	МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		//	СеансЗапущенБезРазделителей = МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей();
		//Иначе
			СеансЗапущенБезРазделителей = Истина;
		//КонецЕсли;
		
		//Если ОбщегоНазначения.РазделениеВключено()
		//   И СеансЗапущенБезРазделителей
		//   И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
		//   И ИмяИлиИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор Тогда
		//	
		//	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		//Иначе
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИмяИлиИдентификатор);
		//КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИмяИлиИдентификатор) = Тип("Строка") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяИлиИдентификатор);
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СкопироватьСвойстваПользователяИБ(Свойства, ПользовательИБ);
	Свойства.Вставить("ПользовательИБ", ПользовательИБ);
	Возврат Свойства;
	
КонецФункции

// Возвращает сохраняемое значение пароля для указанного пароля.
//
// Параметры:
//  Пароль                      - Строка - пароль для которого нужно получить сохраняемое значение.
//
//  ИдентификаторПользователяИБ - УникальныйИдентификатор - пользователя ИБ для которого нужно
//                                сравнить сохраняемое значение с полученным и результат поместить
//                                в следующий параметр Совпадает.
//
//  Совпадает                   - Булево (возвращаемое значение) - см. комментарий к параметру.
//                                ИдентификаторПользователяИБ.
// Возвращаемое значение:
//  Строка - сохраняемое значение пароля.
//
Функция СохраняемоеЗначениеСтрокиПароля(Знач Пароль,
                                        Знач ИдентификаторПользователяИБ = Неопределено,
                                        Совпадает = Ложь) Экспорт
										
	// СофтФон
	//Если ОбщегоНазначения.РазделениеВключено() Тогда
	//	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
	//	ХешированиеДанных.Добавить(Пароль);
	//	
	//	СохраняемоеЗначениеПароля = Base64Строка(ХешированиеДанных.ХешСумма);
	//	
	//	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
	//	ХешированиеДанных.Добавить(ВРег(Пароль));
	//	
	//	СохраняемоеЗначениеПароля = СохраняемоеЗначениеПароля + ","
	//		+ Base64Строка(ХешированиеДанных.ХешСумма);
	//Иначе
		ТекущаяПроверкаСложности = ПолучитьПроверкуСложностиПаролейПользователей();
		ТекущаяМинимальнаяДлина  = ПолучитьМинимальнуюДлинуПаролейПользователей();
		
		НачатьТранзакцию();
		Попытка
			Если ТекущаяМинимальнаяДлина > 0 Тогда
				УстановитьМинимальнуюДлинуПаролейПользователей(0);
			КонецЕсли;
			Если ТекущаяПроверкаСложности Тогда
				УстановитьПроверкуСложностиПаролейПользователей(Ложь);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПользователя())
			   И ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
				
				ВременныйАдминистраторИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
				ВременныйАдминистраторИБ.АутентификацияСтандартная = Истина;
				ВременныйАдминистраторИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
				Если Метаданные.Роли.Найти("Администрирование") <> Неопределено Тогда
					ВременныйАдминистраторИБ.Роли.Добавить(Метаданные.Роли["Администрирование"]);
					
				ИначеЕсли Метаданные.Роли.Найти("АдминистраторСистемы") <> Неопределено Тогда
					ВременныйАдминистраторИБ.Роли.Добавить(Метаданные.Роли["АдминистраторСистемы"]);
				КонецЕсли;
				ВременныйАдминистраторИБ.Имя = НСтр("en='Temporary first administrator';ru='Временный первый администратор'")
					+ " (" + Строка(Новый УникальныйИдентификатор) + ")";
				ВременныйАдминистраторИБ.Записать();
			Иначе
				ВременныйАдминистраторИБ = Неопределено;
			КонецЕсли;
			
			ВременныйПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
			ВременныйПользовательИБ.АутентификацияСтандартная = Ложь;
			ВременныйПользовательИБ.Пароль = Пароль;
			ВременныйПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
			
			ВременныйПользовательИБ.Имя = НСтр("en='Temporary user';ru='Временный пользователь'")
				+ " (" + Строка(Новый УникальныйИдентификатор) + ")";
			
			ВременныйПользовательИБ.Записать();
			
			ВременныйПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				ВременныйПользовательИБ.УникальныйИдентификатор);
			
			СохраняемоеЗначениеПароля = ВременныйПользовательИБ.СохраняемоеЗначениеПароля;
			
			ВременныйПользовательИБ.Удалить();
			
			Если ВременныйАдминистраторИБ <> Неопределено Тогда
				ВременныйАдминистраторИБ.Удалить();
			КонецЕсли;
			
			Если ТекущаяМинимальнаяДлина > 0 Тогда
				УстановитьМинимальнуюДлинуПаролейПользователей(ТекущаяМинимальнаяДлина);
			КонецЕсли;
			Если ТекущаяПроверкаСложности Тогда
				УстановитьПроверкуСложностиПаролейПользователей(Истина);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Если ТекущаяМинимальнаяДлина <> ПолучитьМинимальнуюДлинуПаролейПользователей() Тогда
				УстановитьМинимальнуюДлинуПаролейПользователей(ТекущаяМинимальнаяДлина);
			КонецЕсли;
			Если ТекущаяПроверкаСложности <> ПолучитьПроверкуСложностиПаролейПользователей() Тогда
				УстановитьПроверкуСложностиПаролейПользователей(ТекущаяПроверкаСложности);
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
	//КонецЕсли;
	
	Если ТипЗнч(ИдентификаторПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ИдентификаторПользователяИБ);
		
		Если ТипЗнч(ПользовательИБ) = Тип("ПользовательИнформационнойБазы") Тогда
			Совпадает = (СохраняемоеЗначениеПароля = ПользовательИБ.СохраняемоеЗначениеПароля);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СохраняемоеЗначениеПароля;
	
КонецФункции

// Вызывает событие ПередЗаписьюПользователяИБ, проверяет права с учетом
// режима разделения данных и записывает указанного пользователя ИБ.
//
// Параметры:
//  ПользовательИБ  - ПользовательИнформационнойБазы - объект, который требуется записать.
//  ЭтоВнешнийПользователь - Булево - указать Истина, если пользователь ИБ соответствует внешнему пользователю
//                                    (элементу справочника ВнешниеПользователи).
//
Процедура ЗаписатьПользователяИнформационнойБазы(ПользовательИБ, ЭтоВнешнийПользователь = Ложь) Экспорт
	
	// СофтФон
	//ИнтеграцияСТехнологиейСервиса.ПередЗаписьюПользователяИБ(ПользовательИБ);
	
	// СофтФон
	//ПроверитьПраваПользователя(ПользовательИБ, "ПередЗаписью", ЭтоВнешнийПользователь);
	
	// СофтФон
	//ОбновлениеИнформационнойБазыСлужебный.УстановитьФлагОтображенияОписанийДляНовогоПользователя(ПользовательИБ.Имя);
	ПользовательИБ.Записать();
	
КонецПроцедуры

// Формирует краткое описание ошибки, которое увидит пользователь,
// а также может записать подробное описание ошибки в журнал регистрации.
//
// Параметры:
//  ШаблонОшибки       - Шаблон, содержащий параметр "%1" для представления пользователя ИБ и
//                       параметр %2 для описания ошибки.
//
//  ИмяДляВхода        - имя пользователя информационной базы, используемое для входа.
//
//  ИдентификаторПользователяИБ - Неопределено, УникальныйИдентификатор.
//
//  ИнформацияОбОшибке - ИнформацияОбОшибке.
//
//  ЗаписатьВЖурнал    - Булево. Если Истина, то выполняется запись подробного описания ошибки
//                       в журнал регистрации.
//
// Возвращаемое значение:
//  Строка - описание ошибки для просмотра пользователю.
//
Функция ОписаниеОшибкиПриЗаписиПользователяИБ(ШаблонОшибки,
                                              ИмяДляВхода,
                                              ИдентификаторПользователяИБ,
                                              ИнформацияОбОшибке = Неопределено,
                                              ЗаписатьВЖурнал = Истина)
	
	Если ЗаписатьВЖурнал Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("en='Users.An error occurred when writing infobase user';ru='Пользователи.Ошибка записи пользователя ИБ'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				"""" + ИмяДляВхода + """ (" + ?(ЗначениеЗаполнено(ИдентификаторПользователяИБ),
					НСтр("en='New';ru='Новый'"), Строка(ИдентификаторПользователяИБ)) + ")",
				?(ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), Строка(ИнформацияОбОшибке))));
	КонецЕсли;
	
	Возврат сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, """" + ИмяДляВхода + """",
		?(ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке), Строка(ИнформацияОбОшибке)));
	
КонецФункции
		
// Копирует настройки от пользователя источника пользователю приемнику. При значении
// параметра Переносить = Истина, настройки у пользователя источника удаляются.
//
// Параметры:
// ИмяПользователяИсточник - Строка - Имя пользователя ИБ от которого будет производиться копирование настроек.
//
// ИмяПользователяПриемник - Строка - Имя пользователя ИБ которому будут записаны настройки.
//
// Переносить              - Булево - Если Истина - настройки переносятся от одного пользователя другому,
//                           если Ложь - копируются новому.
//
Процедура СкопироватьНастройкиПользователя(ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить = Ложь) Экспорт
	
	// Перенос пользовательских настроек отчетов.
	СкопироватьНастройки(ХранилищеПользовательскихНастроекОтчетов, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос настроек внешнего вида.
	СкопироватьНастройки(ХранилищеСистемныхНастроек,ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос произвольных настроек пользователей.
	СкопироватьНастройки(ХранилищеОбщихНастроек, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос настроек данных форм.
	СкопироватьНастройки(ХранилищеНастроекДанныхФорм, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос настроек быстрого доступа дополнительных отчетов и обработок.
	Если Не Переносить Тогда
		СкопироватьПрочиеПользовательскиеНастройки(ИмяПользователяИсточник, ИмяПользователяПриемник);
	КонецЕсли;
	
КонецПроцедуры

Функция СписокНастроек(ИмяПользователяИБ, МенеджерНастроек)
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("КлючОбъекта");
	ТаблицаНастроек.Колонки.Добавить("КлючНастроек");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ИмяПользователяИБ);
	
	ВыборкаНастроек = МенеджерНастроек.Выбрать(Отбор);
	Пропустить = Ложь;
	Пока СледующаяНастройка(ВыборкаНастроек, Пропустить) Цикл
		
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНастроек.Добавить();
		НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
		НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
	КонецЦикла;
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция СледующаяНастройка(ВыборкаНастроек, Пропустить) 
	
	Попытка 
		Пропустить = Ложь;
		Возврат ВыборкаНастроек.Следующий();
	Исключение
		Пропустить = Истина;
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Процедура СкопироватьНастройки(МенеджерНастроек, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить)
	
	ТаблицаНастроек = СписокНастроек(ИмяПользователяИсточник, МенеджерНастроек);
	
	Для Каждого Настройка Из ТаблицаНастроек Цикл
		КлючОбъекта = Настройка.КлючОбъекта;
		КлючНастроек = Настройка.КлючНастроек;
		Значение = МенеджерНастроек.Загрузить(КлючОбъекта, КлючНастроек, , ИмяПользователяИсточник);
		ОписаниеНастроек = МенеджерНастроек.ПолучитьОписание(КлючОбъекта, КлючНастроек, ИмяПользователяИсточник);
		МенеджерНастроек.Сохранить(КлючОбъекта, КлючНастроек, Значение,
			ОписаниеНастроек, ИмяПользователяПриемник);
		Если Переносить Тогда
			МенеджерНастроек.Удалить(КлючОбъекта, КлючНастроек, ИмяПользователяИсточник);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьПрочиеПользовательскиеНастройки(ИмяПользователяИсточник, ИмяПользователяПриемник)
	
	ПользовательИсточникСсылка = НайтиПользователяПоИмени(ИмяПользователяИсточник);
	ПользовательПриемникСсылка = НайтиПользователяПоИмени(ИмяПользователяПриемник);
	СведенияОПользователеИсточнике = Новый Структура;
	СведенияОПользователеИсточнике.Вставить("ПользовательСсылка", ПользовательИсточникСсылка);
	СведенияОПользователеИсточнике.Вставить("ИмяПользователяИнформационнойБазы", ИмяПользователяИсточник);
	
	СведенияОПользователеПриемнике = Новый Структура;
	СведенияОПользователеПриемнике.Вставить("ПользовательСсылка", ПользовательПриемникСсылка);
	СведенияОПользователеПриемнике.Вставить("ИмяПользователяИнформационнойБазы", ИмяПользователяПриемник);
	
	// Получение прочих настроек.
	ПрочиеНастройкиПользователей = Новый Структура;
	
	// СофтФон
	//ПриПолученииПрочихНастроекПользователя(СведенияОПользователеИсточнике, ПрочиеНастройкиПользователей);
	
	Ключи = Новый СписокЗначений;
	МассивПрочихНастроек = Новый Массив;
	Если ПрочиеНастройкиПользователей.Количество() <> 0 Тогда
		
		Для Каждого ПрочаяНастройка Из ПрочиеНастройкиПользователей Цикл
			ПрочиеНастройкиСтруктура = Новый Структура;
			Если ПрочаяНастройка.Ключ = "НастройкаБыстрогоДоступа" Тогда
				СписокНастроек = ПрочаяНастройка.Значение.СписокНастроек;
				Для Каждого Элемент Из СписокНастроек Цикл
					Ключи.Добавить(Элемент.Объект, Элемент.Идентификатор);
				КонецЦикла;
				ПрочиеНастройкиСтруктура.Вставить("ИдентификаторНастройки", "НастройкаБыстрогоДоступа");
				ПрочиеНастройкиСтруктура.Вставить("ЗначениеНастройки", Ключи);
			Иначе
				ПрочиеНастройкиСтруктура.Вставить("ИдентификаторНастройки", ПрочаяНастройка.Ключ);
				ПрочиеНастройкиСтруктура.Вставить("ЗначениеНастройки", ПрочаяНастройка.Значение.СписокНастроек);
			КонецЕсли;
			
			// СофтФон
			//ПриСохраненииПрочихНастроекПользователя(СведенияОПользователеПриемнике, ПрочиеНастройкиСтруктура);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает начальные настройки для пользователя информационной базы.
//
// Параметры:
//  ИмяПользователя - Строка - имя пользователя информационной базы, для которого сохраняются настройки.
//  ЭтоВнешнийПользователь - Булево - указать Истина, если пользователь ИБ соответствует внешнему пользователю
//                                    (элементу справочника ВнешниеПользователи).
//
Процедура УстановитьНачальныеНастройки(Знач ИмяПользователя, ЭтоВнешнийПользователь = Ложь) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ТекущийРежим = Метаданные.РежимСовместимостиИнтерфейса;
	Такси = (ТекущийРежим = Метаданные.СвойстваОбъектов.РежимСовместимостиИнтерфейса.Такси
		ИЛИ ТекущийРежим = Метаданные.СвойстваОбъектов.РежимСовместимостиИнтерфейса.ТаксиРазрешитьВерсия8_2);
	
	НастройкиКлиента = Новый НастройкиКлиентскогоПриложения;
	НастройкиКлиента.ОтображатьПанелиНавигацииИДействий = Ложь;
	НастройкиКлиента.ОтображатьПанельРазделов = Истина;
	НастройкиКлиента.РежимОткрытияФормПриложения = РежимОткрытияФормПриложения.Закладки;
	
	НастройкиТакси = Неопределено;
	НастройкиИнтерфейса = Новый НастройкиКомандногоИнтерфейса;
	
	Если Такси Тогда
		НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
		
		НастройкиИнтерфейса.ОтображениеПанелиРазделов = ОтображениеПанелиРазделов.КартинкаИТекст;
		
		НастройкиТакси = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
		НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
		ГруппаСлева = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
		ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельИнструментов"));
		ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельРазделов"));
		НастройкиСостава.Лево.Добавить(ГруппаСлева);
		НастройкиТакси.УстановитьСостав(НастройкиСостава);
	Иначе
		НастройкиИнтерфейса.ОтображениеПанелиРазделов = ОтображениеПанелиРазделов.Текст;
	КонецЕсли;
	
	НачальныеНастройки = Новый Структура;
	НачальныеНастройки.Вставить("НастройкиКлиента",    НастройкиКлиента);
	НачальныеНастройки.Вставить("НастройкиИнтерфейса", НастройкиИнтерфейса);
	НачальныеНастройки.Вставить("НастройкиТакси",      НастройкиТакси);
	НачальныеНастройки.Вставить("ЭтоВнешнийПользователь", ЭтоВнешнийПользователь);
	
	Если НачальныеНастройки.НастройкиКлиента <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "",
			НачальныеНастройки.НастройкиКлиента, , ИмяПользователя);
	КонецЕсли;
	
	Если НачальныеНастройки.НастройкиИнтерфейса <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/ПанельРазделов/НастройкиКомандногоИнтерфейса", "",
			НачальныеНастройки.НастройкиИнтерфейса, , ИмяПользователя);
	КонецЕсли;
		
	Если НачальныеНастройки.НастройкиТакси <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "",
			НачальныеНастройки.НастройкиТакси, , ИмяПользователя);
	КонецЕсли;
		
КонецПроцедуры

// Возвращает серверный модуль менеджера по имени объекта.
Функция СерверныйМодульМенеджера(Имя)
	ОбъектНайден = Ложь;
	
	ЧастиИмени = СтрРазделить(Имя, ".");
	Если ЧастиИмени.Количество() = 2 Тогда
		
		ИмяВида = ВРег(ЧастиИмени[0]);
		ИмяОбъекта = ЧастиИмени[1];
		
		Если ИмяВида = ВРег("Константы") Тогда
			Если Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыСведений") Тогда
			Если Метаданные.РегистрыСведений.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыНакопления") Тогда
			Если Метаданные.РегистрыНакопления.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыБухгалтерии") Тогда
			Если Метаданные.РегистрыБухгалтерии.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыРасчета") Тогда
			Если Метаданные.РегистрыРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Справочники") Тогда
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Документы") Тогда
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Отчеты") Тогда
			Если Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Обработки") Тогда
			Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("БизнесПроцессы") Тогда
			Если Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ЖурналыДокументов") Тогда
			Если Метаданные.ЖурналыДокументов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Задачи") Тогда
			Если Метаданные.Задачи.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыСчетов") Тогда
			Если Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыОбмена") Тогда
			Если Метаданные.ПланыОбмена.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовХарактеристик") Тогда
			Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовРасчета") Тогда
			Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбъектНайден Тогда
		ВызватьИсключение сфпСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Объект метаданных ""%1"" не найден,
			|либо для него не поддерживается получение модуля менеджера.'"), Имя);
	КонецЕсли;
	
	Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
	
	Возврат Модуль;
КонецФункции

// Возвращает ссылку на общий модуль или модуль менеджера по имени.
//
// Параметры:
//  Имя - Строка - имя общего модуля.
//
// Возвращаемое значение:
//  ОбщийМодуль, МодульМенеджераОбъекта - общий модуль.
//
// Пример:
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбновлениеКонфигурации") Тогда
//		МодульОбновлениеКонфигурации = ОбщегоНазначения.ОбщийМодуль("ОбновлениеКонфигурации");
//		МодульОбновлениеКонфигурации.<Имя метода>();
//	КонецЕсли;
//
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
//		МодульПолнотекстовыйПоискСервер = ОбщегоНазначения.ОбщийМодуль("ПолнотекстовыйПоискСервер");
//		МодульПолнотекстовыйПоискСервер.<Имя метода>();
//	КонецЕсли;
//
Функция сфпОбщийМодуль(Имя) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
	ИначеЕсли СтрЧислоВхождений(Имя, ".") = 1 Тогда
		Возврат СерверныйМодульМенеджера(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение сфпСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

Функция сфпСтрНачинаетсяС(Строка, СтрокаПоиска) Экспорт
	
	Возврат (Найти(СокрЛ(Строка), СтрокаПоиска) = 1);
	
КонецФункции

Функция сфпСтрСоединить(Строки, Разделитель = Неопределено) Экспорт
	
	СтрРезультат = "";
	СтрРазделитель = ?(Разделитель = Неопределено, "", Разделитель); 
	
	Для Каждого ТекСтрока Из Строки Цикл
		СтрРезультат = СтрРезультат + ?(СтрРезультат = "", "", СтрРазделитель) + ТекСтрока;	
	КонецЦикла;	
	
	Возврат СтрРезультат;
	
КонецФункции

Функция сфпСтрРазделить(Строка, Разделитель) Экспорт
	
	Возврат сфпРазложитьСтрокуВМассивПодстрок(Строка, Разделитель);
	
КонецФункции

#КонецОбласти