
#Область ПрограммныйИнтерфейс

// Процедура формирует запрос-команду исходящего вызова
//
// Параметры:
//	НомерАбонента			- Строка	- Номер вызываемого абонента
//	ДанныеПользователяАТС	- Структура	- Данные пользователя АТС
//	URL						- Строка	- Корневой URL запроса
//	ТелоЗапроса				- Строка	- Тело сформированного запроса
//	Заголовки				- Структура	- Структура заголовков запроса
//	Ошибка					- Строка	- Возвращаемое описание возникшей ошибки
//
Процедура ПриСозданииИсходящегоВызова(НомерАбонента, ДанныеПользователяАТС, URL, ТелоЗапроса, Заголовки, Ошибка) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	ДлинаВнутреннихНомеров = Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Получить();
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("from");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("extension");
		ЗаписьJSON.ЗаписатьЗначение(ДанныеПользователяАТС.ВнутреннийНомер);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
		ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);

		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "commands/callback";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("from");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("extension");
		ЗаписьJSON.ЗаписатьЗначение(ДанныеПользователяАТС.ВнутреннийНомер);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
		ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "commands/callback";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		
		НомерАбонента = ПреобразоватьНомерДляКонтактнойИнформации(НомерАбонента);
		
		Если НЕ ЗначениеЗаполнено(ДанныеПользователяАТС.ИсходящийНомер) Тогда
			Ошибка = "НеЗаполненНомерИсходящегоЗвонкаПользователя";
			Возврат;
		КонецЕсли;
		
		Токен = ТокенДоступаAPI(ДанныеПользователяАТС.ВнутреннийНомер, Ошибка);
		
		Если ЗначениеЗаполнено(Ошибка) Тогда
			Возврат;
		КонецЕсли;
		
		Если Токен = Неопределено Тогда
			ВызватьИсключение НСтр("en='Failed to log in.';ru='Не удалось авторизоваться.'");
		КонецЕсли;
		
		URL = URL + "api/v2/calls/makecall";
		
		Заголовки.Вставить("Authorization", "bearer " + Токен);
		Заголовки.Вставить("x-api-key", НастройкиТелефонии.КлючДляАвторизацииАТСЯндекс);
		
		ПараметрыЗапроса.Добавить("from=" + ДанныеПользователяАТС.ИсходящийНомер);
		ПараметрыЗапроса.Добавить("to=" + ?(СтрДлина(НомерАбонента) > ДлинаВнутреннихНомеров, "7", "") + НомерАбонента);
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		URL = URL + "apis/portal/abonents/" + ДанныеПользователяАТС.ВнутреннийНомер + "/call?phoneNumber=" + НомерАбонента;
				
		Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.UIS Тогда
		КлючAPI = НастройкиТелефонии.КлючДляАвторизацииАТСUIS;
		
		Если НЕ ЗначениеЗаполнено(ДанныеПользователяАТС.ИсходящийНомер) Тогда
			ВызватьИсключение НСтр("ru='Не заполнен исходящий номер пользователя АТС.';en='Outgoing number of PBX user not filled.'");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДанныеПользователяАТС.ЛогинАТС) Тогда
			ВызватьИсключение НСтр("ru='Не заполнен идентификатор пользователя АТС.';en='User ID of PBX not filled.'");
		КонецЕсли;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("jsonrpc");
		ЗаписьJSON.ЗаписатьЗначение("2.0");
		ЗаписьJSON.ЗаписатьИмяСвойства("id");
		ЗаписьJSON.ЗаписатьЗначение("" + Новый УникальныйИдентификатор());
		ЗаписьJSON.ЗаписатьИмяСвойства("method");
		ЗаписьJSON.ЗаписатьЗначение("start.employee_call");
		//ЗаписьJSON.ЗаписатьЗначение("start.simple_call");
				
		ЗаписьJSON.ЗаписатьИмяСвойства("params");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("access_token");
		ЗаписьJSON.ЗаписатьЗначение(КлючAPI);
		ЗаписьJSON.ЗаписатьИмяСвойства("first_call");
		ЗаписьJSON.ЗаписатьЗначение("employee");
		ЗаписьJSON.ЗаписатьИмяСвойства("virtual_phone_number");
		ЗаписьJSON.ЗаписатьЗначение(ДанныеПользователяАТС.ИсходящийНомер);
		ЗаписьJSON.ЗаписатьИмяСвойства("contact");
		//ЗаписьJSON.ЗаписатьЗначение(?(СтрДлина(НомерАбонента) > ДлинаВнутреннихНомеров, "7", "") + НомерАбонента);
		ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
		//ЗаписьJSON.ЗаписатьИмяСвойства("external_id");
		//ЗаписьJSON.ЗаписатьЗначение("makecall");
		ЗаписьJSON.ЗаписатьИмяСвойства("employee");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("id");
		ЗаписьJSON.ЗаписатьЗначение(Число(СтрЗаменить(ДанныеПользователяАТС.ЛогинАТС, " ", "")));
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		ТелоЗапроса = json;

	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Ростелеком Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("request_number");
		ЗаписьJSON.ЗаписатьЗначение(?(СтрДлина(НомерАбонента) > ДлинаВнутреннихНомеров, "7", "") + НомерАбонента);
		ЗаписьJSON.ЗаписатьИмяСвойства("from_pin");
		ЗаписьJSON.ЗаписатьЗначение(ДанныеПользователяАТС.ВнутреннийНомер);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		Заголовки.Вставить("X-Client-ID", НастройкиТелефонии.vpbx_api_key);
		Заголовки.Вставить("X-Client-Sign", sign);
	
		URL = URL + "call_back";
		
		ТелоЗапроса = json;

	ИначеЕсли ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		ПараметрыЗапроса.Добавить("cmd=makeCall");
		ПараметрыЗапроса.Добавить("user=" + ДанныеПользователяАТС.ВнутреннийНомер);
		ПараметрыЗапроса.Добавить("token=" + НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
		
		Если Лев(НомерАбонента, 1) = "+" ИЛИ СтрДлина(НомерАбонента) > 10 Тогда
			ПараметрыЗапроса.Добавить("phone=" + СтрЗаменить(НомерАбонента, "+", ""));
			
		Иначе
			ПараметрыЗапроса.Добавить("phone=" + ?(СтрДлина(НомерАбонента) > ДлинаВнутреннихНомеров, "8", "") + НомерАбонента);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗапроса.Количество() > 0 Тогда
		ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует запрос-команду перевода неотвеченного вызова
//
// Параметры:
//	ИдентификаторЗвонкаВАТС	- Строка	- Идентификатор звонка
//	НомерАбонента			- Строка	- Номер абонента
//	ВнутреннийНомер			- Строка	- Внутренний номер
//	Hold					- Булево	- Признак постановки звонка на удержание (Истина - Удержание, Ложь - Слепой перевод)
//	URL						- Строка	- Корневой URL запроса
//	ТелоЗапроса				- Строка	- Тело сформированного запроса
//	Заголовки				- Структура	- Структура заголовков запроса
//	Ошибка					- Строка	- Возвращаемое описание возникшей ошибки
//	json					- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПереводеНеотвеченногоВызова(ИдентификаторЗвонкаВАТС, НомерАбонента, ВнутреннийНомер, Hold, URL, ТелоЗапроса, Заголовки, Ошибка, json = "") Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
		
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
				
		ЗаписьJSON.ЗаписатьИмяСвойства("call_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗвонкаВАТС);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("method");
		ЗаписьJSON.ЗаписатьЗначение(?(Hold, "hold", "blind"));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
		ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
						
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		Если Hold Тогда
			URL = URL + "commands/transfer";
		
		Иначе	
			URL = URL + "commands/route";
		КонецЕсли;
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
				
		ЗаписьJSON.ЗаписатьИмяСвойства("call_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗвонкаВАТС);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
		ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
		
		Если Hold Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("method");
			ЗаписьJSON.ЗаписатьЗначение(?(Hold, "hold", "blind"));
		
			ЗаписьJSON.ЗаписатьИмяСвойства("initiator");
			ЗаписьJSON.ЗаписатьЗначение(ВнутреннийНомер);
		КонецЕсли;	
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		Если Hold Тогда
			URL = URL + "commands/transfer";
		
		Иначе	
			URL = URL + "commands/route";
		КонецЕсли;	
	
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		Ошибка = "МетодНеПоддерживается";
		Возврат;
		
	ИначеЕсли ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		ПараметрыЗапроса.Добавить("cmd=makeCall");
		//ПараметрыЗапроса.Добавить("phone=" + НомерАбонента);
		//ПараметрыЗапроса.Добавить("user=" + ДанныеПользователяАТС.ВнутреннийНомер);
		ПараметрыЗапроса.Добавить("token=" + НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);	
	КонецЕсли;
	
	ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	
КонецПроцедуры

// Процедура формирует запрос-команду перевода отвеченного вызова
//
// Параметры:
//	ИдентификаторЗвонкаВАТС	- Строка	- Идентификатор звонка
//	НомерАбонента			- Строка	- Номер абонента
//	ВнутреннийНомер			- Строка	- Внутренний номер
//	Hold					- Булево	- Признак постановки звонка на удержание (Истина - Удержание, Ложь - Слепой перевод)
//	URL						- Строка	- Корневой URL запроса
//	ТелоЗапроса				- Строка	- Тело сформированного запроса
//	Заголовки				- Структура	- Структура заголовков запроса
//	Ошибка					- Строка	- Возвращаемое описание возникшей ошибки
//	json					- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПереводеОтвеченногоВызова(ИдентификаторЗвонкаВАТС, НомерАбонента, ВнутреннийНомер, Hold, URL, ТелоЗапроса, Заголовки, Ошибка, json = "") Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
		
	ИспользуемаяАТС = сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("сфпИспользуемаяАТС");
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
				
		ЗаписьJSON.ЗаписатьИмяСвойства("call_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗвонкаВАТС);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
		ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("method");
		ЗаписьJSON.ЗаписатьЗначение(?(Hold, "hold", "blind"));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("initiator");
		ЗаписьJSON.ЗаписатьЗначение(ВнутреннийНомер);
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "commands/transfer";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
				
		ЗаписьJSON.ЗаписатьИмяСвойства("call_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗвонкаВАТС);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
		ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("method");
		ЗаписьJSON.ЗаписатьЗначение(?(Hold, "hold", "blind"));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("initiator");
		ЗаписьJSON.ЗаписатьЗначение(ВнутреннийНомер);
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "commands/transfer";
	
	ИначеЕсли сфпСофтФонПроСерверПереопределяемый.ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		ПараметрыЗапроса.Добавить("cmd=makeCall");
		//ПараметрыЗапроса.Добавить("phone=" + НомерАбонента);
		//ПараметрыЗапроса.Добавить("user=" + ДанныеПользователяАТС.ВнутреннийНомер);
		ПараметрыЗапроса.Добавить("token=" + НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
	КонецЕсли;
	
	ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	
КонецПроцедуры

// Процедура формирует запрос-команду завершения вызова
//
// Параметры:
//	ИдентификаторЗвонкаВАТС	- Строка	- Идентификатор звонка
//	URL						- Строка	- Корневой URL запроса
//	ТелоЗапроса				- Строка	- Тело сформированного запроса
//	Заголовки				- Структура	- Структура заголовков запроса
//	Ошибка					- Строка	- Возвращаемое описание возникшей ошибки
//	json					- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриЗавершенииВызова(ИдентификаторЗвонкаВАТС, URL, ТелоЗапроса, Заголовки, Ошибка, json = Неопределено) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
				
		ЗаписьJSON.ЗаписатьИмяСвойства("call_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗвонкаВАТС);
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "commands/call/hangup";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
				
		ЗаписьJSON.ЗаписатьИмяСвойства("call_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗвонкаВАТС);
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "commands/call/hangup";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		
		//НомерАбонента = ПреобразоватьНомерДляКонтактнойИнформации(НомерАбонента);
		//
		//Если НЕ ЗначениеЗаполнено(ДанныеПользователяАТС.ИсходящийНомер) Тогда
		//	Ошибка = "НеЗаполненНомерИсходящегоЗвонкаПользователя";
		//	Возврат;
		//КонецЕсли;
		//
		//Токен = ТокенДоступаAPI(ДанныеПользователяАТС.ВнутреннийНомер, Ошибка);
		//
		//Если Ошибка <> Неопределено Тогда
		//	Возврат;
		//КонецЕсли;
		//
		//Если Токен = Неопределено Тогда
		//	ВызватьИсключение НСтр("en='Failed to log in.';ru='Не удалось авторизоваться.'");
		//КонецЕсли;
		//
		//URL = URL + "api/v2/calls/makecall";
		//
		//Заголовки.Вставить("Authorization", "bearer " + Токен);
		//Заголовки.Вставить("x-api-key", сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии().КлючДляАвторизацииАТСЯндекс);
		//
		//ПараметрыЗапроса.Добавить("from=" + ДанныеПользователяАТС.ИсходящийНомер);
		//ПараметрыЗапроса.Добавить("to=" + НомерАбонента);
		
	ИначеЕсли сфпСофтФонПроСерверПереопределяемый.ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		// Команда не поддерживается оператором
		Ошибка = "КомандаНеПоддерживаетсяОператором";
		Возврат;	
	КонецЕсли;
	
	ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	
КонецПроцедуры

// Процедура формирует запрос получения статуса подключения
//
// Параметры:
//	URL			- Строка	- Корневой URL запроса
//	HTTPМетод	- Строка	- Метод (POST, GET)
//	ТелоЗапроса	- Строка	- Тело сформированного запроса
//	Заголовки	- Структура	- Структура заголовков запроса
//	Ошибка		- Строка	- Возвращаемое описание возникшей ошибки
//	json		- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПроверкеСтатусаПодключения(URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("extension");
		ЗаписьJSON.ЗаписатьЗначение("");
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "config/users/request";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("number");
		ЗаписьJSON.ЗаписатьЗначение("70001234567");
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "queries/user_info_by_dct_number";

	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		HTTPМетод = "GET";		
		URL = URL + "api/v2/auth/ping";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		HTTPМетод = "GET";
		URL = URL + "apis/portal/subscription";
		
		Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);

	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.UIS Тогда
		ПриПолученииАбонентов(URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json);

	ИначеЕсли ЭтоПлатформаItoolabs(ИспользуемаяАТС) Тогда
		ПараметрыЗапроса.Добавить("cmd=accounts");
		ПараметрыЗапроса.Добавить("token=" + НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);	
	КонецЕсли;

	Если ПараметрыЗапроса.Количество() > 0 Тогда
		ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	КонецЕсли;

КонецПроцедуры

// Процедура формирует запрос получения подписки на события АТС
//
// Параметры:
//	URL			- Строка	- Корневой URL запроса
//	HTTPМетод	- Строка	- Метод (POST, GET)
//	ТелоЗапроса	- Строка	- Тело сформированного запроса
//	Заголовки	- Структура	- Структура заголовков запроса
//	Ошибка		- Строка	- Возвращаемое описание возникшей ошибки
//	json		- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПодпискеНаСобытия(URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	АдресОбратногоВызова = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(ИспользуемаяАТС);
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) ИЛИ НЕ ЗначениеЗаполнено(АдресОбратногоВызова) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		HTTPМетод = "PUT";
		URL = URL + "apis/portal/subscription";
				
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("subscriptionType");
		ЗаписьJSON.ЗаписатьЗначение("BASIC_CALL");
		
		ЗаписьJSON.ЗаписатьИмяСвойства("url");
		ЗаписьJSON.ЗаписатьЗначение(АдресОбратногоВызова);
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		Заголовки.Вставить("Content-Type", "application/json");
		Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
		
		ТелоЗапроса = json;
	КонецЕсли;
	
	//ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	
КонецПроцедуры

// Процедура формирует запрос получения данных подписки на события
//
// Параметры:
//	URL			- Строка	- Корневой URL запроса
//	HTTPМетод	- Строка	- Метод (POST, GET)
//	ТелоЗапроса	- Строка	- Тело сформированного запроса
//	Заголовки	- Структура	- Структура заголовков запроса
//	Ошибка		- Строка	- Возвращаемое описание возникшей ошибки
//	json		- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПолученииДанныхПодпискиНаСобытия(URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	АдресОбратногоВызова = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(ИспользуемаяАТС);
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) ИЛИ НЕ ЗначениеЗаполнено(АдресОбратногоВызова) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив();
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		HTTPМетод = "GET";
		URL = URL + "apis/portal/subscription?subscriptionId=" + НастройкиТелефонии.КлючПодпискиНаСобытия;
				
		//Заголовки.Вставить("Content-Type", "application/json");
		Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
		
		//ПараметрыЗапроса.Добавить("subscriptionId=" + НастройкиТелефонии.КлючПодпискиНаСобытия);
	КонецЕсли;
	
	//ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	ТелоЗапроса = "";
	
КонецПроцедуры

// Процедура формирует запрос получения данных автоподписки
//
// Параметры:
//	URL						- Строка	- Корневой URL запроса
//	HTTPМетод				- Строка	- Метод (POST, GET)
//	ТелоЗапроса				- Строка	- Тело сформированного запроса
//	Заголовки				- Структура	- Структура заголовков запроса
//	Ошибка					- Строка	- Возвращаемое описание возникшей ошибки
//	json					- Строка	- Возвращаемая строка json-запроса
//	ПараметрыАвтоподписки	- Структура	- Параметры подписки
//
Процедура ПриАвтоподписке(URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json, ПараметрыАвтоподписки) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	АдресОбратногоВызова = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(ИспользуемаяАТС);
		
	ПараметрыЗапроса = Новый Массив();
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Гравител Тогда
		URL = "https://bit.gravitel.ru/reg/rarus/";
		Заголовки.Вставить("Content-Type", "application/json");

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("key");
		ЗаписьJSON.ЗаписатьЗначение("12345-12345-12345");
		
		ЗаписьJSON.ЗаписатьИмяСвойства("full_name");
		ЗаписьJSON.ЗаписатьЗначение(ПараметрыАвтоподписки.Наименование);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("mob_tel");
		ЗаписьJSON.ЗаписатьЗначение(ПараметрыАвтоподписки.Телефон);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("email");
		ЗаписьJSON.ЗаписатьЗначение(ПараметрыАвтоподписки.ЭлектроннаяПочта);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("crmurl");
		ЗаписьJSON.ЗаписатьЗначение(АдресОбратногоВызова);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("crmtoken");
		ЗаписьJSON.ЗаписатьЗначение(ПараметрыАвтоподписки.Токен);
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		ТелоЗапроса = json;
	КонецЕсли;

КонецПроцедуры

// Процедура формирует запрос получения тематик телефонного разговора
//
// Параметры:
//	URL					- Строка	- Корневой URL запроса
//	HTTPМетод			- Строка	- Метод (POST, GET)
//	ТелоЗапроса			- Строка	- Тело сформированного запроса
//	Заголовки			- Структура	- Структура заголовков запроса
//	Ошибка				- Строка	- Возвращаемое описание возникшей ошибки
//	json				- Строка	- Возвращаемая строка json-запроса
//	ИдентификаторЗаписи	- Строка	- Идентификатор записи разговора
//
Процедура ПриПолученииТематикРазговора(URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json, ИдентификаторЗаписи) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	
	ПараметрыЗапроса = Новый Массив();
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("recording_id");
		ЗаписьJSON.ЗаписатьЗначение("[""" + ИдентификаторЗаписи + """]");
		ЗаписьJSON.ЗаписатьИмяСвойства("with_terms");
		ЗаписьJSON.ЗаписатьЗначение(Истина);
		ЗаписьJSON.ЗаписатьИмяСвойства("with_names");
		ЗаписьJSON.ЗаписатьЗначение(Истина);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "queries/recording_categories/";
	КонецЕсли;
	
	Если ПараметрыЗапроса.Количество() > 0 Тогда
		ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирует запрос получения расшифровок телефонных разговоров
//
// Параметры:
//	URL					- Строка	- Корневой URL запроса
//	HTTPМетод			- Строка	- Метод (POST, GET)
//	ТелоЗапроса			- Строка	- Тело сформированного запроса
//	Заголовки			- Структура	- Структура заголовков запроса
//	Ошибка				- Строка	- Возвращаемое описание возникшей ошибки
//	json				- Строка	- Возвращаемая строка json-запроса
//	ЗаписиРазговоров	- Строка	- Массив идентификаторов записей разговоров
//
Процедура ПриПолученииРасшифровокРазговоров(URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json, ЗаписиРазговоров) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	
	ПараметрыЗапроса = Новый Массив();
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("recording_id");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для Каждого ИдентификаторЗаписи Из ЗаписиРазговоров Цикл
			ЗаписьJSON.ЗаписатьЗначение("""" + ИдентификаторЗаписи.Ключ + """");
		КонецЦикла;	
		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "queries/recording_transcripts/";
	КонецЕсли;
	
	Если ПараметрыЗапроса.Количество() > 0 Тогда
		ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирует запрос получения списка абонентов АТС
//
// Параметры:
//	URL			- Строка	- Корневой URL запроса
//	HTTPМетод	- Строка	- Метод (POST, GET)
//	ТелоЗапроса	- Строка	- Тело сформированного запроса
//	Заголовки	- Структура	- Структура заголовков запроса
//	Ошибка		- Строка	- Возвращаемое описание возникшей ошибки
//	json		- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПолученииАбонентов(URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	
	ПараметрыЗапроса = Новый Массив();
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "config/users/request";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "config/users/request";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.UIS Тогда
		КлючAPI = НастройкиТелефонии.КлючДляАвторизацииАТСUIS;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("jsonrpc");
		ЗаписьJSON.ЗаписатьЗначение("2.0");
		ЗаписьJSON.ЗаписатьИмяСвойства("id");
		ЗаписьJSON.ЗаписатьЗначение("" + Новый УникальныйИдентификатор());
		ЗаписьJSON.ЗаписатьИмяСвойства("method");
		ЗаписьJSON.ЗаписатьЗначение("get.employees");
		
		ЗаписьJSON.ЗаписатьИмяСвойства("params");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("access_token");
		ЗаписьJSON.ЗаписатьЗначение(КлючAPI);
		//ЗаписьJSON.ЗаписатьИмяСвойства("user_id");
		//ЗаписьJSON.ЗаписатьЗначение("number");
		//ЗаписьJSON.ЗаписатьИмяСвойства("offset");
		//ЗаписьJSON.ЗаписатьЗначение("number");
		//ЗаписьJSON.ЗаписатьИмяСвойства("limit");
		//ЗаписьJSON.ЗаписатьЗначение("number");
		//
		//ЗаписьJSON.ЗаписатьИмяСвойства("filter");
		//ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьКонецОбъекта();
		//
		//ЗаписьJSON.ЗаписатьИмяСвойства("sort");
		//ЗаписьJSON.ЗаписатьНачалоМассива();
		//ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("field");
		//ЗаписьJSON.ЗаписатьЗначение("string");
		//ЗаписьJSON.ЗаписатьИмяСвойства("order");
		//ЗаписьJSON.ЗаписатьЗначение("string");
		//ЗаписьJSON.ЗаписатьКонецОбъекта();
		//ЗаписьJSON.ЗаписатьКонецОбъекта();
		//
		//ЗаписьJSON.ЗаписатьИмяСвойства("fields");
		//ЗаписьJSON.ЗаписатьНачалоМассива();
		//ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		ТелоЗапроса = json;

	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		HTTPМетод = "GET";
		URL = URL + "apis/portal/abonents";
		
		Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
		
		ТелоЗапроса = json;			
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Ростелеком Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("domain");
		ЗаписьJSON.ЗаписатьЗначение(НастройкиТелефонии.Domain);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		Заголовки.Вставить("X-Client-ID", НастройкиТелефонии.vpbx_api_key);
		Заголовки.Вставить("X-Client-Sign", sign);
	
		URL = URL + "users_info";
		
		ТелоЗапроса = json;

	ИначеЕсли ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		ПараметрыЗапроса.Добавить("cmd=accounts");
		ПараметрыЗапроса.Добавить("token=" + НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);	
	КонецЕсли;
	
	Если ПараметрыЗапроса.Количество() > 0 Тогда
		ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирует запрос получения данных абонента
//
// Параметры:
//	ВнутреннийНомер	- Строка	- Внутренний номер
//	URL				- Строка	- Корневой URL запроса
//	HTTPМетод		- Строка	- Метод (POST, GET)
//	ТелоЗапроса		- Строка	- Тело сформированного запроса
//	Заголовки		- Структура	- Структура заголовков запроса
//	Ошибка			- Строка	- Возвращаемое описание возникшей ошибки
//	json			- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПолученииДанныхАбонента(ВнутреннийНомер, URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		HTTPМетод = "GET";
		
		Если НЕ ЗначениеЗаполнено(ВнутреннийНомер) Тогда
			Ошибка = "НеЗаполненВнутреннийНомерПользователя";
			Возврат;
		КонецЕсли;
		
		Токен = ТокенДоступаAPI(ВнутреннийНомер, Ошибка);
		
		Если ЗначениеЗаполнено(Ошибка) Тогда
			Возврат;
		КонецЕсли;
		
		Если Токен = Неопределено Тогда
			ВызватьИсключение НСтр("en='Failed to log in.';ru='Не удалось авторизоваться.'");
		КонецЕсли;
		
		URL = URL + "api/v2/profile/" + ВнутреннийНомер;
		
		Заголовки.Вставить("Authorization", "bearer " + Токен);
		Заголовки.Вставить("x-api-key", сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии().КлючДляАвторизацииАТСЯндекс);
	КонецЕсли;
	
	ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	
КонецПроцедуры

// Процедура формирует запрос получения исходящих номеров
//
// Параметры:
//	ВнутреннийНомер	- Строка	- Внутренний номер
//	URL				- Строка	- Корневой URL запроса
//	HTTPМетод		- Строка	- Метод (POST, GET)
//	ТелоЗапроса		- Строка	- Тело сформированного запроса
//	Заголовки		- Структура	- Структура заголовков запроса
//	Ошибка			- Строка	- Возвращаемое описание возникшей ошибки
//	json			- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПолученииИсходящихНомеров(ВнутреннийНомер, URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		HTTPМетод = "GET";
		
		Если НЕ ЗначениеЗаполнено(ВнутреннийНомер) Тогда
			Ошибка = "НеЗаполненВнутреннийНомерПользователя";
			Возврат;
		КонецЕсли;
		
		Токен = ТокенДоступаAPI(ВнутреннийНомер, Ошибка);
		
		Если ЗначениеЗаполнено(Ошибка) Тогда
			Возврат;
		КонецЕсли;
		
		Если Токен = Неопределено Тогда
			ВызватьИсключение НСтр("en='Failed to log in.';ru='Не удалось авторизоваться.'");
		КонецЕсли;
		
		URL = URL + "api/v2/phonenumbers";
		
		Заголовки.Вставить("Authorization", "bearer " + Токен);
		Заголовки.Вставить("x-api-key", сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии().КлючДляАвторизацииАТСЯндекс);
	КонецЕсли;
	
	ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	
КонецПроцедуры

// Процедура формирует запрос получения записи разговора
//
// Параметры:
//	ИдентификаторЗаписи		- Строка	- Идентификатор записи разговора
//	ВнутреннийНомер			- Строка	- Внутренний номер
//	РежимПолученияЗаписи	- Строка	- Режим получения записи
//	URL						- Строка	- Корневой URL запроса
//	HTTPМетод				- Строка	- Метод (POST, GET)
//	ТелоЗапроса				- Строка	- Тело сформированного запроса
//	Заголовки				- Структура	- Структура заголовков запроса
//	Ошибка					- Строка	- Возвращаемое описание возникшей ошибки
//	json					- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПолученииЗаписиРазговора(ИдентификаторЗаписи, ВнутреннийНомер, РежимПолученияЗаписи, URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("сфпИспользуемаяАТС");
	
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		HTTPМетод = Неопределено;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("recording_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗаписи);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("action");
		ЗаписьJSON.ЗаписатьЗначение("download");
		
		ЗаписьJSON.ЗаписатьИмяСвойства("extension");
		ЗаписьJSON.ЗаписатьЗначение(ВнутреннийНомер);
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "queries/recording/post?" + сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
		
		ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");

	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("recording_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗаписи);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("action");
		ЗаписьJSON.ЗаписатьЗначение(РежимПолученияЗаписи);
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		//ТелоЗапроса = "
		//|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		//|sign=" + sign + "
		//|json=" + json;
		//
		//ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		//ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		//ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		//URL = URL + "queries/recording/post";
		
		HTTPМетод = "GET";
		
		vpbx_api_key = НастройкиТелефонии.vpbx_api_key;
		vpbx_api_salt = НастройкиТелефонии.vpbx_api_salt;
		timestamp = Формат((ТекущаяДата() + 86400) - Дата("19700101"), "ЧН=0; ЧГ=0");
		sign = ПолучитьSign(vpbx_api_key, timestamp, ИдентификаторЗаписи, vpbx_api_salt);

		URL = URL + "queries/recording/link/" + ИдентификаторЗаписи + "/" + РежимПолученияЗаписи + "/" + vpbx_api_key + "/" + timestamp + "/" + sign;
		
		ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");

	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		HTTPМетод = "GET";
		
		Позиция = Найти(ИдентификаторЗаписи, "/");
		extTrackingId = КодировкаURL(Лев(ИдентификаторЗаписи, Позиция - 1));
		userId = КодировкаURL(Сред(ИдентификаторЗаписи, Позиция + 1));
		
		URL = URL + "apis/portal/records/" + extTrackingId + "/" + userId + "/reference";
		
		Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
		
		ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Ростелеком Тогда
		HTTPМетод = "POST";
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("session_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗаписи);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		Заголовки.Вставить("X-Client-ID", НастройкиТелефонии.vpbx_api_key);
		Заголовки.Вставить("X-Client-Sign", sign);
	
		URL = URL + "get_record";
		
		ТелоЗапроса = json;
	КонецЕсли;

КонецПроцедуры

// Процедура формирует запрос загрузки записи разговора
//
// Параметры:
//	ИдентификаторЗаписи	- Строка	- Идентификатор записи разговора
//	URL					- Строка	- Корневой URL запроса
//	HTTPМетод			- Строка	- Метод (POST, GET)
//	ТелоЗапроса			- Строка	- Тело сформированного запроса
//	Заголовки			- Структура	- Структура заголовков запроса
//	Ошибка				- Строка	- Возвращаемое описание возникшей ошибки
//	json				- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриЗагрузкеЗаписиРазговора(ИдентификаторЗаписи, URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		HTTPМетод = "GET";
		
		URL = ИдентификаторЗаписи;
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		HTTPМетод = "GET";
		
		URL = ИдентификаторЗаписи;
		
	ИначеЕсли сфпСофтФонПроСерверПереопределяемый.ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		HTTPМетод = "GET";
		
		URL = ИдентификаторЗаписи;
	КонецЕсли;
	
	ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	
КонецПроцедуры

// Процедура обработки ответа на запрос исходящего вызова
//
// Параметры:
//	HTTPОтвет						- HTTPОтвет	- Ответ сервера
//	ИмяСобытияДляЖурналаРегистрации	- Строка	- Имя события для записи журнала регистрации
//
Процедура ПриОбработкеОтветаНаСозданиеИсходящегоВызова(HTTPОтвет, ИмяСобытияДляЖурналаРегистрации) Экспорт
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		ТелоОтвета = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
		
		Если HTTPОтвет.КодСостояния = 200 Тогда
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
			ПараметрыОтвета = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			КодОтвета = Неопределено;
			Если ПараметрыОтвета.Свойство("result", КодОтвета) Тогда
				// 1ххх: Действие успешно выполнено
				Если сфпОбщегоНазначения.сфпСтрНачинаетсяС(КодОтвета, "1") Тогда
					Возврат;
				КонецЕсли;
				
				ЗаголовокОшибки = РасшифровкаОшибкиMango(КодОтвета);
				ТекстОшибки = ТелоОтвета;

			Иначе
				Возврат;
			КонецЕсли;	
			
		Иначе
			
			ЗаголовокОшибки = НСтр("en='Error initializing the call.';ru='Ошибка при инициализации вызова.'");
			ТекстОшибки = ТелоОтвета;
			
		КонецЕсли;
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		ТелоОтвета = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
		
		Если HTTPОтвет.КодСостояния = 200 Тогда
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
			ПараметрыОтвета = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			КодОтвета = Неопределено;
			Если ПараметрыОтвета.Свойство("result", КодОтвета) Тогда
				// 1ххх: Действие успешно выполнено
				Если сфпОбщегоНазначения.сфпСтрНачинаетсяС(КодОтвета, "1") Тогда
					Возврат;
				КонецЕсли;
				
				ЗаголовокОшибки = РасшифровкаОшибкиMango(КодОтвета);
				ТекстОшибки = ТелоОтвета;

			Иначе
				Возврат;
			КонецЕсли;	
			
		Иначе
			
			ЗаголовокОшибки = НСтр("en='Error initializing the call.';ru='Ошибка при инициализации вызова.'");
			ТекстОшибки = ТелоОтвета;
			
		КонецЕсли;
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Ростелеком Тогда
		Если HTTPОтвет.КодСостояния = 200 Тогда
			Возврат;
			
		ИначеЕсли HTTPОтвет.КодСостояния = 401 Тогда	
			ТелоОтвета = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
		    		
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
			ПараметрыОтвета = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			ТекстОшибки = "";
			Если ПараметрыОтвета.Свойство("resultMessage", ТекстОшибки) Тогда
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда				
					ЗаголовокОшибки = НСтр("ru='Ошибка при инициализации вызова.';en='Error initializing call.'");
					
				Иначе
					Возврат;
				КонецЕсли;	

			Иначе
				Возврат;
			КонецЕсли;	
		КонецЕсли;

	ИначеЕсли ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		// 200 ОК
		Если HTTPОтвет.КодСостояния = 200 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаголовокОшибки = РасшифровкаОшибкиItoolabs(HTTPОтвет.КодСостояния);
		ТекстОшибки = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3", ЗаголовокОшибки, Символы.ПС, ТекстОшибки);
	
	ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ТекстОшибки, УровеньЖурналаРегистрации.Ошибка);
	
	ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры

// Возвращает ссылку на запись разговора
//
// Параметры:
//	ИдентификаторЗвонка	- Строка	- Идентификатор звонка
//	ВнутреннийНомер		- Строка	- Внутренний номер
//	Ошибка				- Строка	- Возвращаемое описание возникшей ошибки
//
// Возвращаемое значение:
//	Строка	- Ссылка на запись разговора
//
Функция СсылкаНаЗаписьРазговора(ИдентификаторЗвонка, ВнутреннийНомер, Ошибка) Экспорт
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		Возврат ДанныеЗвонка(ИдентификаторЗвонка, ВнутреннийНомер, Ошибка);
	КонецЕсли;
	
КонецФункции

// Возвращает настройку отображения исходящего номера
//
// Возвращаемое значение:
//	Структура	- Настройки формы
//
Функция НастройкиФормыПользователей() Экспорт
	
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ПоказыватьИсходящийНомер", Константы.сфпИспользуемаяАТС.Получить() = Перечисления.сфпДоступныеАТС.Яндекс);
	
	Возврат НастройкиФормы;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура заполняет общие реквизиты документа Телефонный звонок
Процедура ЗаполнитьОбщиеРеквизиты(ЗвонокОбъект) Экспорт
	
	// Для решений на ТП3 заполняем организацию и подразделения
	РеквизитыДокумента = ЗвонокОбъект.Метаданные().Реквизиты;
	Если РеквизитыДокумента.Найти("ПодразделениеОтветственного") <> Неопределено Тогда
		Если ЗначениеЗаполнено(ЗвонокОбъект["Ответственный"].Сотрудник.ПодразделениеКомпании) Тогда
			  ЗвонокОбъект["ПодразделениеОтветственного"] = ЗвонокОбъект["Ответственный"].Сотрудник.ПодразделениеКомпании;
		Иначе ЗвонокОбъект["ПодразделениеОтветственного"] = ЗвонокОбъект["Ответственный"].ПодразделениеКомпании;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЗвонокОбъект["ПодразделениеОтветственного"]) Тогда
			ЗвонокОбъект["ПодразделениеОтветственного"] = Справочники["ПодразделенияКомпании"].ОсновноеПодразделение;
		КонецЕсли;	
		ЗвонокОбъект["ПодразделениеКомпании"] = ЗвонокОбъект["ПодразделениеОтветственного"];
		ЗвонокОбъект["Организация"] = ЗвонокОбъект["ПодразделениеКомпании"].Организация;
		Если НЕ ЗначениеЗаполнено(ЗвонокОбъект["Организация"]) Тогда
			ЗвонокОбъект["Организация"] = Справочники["Организации"]["ОсновнаяОрганизация"];
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры	//	ЗаполнитьОбщиеРеквизиты()

// Функция создает документ "Телефонный звонок"
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Функция сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, ДанныеЗаполнения) Экспорт
	
	ИмяДокументаТелефонныйЗвонок = СтрЗаменить(сфпСофтФонПроСервер.сфпИмяДокументаТелефонныйЗвонок(), "Документ.", "");
	РеквизитыДокумента = Метаданные.Документы[ИмяДокументаТелефонныйЗвонок].Реквизиты;
	
	ПустойАбонентПредставление = НСтр("ru='!!!Не определен!!!';en='!!!Indefined!!!'");

	Если СтруктураЗвонка.Свойство("ДатаНачала") И ЗначениеЗаполнено(СтруктураЗвонка.ДатаНачала) Тогда
		  ДатаЗвонка = СтруктураЗвонка.ДатаНачала;
	Иначе ДатаЗвонка = сфпСофтФонПроСервер.сфпТекущаяДата();	
	КонецЕсли;

	ДлительностьЗвонка = 0;
	Если СтруктураЗвонка.Свойство("ДатаОкончания") И ЗначениеЗаполнено(СтруктураЗвонка.ДатаОкончания) Тогда
		Если СтруктураЗвонка.Свойство("ДатаОтвета") И ЗначениеЗаполнено(СтруктураЗвонка.ДатаОтвета) Тогда
			ДлительностьЗвонка = (СтруктураЗвонка.ДатаОкончания - СтруктураЗвонка.ДатаОтвета);
			
		Иначе
			ДлительностьЗвонка = (СтруктураЗвонка.ДатаОкончания - ДатаЗвонка);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураЗвонка.Свойство("Состояние") И ЗначениеЗаполнено(СтруктураЗвонка.Состояние) Тогда
		  СостояниеЗвонка = СтруктураЗвонка.Состояние;
	Иначе СостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Отвеченный;
	КонецЕсли;

	НовыйЗвонок	= Документы[ИмяДокументаТелефонныйЗвонок].СоздатьДокумент();
	НовыйЗвонок.Дата				   = ДатаЗвонка;
	НовыйЗвонок.Входящий			   = СтруктураЗвонка.ВходящийЗвонок;
	НовыйЗвонок.АбонентКакСвязаться	   = СтруктураЗвонка.НомерТелефона; 
	НовыйЗвонок.сфпНомерКомпании	   = СтруктураЗвонка.Caller_Destination_Number;
	НовыйЗвонок.АбонентПредставление   = ПустойАбонентПредставление;
	НовыйЗвонок.Автор				   = сфпСофтФонПроСервер.сфпТекущийПользователь();
	НовыйЗвонок.Ответственный		   = НовыйЗвонок.Автор;
	НовыйЗвонок.сфпСостояниеЗвонка	   = СостояниеЗвонка;
	НовыйЗвонок.сфпИдентификаторЗвонка = СтруктураЗвонка.hCall;
	НовыйЗвонок.сфпИдентификаторЗаписи = СтруктураЗвонка.ИдентификаторЗаписи;
	НовыйЗвонок.сфпДлительностьЗвонка  = ДлительностьЗвонка;
	НовыйЗвонок.Описание			   = сфпСофтФонПроСервер.сфпЗаполнитьОписаниеТелефонногоЗвонка(НовыйЗвонок.сфпДлительностьЗвонка);

	ЗаполнитьОбщиеРеквизиты(НовыйЗвонок);
	
	Если НовыйЗвонок.Ссылка.Метаданные().Реквизиты.Найти("Важность") <> Неопределено Тогда
		Если НовыйЗвонок["Важность"].Метаданные().Имя = "ВариантыВажностиЗадачи" Тогда
			НовыйЗвонок["Важность"] = Перечисления["ВариантыВажностиЗадачи"].Обычная;
			
		Иначе	
			НовыйЗвонок["Важность"] = Перечисления["ВариантыВажностиВзаимодействия"].Обычная;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыДокумента.Найти("Тема") <> Неопределено Тогда
		НовыйЗвонок.Тема = сфпСофтФонПроСервер.сфпЗаполнитьТемуТелефонногоЗвонка(НовыйЗвонок.Входящий, НовыйЗвонок.Дата);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		Если СтруктураЗвонка.Свойство("ContactID") И ЗначениеЗаполнено(СтруктураЗвонка.ContactID) Тогда
			СтруктураЗвонка.Контакт	= сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(СтруктураЗвонка.ContactID);
		КонецЕсли;
	КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
	//	Если СтруктураЗвонка.МассивЗвонящих <> Неопределено Тогда
	//		Если СтруктураЗвонка.МассивЗвонящих.Количество() > 0 Тогда
	//			СтруктураЗвонка.Контакт	= СтруктураЗвонка.МассивЗвонящих[0];
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		НовыйЗвонок.АбонентПредставление = сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(СтруктураЗвонка.Контакт);
		
		ИмяРеквизитаАбонентКонтакт = сфпСофтФонПроСервер.сфпИмяРеквизитаАбонентКонтакт();
		НовыйЗвонок[ИмяРеквизитаАбонентКонтакт] = СтруктураЗвонка.Контакт;
		
		НовыйЗвонок.сфпКлиент = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(СтруктураЗвонка.Контакт);
		
		Если РеквизитыДокумента.Найти("Контрагент") <> Неопределено Тогда
			ИмяМетаданныхКонтакт = СтруктураЗвонка.Контакт.Метаданные().Имя;
			Если ИмяМетаданныхКонтакт = "Контрагенты" Тогда
				НовыйЗвонок.Контрагент = СтруктураЗвонка.Контакт;
				
			ИначеЕсли ИмяМетаданныхКонтакт = "КонтактныеЛица" Тогда
				НовыйЗвонок.Контрагент = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(СтруктураЗвонка.Контакт);
			КонецЕсли;
		КонецЕсли;

		Если Найти(Строка(СтруктураЗвонка.Контакт), НСтр("ru = '<Объект не найден>'")) > 0 Тогда
			КомментарийЗвонка = Строка(ТипЗнч(СтруктураЗвонка.Контакт)) + ": "
			+ сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(СтруктураЗвонка.Контакт) + НСтр("ru = ', номер: '") 
			+ сфпСофтФонПроСервер.сфпПолучитьПредставлениеНомераТелефона(СтруктураЗвонка.Контакт, СтруктураЗвонка.НомерТелефона)
			+ Символы.ПС + НСтр("ru='К данному абоненту в доступе отказано.'")
			+ НСтр("ru=' Для разрешения работы с абонентом обратитесь к руководителю или администратору.'");
			
			Если РеквизитыДокумента.Найти("Комментарий") = Неопределено Тогда
				НовыйЗвонок.Описание = НовыйЗвонок.Описание + Символы.ПС + КомментарийЗвонка;
				
			Иначе	
				НовыйЗвонок.Комментарий = КомментарийЗвонка;
			КонецЕсли;
		КонецЕсли;

	Иначе
		Если НовыйЗвонок.Входящий Тогда
			Если СтруктураЗвонка.Свойство("ВнешнийЗвонок") И СтруктураЗвонка.ВнешнийЗвонок Тогда
				АбонентПредставление = "";
				Если СтруктураЗвонка.МассивЗвонящих = Неопределено Тогда
					АбонентПредставление = СтруктураЗвонка.CallerInfoName;

				ИначеЕсли СтруктураЗвонка.МассивЗвонящих.Количество() = 0 Тогда
					АбонентПредставление = СтруктураЗвонка.CallerInfoName;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(АбонентПредставление) Тогда
					Если Найти(АбонентПредставление, СтруктураЗвонка.НомерТелефона) = 0 Тогда
						НовыйЗвонок.АбонентПредставление = АбонентПредставление;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли СтруктураЗвонка.Свойство("CalledInfoName") И НЕ ПустаяСтрока(СтруктураЗвонка.CalledInfoName) Тогда
			НовыйЗвонок.АбонентПредставление = СтруктураЗвонка.CalledInfoName;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Если ДанныеЗаполнения.Свойство("Основание") Тогда
			Если РеквизитыДокумента.Найти("ВзаимодействиеОснование") <> Неопределено Тогда
				НовыйЗвонок.ВзаимодействиеОснование = ДанныеЗаполнения.Основание;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйЗвонок.Входящий Тогда
		Если ЗначениеЗаполнено(ДанныеЗаполнения) И ДанныеЗаполнения.Свойство("сфпСтруктураCoMagic") Тогда
			сфпСтруктураВнешнихДанных = ДанныеЗаполнения.сфпСтруктураCoMagic;
			НовыйЗвонок.сфпCoMagicID = сфпСтруктураВнешнихДанных.comagic_context.visitor_id;
			
			НовыйЗвонок["Комментарий"] = НовыйЗвонок["Комментарий"] + ?(НЕ ЗначениеЗаполнено(НовыйЗвонок["Комментарий"]), "", Символы.ПС)
				+ НСтр("ru='Кампания: '") + сфпСтруктураВнешнихДанных.comagic_context.campaign + Символы.ПС
				+ НСтр("ru='Сайт: '") + сфпСтруктураВнешнихДанных.comagic_context.site + Символы.ПС
				+ НСтр("ru='Ключевые слова: '") + сфпСтруктураВнешнихДанных.comagic_context.search_query;
				
		Иначе
			МенеджерЗаписи = РегистрыСведений.сфпДанныеКоллтрекинга.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.НомерТелефона = Прав(НовыйЗвонок.АбонентКакСвязаться, 10);
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				КаналВоздействия = "";
				Если ЗначениеЗаполнено(МенеджерЗаписи.utm_source) Тогда
					КаналВоздействия = Справочники.сфпКаналыРекламныхВоздействий.НайтиПоРеквизиту("Идентификатор", МенеджерЗаписи.utm_source);
					Если КаналВоздействия.Пустая() Тогда
						КаналВоздействияОбъект = Справочники.сфпКаналыРекламныхВоздействий.СоздатьЭлемент();
						КаналВоздействияОбъект.Наименование = МенеджерЗаписи.utm_source;
						КаналВоздействияОбъект.Идентификатор = МенеджерЗаписи.utm_source;
						КаналВоздействияОбъект.Записать();
						
						КаналВоздействия = КаналВоздействияОбъект.Ссылка;
					КонецЕсли;	
				КонецЕсли;
				
				Мероприятие = "";
				Если ЗначениеЗаполнено(МенеджерЗаписи.utm_campaign) Тогда
					Мероприятие = Справочники.сфпМаркетинговыеМероприятия.НайтиПоРеквизиту("Идентификатор", МенеджерЗаписи.utm_campaign);
					Если КаналВоздействия.Пустая() Тогда
						МероприятиеОбъект = Справочники.сфпМаркетинговыеМероприятия.СоздатьЭлемент();
						МероприятиеОбъект.Наименование = МенеджерЗаписи.utm_campaign;
						МероприятиеОбъект.Идентификатор = МенеджерЗаписи.utm_campaign;
						МероприятиеОбъект.Записать();
						
						Мероприятие = МероприятиеОбъект.Ссылка;
					КонецЕсли;	
				КонецЕсли;
				
				НовыйЗвонок["сфпCoMagicID"] = МенеджерЗаписи.Идентификатор;
				НовыйЗвонок["Комментарий"] = НовыйЗвонок["Комментарий"] + ?(НЕ ЗначениеЗаполнено(НовыйЗвонок["Комментарий"]), "", Символы.ПС)
					+ НСтр("ru='Сайт: ';en='Website: '") + МенеджерЗаписи.Сайт + Символы.ПС
					+ НСтр("ru='Ключевые слова: ';en='Keywords: '") + МенеджерЗаписи.utm_term;

				МенеджерЗаписи.Удалить();
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		НовыйЗвонок.Записать();
	Исключение
		СтрОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	// +РАРУС
	// Заполним предмет телефонного звонка
	Если ЗначениеЗаполнено(НовыйЗвонок.Ссылка)
		И ЗначениеЗаполнено(ДанныеЗаполнения)
		И  ДанныеЗаполнения.Свойство("ПредметВзаимодействия") Тогда
		
		СтруктураДляЗаписи = Новый Структура;
		СтруктураДляЗаписи.Вставить("Предмет"                ,ДанныеЗаполнения.ПредметВзаимодействия);
		СтруктураДляЗаписи.Вставить("Папка"                  ,Неопределено);
		СтруктураДляЗаписи.Вставить("Рассмотрено"            ,Истина);
		СтруктураДляЗаписи.Вставить("РассмотретьПосле"       ,Неопределено);
		СтруктураДляЗаписи.Вставить("РассчитыватьРассмотрено",Истина);
		
		РегистрыСведений.ПредметыПапкиВзаимодействий.ЗаписатьПредметыПапкиВзаимодействий(
			НовыйЗвонок.Ссылка,
			СтруктураДляЗаписи);
		
	КонецЕсли;
	// -РАРУС
	
	Возврат НовыйЗвонок.Ссылка;

КонецФункции // сфпСоздатьТелефонныйЗвонок()


/////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЕЙСТВИЙ

// Процедура добавляет в массив структуру действий
//
// Параметры:
//	МассивДействий	- Массив	- Массив доступных действий
//	Наименование	- Строка	- Наименование действия
//	Действие		- Строка	- Имя процедуры-обработчика действия, процедура должна располагаться в этом модуле
//
Процедура сфпДобавитьДействие(МассивДействий, Наименование, Действие)
	СтруктураДействия = Новый Структура;
	СтруктураДействия.Вставить("Наименование",	Наименование);
	СтруктураДействия.Вставить("Действие",		Действие);
	МассивДействий.Добавить(СтруктураДействия);
КонецПроцедуры // сфпДобавитьДействие()

// Функция возвращает массив структур доступных действий при звонке
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив структур доступных действий
//
Функция сфпПолучитьМассивДоступныхДействий() Экспорт
	
	МассивДействий = Новый Массив();
	
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Нет действий'"), "");
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть телефонный звонок'"), "сфпОткрытьТелефонныйЗвонок");
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Карточка клиента'"), "сфпОткрытьКарточкуКонтакта");
	Если НЕ (Метаданные.Документы.Найти("Событие") = Неопределено) Тогда        
		сфпДобавитьДействие(МассивДействий,	Нстр("ru='Событие'"), "сфпОткрытьСобытие");
	КонецЕсли;	
	Если НЕ (Метаданные.Обработки.Найти("КонтактЦентр") = Неопределено) Тогда
		сфпДобавитьДействие(МассивДействий, Нстр("ru='Открыть ""Контакт-центр""'"), "ОткрытьКонтактЦентр");
	КонецЕсли;
	
	Если Найти(ВРЕГ(Метаданные.Имя), "АВТОСАЛОН") = 0 Тогда
		Если НЕ (Метаданные.Документы.Найти("ЗаказПокупателя") = Неопределено) Тогда
			сфпДобавитьДействие(МассивДействий,	Нстр("ru='Заказ покупателя'"), "сфпОткрытьЗаказПокупателя");
		КонецЕсли;	
		Если НЕ (Метаданные.Документы.Найти("ЗаказКлиента") = Неопределено) Тогда
			сфпДобавитьДействие(МассивДействий,	Нстр("ru='Заказ клиента'"), "сфпОткрытьЗаказКлиента");
		КонецЕсли;	
		Если НЕ (Метаданные.Документы.Найти("ЗаказПоставщику") = Неопределено) Тогда
			сфпДобавитьДействие(МассивДействий,	Нстр("ru='Заказ поставщику'"), "сфпОткрытьЗаказПоставщику");
		КонецЕсли;	
		Если НЕ (Метаданные.Обработки.Найти("ПомощникПродаж") = Неопределено) Тогда
			сфпДобавитьДействие(МассивДействий,	Нстр("ru='Помощник продаж'"), "сфпОткрытьПомощникПродаж");
		КонецЕсли;	
		Если НЕ (Метаданные.Отчеты.Найти("ДебиторскаяЗадолженность") = Неопределено) Тогда
			сфпДобавитьДействие(МассивДействий,	Нстр("ru='Дебиторская задолженность'"),	"сфпОткрытьДебиторскаяЗадолженность");
		КонецЕсли;	
		Если НЕ (Метаданные.Отчеты.Найти("Взаиморасчеты") = Неопределено) Тогда
			сфпДобавитьДействие(МассивДействий,	Нстр("ru='Взаиморасчеты'"), "сфпОткрытьВзаиморасчеты");
		КонецЕсли;	
		Если НЕ (Метаданные.Отчеты.Найти("РасчетыСПартнерами") = Неопределено) Тогда
			сфпДобавитьДействие(МассивДействий,	Нстр("ru='Взаиморасчеты'"), "сфпОткрытьРасчетыСПартнерами");
		КонецЕсли;	
		Если НЕ (Метаданные.Отчеты.Найти("КарточкаРасчетовСКлиентами") = Неопределено) Тогда
			сфпДобавитьДействие(МассивДействий,	Нстр("ru='Карточка расчетов'"), "сфпОткрытьКарточкаРасчетовСКлиентами");
		КонецЕсли;	
	КонецЕсли;
	
	Возврат МассивДействий;

КонецФункции // сфпПолучитьМассивДоступныхДействий()


/////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ COMAGIC

// Функция возвращает идентификатор CoMagic
//
// Парамеры:
//	Ссылка	- ДокументСсылка	- Документ
//
// Возвращаемое значение:
//	Строка	- Идентификатор CoMagic
//
Функция сфпПолучитьCoMagicID(Ссылка) Экспорт
	
	CoMagicID = "";
	
	ДокументИмяМетаданных = Ссылка.Метаданные().Имя;
	Если ДокументИмяМетаданных = "ТелефонныйЗвонок" ИЛИ ДокументИмяМетаданных = "CRM_ТелефонныйЗвонок" Тогда
		CoMagicID = Ссылка.сфпCoMagicID;
		
		ИмяРеквизитаАбонентКонтакт = сфпСофтФонПроСервер.сфпИмяРеквизитаАбонентКонтакт();
		
		АбонентКонтакт = Ссылка[ИмяРеквизитаАбонентКонтакт];
		Если ЗначениеЗаполнено(АбонентКонтакт) Тогда
			Если сфпСофтФонПроСервер.сфпРеквизитСуществует(АбонентКонтакт, "сфпCoMagicID") Тогда
				CoMagicID = АбонентКонтакт.сфпCoMagicID;
				Если ПустаяСтрока(CoMagicID) Тогда
					КонтактИмяМетаданных = АбонентКонтакт.Метаданные().Имя;
					Если КонтактИмяМетаданных = "КонтактныеЛицаПартнеров" ИЛИ КонтактИмяМетаданных = "КонтактныеЛица" Тогда
						ВладелецКонтакта = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(АбонентКонтакт);
						Если ЗначениеЗаполнено(ВладелецКонтакта) И сфпСофтФонПроСервер.сфпРеквизитСуществует(ВладелецКонтакта, "сфпCoMagicID") Тогда
							CoMagicID = ВладелецКонтакта.сфпCoMagicID;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат CoMagicID;

КонецФункции // сфпПолучитьCoMagicID()

// Формирует структуру полей контактной информации типа Телефон или МобильныйТелефон по представлению телефона
//
// Параметры
//  Представление  - Строка - строковая информация с номером телефона
//
// Возвращаемое значение:
//   Структура   - сформированная структура
//
Функция ПреобразоватьНомерДляКонтактнойИнформации(знач Номер) Экспорт
	
	// Очистка пользовательских разделителей
	ЗаменяемыеСимволы = "()- ";
	Для НомерСимвола = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Номер = СтрЗаменить(Номер, Сред(ЗаменяемыеСимволы, НомерСимвола, 1), "");
	КонецЦикла;
	
	// Телефонный код России 7 (вызов внутри страны начинается на 8), коды сотовых операторов начинаются на 9.
	Если Лев(Номер, 2) = "89" Тогда
		Номер = "7"+Сред(Номер, 2);
	ИначеЕсли Лев(Номер, 3) = "+79" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;
	
	Возврат Номер;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область MangoOffice

Функция КодировкаURL(Строка) Экспорт
	
	Возврат КодироватьСтроку(Строка, СпособКодированияСтроки.КодировкаURL);
	
КонецФункции

Функция ПолучитьSign(Параметр1, Параметр2, Параметр3, Параметр4 = Неопределено) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(Параметр1);
	ХешированиеДанных.Добавить(Параметр2);
	ХешированиеДанных.Добавить(Параметр3);
	
	Если Параметр4 <> Неопределено Тогда
		ХешированиеДанных.Добавить(Параметр4);
	КонецЕсли;	
	
	Возврат НРег(СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", ""));
	
КонецФункции

Функция РасшифровкаОшибкиMango(Знач Код)
	
	Код = Формат(Код, "ЧГ=0");
	
	Если сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "21") Тогда // 2100
		Возврат НСтр("en='Account access is impossible';ru='Доступ к счету невозможен'");
	ИначеЕсли Код = "2210" Тогда
		Возврат НСтр("en='Access is limited to the period of use';ru='Доступ ограничен периодом использования'");
	ИначеЕсли Код = "2211" Тогда
		Возврат НСтр("en='Reached daily limit of using the service';ru='Достигнут дневной лимит использования услуги'");
	ИначеЕсли Код = "2212" Тогда
		Возврат НСтр("en='Reached the monthly limit of use of the service';ru='Достигнут месячный лимит использования услуги'");
	ИначеЕсли Код = "2220" Тогда
		Возврат НСтр("en='number of simultaneous calls/actions are limited';ru='Количество одновременных вызовов/действий ограничено'");
	ИначеЕсли Код = "2230" Тогда
		Возврат НСтр("en='service is not available';ru='Услуга недоступна'");
	ИначеЕсли Код = "2240" Тогда
		Возврат НСтр("en='Insufficient funds in the account';ru='Недостаточно средств на счете'");
	ИначеЕсли Код = "2250" Тогда
		Возврат НСтр("en='A limit on the number of usages of services in the billing';ru='Ограничение на количество использований услуги в биллинге'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "22") Тогда // 2200
		Возврат НСтр("en='Account access is limited';ru='Доступ к счету ограничен'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "23") Тогда // 2300
		Возврат НСтр("en='Direction blocked';ru='Направление заблокировано'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "24") Тогда // 2400
		Возврат НСтр("en='Billing error';ru='Ошибка биллинга'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "2") Тогда // 2000
		Возврат НСтр("en='A limitation of the billing system';ru='Ограничение биллинговой системы'");
	ИначеЕсли Код = "3100" Тогда
		Возврат НСтр("en='Incorrect parameters passed to command';ru='Переданы неверные параметры команды'");
	ИначеЕсли Код = "3101" Тогда
		Возврат НСтр("en='request is made by a method other than POST';ru='Запрос выполнен по методу, отличному от POST'");
	ИначеЕсли Код = "3102" Тогда
		Возврат НСтр("en='key value does not correspond to calculated';ru='Значение ключа не соответствуют рассчитанному'");
	ИначеЕсли Код = "3103" Тогда
		Возврат НСтр("en='request is missing a required parameter';ru='В запросе отсутствует обязательный параметр'");
	ИначеЕсли Код = "3104" Тогда
		Возврат НСтр("en='This parameter is passed in the wrong format';ru='Параметр передан в неправильном формате'");
	ИначеЕсли Код = "3105" Тогда
		Возврат НСтр("en='access key was incorrect';ru='Неверный ключ доступа'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "32") Тогда // 3200
		Возврат НСтр("en='Invalid subscriber number';ru='Неверно указан номер абонента'");
	ИначеЕсли Код = "3310" Тогда
		Возврат НСтр("en='challenge is not found';ru='Вызов не найден'");
	ИначеЕсли Код = "3320" Тогда
		Возврат НСтр("en='recorded conversation was not found';ru='Запись разговора не найдена'");
	ИначеЕсли Код = "3330" Тогда
		Возврат НСтр("en='number is not found in VATS or employee';ru='Номер не найден у ВАТС или сотрудника'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "33") Тогда // 3300
		Возврат НСтр("en='object does not exist';ru='Объект не существует'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "3") Тогда // 3000
		Возврат НСтр("en='Bad request';ru='Неверный запрос'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "4") Тогда // 4000
		Возврат НСтр("en='action cannot be performed';ru='Действие не может быть выполнено'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "5") Тогда // 5000
		Возврат НСтр("en='Server error';ru='Ошибка сервера'");
	Иначе
		Возврат НСтр("en='Unknown error';ru='Неизвестная ошибка'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Itoolabs

Функция РасшифровкаОшибкиItoolabs(Код)
	
	Если Код = 400 Тогда
		Возврат НСтр("en='Invalid parameters';ru='Переданы некорректные параметры'");
	ИначеЕсли Код = 401 Тогда
		Возврат НСтр("en='Invalid key (token)';ru='Передан неверный ключ (token)'");
	Иначе
		Возврат НСтр("en='Unknown error';ru='Неизвестная ошибка'")
	КонецЕсли;
	
КонецФункции

Функция ЭтоПлатформаITooLabs(АТС) Экспорт
	
	АТСНаПлатформеItoolabs = Новый Массив();
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.УниверсальныйItoolabs);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.ДомRu);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.ВестКоллСПб);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.ДеловаяСетьИркутск);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.Энфорта);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.Мегафон);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.ТТК);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.ВестКоллМосква);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.VirginConnect);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.ГарсТелеком);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.НаукаСвязь);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.RiNet);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.СибирскиеСети);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.Авантел);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.Гравител);
	
	Возврат АТСНаПлатформеItoolabs.Найти(АТС) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область ЯндексТелефония

Функция ТокенДоступаAPI(ВнутреннийНомер, Ошибка)
	
	Токен = АктуальныйТокенДоступаAPI(ВнутреннийНомер);
	
	Если Токен = Неопределено Тогда
		Токен = НовыйТокенДоступаAPI(ВнутреннийНомер, Ошибка);
	КонецЕсли;
	
	Возврат Токен;
	
КонецФункции

Функция АктуальныйТокенДоступаAPI(ВнутреннийНомер)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.сфпТокеныДоступаAPIТелефонии.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВнутреннийНомер = ВнутреннийНомер;
	МенеджерЗаписи.Прочитать();
	
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Токен) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если МенеджерЗаписи.СрокДействия < ТекущаяДатаСеанса() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат МенеджерЗаписи.Токен;
	
КонецФункции

Функция НовыйТокенДоступаAPI(ВнутреннийНомер, Ошибка)
	
	ДанныеАвторизации = ЗапроситьТокенДоступа(ВнутреннийНомер, Ошибка);
	
	Если ЗначениеЗаполнено(Ошибка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДанныеАвторизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписатьТокенДоступа(ВнутреннийНомер, ДанныеАвторизации.access_token, ТекущаяДатаСеанса() + ДанныеАвторизации.expires_in);
	
	Возврат ДанныеАвторизации.access_token;
	
КонецФункции

Функция ЗапроситьТокенДоступа(ВнутреннийНомер, Ошибка)
	
	api_key = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии().КлючДляАвторизацииАТСЯндекс;
	
	URL = сфпСофтФонПроСервер.КорневойАдресАТС() + "api/v2/auth/token";
	СтруктураURI = сфпОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить("grant_type=client_credentials");
	ПараметрыЗапроса.Добавить("client_id=" + api_key);
	ПараметрыЗапроса.Добавить("client_secret=" + ВнутреннийНомер);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.Заголовки.Вставить("x-api-key", api_key);
	HTTPЗапрос.УстановитьТелоИзСтроки(сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&"),
		КодировкаТекста.UTF8,
		ИспользованиеByteOrderMark.НеИспользовать);
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	ПараметрыЗапроса = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Если ПараметрыЗапроса.Свойство("error") И ПараметрыЗапроса.error = "invalid_client" Тогда
		Ошибка = "НекорректныйВнутреннийНомерПользователя";
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗаписатьТокенДоступа(ВнутреннийНомер, Токен, СрокДействия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.сфпТокеныДоступаAPIТелефонии.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВнутреннийНомер = ВнутреннийНомер;
	МенеджерЗаписи.Токен = Токен;
	МенеджерЗаписи.СрокДействия = СрокДействия;
	МенеджерЗаписи.Записать();
	
КонецФункции

Функция ДанныеЗвонка(ИдентификаторЗвонка, ВнутреннийНомер, Ошибка)
	
	Токен = ТокенДоступаAPI(ВнутреннийНомер, Ошибка);
	
	Если ЗначениеЗаполнено(Ошибка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Токен = Неопределено Тогда
		ВызватьИсключение НСтр("en='Failed to log in.';ru='Не удалось авторизоваться.'");
	КонецЕсли;
	
	URL = сфпСофтФонПроСервер.КорневойАдресАТС() + "api/v2/calls/" + ИдентификаторЗвонка;
	СтруктураURI = сфпОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "bearer " + Токен);
	HTTPЗапрос.Заголовки.Вставить("x-api-key", сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии().КлючДляАвторизацииАТСЯндекс);
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);
		
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	ПараметрыЗапроса = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Если ПараметрыЗапроса.Свойство("data") Тогда
		Если ПараметрыЗапроса.data.Свойство("callRecord") Тогда
			ДанныеЗаписи = ПараметрыЗапроса.data.callRecord;
			Возврат ДанныеЗаписи.Uri;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

Процедура сфпОбработкаПолученияФормыОбработкаПолученияФормы(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументМенеджер.ТелефонныйЗвонок") Тогда
		ИспользуетсяСофтФон = сфпСофтФонПроСервер.сфпИспользоватьСофтФон() И сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон");
		Если ИспользуетсяСофтФон Тогда
			СтандартнаяОбработка = Ложь;
			
	    	Если ВидФормы = "ФормаОбъекта" Тогда
			    ВыбраннаяФорма = "Документ.ТелефонныйЗвонок.Форма.сфпФормаДокумента";
			
			ИначеЕсли ВидФормы = "ФормаСписка" ИЛИ ВидФормы = "ФормаВыбора" Тогда
				ВыбраннаяФорма = "Документ.ТелефонныйЗвонок.Форма.сфпФормаСписка";
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры

Функция СобытиеЖурналаРегистрации() Экспорт
	Возврат НСтр("en='Telephony';ru='Телефония'");
КонецФункции

Процедура ЗаписатьЗапросВЖурналРегистрации(ВложенноеИмяСобытия, Текст, УровеньЖР = Неопределено) Экспорт
	
	Если УровеньЖР = Неопределено Тогда
		УровеньЖР = УровеньЖурналаРегистрации.Примечание;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации() + "." + ВложенноеИмяСобытия, УровеньЖР,,, Текст);
	
КонецПроцедуры

Функция НастройкиИнтеграцииЗаполнены(АТС, НастройкиТелефонии)
	
	Если АТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.АдресОблачнойАТС)
			И ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_key)
			И ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_salt);
			
	ИначеЕсли АТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_key)
			И ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_salt);
		
	ИначеЕсли АТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииАТСЯндекс);
		
	ИначеЕсли АТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
		
	ИначеЕсли АТС = Перечисления.сфпДоступныеАТС.Ростелеком Тогда
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_key)
			И ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_salt)
			И ЗначениеЗаполнено(НастройкиТелефонии.Domain);

	ИначеЕсли АТС = Перечисления.сфпДоступныеАТС.UIS Тогда
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииАТСUIS);		
		
	Иначе
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.АдресОблачнойАТС)
			И ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС)
			И ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииВИБ);	
	КонецЕсли;
	
КонецФункции

Процедура ПодпискаНаСобытие1ОбработкаПолученияФормы(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПодпискаНаСобытие1ОбработкаПолученияФормы1(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВыбраннаяФорма = "Обработка.ВводКонтактнойИнформации.Форма.ВводТелефона" Тогда
		Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
			ВерсияСофтФон = Константы.сфпИспользуемаяВерсияСофтФон.Получить();
			Если ВерсияСофтФон = Перечисления.сфпВерсииСофтФон.СофтФотПроф Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ОбщаяФорма.сфпВводТелефона";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти