
#Область ПрограммныйИнтерфейс

// Создание элементов справочника КлассификаторБанков
//
Процедура СоздатьКлассификаторБанков() Экспорт
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КлассификаторБанковРФ.Ссылка КАК Ссылка,
			|	КлассификаторБанковРФ.ВерсияДанных КАК ВерсияДанных,
			|	КлассификаторБанковРФ.ПометкаУдаления КАК ПометкаУдаления,
			|	КлассификаторБанковРФ.Родитель КАК Родитель,
			|	КлассификаторБанковРФ.ЭтоГруппа КАК ЭтоГруппа,
			|	КлассификаторБанковРФ.Код КАК Код,
			|	КлассификаторБанковРФ.Наименование КАК Наименование,
			|	КлассификаторБанковРФ.КоррСчет КАК КоррСчет,
			|	КлассификаторБанковРФ.Город КАК Город,
			|	КлассификаторБанковРФ.Адрес КАК Адрес,
			|	КлассификаторБанковРФ.Телефоны КАК Телефоны,
			|	КлассификаторБанковРФ.ДеятельностьПрекращена КАК ДеятельностьПрекращена,
			|	КлассификаторБанковРФ.СВИФТБИК КАК СВИФТБИК,
			|	КлассификаторБанковРФ.ИНН КАК ИНН,
			|	КлассификаторБанковРФ.Предопределенный КАК Предопределенный,
			|	КлассификаторБанковРФ.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк
			|ИЗ
			|	Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО КлассификаторБанковРФ.Код = КлассификаторБанков.Код
			|			И ЕСТЬNULL(КлассификаторБанковРФ.КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """")
			|			И ЕСТЬNULL(КлассификаторБанковРФ.СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """")
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоГруппа УБЫВ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СписокРодителей = Новый Соответствие;
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Банк) Тогда
				Продолжить;	
			КонецЕсли;
			
			Если Выборка.ЭтоГруппа Тогда
				Банк 				= Справочники.КлассификаторБанков.СоздатьГруппу();
				ЗаполнитьЗначенияСвойств(Банк, Выборка, "Код, Наименование, ПометкаУдаления, ИмяПредопределенныхДанных, Родитель");
				СписокРодителей.Вставить(Банк.Наименование, Банк);
			Иначе
				Банк 				= Справочники.КлассификаторБанков.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(Банк, Выборка);
				
				Родитель = СписокРодителей.Получить(Выборка.Родитель.Наименование); 
				Если Родитель <> Неопределено Тогда
					Банк.Родитель = Родитель;
				КонецЕсли;
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Банк);
		КонецЦикла;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Поиск и замена элементов справочника Классификатор банков РФ.
//
// Параметры:
//  Параметры - параметры выполнения обновления.
//
Процедура НайтиЭлементыКлассификатораБанковРФ(Параметры) Экспорт
	
	Документы.ЗаказНаАвтомобиль.ЗаменитьКлассификаторБанков();
	Документы.ПланФакт.ЗаменитьКлассификаторБанков();
	Документы.РабочийЛистКредитногоОтдела.ЗаменитьКлассификаторБанков();
	Справочники.БанковскиеСчета.ЗаменитьКлассификаторБанков();
	Справочники.ДействияНаЗначимыеСобытия.ЗаменитьКлассификаторБанков();
	ЗаметкиАльфаАвто.ЗаменитьКлассификаторБанков();
	Справочники.ЗначимыеСобытия.ЗаменитьКлассификаторБанков();
	Справочники.КредитныеПрограммы.ЗаменитьКлассификаторБанков();
		
	ОбработатьБезопасноеХранилищеДанных();
	ОбработатьВерсииОбъектов();
	ОбработатьДанныеОбработанныеВЦентральномУзлеРИБ();
	ОбработатьДанныеОбъектовДляРегистрацииВОбменах();
	ОбработатьЗависимостиПравДоступа();
	ОбработатьНаборыЗначенийДоступа();
	ОбработатьНастройкиОчисткиФайлов();
	ОбработатьПубличныеИдентификаторыСинхронизируемыхОбъектов();
	ОбработатьРезультатыОбменаДанными();
	ОбработатьСоответствияОбъектовИнформационныхБаз();
	ОбработатьСкидкиСтрокиШапки();
	ОбработатьСтатусыСинхронизацииФайловСОблачнымСервисом();
	ОбработатьСтатусыЗагрузкиВыгрузкиОбъектов();
	ОбработатьПланирование();
	
КонецПроцедуры

// Выполняет замену Классификатора банков РФ
//
// Параметры:
//  Параметры - параметры выполнения обновления.
//
// Возвращаемое значение:
//  Булево - результат выполнения запроса
//
Функция ПроверитьКлассификаторБанков(Параметры) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Параметры.ПолноеИмя);
	Возврат МенеджерОбъекта.ЗаменитьКлассификаторБанков(Параметры.Отбор);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьБезопасноеХранилищеДанных()
	
	Попытка	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	""БезопасноеХранилищеДанных"" КАК ИмяРегистра,
			|	БезопасноеХранилищеДанных.Владелец КАК Банк,
			|	БезопасноеХранилищеДанных.Данные КАК Данные
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	РегистрСведений.БезопасноеХранилищеДанных КАК БезопасноеХранилищеДанных
			|ГДЕ
			|	БезопасноеХранилищеДанных.Владелец ССЫЛКА Справочник.КлассификаторБанковРФ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	""БезопасноеХранилищеДанныхОбластейДанных"",
			|	БезопасноеХранилищеДанныхОбластейДанных.Владелец,
			|	БезопасноеХранилищеДанныхОбластейДанных.Данные
			|ИЗ
			|	РегистрСведений.БезопасноеХранилищеДанныхОбластейДанных КАК БезопасноеХранилищеДанныхОбластейДанных
			|ГДЕ
			|	БезопасноеХранилищеДанныхОбластейДанных.Владелец ССЫЛКА Справочник.КлассификаторБанковРФ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.ИмяРегистра КАК ИмяРегистра,
			|	ВТ.Банк КАК Владелец,
			|	ВТ.Данные КАК Данные,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк
			|ИЗ
			|	ВТ КАК ВТ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО ВТ.Банк.Код = КлассификаторБанков.Код
			|			И ЕСТЬNULL(ВТ.Банк.КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """")
			|			И ЕСТЬNULL(ВТ.Банк.СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """")";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписей = РегистрыСведений[Выборка.ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписей, Выборка); 
			МенеджерЗаписей.Прочитать();
			
			МенеджерЗаписей.Владелец = Выборка.Банк;
				
			МенеджерЗаписей.Записать();
		КонецЦикла;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьВерсииОбъектов()
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	""ВерсииОбъектов"" КАК ИмяРегистра,
			|	ВерсииОбъектов.НомерВерсии КАК НомерВерсии,
			|	ВерсииОбъектов.Объект КАК Объект,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк
			|ИЗ
			|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО (ВЫРАЗИТЬ(ВерсииОбъектов.Объект КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков.Код)
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(ВерсииОбъектов.Объект КАК Справочник.КлассификаторБанковРФ).КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """"))
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(ВерсииОбъектов.Объект КАК Справочник.КлассификаторБанковРФ).СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """"))
			|ГДЕ
			|	ВерсииОбъектов.Объект ССЫЛКА Справочник.КлассификаторБанковРФ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МенеджерЗаписей = РегистрыСведений[Выборка.ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписей, Выборка); 
			МенеджерЗаписей.Прочитать();
			
			Если МенеджерЗаписей.Выбран() Тогда
			
				МенеджерЗаписей.Объект = Выборка.Банк;
				МенеджерЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьДанныеОбработанныеВЦентральномУзлеРИБ()
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	""ДанныеОбработанныеВЦентральномУзлеРИБ"" КАК ИмяРегистра,
			|	ДанныеОбработанныеВЦентральномУзлеРИБ.УзелПланаОбмена КАК УзелПланаОбмена,
			|	ДанныеОбработанныеВЦентральномУзлеРИБ.ОбъектМетаданных КАК ОбъектМетаданных,
			|	ДанныеОбработанныеВЦентральномУзлеРИБ.Очередь КАК Очередь,
			|	ДанныеОбработанныеВЦентральномУзлеРИБ.КлючУникальности КАК КлючУникальности,
			|	ДанныеОбработанныеВЦентральномУзлеРИБ.Данные КАК Данные,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк
			|ИЗ
			|	РегистрСведений.ДанныеОбработанныеВЦентральномУзлеРИБ КАК ДанныеОбработанныеВЦентральномУзлеРИБ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО (ВЫРАЗИТЬ(ДанныеОбработанныеВЦентральномУзлеРИБ.Данные КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков.Код)
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеОбработанныеВЦентральномУзлеРИБ.Данные КАК Справочник.КлассификаторБанковРФ).КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """"))
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеОбработанныеВЦентральномУзлеРИБ.Данные КАК Справочник.КлассификаторБанковРФ).СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """"))
			|ГДЕ
			|	ДанныеОбработанныеВЦентральномУзлеРИБ.Данные ССЫЛКА Справочник.КлассификаторБанковРФ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписей = РегистрыСведений[Выборка.ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписей, Выборка); 
			МенеджерЗаписей.Прочитать();
			
			МенеджерЗаписей.Данные = Выборка.Банк;
			
			МенеджерЗаписей.Записать();
		КонецЦикла;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьДанныеОбъектовДляРегистрацииВОбменах()
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	""ДанныеОбъектовДляРегистрацииВОбменах"" КАК ИмяРегистра,
			|	ДанныеОбъектовДляРегистрацииВОбменах.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
			|	ДанныеОбъектовДляРегистрацииВОбменах.Ссылка КАК Ссылка,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк
			|ИЗ
			|	РегистрСведений.ДанныеОбъектовДляРегистрацииВОбменах КАК ДанныеОбъектовДляРегистрацииВОбменах
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО (ВЫРАЗИТЬ(ДанныеОбъектовДляРегистрацииВОбменах.Ссылка КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков.Код)
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеОбъектовДляРегистрацииВОбменах.Ссылка КАК Справочник.КлассификаторБанковРФ).КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """"))
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеОбъектовДляРегистрацииВОбменах.Ссылка КАК Справочник.КлассификаторБанковРФ).СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """"))
			|ГДЕ
			|	ДанныеОбъектовДляРегистрацииВОбменах.Ссылка ССЫЛКА Справочник.КлассификаторБанковРФ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписей = РегистрыСведений[Выборка.ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписей, Выборка); 
			МенеджерЗаписей.Ссылка = Выборка.Банк;
			МенеджерЗаписей.Записать();
		КонецЦикла;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьЗависимостиПравДоступа()
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	""ЗависимостиПравДоступа"" КАК ИмяРегистра,
			|	ЗависимостиПравДоступа.ТипВедущейТаблицы КАК ТипВедущейТаблицы,
			|	ЗависимостиПравДоступа.ПодчиненнаяТаблица КАК ПодчиненнаяТаблица,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк
			|ИЗ
			|	РегистрСведений.ЗависимостиПравДоступа КАК ЗависимостиПравДоступа
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО (ВЫРАЗИТЬ(ЗависимостиПравДоступа.ТипВедущейТаблицы КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков.Код)
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(ЗависимостиПравДоступа.ТипВедущейТаблицы КАК Справочник.КлассификаторБанковРФ).КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """"))
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(ЗависимостиПравДоступа.ТипВедущейТаблицы КАК Справочник.КлассификаторБанковРФ).СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """"))
			|ГДЕ
			|	ЗависимостиПравДоступа.ТипВедущейТаблицы ССЫЛКА Справочник.КлассификаторБанковРФ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписей = РегистрыСведений[Выборка.ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписей, Выборка); 
			МенеджерЗаписей.Прочитать();

			МенеджерЗаписей.ТипВедущейТаблицы = Выборка.Банк;
			
			МенеджерЗаписей.Записать();
		КонецЦикла;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьНаборыЗначенийДоступа()
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	""НаборыЗначенийДоступа"" КАК ИмяРегистра,
			|	НаборыЗначенийДоступа.Объект КАК Объект,
			|	НаборыЗначенийДоступа.НомерНабора КАК НомерНабора,
			|	НаборыЗначенийДоступа.ЗначениеДоступа КАК ЗначениеДоступа,
			|	НаборыЗначенийДоступа.Уточнение КАК Уточнение,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк,
			|	1 КАК Номер
			|ИЗ
			|	РегистрСведений.НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО (ВЫРАЗИТЬ(НаборыЗначенийДоступа.Объект КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков.Код)
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(НаборыЗначенийДоступа.Объект КАК Справочник.КлассификаторБанковРФ).КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """"))
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(НаборыЗначенийДоступа.Объект КАК Справочник.КлассификаторБанковРФ).СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """"))
			|ГДЕ
			|	НаборыЗначенийДоступа.Объект ССЫЛКА Справочник.КлассификаторБанковРФ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	""НаборыЗначенийДоступа"",
			|	НаборыЗначенийДоступа.Объект,
			|	НаборыЗначенийДоступа.НомерНабора,
			|	НаборыЗначенийДоступа.ЗначениеДоступа,
			|	НаборыЗначенийДоступа.Уточнение,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)),
			|	2
			|ИЗ
			|	РегистрСведений.НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО (ВЫРАЗИТЬ(НаборыЗначенийДоступа.ЗначениеДоступа КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков.Код)
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(НаборыЗначенийДоступа.ЗначениеДоступа КАК Справочник.КлассификаторБанковРФ).КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """"))
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(НаборыЗначенийДоступа.ЗначениеДоступа КАК Справочник.КлассификаторБанковРФ).СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """"))
			|ГДЕ
			|	НаборыЗначенийДоступа.ЗначениеДоступа ССЫЛКА Справочник.КлассификаторБанковРФ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписей = РегистрыСведений[Выборка.ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписей, Выборка); 
			МенеджерЗаписей.Прочитать();
			
			Если Выборка.Номер = 1 Тогда 
				МенеджерЗаписей.Объект 			= Выборка.Банк;
			Иначе
				МенеджерЗаписей.ЗначениеДоступа = Выборка.Банк;
			КонецЕсли;	
			
			МенеджерЗаписей.Записать();
		КонецЦикла;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьНастройкиОчисткиФайлов()
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	""НастройкиОчисткиФайлов"" КАК ИмяРегистра,
			|	НастройкиОчисткиФайлов.ВладелецФайла КАК ВладелецФайла,
			|	НастройкиОчисткиФайлов.ТипВладельцаФайла КАК ТипВладельцаФайла
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	РегистрСведений.НастройкиОчисткиФайлов КАК НастройкиОчисткиФайлов
			|ГДЕ
			|	НастройкиОчисткиФайлов.ВладелецФайла ССЫЛКА Справочник.КлассификаторБанковРФ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	""НастройкиСинхронизацииФайлов"",
			|	НастройкиСинхронизацииФайлов.ВладелецФайла,
			|	НастройкиСинхронизацииФайлов.ТипВладельцаФайла
			|ИЗ
			|	РегистрСведений.НастройкиСинхронизацииФайлов КАК НастройкиСинхронизацииФайлов
			|ГДЕ
			|	НастройкиСинхронизацииФайлов.ВладелецФайла ССЫЛКА Справочник.КлассификаторБанковРФ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.ИмяРегистра КАК ИмяРегистра,
			|	ВТ.ВладелецФайла КАК ВладелецФайла,
			|	ВТ.ТипВладельцаФайла КАК ТипВладельцаФайла,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк
			|ИЗ
			|	ВТ КАК ВТ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО ВТ.ВладелецФайла.Код = КлассификаторБанков.Код
			|			И ЕСТЬNULL(ВТ.ВладелецФайла.КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """")
			|			И ЕСТЬNULL(ВТ.ВладелецФайла.СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """")";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписей = РегистрыСведений[Выборка.ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписей, Выборка); 
			МенеджерЗаписей.Прочитать();

			МенеджерЗаписей.ВладелецФайла = Выборка.Банк;
		
			МенеджерЗаписей.Записать();
		КонецЦикла;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьПубличныеИдентификаторыСинхронизируемыхОбъектов()
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	""ПубличныеИдентификаторыСинхронизируемыхОбъектов"" КАК ИмяРегистра,
			|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка КАК Ссылка,
			|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Идентификатор КАК Идентификатор,
			|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк
			|ИЗ
			|	РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов КАК ПубличныеИдентификаторыСинхронизируемыхОбъектов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО (ВЫРАЗИТЬ(ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков.Код)
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка КАК Справочник.КлассификаторБанковРФ).КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """"))
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка КАК Справочник.КлассификаторБанковРФ).СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """"))
			|ГДЕ
			|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка ССЫЛКА Справочник.КлассификаторБанковРФ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписей = РегистрыСведений[Выборка.ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписей, Выборка); 
			МенеджерЗаписей.Ссылка = Выборка.Банк;
			МенеджерЗаписей.Записать();
		КонецЦикла;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьРезультатыОбменаДанными()
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	""РезультатыОбменаДанными"" КАК ИмяРегистра,
			|	РезультатыОбменаДанными.ПроблемныйОбъект КАК ПроблемныйОбъект,
			|	РезультатыОбменаДанными.ТипПроблемы КАК ТипПроблемы,
			|	РезультатыОбменаДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
			|	РезультатыОбменаДанными.ОбъектМетаданных КАК ОбъектМетаданных,
			|	РезультатыОбменаДанными.КлючУникальности КАК КлючУникальности,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк
			|ИЗ
			|	РегистрСведений.РезультатыОбменаДанными КАК РезультатыОбменаДанными
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО (ВЫРАЗИТЬ(РезультатыОбменаДанными.ПроблемныйОбъект КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков.Код)
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(РезультатыОбменаДанными.ПроблемныйОбъект КАК Справочник.КлассификаторБанковРФ).КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """"))
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(РезультатыОбменаДанными.ПроблемныйОбъект КАК Справочник.КлассификаторБанковРФ).СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """"))			
			|ГДЕ
			|	РезультатыОбменаДанными.ПроблемныйОбъект ССЫЛКА Справочник.КлассификаторБанковРФ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписей = РегистрыСведений[Выборка.ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписей, Выборка); 
			МенеджерЗаписей.Прочитать();
			
			МенеджерЗаписей.ПроблемныйОбъект = Выборка.Банк;
			МенеджерЗаписей.ОбъектМетаданных = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию("Справочник БИК (Справочник)");
			
			МенеджерЗаписей.Записать();
		КонецЦикла;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьСоответствияОбъектовИнформационныхБаз()
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	""СоответствияОбъектовИнформационныхБаз"" КАК ИмяРегистра,
			|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК УникальныйИдентификаторИсточника,
			|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК УникальныйИдентификаторПриемника,
			|	СоответствияОбъектовИнформационныхБаз.ТипПриемника КАК ТипПриемника,
			|	СоответствияОбъектовИнформационныхБаз.ТипИсточника КАК ТипИсточника,
			|	СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
			|	СоответствияОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке КАК ОбъектВыгруженПоСсылке,
			|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточникаСтрокой КАК УникальныйИдентификаторИсточникаСтрокой,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков.Код)
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.КлассификаторБанковРФ).КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """"))
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.КлассификаторБанковРФ).СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """"))			
			|ГДЕ
			|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника ССЫЛКА Справочник.КлассификаторБанковРФ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписей = РегистрыСведений[Выборка.ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписей, Выборка); 
			МенеджерЗаписей.Прочитать();

			МенеджерЗаписей.УникальныйИдентификаторИсточника = Выборка.Банк;
		
			МенеджерЗаписей.Записать();
		КонецЦикла;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьСкидкиСтрокиШапки()
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	""СкидкиСтроки"" КАК ИмяРегистра,
			|	СкидкиСтроки.Период КАК Период,
			|	СкидкиСтроки.Регистратор КАК Регистратор,
			|	СкидкиСтроки.НомерСтроки КАК НомерСтроки,
			|	СкидкиСтроки.Активность КАК Активность,
			|	СкидкиСтроки.ПодразделениеКомпании КАК ПодразделениеКомпании,
			|	СкидкиСтроки.РучнаяСкидка КАК РучнаяСкидка,
			|	СкидкиСтроки.Объект КАК Объект,
			|	СкидкиСтроки.НачВремя КАК НачВремя,
			|	СкидкиСтроки.КонВремя КАК КонВремя,
			|	СкидкиСтроки.ДниНедели КАК ДниНедели,
			|	СкидкиСтроки.ДисконтнаяКарта КАК ДисконтнаяКарта,
			|	СкидкиСтроки.ОтСуммыНакопленияНаКарте КАК ОтСуммыНакопленияНаКарте,
			|	СкидкиСтроки.ЗалОбслуживания КАК ЗалОбслуживания,
			|	СкидкиСтроки.Свойство КАК Свойство,
			|	СкидкиСтроки.ОтСуммыСтроки КАК ОтСуммыСтроки,
			|	СкидкиСтроки.ОтКоличества КАК ОтКоличества,
			|	СкидкиСтроки.Правило КАК Правило,
			|	СкидкиСтроки.Скидка КАК Скидка,
			|	СкидкиСтроки.СкидкаНаТовары КАК СкидкаНаТовары,
			|	СкидкиСтроки.СкидкаНаРаботы КАК СкидкаНаРаботы,
			|	СкидкиСтроки.ЗначениеСкидки КАК ЗначениеСкидки,
			|	СкидкиСтроки.Действует КАК Действует,
			|	СкидкиСтроки.СпособВычисления КАК СпособВычисления,
			|	СкидкиСтроки.ФлагВытеснения КАК ФлагВытеснения,
			|	СкидкиСтроки.МоментИзменения КАК МоментИзменения,
			|	СкидкиСтроки.ИдентификаторСкидки КАК ИдентификаторСкидки,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк
			|ИЗ
			|	РегистрСведений.СкидкиСтроки КАК СкидкиСтроки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО (ВЫРАЗИТЬ(СкидкиСтроки.Свойство КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков.Код)
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(СкидкиСтроки.Свойство КАК Справочник.КлассификаторБанковРФ).КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """"))
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(СкидкиСтроки.Свойство КАК Справочник.КлассификаторБанковРФ).СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """"))
			|ГДЕ
			|	СкидкиСтроки.Свойство ССЫЛКА Справочник.КлассификаторБанковРФ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	""СкидкиШапки"",
			|	СкидкиШапки.Период,
			|	СкидкиШапки.Регистратор,
			|	СкидкиШапки.НомерСтроки,
			|	СкидкиШапки.Активность,
			|	СкидкиШапки.ПодразделениеКомпании,
			|	СкидкиШапки.РучнаяСкидка,
			|	NULL,
			|	СкидкиШапки.НачВремя,
			|	СкидкиШапки.КонВремя,
			|	СкидкиШапки.ДниНедели,
			|	СкидкиШапки.ДисконтнаяКарта,
			|	СкидкиШапки.ОтСуммыНакопленияНаКарте,
			|	СкидкиШапки.ЗалОбслуживания,
			|	СкидкиШапки.Свойство,
			|	NULL,
			|	NULL,
			|	NULL,
			|	СкидкиШапки.Скидка,
			|	СкидкиШапки.СкидкаНаТовары,
			|	СкидкиШапки.СкидкаНаРаботы,
			|	СкидкиШапки.ЗначениеСкидки,
			|	СкидкиШапки.Действует,
			|	СкидкиШапки.СпособВычисления,
			|	СкидкиШапки.ФлагВытеснения,
			|	СкидкиШапки.МоментИзменения,
			|	СкидкиШапки.ИдентификаторСкидки,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка))
			|ИЗ
			|	РегистрСведений.СкидкиШапки КАК СкидкиШапки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО (ВЫРАЗИТЬ(СкидкиШапки.Свойство КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков.Код)
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(СкидкиШапки.Свойство КАК Справочник.КлассификаторБанковРФ).КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """"))
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(СкидкиШапки.Свойство КАК Справочник.КлассификаторБанковРФ).СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """"))
			|ГДЕ
			|	СкидкиШапки.Свойство ССЫЛКА Справочник.КлассификаторБанковРФ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписей = РегистрыСведений[Выборка.ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписей, Выборка); 
			МенеджерЗаписей.Прочитать();

			МенеджерЗаписей.Свойство = Выборка.Банк;
		
			МенеджерЗаписей.Записать();
		КонецЦикла;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьСтатусыСинхронизацииФайловСОблачнымСервисом()
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	""СтатусыСинхронизацииФайловСОблачнымСервисом"" КАК ИмяРегистра,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.Файл КАК Файл,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.УчетнаяЗапись КАК УчетнаяЗапись,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.Href КАК Href,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.Etag КАК Etag,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.УникальныйИдентификатор1С КАК УникальныйИдентификатор1С,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.ЭтоФайл КАК ЭтоФайл,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.ЭтоВладелецФайла КАК ЭтоВладелецФайла,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.ВладелецФайла КАК ВладелецФайла,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.Синхронизирован КАК Синхронизирован,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.ДатаСинхронизацииНачало КАК ДатаСинхронизацииНачало,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.ДатаСинхронизацииЗавершение КАК ДатаСинхронизацииЗавершение,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.НомерСеанса КАК НомерСеанса,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк,
			|	1 КАК Номер
			|ИЗ
			|	РегистрСведений.СтатусыСинхронизацииФайловСОблачнымСервисом КАК СтатусыСинхронизацииФайловСОблачнымСервисом
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО (ВЫРАЗИТЬ(СтатусыСинхронизацииФайловСОблачнымСервисом.Файл КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков.Код)
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(СтатусыСинхронизацииФайловСОблачнымСервисом.Файл КАК Справочник.КлассификаторБанковРФ).КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """"))
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(СтатусыСинхронизацииФайловСОблачнымСервисом.Файл КАК Справочник.КлассификаторБанковРФ).СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """"))
			|ГДЕ
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.Файл ССЫЛКА Справочник.КлассификаторБанковРФ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	""СтатусыСинхронизацииФайловСОблачнымСервисом"",
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.Файл,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.УчетнаяЗапись,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.Href,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.Etag,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.УникальныйИдентификатор1С,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.ЭтоФайл,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.ЭтоВладелецФайла,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.ВладелецФайла,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.Синхронизирован,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.ДатаСинхронизацииНачало,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.ДатаСинхронизацииЗавершение,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.НомерСеанса,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)),
			|	2
			|ИЗ
			|	РегистрСведений.СтатусыСинхронизацииФайловСОблачнымСервисом КАК СтатусыСинхронизацииФайловСОблачнымСервисом
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО (ВЫРАЗИТЬ(СтатусыСинхронизацииФайловСОблачнымСервисом.ВладелецФайла КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков.Код)
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(СтатусыСинхронизацииФайловСОблачнымСервисом.ВладелецФайла КАК Справочник.КлассификаторБанковРФ).КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """"))
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(СтатусыСинхронизацииФайловСОблачнымСервисом.ВладелецФайла КАК Справочник.КлассификаторБанковРФ).СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """"))
			|ГДЕ
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.ВладелецФайла ССЫЛКА Справочник.КлассификаторБанковРФ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписей = РегистрыСведений[Выборка.ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписей, Выборка); 
			МенеджерЗаписей.Прочитать();
			
			Если Выборка.Номер = 1 Тогда
				МенеджерЗаписей.Файл 			= Выборка.Банк;
			Иначе 
				МенеджерЗаписей.ВладелецФайла 	= Выборка.Банк;
			КонецЕсли;
		
			МенеджерЗаписей.Записать();
		КонецЦикла;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьСтатусыЗагрузкиВыгрузкиОбъектов()
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	""СтатусыЗагрузкиВыгрузкиОбъектов"" КАК ИмяРегистра,
			|	СтатусыЗагрузкиВыгрузкиОбъектов.Объект КАК Объект,
			|	СтатусыЗагрузкиВыгрузкиОбъектов.ВидСтатуса КАК ВидСтатуса,
			|	СтатусыЗагрузкиВыгрузкиОбъектов.Статус КАК Статус,
			|	СтатусыЗагрузкиВыгрузкиОбъектов.ИсточникПриемник КАК ИсточникПриемник,
			|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк
			|ИЗ
			|	РегистрСведений.СтатусыЗагрузкиВыгрузкиОбъектов КАК СтатусыЗагрузкиВыгрузкиОбъектов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО (ВЫРАЗИТЬ(СтатусыЗагрузкиВыгрузкиОбъектов.Объект КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков.Код)
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(СтатусыЗагрузкиВыгрузкиОбъектов.Объект КАК Справочник.КлассификаторБанковРФ).КоррСчет, """") = ЕСТЬNULL(КлассификаторБанков.КоррСчет, """"))
			|			И (ЕСТЬNULL(ВЫРАЗИТЬ(СтатусыЗагрузкиВыгрузкиОбъектов.Объект КАК Справочник.КлассификаторБанковРФ).СВИФТБИК, """") = ЕСТЬNULL(КлассификаторБанков.СВИФТБИК, """"))
			|ГДЕ
			|	СтатусыЗагрузкиВыгрузкиОбъектов.Объект ССЫЛКА Справочник.КлассификаторБанковРФ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписей = РегистрыСведений[Выборка.ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписей, Выборка); 
			МенеджерЗаписей.Прочитать();

			МенеджерЗаписей.Объект = Выборка.Банк;
		
			МенеджерЗаписей.Записать();
		КонецЦикла;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьПланирование()
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Планирование.Регистратор КАК Регистратор
			|ИЗ
			|	РегистрНакопления.Планирование КАК Планирование
			|ГДЕ
			|	(Планирование.ВидАналитикиПланирования1 ССЫЛКА Справочник.КлассификаторБанковРФ
			|			ИЛИ Планирование.ВидАналитикиПланирования2 ССЫЛКА Справочник.КлассификаторБанковРФ)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НаборЗаписейРегистра = РегистрыНакопления.Планирование.СоздатьНаборЗаписей();
			НаборЗаписейРегистра.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписейРегистра.Прочитать();
			
			Для Каждого Запись Из НаборЗаписейРегистра Цикл
				Если ТипЗнч(Запись.ВидАналитикиПланирования1) = Тип("СправочникСсылка.КлассификаторБанковРФ") Тогда
					Банк = Справочники.КлассификаторБанков.НайтиПоКоду(Запись.ВидАналитикиПланирования1.Код);
					Запись.ВидАналитикиПланирования1 = Банк;
				КонецЕсли;
				
				Если ТипЗнч(Запись.ВидАналитикиПланирования2) = Тип("СправочникСсылка.КлассификаторБанковРФ") Тогда
					Банк = Справочники.КлассификаторБанков.НайтиПоКоду(Запись.ВидАналитикиПланирования2.Код);
					Запись.ВидАналитикиПланирования2 = Банк;
				КонецЕсли;	
			КонецЦикла;				
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейРегистра);
		КонецЦикла;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
