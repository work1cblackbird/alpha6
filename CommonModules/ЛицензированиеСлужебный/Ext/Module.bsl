// Пример модуля для встраивания в конфигурации на базе БСП.

// Общий модуль "Лицензирование (служебный)"


#Область СлужебныйПрограммныйИнтерфейс

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля
//									ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя                                  = "УправлениеЛицензированием";
	Описание.Версия                               = "1.0.2.19";
	//Описание.ДобавлятьОбработчикиСлужебныхСобытий = ИСТИНА;
	
КонецПроцедуры // ПриДобавленииПодсистемы()

// Доопределяет обработчики служебных событий, объявленных через процедуру ПриДобавленииСлужебныхСобытий.
//
// Параметры:
//  КлиентскиеОбработчики - Соответствие, где
//                            Ключ     - Строка - полное имя события,
//                            Значение - Массив - массив имен клиентских общих модулей обработчиков.
//
//  СерверныеОбработчики  - Соответствие, где
//                            Ключ     - Строка - полное имя события,
//                            Значение - Массив - массив имен серверных общих модулей обработчиков.
//
// Для упрощения поддержки, рекомендуется делать вызов такой же процедуры в общем модуле библиотеки.
//
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// События возникающие в контексте Клиента
	КлиентскиеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПередНачаломРаботыСистемы"] .Добавить("ЛицензированиеСлужебныйКлиент");
	КлиентскиеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриЗавершенииРаботыСистемы"].Добавить("ЛицензированиеСлужебныйКлиент");
	
	// События возникающие в контексте Сервера
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентаПриЗапуске"]    .Добавить("ЛицензированиеСлужебный");
	
КонецПроцедуры // ПриДобавленииОбработчиковСлужебныхСобытий()

#Область ОбработчикиОбновленияПодсистемы

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры // ПриОпределенииРежимаОбновленияДанных()

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//									ПредыдущееИмяКонфигурации. Например,
//									"ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры // ПриДобавленииОбработчиковПереходаСДругойПрограммы()

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
КонецПроцедуры // ПриДобавленииОбработчиковОбновления()

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры // ПередОбновлениемИнформационнойБазы()

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия, Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры // ПослеОбновленияИнформационнойБазы()

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры // ПриПодготовкеМакетаОписанияОбновлений()

#КонецОбласти

#Область ОбработчикиСобытийСистемы

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ТекущийАдресСервераЛицензирования", "ЛицензированиеСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("АдресСервераЛицензирования",        "ЛицензированиеСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("СписокСертификатов",                "ЛицензированиеСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("МестоХраненияКомпоненты",           "ЛицензированиеСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("ВключенаЗащитаОтОпасныхДействий",   "ЛицензированиеСлужебный.УстановкаПараметровСеанса");
	
КонецПроцедуры // ПриДобавленииОбработчиковУстановкиПараметровСеанса()

Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если
		ИмяПараметра <> "ТекущийАдресСервераЛицензирования"
		И ИмяПараметра <> "АдресСервераЛицензирования"
		И ИмяПараметра <> "СписокСертификатов"
		И ИмяПараметра <> "МестоХраненияКомпоненты"
		И ИмяПараметра <> "ВключенаЗащитаОтОпасныхДействий"
	Тогда
		Возврат;
	КонецЕсли;
	
	ЛицензированиеСервер.УстановитьПараметрыСеанса();
	УстановленныеПараметры.Добавить("ТекущийАдресСервераЛицензирования");
	УстановленныеПараметры.Добавить("АдресСервераЛицензирования");
	УстановленныеПараметры.Добавить("СписокСертификатов");
	УстановленныеПараметры.Добавить("МестоХраненияКомпоненты");
	УстановленныеПараметры.Добавить("ВключенаЗащитаОтОпасныхДействий");
	
КонецПроцедуры // УстановкаПараметровСеанса()

// Производим последовательную инициализацию компонент защиты входящих в состав продукта.
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	РезультатыЗапуска = Новый Массив;
	Ошибка            = ЛОЖЬ;
	
	// Инициализируем параметры сеанса, если они не были инициализированы
	АдресСервераЛицензирования = ПараметрыСеанса.ТекущийАдресСервераЛицензирования;
	ЗначениеПараметрЗапуска = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПараметрЗапуска", "");
	АдресаСерверов = ЛицензированиеСервер.СписокАдресовСервераЛицензирования(ЗначениеПараметрЗапуска);
	
	Для Каждого АдресСервера Из АдресаСерверов Цикл
		
		ЛицензированиеСервер.УстановитьПараметрСеансаТекущийАдресСервераЛицензирования(АдресСервера);
		
		Для Каждого Решение Из ЛицензированиеПоддержка.СписокРешений() Цикл
			
			ПараметрыЗапуска = Новый Структура;
			ПараметрыЗапуска.Вставить("ИмяОбработки", Решение.Ключ);
			ПараметрыЗапуска.Вставить("ИмяРешения", Решение.Значение);
			ПараметрыЗапуска.Вставить("ОписаниеОшибки", "");
			ПараметрыЗапуска.Вставить("КодОшибки", 0);
			
			Если НЕ ЛицензированиеСервер.НачалоРаботыСистемыЛицензирования(Решение.Ключ, ПараметрыЗапуска.ОписаниеОшибки, ПараметрыЗапуска.КодОшибки) Тогда
				Ошибка = ИСТИНА;
			КонецЕсли;
			
			РезультатыЗапуска.Добавить(ПараметрыЗапуска);
			
		КонецЦикла;
		
		Если (НЕ Ошибка) ИЛИ (НЕ ЛицензированиеСервер.ЕстьОшибкаСоединенияССервером(РезультатыЗапуска)) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Получаем из параметров сеанса кеш значений Производим получение 
	Параметры.Вставить("СостояниеСистемыЗащиты", Новый Структура("РезультатыЗапуска,Ошибка", РезультатыЗапуска, Ошибка));
	
КонецПроцедуры // ПриДобавленииПараметровРаботыКлиентаПриЗапуске()

#КонецОбласти

#КонецОбласти