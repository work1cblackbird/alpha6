// Общий модуль "Управление диалогом справочника (сервер)"

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытий

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Форма					- УправляемаяФорма		- Форма, в которой возникло событие.
//  Параметры				- Структура				- Содержит коллекцию параметров формы.
//  Отказ					- Булево				- Признак отказа от создания формы.
//  СтандартнаяОбработка	- Булево				- В данный параметр передается признак выполнения системной обработки события.
//  ПараметрыДействия		- Структура				- Набор параметров, использующихся при выполнения операции.
//  Объект					- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПриСозданииНаСервере(Форма,
                             Параметры,
                             Отказ,
                             СтандартнаяОбработка,
                             ПараметрыДействия = Неопределено,
                             Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если НЕ УправлениеДиалогомСервер.ПроверитьВозможностьОткрытияФормыОбъекта(Форма, Отказ) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ИнициализироватьСлужебныеРеквизиты(Форма, Объект);
	Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ИнициализироватьКомандыПанелиДействий(Форма, Объект);
	УправлениеСвойствами.ПриСозданииНаСервере(
		Форма,
		Новый Структура(
			"Объект,ИмяЭлементаДляРазмещения,ИмяЭлементаКоманднойПанели",
			Объект,
			"ГруппаДополнительныеРеквизиты",
			"ДополнительныеДействия"
		)
	);
	
	Если ЕстьРеквизит(Объект,, "КонтактнаяИнформация") Тогда
		
		УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(
			Форма,
			Объект,
			"ГруппаКонтактнаяИнформация",
			ПоложениеЗаголовкаЭлементаФормы.Лево
		);
		
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	Форма.ТолькоПросмотр = НЕ ПроверитьВозможностьИзмененияОбъекта(Объект);
	
	Если Объект.Ссылка.Предопределенный И НЕ Форма.ТолькоПросмотр Тогда
		
		Форма.ТолькоПросмотр = НЕ ПраваИНастройкиПользователя.Значение("РазрешитьРедактированиеПредопределенныхЭлементов");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	УстановитьЗаголовокЭлементаСправочника(Форма, Объект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма, Неопределено);
	Возврат НЕ Отказ;
	
КонецФункции

// Общий обработчик события возникающего на клиенте при выборе объекта без привязки к элементу в контексте сервера.
//
// Параметры:
//  Форма				- УправляемаяФорма - Форма, в которой возникло событие.
//  ВыбранноеЗначение	- Произвольный     - Результат выбора в подчиненной форме.
//  ПараметрыДействия	- Структура				- Набор параметров, использующихся при выполнения операции.
//  Объект				- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаВыбора(Форма, ВыбранноеЗначение, ПараметрыДействия = Неопределено, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если ПараметрыДействия.Свойство("НовыйШтрихкод") Тогда
		
		Если Форма.ТолькоПросмотр Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Форма.Штрихкод = ПараметрыДействия.НовыйШтрихкод;
		СообщениеШтрихкодУстановлен = ШтрихкодированиеВызовСервера
			.СформироватьСообщениеШтрихкодУстановлен(Форма.Штрихкод, Объект.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(СообщениеШтрихкодУстановлен);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить в контексте сервера.
//
// Параметры:
//  Форма				- УправляемаяФорма - Форма, в которой возникло событие.
//  ИмяСобытия			- Строка           - Имя, идентифицирующее событие.
//  ПараметрыДействия	- Структура        - Набор параметров, использующихся при выполнения операции.
//  Объект				- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаОповещения(Форма, ИмяСобытия, ПараметрыДействия = Неопределено, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если ПараметрыДействия.Свойство("ШтрихКод") Тогда
		
		Если ПараметрыДействия.ШтрихКод = "" Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
		ОбъектыПоШтрихкоду = ШтрихкодированиеВызовСервера.НайтиОбъектыПоШтрихкоду(ПараметрыДействия.ШтрихКод, , Истина);
		ПараметрыДействия.Вставить("ОбъектыПоШтрихкоду", ОбъектыПоШтрихкоду);
		ШтрихкодированиеВызовСервера.ОбработкаОбъектовПоШтрихкоду(ПараметрыДействия);
		
	ИначеЕсли ПараметрыДействия.Свойство("КодКарты") Тогда
		
		РезультатПоиска = ШтрихкодированиеВызовСервера.ПолучитьКарточкуПоКоду(ПараметрыДействия.КодКарты);
		
		Если РезультатПоиска = Неопределено Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найдена карточка по считанному коду: %1'"), ПараметрыДействия.КодКарты);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
			Возврат Ложь;
			
		КонецЕсли;
		
		ВыборКарты = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ВыборКарты",  ЕстьРеквизит(Объект, "Карточка"));
		
		Если ТипЗнч(РезультатПоиска) = Тип("СправочникСсылка.Карточки") И ВыборКарты Тогда
			
			ПараметрыДействия.Вставить("ВыбранноеЗначение", РезультатПоиска);
			
		ИначеЕсли ЗначениеЗаполнено(РезультатПоиска.Объект) Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(РезультатПоиска.Объект));
			ПараметрыДействия.Вставить("ИмяФормыСписка", ОбъектМетаданных.ПолноеИмя() + ".ФормаСписка");
			ПараметрыДействия.Вставить("НайтиОбъект", РезультатПоиска.Объект);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыДействия.Свойство("НоваяКартинкаОписания") Тогда
		
		РаботаСФайламиАльфаАвтоВызовСервера.УстановитьТекущееИзображение(Форма, ПараметрыДействия, Объект);
		
	Иначе
		
		УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(Форма, Объект);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере при чтении данных объекта.
//
// Параметры:
//  Форма				- УправляемаяФорма - Форма, в которой возникло событие.
//  ТекущийОбъект		- СправочникОбъект   - Объект, который будет прочитан.
//  ПараметрыДействия	- Структура        - Набор параметров, использующихся при выполнения операции.
//  Объект				- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПриЧтенииНаСервере(Форма, ТекущийОбъект, ПараметрыДействия = Неопределено, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	УстановитьЗаголовокЭлементаСправочника(Форма, Объект);
	УправлениеСвойствами.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	ВерсионированиеОбъектовПлатформа.ПриЧтенииНаСервере(Форма, Объект, ПараметрыДействия);
	
	Если Форма.Элементы.Найти("ГруппаКонтактнаяИнформация") <> Неопределено Тогда
		
		УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере перед записью объекта.
//
// Параметры:
//  Форма           - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ           - Булево           - Признак отказа от создания формы.
//  ТекущийОбъект   - СправочникОбъект   - Записываемый объект.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбъектФормы", Истина);
	УправлениеСвойствами.ПередЗаписьюНаСервере(Форма, ТекущийОбъект);
	
	Если Форма.Элементы.Найти("ГруппаКонтактнаяИнформация") <> Неопределено Тогда
		
		УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(Форма, ТекущийОбъект);
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере после записи объекта и после завершения транзакции.
//
// Параметры:
//  Форма			- УправляемаяФорма		- Форма, в которой возникло событие.
//  ТекущийОбъект	- СправочникОбъект		- Записываемый объект.
//  ПараметрыЗаписи	- Структура				- Структура, содержащая параметры записи.
//  Объект			- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	УстановитьЗаголовокЭлементаСправочника(Форма, Объект);
	Возврат Истина;
	
КонецФункции

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере при необходимости проверки заполнения реквизитов
// при записи в форме.
//
// Параметры:
//  Форма					- УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ					- Булево           - Признак отказа от создания формы.
//  ПроверяемыеРеквизиты	- Массив           - Массив путей к реквизитам, для которых будет выполнена проверка.
//  Объект					- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты);
	
	Если Форма.Элементы.Найти("ГруппаКонтактнаяИнформация") <> Неопределено Тогда
		
		УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(Форма, Объект, Отказ);
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

// Устарела. Будет удалена.
// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - Соответствие     - Значения сохраняемых реквизитов и настроек формы.
//
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Форма, Настройки) Экспорт
	
	// TODO: Реализовать сохранение состояния "свернутости" групп
	
КонецПроцедуры

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - Соответствие     - Значения сохраненных реквизитов и настроек формы.
//
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Форма, Настройки) Экспорт
	
	// TODO: Реализовать функционал восстановления состояния сворачиваемых групп
	
КонецПроцедуры

#КонецОбласти

// Устарела. Будет удалена.
// Общий обработчик события настройки установленного условного оформления формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, в которой возникло событие
//
Процедура УстановитьУсловноеОформление(Форма) Экспорт
 
	Форма.УсловноеОформление.Элементы.Очистить();
	
КонецПроцедуры

// Общий обработчик события настройки параметров отображения элементов формы в зависимости от значений реквизитов
// объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект - ДанныеФормыСтруктура - объект, для которого возникло событие
//
Процедура УправлениеДиалогомНаСервере(Форма, Объект = Неопределено) Экспорт
	
	// Дальнейшие операции имеют смысл только когда форма не находится в режиме просмотра.
	Если Форма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Расставим признаки обязательности заполнения реквизитов формы
	УправлениеДиалогомСервер.РасставитьАвтоотметкиНезаполненного(Форма, Объект);
	
	// Установим доступность и видимость дополнительных реквизитов формы
	УправлениеСвойствамиПлатформа.ОбновитьЗависимостиДополнительныхРеквизитов(Форма, Объект);
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

// Общий обработчик события выбора одного из пунктов меню доступных хоз. операций
// 
// Параметры:
//  Форма             - УправляемаяФорма          - Форма, в которой возникло событие.
//  КомандаИмя        - Строка                    - Имя команды, в которой возникло данное событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//   
// Возвращаемое значение:
//  Булево - признак дальнейшей обработки события
//
Функция ОбработкаКомандыФормы(Форма, КомандаИмя, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЛЕВ(КомандаИмя, 40)="КомандаДополнительнойОбработкиЗаполнения" Тогда
		
		РезультатВыполнения = Неопределено;  
		ПараметрыКоманды = ДополнительныеОтчетыИОбработкиАльфаАвто.ОписаниеКомандыОбработки(КомандаИмя,
																							Форма.Команды.Найти("АдресКомандДополнительныхОбработокВоВременномХранилище").Действие);
		ДополнительныеОтчетыИОбработки.ВыполнитьКоманду(ПараметрыКоманды);
		
		Если НЕ РезультатВыполнения = Неопределено Тогда
			
			Для каждого Элемент Из РезультатВыполнения Цикл
				ПараметрыДействия.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаКомандыФормы()

// Общий обработчик события возникающего при оповещении формы о прекращении работы подчиненной в контексте сервера.
//
// Параметры:
//  Форма                   - УправляемаяФорма - Форма, в которой возникло событие.
//  РезультатОповещения     - Произвольный     - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный     - Значение, которое было указано при создании описания оповещения.
//  Объект					- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//  
// Возвращаемое значение:
//  Булево - признак дальнейшей обработки события
//
Функция ОбработкаРезультатаОповещения(Форма,
                                      РезультатОповещения,
                                      ДополнительныеПараметры = Неопределено,
                                      Объект = Неопределено) Экспорт
	
	УправлениеДиалогомСервер.ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры, Объект);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СЛУЖЕБНОГО ПРОГРАММНОГО ИНТЕРФЕЙСА


// функция которая проверяет право пользователя на изменение документа
//
// Параметры:
//  Объект   - ДанныеФормыСтруктура - Объект, для которого Проверяется Право на Изменение.
//
// Возвращаемое значение:
//  Булево   - Истина - Право на изменение есть
//				Ложь - Право на изменение отсутствует.
//
Функция ПроверитьВозможностьИзмененияОбъекта(Объект)
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		ВыполнитьПроверкуПравДоступа("Изменение", Объект.Ссылка.Метаданные());
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // ПроверитьВозможностьИзмененияОбъекта()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОЛУЧЕНИЯ ПРЕДСТАВЛЕНИЯ СПРАВОЧНИКА

// Производит установку расширенного заголовка формы элемента справочника.
//
// Параметры:
//  Форма - УправляемаяФорма - форма переданного справочника.
//
Процедура УстановитьЗаголовокЭлементаСправочника(Форма, Объект)
	
	// Получаем объект описания метаданных по переданному имени
	ОбъектМетаданных = УправлениеДиалогомСервер.ПолучитьМетаданныеОбъектаФормы(Форма);
	
	// Получим представление самого элемента
	ПредставлениеОбъекта = УправлениеДиалогомСервер.ПредставлениеОбъект(ОбъектМетаданных);
	
	// Получим представление владельца элемента
	ПредставлениеВладельца = ?(
		Метаданные.Справочники.Содержит(ОбъектМетаданных) И ОбъектМетаданных.Владельцы.Количество() > 0,
		СокрЛП(Объект.Владелец), "");
	
	// Получим представление самого элемента
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ИмяРеквизита = ?(ОбъектМетаданных.ОсновноеПредставление=Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеКода, "Код", "Наименование");
		
		Если ЕстьРеквизит(Объект, ИмяРеквизита) Тогда
			ПредставлениеЭлемента = Объект[ИмяРеквизита];
		Иначе
			ПредставлениеЭлемента = "";
		КонецЕсли;
		
		// удалим лишние пробелы у представления элемента
		Пока СтрНайти(ПредставлениеЭлемента, "  ") > 0 Цикл
			ПредставлениеЭлемента = СтрЗаменить(ПредставлениеЭлемента, "  "," ");
		КонецЦикла;
		ПредставлениеЭлемента = ПредставлениеЭлемента + ?(Объект.Ссылка.ПометкаУдаления, " (" + НСтр("ru = 'помечен на удаление'") + ")", "");
	Иначе
		ПредставлениеЭлемента = ?(Метаданные.Справочники.Содержит(ОбъектМетаданных) 
			И ОбъектМетаданных.Иерархический 
			И ЕстьРеквизит(Объект, "ЭтоГруппа") 
			И Объект.ЭтоГруппа, НСтр("ru = 'создание группы'"), "создание");
	КонецЕсли;
	
	// Сформируем итоговое представление динамического списка
	Форма.Заголовок = ПредставлениеОбъекта + ?(ПустаяСтрока(ПредставлениеЭлемента), "", ": " + ПредставлениеЭлемента) + ?(ПустаяСтрока(ПредставлениеВладельца), "", " ("+ПредставлениеВладельца+")");
	
КонецПроцедуры // УстановитьЗаголовокЭлементаСправочника()


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедуры производит инициализацию служебных реквизитов формы списка.
//
// Параметры:
//  Форма	- УправляемаяФорма		- Форма, в которую производится добавление реквизитов.
//  Объект	- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
Процедура ИнициализироватьСлужебныеРеквизиты(Форма, Объект)
	
	// Составим перечень добавляемых в форму реквизитов
	СлужебныеРеквизиты = Новый Структура();
	СлужебныеРеквизиты.Вставить("ПолноеИмяОбъекта", Объект.Ссылка.Метаданные().ПолноеИмя());
	СлужебныеРеквизиты.Вставить("ИзменениеЗапрещено", Ложь);
	СлужебныеРеквизиты.Вставить("ИмяДополнительнойФормы", УправлениеДиалогомВызовСервера.ПолучитьИмяДополнительнойФормыОбъекта(Объект.Ссылка));
	
	// Заготовлено для АРМ или документов, где потребуется непосредственный вызов создания анкеты.
	// Для формы контрагента добавляем анкету объекта.
	Если Ложь И ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		СлужебныеРеквизиты.Вставить("АнкетаОбъекта", Новый СписокЗначений);
	КонецЕсли;
	
	// Список Анкет для опроса 
	Анкеты = Новый СписокЗначений;
	СлужебныеРеквизиты.Вставить("Анкеты",Анкеты);
	
	
	// Производим создание дополнительных реквизитов формы
	УправлениеДиалогомСервер.ДобавитьРеквизитыФормы(Форма, СлужебныеРеквизиты);
	
КонецПроцедуры // ИнициализироватьСлужебныеРеквизиты()

// Процедуры производит инициализацию команд в форме объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура ИнициализироватьКомандыПанелиДействий(Форма, Объект)
	
// Определим в какую панель формы необходимо помещать новые кнопки
	ИмяКоманднойПанелиФормы = ?(Форма.Элементы.Найти("ОсновныеДействия")=Неопределено, "ФормаКоманднаяПанель", "ОсновныеДействия");
	
	// Произведем добавление панели для размещения дополнительных операций с формой
	НазначитьДополнительныеДействия = (НЕ Форма.Элементы.Найти("ДополнительныеДействия")=Неопределено);
	
	// Получим описание метаданных текущего объекта
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Форма.ПолноеИмяОбъекта);
	
	// Инициализируем элементы формы связанные с Дополнительными отчетами и обработками.
	ДополнительныеОтчетыИОбработкиАльфаАвто.ПриСозданииНаСервере(Форма, "ФормаОбъекта");
	
	// Создаем подменю печати
	ПодменюПечати = ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(Форма, "ПодменюПечать", ИмяКоманднойПанелиФормы,, "Печать", БиблиотекаКартинок.ПодменюПечать,,, ОтображениеКнопки.Картинка);
	
	// Добавим команды печати печати
	УправлениеПечатьюАльфаАвто.ПриСозданииНаСервере(Форма, ПодменюПечати);
	
	// Производим инициализацию дополнительных команд формы списка
	Если НазначитьДополнительныеДействия Тогда
		
		// Пункт меню для открытия дополнительной формы редактирования объекта
		Если ЗначениеЗаполнено(Форма.ИмяДополнительнойФормы) ИЛИ ЕстьРеквизит(ОбъектМетаданных, "Комментарий") Тогда
			
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды            = "ДополнительнаяФорма";
			ОписаниеКомандыФормы.ИмяГруппы             = "ДополнительныеДействия";
			ОписаниеКомандыФормы.Картинка              = БиблиотекаКартинок.РедактироватьВДиалоге;
			ОписаниеКомандыФормы.Заголовок             = НСтр("ru = 'Дополнительная форма'");
			ОписаниеКомандыФормы.Подсказка             = НСтр("ru = 'Открыть дополнительную форму редактирования'");
			ОписаниеКомандыФормы.ТолькоВоВсехДействиях = Ложь;
			ОписаниеКомандыФормы.СочетаниеКлавиш       = Новый СочетаниеКлавиш(Клавиша.L, Истина);
			
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
		КонецЕсли;
		
		ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
		ОписаниеКомандыФормы.ИмяКоманды            = "ЖурналРегистрации";
		ОписаниеКомандыФормы.ИмяГруппы             = "ДополнительныеДействия";
		ОписаниеКомандыФормы.Картинка              = БиблиотекаКартинок.ЖурналРегистрации;
		ОписаниеКомандыФормы.Заголовок             = НСтр("ru = 'Журнал регистрации'");
		ОписаниеКомандыФормы.Подсказка             = НСтр("ru = 'Журнал регистрации'");
		
		ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
		
		// Проверим использование дополнительных сведений для данного документа
		Если УправлениеСвойствами.ИспользоватьДопСведения(Объект.Ссылка) Тогда
			
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды            = "ДополнительныеСведения";
			ОписаниеКомандыФормы.ИмяГруппы             = "ДополнительныеДействия";
			ОписаниеКомандыФормы.Картинка              = БиблиотекаКартинок.ДополнительныеСведения;
			ОписаниеКомандыФормы.Заголовок             = НСтр("ru = 'Дополнительные сведения'");
			ОписаниеКомандыФормы.Подсказка             = НСтр("ru = 'Дополнительные сведения'");
			
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьКомандыПанелиДействий()

#КонецОбласти