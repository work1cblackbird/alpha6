
////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействиеПереопределяемый: общий механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеСправочников
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	СоответствиеСправочников.Вставить("Организации", "Организации");
	СоответствиеСправочников.Вставить("Валюты", "Валюты");
	СоответствиеСправочников.Вставить("Банки","КлассификаторБанков");
	СоответствиеСправочников.Вставить("БанковскиеСчетаОрганизаций", "БанковскиеСчета");
	СоответствиеСправочников.Вставить("БанковскиеСчетаКонтрагентов", "БанковскиеСчета");
	СоответствиеСправочников.Вставить("Контрагенты", "Контрагенты");
	СоответствиеСправочников.Вставить("ДоговорыКонтрагентов", "ДоговорыВзаиморасчетов");
	СоответствиеСправочников.Вставить("Номенклатура", "Номенклатура");
	СоответствиеСправочников.Вставить("ХарактеристикиНоменклатуры", "ХарактеристикиНоменклатуры");
	СоответствиеСправочников.Вставить("УпаковкиНоменклатуры", "ЕдиницыИзмерения");
	СоответствиеСправочников.Вставить("ЕдиницыИзмерения", "КлассификаторЕдиницИзмерения");
	СоответствиеСправочников.Вставить("ФизическиеЛица", "");
	СоответствиеСправочников.Вставить("Партнеры", "");	
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеНаименованийОбъектовМДИРеквизитов
Процедура ПолучитьСоответствиеНаименованийОбъектовМДИРеквизитов(СоответствиеРеквизитовОбъекта) Экспорт
	
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагентаДляСообщенияПользователю", "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагента", "НаименованиеПолное");
	СоответствиеРеквизитовОбъекта.Вставить("ВнешнийКодКонтрагента", "Код");
	СоответствиеРеквизитовОбъекта.Вставить("ВладелецДоговораКонтрагента", "Владелец");
	СоответствиеРеквизитовОбъекта.Вставить("ПартнерКонтрагента", Неопределено);
	СоответствиеРеквизитовОбъекта.Вставить("ИННКонтрагента", "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППКонтрагента", "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеОрганизации", "НаименованиеПолное");
	СоответствиеРеквизитовОбъекта.Вставить("СокращенноеНаименованиеОрганизации", "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("ИННОрганизации", "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППОрганизации", "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("ОГРНОрганизации", "ОГРН");
	СоответствиеРеквизитовОбъекта.Вставить("ОГРНОрганизации", "ОГРН");
	СоответствиеРеквизитовОбъекта.Вставить("ОГРНОрганизации", "ОГРН");
	СоответствиеРеквизитовОбъекта.Вставить("НомерДоговораКонтрагента", "НомерДоговора");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаДоговораКонтрагента", "ДатаНачала");
	
	// ДиректБанк
	СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеПоручениеВМетаданных"                  , "ПлатежноеПоручение");
	СоответствиеРеквизитовОбъекта.Вставить("БанковскийСчетОрганизации"                      , "БанковскиеСчета");
	СоответствиеРеквизитовОбъекта.Вставить("Банк.Наименование"                              , "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("Банк.Город"                                     , "Город");
	СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеПоручение.СчетОрганизации"             , "СчетОрганизации");
	СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеПоручение.Организация"                 , "Организация");
	СоответствиеРеквизитовОбъекта.Вставить("БанковскийСчетОрганизации.НомерСчета"           , "НомерСчета");
	СоответствиеРеквизитовОбъекта.Вставить("БанковскийСчетОрганизации.Банк"                 , "Банк");
	СоответствиеРеквизитовОбъекта.Вставить("Банк.БИК"                                       , "Код");
	СоответствиеРеквизитовОбъекта.Вставить("БанковскийСчетОрганизации.Организация"          , "Владелец");
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации
Процедура ОписаниеОрганизации(СведенияОрганизации, Результат, Список = "") Экспорт
	
	СписокПолей = ?(Список = "", "ПолноеНаименование,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет", Список);
	МассивПолей = СтрРазделить(СписокПолей, ",", Ложь);
	МассивПолейПослеПроверки = Новый Массив;
	
	Для Каждого ЭлементМассива Из МассивПолей Цикл
		
		Если СведенияОрганизации.Свойство(ЭлементМассива) Тогда
			
			МассивПолейПослеПроверки.Добавить(ЭлементМассива);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокПолей = СтрСоединить(МассивПолейПослеПроверки, ",");
	Результат = ОрганизацииАльфаАвто.ОписаниеОрганизации(СведенияОрганизации, Список);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект
Процедура НайтиСсылкуНаОбъект(ТипОбъекта, Результат, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено) Экспорт

	Результат = Неопределено;
	
	Если ТипОбъекта = "Валюты" Или ТипОбъекта = "ХарактеристикиНоменклатуры" Или ТипОбъекта = "СтраныМира" Тогда
		
		Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ИдОбъекта);
		
	ИначеЕсли ТипОбъекта = "ЕдиницыИзмерения" Тогда
		
		Результат = НайтиСсылкуНаЕдиницу(ИдОбъекта, ДополнительныеРеквизиты);
		
	ИначеЕсли
		(ТипОбъекта = "Контрагенты" Или ТипОбъекта = "Организации")
		И ЗначениеЗаполнено(ДополнительныеРеквизиты)
	Тогда
	
		ИНН = ""; 
		КПП = "";
		ДополнительныеРеквизиты.Свойство("ИНН", ИНН);
		ДополнительныеРеквизиты.Свойство("КПП", КПП);

		Если ЗначениеЗаполнено(ИНН) Тогда
			
			Результат = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП);
			
		КонецЕсли;
		
		Наименование = "";
		
		Если
			Не ЗначениеЗаполнено(Результат)
			И ДополнительныеРеквизиты.Свойство("Наименование", Наименование)
			И ЗначениеЗаполнено(Наименование)
		Тогда
			
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Наименование", Наименование);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Номенклатура" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда

		ВызватьИсключение "Посмотреть в бухе как реализовать эту ветку";
		
		//ПараметрПоиска = "";
		//Контрагент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Владелец");
		//
		//Если Не ЗначениеЗаполнено(Результат) Тогда
		//	
		//	Если ДополнительныеРеквизиты.Свойство("Артикул", ПараметрПоиска) И ЗначениеЗаполнено(ПараметрПоиска) Тогда
		//		
		//		НайтиСсылкуНаОбъектПоРеквизиту(
		//			ТипОбъекта,
		//			"АртикулДляПоиска",
		//			ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(ПараметрПоиска)
		//		);
		//		
		//	ИначеЕсли
		//		ЗначениеЗаполнено(ДополнительныеРеквизиты)
		//		И ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска)
		//	Тогда
		//		
		//		Попытка
		//		
		//			ИдентификаторСтрока = Лев(ПараметрПоиска, Найти(ПараметрПоиска, "#") - 1);
		//			НоменклатураСсылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСтрока));
		//			
		//			Если ЗначениеЗаполнено(НоменклатураСсылка) Тогда
		//				
		//				Результат = НоменклатураСсылка;
		//				
		//			КонецЕсли;
		//			
		//		Исключение
		//			
		//			// Ошибка будет означать, что переданное значение не идентификатор ссылки. Обрабатывать это не требуется.
		//			
		//		КонецПопытки;
		//		
		//	КонецЕсли;
			
		//КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "БанковскиеСчетаОрганизаций" Или ТипОбъекта = "БанковскиеСчетаКонтрагентов" Тогда
		
		Владелец = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Владелец");
		
		Если ЗначениеЗаполнено(Владелец) Тогда
			
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(
				ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника(ТипОбъекта),
				"НомерСчета",
				ИдОбъекта,
				Владелец
			);
			
		КонецЕсли;
		
	ИначеЕсли ВРег(ТипОбъекта) = ВРег("ДоговорыКонтрагентов") Тогда
		
		НомерДоговора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "НомерДоговора");
		ДатаДоговора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "ДатаДоговора");
		Владелец = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Владелец");
		Результат = НайтиСсылкуНаДоговорКонтрагента(НомерДоговора, ДатаДоговора, Владелец);
		
	ИначеЕсли ТипОбъекта = "ВидыКонтактнойИнформации" Тогда
		
		Попытка
			
			Результат = Справочники.ВидыКонтактнойИнформации[ИдОбъекта];
			
		Исключение
			
			Результат = Неопределено;
			
		КонецПопытки;
		
	ИначеЕсли ТипОбъекта = "ГТД" Тогда
		
		Страна = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Страна");
		ЭтоРНПТ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "РНПТ", Ложь);
		Результат = НайтиСсылкуНаГТД(ИдОбъекта, Страна, ЭтоРНПТ);

	ИначеЕсли ТипОбъекта = "Банки" Тогда
		
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторБанков", "Код", ИдОбъекта);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Для типа %1 не описан алгоритм поиска значения'"), ТипОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента
Процедура ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект, Результат) Экспорт
	
	Результат = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(СсылкаНаОбъект);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПроверитьГотовностьИсточников
Процедура ПроверитьГотовностьИсточников(ДокументыМассив, БезЭлектроннойПодписи = Ложь) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(
		ДокументыМассив,
		Тип("СтрокаГруппировкиДинамическогоСписка")
	);
	
	НепроведенныеДокументы = ОбщегоНазначения.ПроверитьПроведенностьДокументов(ДокументыМассив);
	
	ТипыЗаказов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("ДокументСсылка.ЗаказПоставщику"));
	ТипыЗаказов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	
	Если НепроведенныеДокументы.Количество() <> 0 Тогда
		
		ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен. Электронный документ не сформирован.'");
		ШаблонОшибкиПроверки = НСтр("ru = 'Документ не проведен.'");
		
		Для Каждого НеПроведенныйДокумент Из НепроведенныеДокументы Цикл
			
			// Не проверяем проведение заказов при отправке через 1С:Бизнес-сеть
			Если БезЭлектроннойПодписи И ТипыЗаказов.Найти(ТипЗнч(НеПроведенныйДокумент)) <> Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Найденный = ДокументыМассив.Найти(НеПроведенныйДокумент.Ссылка);
			
			Если Найденный <> Неопределено Тогда
				
				ДокументыМассив.Удалить(Найденный);
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					Строка(НеПроведенныйДокумент.Ссылка));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПередЗаписьюВладельцаЭлектронногоДокумента
Процедура ПередЗаписьюВладельцаЭлектронногоДокумента(Объект,
                                                     ИзменилисьКлючевыеРеквизиты,
                                                     СостояниеЭлектронногоДокумента, 
                                                     ПодлежитОбменуЭД,
                                                     ТребуетсяКонтрольАктуальности,
                                                     Отказ) Экспорт
	
	ЭлектронныйДокументСформирован = ЭлектронныйДокументСформирован(Объект, СостояниеЭлектронногоДокумента);
	
	Если
		Объект.ДополнительныеСвойства.Свойство("РежимЗаписи")
		И Объект.ДополнительныеСвойства.РежимЗаписи <> РежимЗаписиДокумента.Проведение
		И Не ЭлектронныйДокументСформирован
	Тогда
		
		ПодлежитОбменуЭД = Ложь;
		
	КонецЕсли;
	
	Если ПодлежитОбменуЭД Тогда
		
		Если ЭлектронныйДокументСформирован Тогда
			
			ИзменилисьКлючевыеРеквизиты = ИзменилисьКлючевыеРеквизитыОбъекта(Объект);
			
			Если ИзменилисьКлючевыеРеквизиты Тогда
				
				ПроверитьСтатусЭлектронногоДокументаОбменаСБанком(Объект, СостояниеЭлектронногоДокумента, Отказ);
				
			КонецЕсли;
			
		Иначе
			
			ИзменилисьКлючевыеРеквизиты = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица
// Получает данные о юридическом (физическом) лице по ссылке.
//
// Параметры:
//  ЮрФизЛицо - СправочникСсылка - ссылка на элемент справочника, по которому получаются данные.
//
Функция ПолучитьДанныеЮрФизЛица(ЮрФизЛицо) Экспорт
	
	ДоступныеТипыЮрФизЛица = Новый Массив();
	ДоступныеТипыЮрФизЛица.Добавить(Тип("СправочникСсылка.Организации"));
	ДоступныеТипыЮрФизЛица.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ДоступныеТипыЮрФизЛица.Добавить(Тип("СправочникСсылка.ПодразделенияКомпании"));
	
	Если ДоступныеТипыЮрФизЛица.Найти(ТипЗнч(ЮрФизЛицо)) = Неопределено Тогда
		
		// Исключение, так как разработчик должен видить ошибку
		ВызватьИсключение НСтр(
			"ru = 'Для получения сведений о юр./физ. лице выбран неверный тип данных'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
		);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЮрФизЛицо).ДанныеЮрФизЛицаДляЭДО(ЮрФизЛицо);
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат.Вставить("Ссылка", ЮрФизЛицо);
	
	Возврат Результат;
	
КонецФункции

// Получает ссылку на физическое лицо по сведениям.
// 
// Параметры:
//  СведенияФизЛица - структура:
//  	* ИНН - строка
// 
// Возвращаемое значение:
//  - СправочникСсылка.ФизическиеЛица
//  - Неопределено - если не элемент не найден в ИБ.
//
Функция ПолучитьФизЛицоМЧД(СведенияФизЛица) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ИНН = &ИНН"
	);
	Запрос.УстановитьПараметр("ИНН", СведенияФизЛица.ИНН);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
	
КонецФункции

// Получить типы организации представителя МЧД.
// 
// Параметры:
//  Типы - массив
Процедура ПолучитьТипыОрганизацииПредставителяМЧД(Типы) Экспорт
	
	Типы.Добавить(Тип("СправочникСсылка.Организации"));
	Типы.Добавить(Тип("СправочникСсылка.Контрагенты"));
	
КонецПроцедуры

// Получить ссылку на организацию-представителя МЧД.
// 
// Параметры:
//  СведенияЮрЛица - структура:
// 		* ИНН 	- строка
// 		* КПП 	- строка
// 		* ОГРН 	- строка
// 
// Возвращаемое значение:
// 	СправочникСсылка - ссылка на элемент справочника, Неопределено
//  
Функция ПолучитьОрганизациюМЧД(СведенияЮрЛица) Экспорт
	
	Контрагент = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Контрагенты", СведенияЮрЛица.ИНН, СведенияЮрЛица.КПП);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		Возврат Контрагент;
		
	КонецЕсли;
	
	Организация = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации", СведенияЮрЛица.ИНН, СведенияЮрЛица.КПП);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Возврат Организация;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Готовит контейнер для хранения информации о юр./физ. лица
//
// Возвращаемое значение:
//  Структура - данные юр./физ. лица с пустыми полями
//
Функция НовыеСведенияОЮрФизЛице() Экспорт
	
	Возврат Новый Структура(
		"ЮрФизЛицо,
		|Представление,
		|Наименование,
		|ПолноеНаименование,
		|КодПоОКПО,
		|КодОКВЭД,
		|ИНН,
		|КПП,
		|ОГРН,
		|Телефоны,
		|ЮридическийАдрес,
		|Банк,
		|БИК,
		|КоррСчет,
		|НомерСчета,
		|Фамилия,
		|Имя,
		|Отчество,
		|СвидетельствоСерияНомер,
		|СвидетельствоДатаВыдачи"
	);
	
КонецФункции

// Формирует объект с информацией о банковском счете
//
// Параметры:
//  ВладелецСчета - СправочникСсылка - владелец счета
// 
// Возвращаемое значение:
//  Структура - структура с полями:
//  * Банк       - Строка
//  * БИК        - Строка
//  * НомерСчета - Строка
//  * КоррСчет   - Строка
//
Функция СведенияОБанковскомСчете(ВладелецСчета) Экспорт
	
	Результат = Новый Структура("НомерСчета,Банк,БИК,КоррСчет");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	БанковскиеСчета.НомерСчета КАК НомерСчета,
		|	БанковскиеСчета.Банк.Наименование КАК Банк,
		|	БанковскиеСчета.Банк.КоррСчет КАК КоррСчет,
		|	БанковскиеСчета.Банк.Код КАК БИК,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Организации).ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
		|			ТОГДА 0
		|		КОГДА ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Контрагенты).ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
		|			ТОГДА 0
		|		КОГДА ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.ПодразделенияКомпании).ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетСчета
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Владелец
		|	И НЕ БанковскиеСчета.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетСчета"
	);
	Запрос.УстановитьПараметр("Владелец", ВладелецСчета);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
		МаксимальноДопустимаяДлиннаСчета = 20;
		СимволовДополнить = МаксимальноДопустимаяДлиннаСчета - СтрДлина(Выборка.НомерСчета);
		Добавок = "";
		
		Для Н = 1 По СимволовДополнить Цикл
			
			Добавок = Добавок + " ";
			
		КонецЦикла;
	
		Результат.НомерСчета = Выборка.НомерСчета + Добавок;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Владелец = Неопределено)
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита)
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИскСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ИскСправочник
	|ГДЕ
	|	ИскСправочник." + ИмяРеквизита + " = &ЗначРеквизита";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиСсылкуНаЕдиницу(ИдОбъекта, ДополнительныеРеквизиты)
	
	Классификатор = НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторЕдиницИзмерения", "Код", ИдОбъекта);
	
	Если Не ЗначениеЗаполнено(Классификатор) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
		
	Номенклатура = Неопределено;
	
	Если
		ДополнительныеРеквизиты.Свойство("Номенклатура", Номенклатура)
		И ЗначениеЗаполнено(Номенклатура)
	Тогда
		
		Результат = НайтиСсылкуНаОбъектПоРеквизиту(
			"ЕдиницыИзмерения",
			"ЕдиницаПоКлассификатору",
			Классификатор,
			Номенклатура
		);
		
		Если ЗначениеЗаполнено(Результат) Тогда
			
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТипНоменклатуры = Неопределено;
	
	Если
		ДополнительныеРеквизиты.Свойство("ТипНоменклатуры", ТипНоменклатуры)
		И ЗначениеЗаполнено(ТипНоменклатуры)
	Тогда
		
		Результат = НайтиСсылкуНаОбъектПоРеквизиту(
			"ЕдиницыИзмерения",
			"ЕдиницаПоКлассификатору",
			Классификатор,
			ТипНоменклатуры
		);
		
		Если ЗначениеЗаполнено(Результат) Тогда
			
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Классификатор;
	
КонецФункции

Функция НайтиСсылкуНаДоговорКонтрагента(НомерДоговора, ДатаДоговора, Владелец)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДоговорыВзаиморасчетов.Ссылка КАК Договор
		|ИЗ
		|	Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
		|ГДЕ
		|	ДоговорыВзаиморасчетов.НомерДоговора = &НомерДоговора
		|	И ДоговорыВзаиморасчетов.ДатаНачала = &ДатаНачала
		|	И ДоговорыВзаиморасчетов.Владелец = &Владелец"
	);
	Запрос.УстановитьПараметр("НомерДоговора", НомерДоговора);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаДоговора);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Договор;
	
КонецФункции

Функция НайтиСсылкуНаГТД(НомерГТД, Страна, ЭтоРНПТ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГТД.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ГТД КАК ГТД
		|ГДЕ
		|	ГТД.Наименование = &НомерГТД"
	);
	Запрос.УстановитьПараметр("НомерГТД", НомерГТД);
	
	Если ЗначениеЗаполнено(Страна) Тогда
		
		Запрос.Текст = Запрос.Текст + " И ГТД.Страна = &Страна";
		Запрос.УстановитьПараметр("Страна", Страна);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " И ГТД.РНПТ = &РНПТ";
	Запрос.УстановитьПараметр("РНПТ", ЭтоРНПТ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
	
КонецФункции

#Область ПроверкаКлючевыхРеквизитовОбъекта

Функция ИзменилисьКлючевыеРеквизитыОбъекта(Объект)

	КлючевыеРеквизиты = КлючевыеРеквизитыОбъекта(Объект);
	Если Не ЗначениеЗаполнено(КлючевыеРеквизиты) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИзменилисьКлючевыеРеквизитыШапки(Объект, КлючевыеРеквизиты) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИзменилисьКлючевыеРеквизитыТабличнойЧасти(Объект, КлючевыеРеквизиты) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция КлючевыеРеквизитыОбъекта(Объект)
	
	ТипОбъекта = ТипЗнч(Объект);
	Результат = Новый Структура();
	
	Если ТипОбъекта = Тип("ДокументОбъект.РеализацияТоваров") Тогда
		
		Результат.Вставить(
			"Шапка",
			"Дата, Номер, ХозОперация, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент, Грузополучатель, Грузоотправитель");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ); 
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗаказНаряд") Тогда
		
		Если Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			
			Результат.Вставить(
				"Шапка",
				"Дата, Номер, Организация, Состояние, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент, Грузополучатель, Грузоотправитель");
			РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
			Результат.Вставить("Товары", РеквизитыТЧ);
			РеквизитыТЧ = "Количество, Коэффициент, Авторабота, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
			Результат.Вставить("Автоработы", РеквизитыТЧ);
			
		Иначе
			
			Результат = Новый Структура("Шапка", "Номер");
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		Результат.Вставить(
			"Шапка",
			"Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ);
		РеквизитыТЧ = "Количество, Коэффициент, Авторабота, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Автоработы", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ДокументОснование, ВалютаДокумента");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.СчетНаОплату") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ);
		РеквизитыТЧ = "Количество, Коэффициент, Авторабота, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Автоработы", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ВозвратПоставщику") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, Грузоотправитель, Грузополучатель");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РеализацияАвтомобилей") Тогда
		
		Результат.Вставить(
			"Шапка",
			"Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент, Грузополучатель, Грузоотправитель");
		РеквизитыТЧ = "Количество, Автомобиль, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Автомобили", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КорректировкаРеализацииАвтомобилей") Тогда
		
		Результат.Вставить(
			"Шапка",
			"Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент");
		РеквизитыТЧ = "Количество, Автомобиль, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Автомобили", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.АктСверкиВзаиморасчетов") Тогда
		
		Результат.Вставить(
			"Шапка",
			"Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоЭлектронныйДокумент, ДокументКонтрагента, НомерВходящегоДокумента, ДатаВходящегоДокумента, ДатаНачала, ДатаОкончания");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПоступлениеТоваров") Тогда
		
		Результат.Вставить(
			"Шапка",
			"Дата, Номер, ХозОперация, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ); 
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ДокументОснование, ВалютаДокумента");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ); 
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		
		Результат.Вставить(
			"Шапка",
			"Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		
		Результат.Вставить(
			"Шапка",
			"Дата, Номер, ХозОперация, Организация, Контрагент, ВалютаДокумента");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ); 
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.СчетОтПоставщика") Тогда
		
		Результат.Вставить(
			"Шапка",
			"Дата, Номер, ХозОперация, Организация, Контрагент, ВалютаДокумента");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ); 
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.СчетОтПоставщикаЗаАвтомобили") Тогда
		
		Результат.Вставить(
			"Шапка",
			"Дата, Номер, ХозОперация, Организация, Контрагент, ВалютаДокумента");
		РеквизитыТЧ = "Количество, Автомобиль, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Автомобили", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КорректировкаПоступленияАвтомобилей") Тогда
		
		Результат.Вставить(
			"Шапка",
			"Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент");
		РеквизитыТЧ = "Количество, Автомобиль, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Автомобили", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПоступлениеАвтомобилей") Тогда
		
		Результат.Вставить(
			"Шапка",
			"Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент");
		РеквизитыТЧ = "Количество, Автомобиль, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Автомобили", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПоступлениеДопРасходов") Тогда
		
		Результат.Вставить(
			"Шапка",
			"Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаВсего, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ); 
		
	Иначе
		
		Результат = Новый Структура("Шапка", "Дата, Номер");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИзменилисьКлючевыеРеквизитыШапки(Объект, КлючевыеРеквизиты)

	Если Не ОбщегоНазначения.КоллекцииИдентичны(
		РеквизитыШапкиДоИзменения(Объект, КлючевыеРеквизиты),
		РеквизитыШапкиПослеИзменения(Объект, КлючевыеРеквизиты)) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция ИзменилисьКлючевыеРеквизитыТабличнойЧасти(Объект, КлючевыеРеквизиты)

	Для Каждого КлючЗначение Из КлючевыеРеквизиты Цикл
		
		Если КлючЗначение.Ключ = "Шапка" Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не ОбщегоНазначения.КоллекцииИдентичны(
			РеквизитыТабличнойЧастиДоИзменения(Объект, КлючЗначение.Ключ, КлючЗначение.Значение),
			РеквизитыТабличнойЧастиПослеИзменения(Объект, КлючЗначение.Ключ, КлючЗначение.Значение)) Тогда
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция РеквизитыШапкиДоИзменения(Объект, КлючевыеРеквизиты)

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, КлючевыеРеквизиты.Шапка);

КонецФункции

Функция РеквизитыШапкиПослеИзменения(Объект, КлючевыеРеквизиты)
	
	Результат = Новый Структура;
	ИменаРеквизитов = СтрРазделить(КлючевыеРеквизиты.Шапка, ", ", Ложь);
	Для Каждого ИмяРеквизита Из ИменаРеквизитов Цикл
		Результат.Вставить(ИмяРеквизита, Объект[ИмяРеквизита]);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция РеквизитыТабличнойЧастиДоИзменения(Объект, ИмяТабличнойЧасти, КлючевыеРеквизитыТабличнойЧасти)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ "+ КлючевыеРеквизитыТабличнойЧасти + " ИЗ "
	+ Объект.Метаданные().ПолноеИмя() + "." + ИмяТабличнойЧасти
	+ " КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция РеквизитыТабличнойЧастиПослеИзменения(Объект, ИмяТабличнойЧасти, КлючевыеРеквизитыТабличнойЧасти)
	
	Возврат Объект[ИмяТабличнойЧасти].Выгрузить(, КлючевыеРеквизитыТабличнойЧасти);

КонецФункции

Процедура ПроверитьСтатусЭлектронногоДокументаОбменаСБанком(Объект, СостояниеЭлектронногоДокумента, Отказ)

	Если НЕ ЭтоБанковскийДокумент(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Если СостояниеЭлектронногоДокумента <> Перечисления.СостоянияОбменСБанками.ОшибкаПередачи
		И СостояниеЭлектронногоДокумента <> Перечисления.СостоянияОбменСБанками.Отклонен Тогда
		
		Отказ = Истина;
		
	КонецЕсли;

КонецПроцедуры

Функция ЭлектронныйДокументСформирован(Объект, СостояниеЭлектронногоДокумента)

	Если Не ЗначениеЗаполнено(СостояниеЭлектронногоДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоБанковскийДокумент(Объект) Тогда
		Возврат СостояниеЭлектронногоДокумента <> Перечисления.СостоянияОбменСБанками.НеСформирован;
	Иначе
		Возврат СостояниеЭлектронногоДокумента <> Перечисления.СостоянияДокументовЭДО.НеСформирован;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ЭтоБанковскийДокумент(Объект)

	ТипОбъекта = ТипЗнч(Объект);
	Возврат ТипОбъекта = Тип("ДокументОбъект.ПлатежноеПоручение");
		
КонецФункции

#КонецОбласти

Функция ПолучитьСписокУпаковокДляОтбораВФормеСопоставления(Номенклатура) Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫБОР
	               |		КОГДА ТипыНоменклатуры.ИспользованиеЕдиницИзмерения = 1
	               |			ТОГДА ТипыНоменклатуры.Ссылка
	               |		КОГДА ТипыНоменклатуры.ИспользованиеЕдиницИзмерения = 2
	               |			ТОГДА Номенклатура.Ссылка
	               |		ИНАЧЕ NULL
	               |	КОНЕЦ КАК Владелец
	               |ПОМЕСТИТЬ Владельцы
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыНоменклатуры КАК ТипыНоменклатуры
	               |		ПО Номенклатура.ТипНоменклатуры = ТипыНоменклатуры.Ссылка
	               |ГДЕ
	               |	Номенклатура.Ссылка = &Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	               |ИЗ
	               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Владельцы КАК Владельцы
	               |		ПО ЕдиницыИзмерения.Владелец = Владельцы.Владелец";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	РезультатЗапроса = Запрос.Выполнить();
	
	ЕдиницыИзмерения = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ЕдиницаИзмерения");
	
	Возврат  ЕдиницыИзмерения;
	
КонецФункции

#КонецОбласти  