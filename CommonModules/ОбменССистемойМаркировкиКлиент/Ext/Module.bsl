
#Область ПрограммныйИнтерфейс

#Область ОбменЧерезAPI

// Формирует запрос JSON для передачи документа в Честный знак и при необходимости выводит данные для подписи
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект     - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура ФормированиеЗапросаВФоне(Форма, Объект, ДополнительныеПараметры) Экспорт
	
	// Приватные методы отправки запросов
	Если ДополнительныеПараметры.Действие = "ЗагрузкаКодовМаркировки" Тогда
		СформироватьЗапросЗагрузкиКодовМаркировки(Форма, Объект, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Действие = "ОтправкаЗапросаНаПолучениеТекущихСтатусовМаркировки" Тогда
		СформироватьЗапросТекущихСтатусовМаркировки(Форма, Объект, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Действие = "ОтправкаЗапросаСверкиКодовМаркировки" Тогда
		СформироватьЗапросСверкиКодовМаркировки(Форма, Объект, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Действие = "ПолучитьСтатусыУчастниковГИСМТ" Тогда
		СформироватьЗапросСтатусаУчастников(Форма, Объект, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Действие = "ПолучитьСтатусДокумента" Тогда
		СформироватьЗапросСтатусаДокумента(Форма, Объект, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Действие = "ПроверитьСоединениеСУЗ" Тогда
		СформироватьЗапросПроверкиСоединенияСУЗ(Форма, Объект, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Документ");
	ПараметрыЗапроса.Вставить("Организация");
	ПараметрыЗапроса.Вставить("Действие", "");
	ПараметрыЗапроса.Вставить("НеТребуетсяКлючСессии", Ложь);
	ПараметрыЗапроса.Вставить("КлючСессииСУЗ", Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
	
	ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.ФормированиеЗапросаВФоне(
		Форма.УникальныйИдентификатор, ПараметрыЗапроса);
	
	ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОперации.ТекстСообщения = НСтр("ru='Формирование запроса в Честный знак'");
	ПараметрыОперации.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.ВыводитьСообщения = Истина;
	
	ПараметрыОбработки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
	ПараметрыОбработки.Вставить("Форма", Форма);
	ПараметрыОбработки.Вставить("Объект", Объект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("ЗавершениеФормированияЗапроса", ОбменССистемойМаркировкиКлиент, ПараметрыОбработки),
		ПараметрыОперации);
		
КонецПроцедуры // ФормированиеЗапросаВФоне()

// Обработка полученных данных по документу для обмена с Честным знаком для подписания на клиенте
//
// Параметры:
//  РезультатЗапроса		 - Строка - Адрес временного хранилища с результатом запросов
//  ДополнительныеПараметры	 - Структура - Дополнительная информация об источнике запроса
//
Процедура ЗавершениеФормированияЗапроса(РезультатЗапроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗапроса.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				РезультатЗапроса.ПодробноеПредставлениеОшибки
			)
		);
	КонецЕсли;
	
	Если РезультатЗапроса.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗапроса = ПолучитьИзВременногоХранилища(РезультатЗапроса.АдресРезультата);
	  
	// Есть ошибки - дальнейшие действия отменены
	Если ДанныеЗапроса.Свойство("ТекстОшибки") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				ДанныеЗапроса.ТекстОшибки)
		);
		Возврат;
		
	КонецЕсли;
	
	// Нет доступных сертификатов для подписания данных
	Если ДанныеЗапроса.ОтборСертификатов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Нет доступных сертификатов для подписания данных. Операция отменена.'")
		);
		Возврат;
	КонецЕсли;
	
	НужноПодписатьКлючСессии = НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры,
								  "НеТребуетсяКлючСессии", Ложь)
		И НЕ ДанныеЗапроса.Свойство("КлючСессии");
	
	// Не всегда можно корректно получить ключ сессии при длительной операции
	Если НужноПодписатьКлючСессии Тогда
		
		СтруктураКлючаСессии =
			ОбменССистемойМаркировкиВызовСервера.КлючСессииОрганизации(ДополнительныеПараметры.Организация);
		
		Если СтруктураКлючаСессии <> Неопределено Тогда
			
			ДанныеЗапроса.Вставить("КлючСессии", СтруктураКлючаСессии.КлючСессии);
			НужноПодписатьКлючСессии = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ДанныеЗапроса", ДанныеЗапроса);
	
	// Необходимо указать ключ сессии
	Если НужноПодписатьКлючСессии Тогда
		
		ПараметрыПодписи = ЭлектроннаяПодписьКлиент.ПараметрыCMS();
		ПараметрыПодписи.Открепленная = Ложь; // Для авторизации она должна быть прикрепленной
		
		РезультатПодписания = Новый Структура;
		РезультатПодписания.Вставить("ДанныеАвторизации", ДанныеЗапроса.ДанныеАвторизации);
		РезультатПодписания.Вставить("СвойстваПодписи", Неопределено);
		
		ДанныеАвторизации = Новый Структура();
		ДанныеАвторизации.Вставить("Данные", ДанныеЗапроса.ДанныеАвторизации);
		ДанныеАвторизации.Вставить("ПараметрыCMS", ПараметрыПодписи);
		ДанныеАвторизации.Вставить("Сообщение", РезультатПодписания);
		
		ОписаниеДанных = Новый Структура();
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание данных аутентификации'"));
		ОписаниеДанных.Вставить("ОтборСертификатов", ДанныеЗапроса.ОтборСертификатов);
		ОписаниеДанных.Вставить("НаборДанных", Новый Массив);
		ОписаниеДанных.НаборДанных.Добавить(Новый Структура("Данные", ДанныеАвторизации));
		ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
		ОписаниеДанных.Вставить("ЗаголовокДанных",     "");
		ОписаниеДанных.Вставить("ПредставлениеНабора",
			НСтр("ru = 'Данные аутентификации для обмена с системой маркировки'"));
		
		ДополнительныеПараметры.Вставить("ПодписатьДанныеЗапроса");
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ПодписаниеДанныхЗавершение", ОбменССистемойМаркировкиКлиент, ДополнительныеПараметры);
		
		ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ДополнительныеПараметры.Форма, ОбработчикОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	ПодписатьДанныеДокумента(ДополнительныеПараметры);
	
КонецПроцедуры

// Процедура подписания данных аутетификации
//
// Параметры:
//  РезультатПодписания		 - Структура - Данные, полученные после подписания сертификатом
//  ДополнительныеПараметры	 - Структура - Данные, по которым формируется подписание
//
Процедура ПодписаниеДанныхЗавершение(РезультатПодписания, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатПодписания.Успех Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Данные для аутентификации в системе маркировки не подписаны. Операция отменена.'")
		);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатПодписания.ТекущийЭлементНабораДанных.СвойстваПодписи) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(РезультатПодписания.ТекущийЭлементНабораДанных.СвойстваПодписи) Тогда
		СвойстваПодписи = ПолучитьИзВременногоХранилища(РезультатПодписания.ТекущийЭлементНабораДанных.СвойстваПодписи);
		ПодписьДанныхАутентификации = Base64Строка(СвойстваПодписи.Подпись);
	Иначе
		ПодписьДанныхАутентификации = Base64Строка(РезультатПодписания.ТекущийЭлементНабораДанных.СвойстваПодписи.Подпись);
	КонецЕсли;
	
	ДополнительныеПараметры.ДанныеЗапроса.Вставить("ПодписьДанныхАутентификации", ПодписьДанныхАутентификации);
	
	// Продолжим подписание данных
	Если ДополнительныеПараметры.Свойство("ПодписатьДанныеЗапроса") Тогда
		ПодписатьДанныеДокумента(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	// Подписанные данные передадим на сервер Честного знака
	
	
КонецПроцедуры

// Формирование параметров для подписания данных документов сертификатом
//
// Параметры:
//  ПараметрыПодписания	 - Структура - Данные подписания
//
Процедура ПодписатьДанныеДокумента(ПараметрыПодписания) Экспорт
	
	ПараметрыПодписи = ЭлектроннаяПодписьКлиент.ПараметрыCMS();
	ПараметрыПодписи.Открепленная = Истина; // Для подписания открепленная подпись
	
	РезультатПодписания = Новый Структура;
	РезультатПодписания.Вставить("ДанныеЗапроса", ПараметрыПодписания.ДанныеЗапроса.СообщениеJSON);
	РезультатПодписания.Вставить("СвойстваПодписи", Неопределено);
	
	ДанныеОбмена = Новый Структура();
	ДанныеОбмена.Вставить("Данные", ПараметрыПодписания.ДанныеЗапроса.СообщениеJSON);
	ДанныеОбмена.Вставить("ПараметрыCMS", ПараметрыПодписи);
	ДанныеОбмена.Вставить("Сообщение", РезультатПодписания);
	
	ОписаниеДанных = Новый Структура();
	ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание запроса обмена с системой маркировки'"));
	ОписаниеДанных.Вставить("ОтборСертификатов", ПараметрыПодписания.ДанныеЗапроса.ОтборСертификатов);
	ОписаниеДанных.Вставить("НаборДанных", Новый Массив);
	ОписаниеДанных.НаборДанных.Добавить(Новый Структура("Данные", ДанныеОбмена));
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ЗаголовокДанных",     "");
	ОписаниеДанных.Вставить("ПредставлениеНабора",
		НСтр("ru = 'Запрос документа для обмена с системой маркировки'"));
		
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ПодписаниеДанныхДокументаЗавершение", ОбменССистемойМаркировкиКлиент, ПараметрыПодписания);
	
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ПараметрыПодписания.Форма, ОбработчикОповещения);
	
КонецПроцедуры // ПодписатьДанныеДокумента()

// Отправка подписанных данных документа в систему маркировки
//
// Параметры:
//  РезультатПодписания		 - Структура - Данные, полученные после подписания сертификатом
//  ДополнительныеПараметры	 - Структура - Данные, по которым формируется подписание
//
Процедура ПодписаниеДанныхДокументаЗавершение(РезультатПодписания, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатПодписания.Успех Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Запрос отправки в систему маркировки не подписан. Операция отменена.'")
		);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатПодписания.ТекущийЭлементНабораДанных.СвойстваПодписи) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(РезультатПодписания.ТекущийЭлементНабораДанных.СвойстваПодписи) Тогда
		СвойстваПодписи = ПолучитьИзВременногоХранилища(РезультатПодписания.ТекущийЭлементНабораДанных.СвойстваПодписи);
		ПодписьДанныхЗапроса = Base64Строка(СвойстваПодписи.Подпись);
	Иначе
		ПодписьДанныхЗапроса = Base64Строка(РезультатПодписания.ТекущийЭлементНабораДанных.СвойстваПодписи.Подпись);
	КонецЕсли;
	
	ДополнительныеПараметры.ДанныеЗапроса.Вставить("ПодписьДанныхЗапроса", ПодписьДанныхЗапроса);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Документ");
	ПараметрыЗапроса.Вставить("Организация");
	ПараметрыЗапроса.Вставить("Действие", "");
	ПараметрыЗапроса.Вставить("НеТребуетсяКлючСессии", Ложь);
	ПараметрыЗапроса.Вставить("КлючСессии", "");
	ПараметрыЗапроса.Вставить("ПодписьДанныхАутентификации", "");
	ПараметрыЗапроса.Вставить("УИД", "");
	ПараметрыЗапроса.Вставить("ПодписьДанныхЗапроса", "");
	ПараметрыЗапроса.Вставить("СообщениеJSON", "");
	ПараметрыЗапроса.Вставить("СтатусДокумента", Неопределено);
	ПараметрыЗапроса.Вставить("КлючСессииСУЗ", Ложь);
	ПараметрыЗапроса.Вставить("ИдентификаторСоединения", "");
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры.ДанныеЗапроса);
	
	ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.ОтправитьЗапросВФоне(
		ДополнительныеПараметры.Форма.УникальныйИдентификатор, ПараметрыЗапроса);
	
	ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОперации.ТекстСообщения = НСтр("ru='Отправка запроса в Честный знак'");
	ПараметрыОперации.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("ЗавершениеОтправкиЗапроса", ОбменССистемойМаркировкиКлиент, ДополнительныеПараметры),
		ПараметрыОперации);
	
КонецПроцедуры // ПодписаниеДанныхДокументаЗавершение()

// Описание действий после отправки и обработки запроса в Честном знаке
//
// Параметры:
//  РезультатОтправки		 - Структура - Результат отправки
//  ДополнительныеПараметры	 - Структура - Дополнительная информация
//
Процедура ЗавершениеОтправкиЗапроса(РезультатОтправки, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОтправки.Статус = "Ошибка" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				РезультатОтправки.ПодробноеПредставлениеОшибки
			)
		);

	КонецЕсли;
	
	Если РезультатОтправки.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(РезультатОтправки.АдресРезультата);
	
	Если Результат.Свойство("КлючСессии") Тогда
		СтруктураКлючаСессии = Новый Структура("КлючСессии,СрокДействия");
		ЗаполнитьЗначенияСвойств(СтруктураКлючаСессии, Результат.КлючСессии);
		ОбменССистемойМаркировкиВызовСервера.УстановитьТекущийНомерСессии(
			ДополнительныеПараметры.Организация, Новый ФиксированнаяСтруктура(СтруктураКлючаСессии));
	КонецЕсли;
	
	Если НЕ Результат.Успешно Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				Результат.ТекстОшибки
			)
		);

	КонецЕсли;
	
	Сообщение = ПолучитьЗначениеПараметраСтруктуры(Результат, "Сообщение", "");
	
	Если НЕ ПустаяСтрока(Сообщение) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			Сообщение
		);
	ИначеЕсли Результат.Успешно Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Запрос успешно выполнен с Честным знаком.'")
		);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОбработкаРезультата, Результат);
	
КонецПроцедуры // ЗавершениеОтправкиЗапроса

// Запрос в Честный знак для заполнения кодов товаров по остаткам
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект     - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура ПолучитьКодыТоваровОстатков(Форма, Объект, ДополнительныеПараметры) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		ИЛИ Форма.Модифицированность Тогда
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Данные еще не записаны.
			|Выполните данную операцию после записи документа.'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Объект", Объект);
	
	ПараметрыОбработки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
	ПараметрыОбработки.Вставить("ОбработчикПродолжения", 
		Новый ОписаниеОповещения("ЗавершениеПолученияКодовТоваровПоОстаткам",
		ОбменССистемойМаркировкиКлиент, ДополнительныеПараметры));
	
	ПроверитьКлючСессии(Форма, Объект.Организация, ПараметрыОбработки);
	
КонецПроцедуры

// Окончание отправки подписанных данных на сервер маркировки
//
// Параметры:
//  КлючСессии				 - Строка - Подписанный токен для входа.
//  ДополнительныеПараметры	 - Структура - Данные параметров документа.
//
Процедура ЗавершениеПолученияКодовТоваровПоОстаткам(КлючСессии, ДополнительныеПараметры) Экспорт
	
	ПодписаниеДанных = "";
	Если ТипЗнч(КлючСессии) = Тип("Структура") Тогда
		Если НЕ КлючСессии.Успех Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Данные для аутентификации в системе маркировки не подписаны. Операция отменена.'")
			);
			Возврат;
		КонецЕсли;
		ПодписаниеДанных = Base64Строка(КлючСессии.ТекущийЭлементНабораДанных.СвойстваПодписи.Подпись);
		КлючСессии = "";
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Документ");
	ПараметрыЗапроса.Вставить("Организация");
	ПараметрыЗапроса.Вставить("КлючСессии", КлючСессии);
	ПараметрыЗапроса.Вставить("ПодписаниеДанных", ПодписаниеДанных);
	ПараметрыЗапроса.Вставить("УИД", "");
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
	
	ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.КодыТоваровОстатков(
		ДополнительныеПараметры.Форма.УникальныйИдентификатор, ПараметрыЗапроса);
	
	ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОперации.ТекстСообщения = НСтр("ru='Отправка запроса в Честный знак'");
	ПараметрыОперации.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		ДополнительныеПараметры.ОбработкаРезультата,
		ПараметрыОперации);
	
КонецПроцедуры // ЗавершениеПолученияКодовТоваровПоОстаткам()

// Процедура подписи ключа сессии
//
// Параметры:
//  РезультатЗапроса		 - Строка - Адрес временного хранилища с результатом запросов
//  ДополнительныеПараметры	 - Структура - Дополнительная информация об источнике запроса
//
Процедура ЗавершениеПодписанияКлючаСессии(РезультатЗапроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗапроса.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				РезультатЗапроса.ПодробноеПредставлениеОшибки
			)
		);

	КонецЕсли;
	
	Если РезультатЗапроса.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗапроса = ПолучитьИзВременногоХранилища(РезультатЗапроса.АдресРезультата);
	
	// Есть ошибки - дальнейшие действия отменены
	Если ДанныеЗапроса.Свойство("ТекстОшибки") Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				ДанныеЗапроса.ТекстОшибки
			)
		);

		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеЗапроса.Свойство("КлючСессии") Тогда
		
		ПараметрыПодписи = ЭлектроннаяПодписьКлиент.ПараметрыCMS();
		ПараметрыПодписи.Открепленная = Ложь; // Для авторизации она должна быть прикрепленной
		
		РезультатПодписания = Новый Структура;
		РезультатПодписания.Вставить("ДанныеАвторизации", ДанныеЗапроса.ДанныеАвторизации);
		РезультатПодписания.Вставить("СвойстваПодписи", Неопределено);
		
		ДанныеАвторизации = Новый Структура();
		ДанныеАвторизации.Вставить("Данные", ДанныеЗапроса.ДанныеАвторизации);
		ДанныеАвторизации.Вставить("ПараметрыCMS", ПараметрыПодписи);
		ДанныеАвторизации.Вставить("Сообщение", РезультатПодписания);
		
		ОписаниеДанных = Новый Структура();
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание данных аутентификации'"));
		ОписаниеДанных.Вставить("ОтборСертификатов", ДанныеЗапроса.ОтборСертификатов);
		ОписаниеДанных.Вставить("НаборДанных", Новый Массив);
		ОписаниеДанных.НаборДанных.Добавить(Новый Структура("Данные", ДанныеАвторизации));
		ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
		ОписаниеДанных.Вставить("ЗаголовокДанных",     "");
		ОписаниеДанных.Вставить("ПредставлениеНабора",
			НСтр("ru = 'Данные аутентификации для обмена с системой маркировки'"));
		
		ДополнительныеПараметры.Вставить("ПодписатьДанныеЗапроса");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
			ДополнительныеПараметры.ОбработчикПродолжения.ДополнительныеПараметры,
			ДанныеЗапроса,
			Ложь);
		
		ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ДополнительныеПараметры.Форма,
			ДополнительныеПараметры.ОбработчикПродолжения);
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОбработчикПродолжения, 
		ДанныеЗапроса.КлючСессии);
	
КонецПроцедуры // ПолученияКодовТоваровПоОстаткамПродолжение()

// Описание действий после отправки и обработки запроса статусов в Честном знаке
//
// Параметры:
//  РезультатОтправки		 - Структура - Результат отправки
//  ДополнительныеПараметры	 - Структура - Дополнительная информация
//
Процедура ЗавершениеОтправкиЗапросаСтатусов(РезультатОтправки, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОтправки.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				РезультатОтправки.ПодробноеПредставлениеОшибки
			)
		);

	КонецЕсли;
	
	Если РезультатОтправки.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(РезультатОтправки.АдресРезультата);
	
	Если НЕ Результат.Успешно Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				Результат.ТекстОшибки
			)
		);

	КонецЕсли;
	
	// Есть ошибки - дальнейшие действия отменены
	Если Результат.Свойство("ТекстОшибки") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				Результат.ТекстОшибки
			)
		);
		Возврат;
	КонецЕсли;
	
	// Нет доступных сертификатов для подписания данных
	Если Результат.ОтборСертификатов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Нет доступных сертификатов для подписания данных. Операция отменена.'")
		);
		Возврат;
	КонецЕсли;
	
	НужноПодписатьКлючСессии = 
		НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НеТребуетсяКлючСессии", Ложь)
		И НЕ Результат.Свойство("КлючСессии")
		И НЕ ЗначениеЗаполнено(Результат.Данные);
	
	// Не всегда можно корректно получить ключ сессии при длительной операции
	Если НужноПодписатьКлючСессии Тогда
		
		СтруктураКлючаСессии =
			ОбменССистемойМаркировкиВызовСервера.КлючСессииОрганизации(ДополнительныеПараметры.Организация);
		
		Если СтруктураКлючаСессии <> Неопределено Тогда
			
			ДополнительныеПараметры.Вставить("КлючСессии", СтруктураКлючаСессии.КлючСессии);
			СформироватьЗапросТекущихСтатусовМаркировки(
				ДополнительныеПараметры.Форма,
				ДополнительныеПараметры.Объект,
				ДополнительныеПараметры
			);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Необходимо указать ключ сессии
	Если НужноПодписатьКлючСессии Тогда
		
		ПараметрыПодписи = ЭлектроннаяПодписьКлиент.ПараметрыCMS();
		ПараметрыПодписи.Открепленная = Ложь; // Для авторизации она должна быть прикрепленной
		
		РезультатПодписания = Новый Структура;
		РезультатПодписания.Вставить("ДанныеАвторизации", Результат.ДанныеАвторизации);
		РезультатПодписания.Вставить("СвойстваПодписи", Неопределено);
		
		ДанныеАвторизации = Новый Структура();
		ДанныеАвторизации.Вставить("Данные", Результат.ДанныеАвторизации);
		ДанныеАвторизации.Вставить("ПараметрыCMS", ПараметрыПодписи);
		ДанныеАвторизации.Вставить("Сообщение", РезультатПодписания);
		
		ОписаниеДанных = Новый Структура();
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание данных аутентификации'"));
		ОписаниеДанных.Вставить("ОтборСертификатов", Результат.ОтборСертификатов);
		ОписаниеДанных.Вставить("НаборДанных", Новый Массив);
		ОписаниеДанных.НаборДанных.Добавить(Новый Структура("Данные", ДанныеАвторизации));
		ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
		ОписаниеДанных.Вставить("ЗаголовокДанных",     "");
		ОписаниеДанных.Вставить("ПредставлениеНабора",
			НСтр("ru = 'Данные аутентификации для обмена с системой маркировки'")
		);
		
		ДополнительныеПараметры.Вставить("ПодписатьДанныеЗапроса");
		ДополнительныеПараметры.Вставить("УИД", Результат.УИД);
		ДополнительныеПараметры.Вставить("ТочкаВхода", "ЗапросСтатусов");
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ПодписаниеДанныхАвторизацииЗавершение", ОбменССистемойМаркировкиКлиент, ДополнительныеПараметры);
		
		ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ДополнительныеПараметры.Форма, ОбработчикОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если Результат.Свойство("КлючСессии") Тогда
		СтруктураКлючаСессии = Новый Структура("КлючСессии,СрокДействия");
		ЗаполнитьЗначенияСвойств(СтруктураКлючаСессии, Результат.КлючСессии);
		ОбменССистемойМаркировкиВызовСервера.УстановитьТекущийНомерСессии(
			ДополнительныеПараметры.Организация, Новый ФиксированнаяСтруктура(СтруктураКлючаСессии)
		);
	КонецЕсли;
	
	Сообщение = ПолучитьЗначениеПараметраСтруктуры(Результат, "Сообщение", "");
	
	Если НЕ ПустаяСтрока(Сообщение) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение);
	ИначеЕсли Результат.Успешно Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Запрос успешно выполнен с Честным знаком.'"));
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОбработкаРезультата") Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаРезультата, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура подписания данных аутентификации
//
// Параметры:
//  РезультатПодписания		 - Структура - Данные, полученные после подписания сертификатом
//  ДополнительныеПараметры	 - Структура - Данные, по которым формируется подписание
//
Процедура ПодписаниеДанныхАвторизацииЗавершение(РезультатПодписания, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатПодписания.Успех Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Данные для аутентификации в системе маркировки не подписаны. Операция отменена.'")
		);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатПодписания.ТекущийЭлементНабораДанных.СвойстваПодписи) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(РезультатПодписания.ТекущийЭлементНабораДанных.СвойстваПодписи) Тогда
		СвойстваПодписи = ПолучитьИзВременногоХранилища(РезультатПодписания.ТекущийЭлементНабораДанных.СвойстваПодписи);
		ПодписьДанныхАутентификации = Base64Строка(СвойстваПодписи.Подпись);
	Иначе
		ПодписьДанныхАутентификации = Base64Строка(РезультатПодписания.ТекущийЭлементНабораДанных.СвойстваПодписи.Подпись);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ТочкаВхода = "ЗапросСтатусов" Тогда
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("Документ");
		ПараметрыЗапроса.Вставить("Организация");
		ПараметрыЗапроса.Вставить("ПодразделениеКомпании");
		ПараметрыЗапроса.Вставить("Действие", "");
		ПараметрыЗапроса.Вставить("КодыМаркировки", Неопределено);
		ПараметрыЗапроса.Вставить("НеТребуетсяКлючСессии", Ложь);
		ПараметрыЗапроса.Вставить("ПодписьДанныхАутентификации", ПодписьДанныхАутентификации);
		ПараметрыЗапроса.Вставить("УИД", "");
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
		
		ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.ЗапросСтатусовКодовМаркировки(
			ДополнительныеПараметры.Форма.УникальныйИдентификатор, ПараметрыЗапроса);
		
		ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Получение статусов кодов маркировки'");
		ПараметрыОперации.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОперации.ВыводитьОкноОжидания = Истина;
		ПараметрыОперации.ВыводитьСообщения = Истина;
		
		ПараметрыОбработки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
		ПараметрыОбработки.Вставить("Форма", ДополнительныеПараметры.Форма);
		ПараметрыОбработки.Вставить("Объект", ДополнительныеПараметры.Объект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ЗавершениеОтправкиЗапросаСтатусов", ОбменССистемойМаркировкиКлиент, ПараметрыОбработки),
			ПараметрыОперации
		);
	ИначеЕсли ДополнительныеПараметры.ТочкаВхода = "ЗапросСверки" Тогда
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("Организация");
		ПараметрыЗапроса.Вставить("Действие", "");
		ПараметрыЗапроса.Вставить("НеТребуетсяКлючСессии", Ложь);
		ПараметрыЗапроса.Вставить("ПараметрыОтбора", Неопределено);
		ПараметрыЗапроса.Вставить("ПодписьДанныхАутентификации", ПодписьДанныхАутентификации);
		ПараметрыЗапроса.Вставить("УИД", "");
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
		Если ДополнительныеПараметры.Свойство("КлючСессии") Тогда
			ПараметрыЗапроса.Вставить("КлючСессии", ДополнительныеПараметры.КлючСессии);
		КонецЕсли;
		
		ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.ЗапросСверкиКодовМаркировки(
			ДополнительныеПараметры.Форма.УникальныйИдентификатор, ПараметрыЗапроса
		);
		
		ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Получение статусов кодов маркировки'");
		ПараметрыОперации.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОперации.ВыводитьОкноОжидания = Истина;
		ПараметрыОперации.ВыводитьСообщения = Истина;
		
		ПараметрыОбработки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
		ПараметрыОбработки.Вставить("Форма", ДополнительныеПараметры.Форма);
		ПараметрыОбработки.Вставить("Объект", ДополнительныеПараметры.Объект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ЗавершениеОтправкиЗапросаСверки", ОбменССистемойМаркировкиКлиент, ПараметрыОбработки),
			ПараметрыОперации
		);
		
	ИначеЕсли ДополнительныеПараметры.ТочкаВхода = "ЗагрузкаКодовМаркировки" Тогда
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("Организация");
		ПараметрыЗапроса.Вставить("Действие", "");
		ПараметрыЗапроса.Вставить("НеТребуетсяКлючСессии", Ложь);
		ПараметрыЗапроса.Вставить("ПараметрыОтбора", Неопределено);
		ПараметрыЗапроса.Вставить("ПодписьДанныхАутентификации", ПодписьДанныхАутентификации);
		ПараметрыЗапроса.Вставить("УИД", "");
		ПараметрыЗапроса.Вставить("ИдентификаторСоединения", "");
		ПараметрыЗапроса.Вставить("Документ");
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
		Если ДополнительныеПараметры.Свойство("КлючСессии") Тогда
			ПараметрыЗапроса.Вставить("КлючСессии", ДополнительныеПараметры.КлючСессии);
		КонецЕсли;
		
		ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.ЗапросЗагрузкиКодовМаркировки(
			ДополнительныеПараметры.Форма.УникальныйИдентификатор, ПараметрыЗапроса
		);
		
		ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Получение статусов кодов маркировки'");
		ПараметрыОперации.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОперации.ВыводитьОкноОжидания = Истина;
		ПараметрыОперации.ВыводитьСообщения = Истина;
		
		ПараметрыОбработки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
		ПараметрыОбработки.Вставить("Форма", ДополнительныеПараметры.Форма);
		ПараметрыОбработки.Вставить("Объект", ДополнительныеПараметры.Объект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения(
				"ЗавершениеОтправкиЗапросаПолученияКодовМаркировки",
				ОбменССистемойМаркировкиКлиент,
				ПараметрыОбработки),
			ПараметрыОперации
		);
		
	ИначеЕсли ДополнительныеПараметры.ТочкаВхода = "ЗапросСтатусовУчастников" Тогда
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("СписокИНН");
		ПараметрыЗапроса.Вставить("Организация");
		ПараметрыЗапроса.Вставить("Действие", "");
		ПараметрыЗапроса.Вставить("НеТребуетсяКлючСессии", Ложь);
		ПараметрыЗапроса.Вставить("ЗаполнятьИНН", Ложь);
		ПараметрыЗапроса.Вставить("ПараметрыОтбора", Неопределено);
		ПараметрыЗапроса.Вставить("ПодписьДанныхАутентификации", ПодписьДанныхАутентификации);
		ПараметрыЗапроса.Вставить("УИД", "");
		ПараметрыЗапроса.Вставить("КлючСессии", "");
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
		
		Если ДополнительныеПараметры.Свойство("КлючСессии") Тогда
			
			ПараметрыЗапроса.Вставить("КлючСессии", ДополнительныеПараметры.КлючСессии);
			
		КонецЕсли;
		
		ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.ЗапросСтатусаУчастниковПоИНН(
			ДополнительныеПараметры.Форма.УникальныйИдентификатор, ПараметрыЗапроса);
		
		ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Получение статусов участников ГИС МТ'");
		ПараметрыОперации.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОперации.ВыводитьОкноОжидания = Истина;
		ПараметрыОперации.ВыводитьСообщения = Истина;
		
		ПараметрыОбработки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
		ПараметрыОбработки.Вставить("Форма", ДополнительныеПараметры.Форма);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ЗавершениеПолученияСтатусаУчастниковПоИНН", ОбменССистемойМаркировкиКлиент, ПараметрыОбработки),
			ПараметрыОперации
		);
	
	ИначеЕсли ДополнительныеПараметры.ТочкаВхода = "ЗапросСтатусаДокумента" Тогда
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("Документ");
		ПараметрыЗапроса.Вставить("Организация");
		ПараметрыЗапроса.Вставить("ПодразделениеКомпании");
		ПараметрыЗапроса.Вставить("Действие", "");
		ПараметрыЗапроса.Вставить("НеТребуетсяКлючСессии", Ложь);
		ПараметрыЗапроса.Вставить("ПодписьДанныхАутентификации", ПодписьДанныхАутентификации);
		ПараметрыЗапроса.Вставить("ИдентификаторДокумента", "");
		ПараметрыЗапроса.Вставить("УИД", "");
		ПараметрыЗапроса.Вставить("КлючСессии", "");
		
		Если ДополнительныеПараметры.Свойство("Документы") Тогда
			
			ПараметрыЗапроса.Вставить("Документы");
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
		
		Если ДополнительныеПараметры.Свойство("КлючСессии") Тогда
			
			ПараметрыЗапроса.Вставить("КлючСессии", ДополнительныеПараметры.КлючСессии);
			
		КонецЕсли;
		
		ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.ЗапросСтатусаДокумента(
			ДополнительныеПараметры.Форма.УникальныйИдентификатор,
			ПараметрыЗапроса
		);
		
		ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Получение статуса документа'");
		ПараметрыОперации.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОперации.ВыводитьОкноОжидания = Истина;
		ПараметрыОперации.ВыводитьСообщения = Истина;
		
		ПараметрыОбработки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДополнительныеПараметры);
		ПараметрыОбработки.Вставить("Форма", ДополнительныеПараметры.Форма);
		ПараметрыОбработки.Вставить("Объект", ДополнительныеПараметры.Объект);
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения(
			"ЗавершениеОтправкиЗапросаСтатусаДокумента",
			ОбменССистемойМаркировкиКлиент,
			ПараметрыОбработки
		);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОперации);
		
	ИначеЕсли ДополнительныеПараметры.ТочкаВхода = "ПроверитьСоединениеСУЗ" Тогда
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("Организация");
		ПараметрыЗапроса.Вставить("НастройкаСУЗ");
		ПараметрыЗапроса.Вставить("Действие", "");
		ПараметрыЗапроса.Вставить("НеТребуетсяКлючСессии", Ложь);
		ПараметрыЗапроса.Вставить("ПараметрыОтбора", Неопределено);
		ПараметрыЗапроса.Вставить("ПодписьДанныхАутентификации", ПодписьДанныхАутентификации);
		ПараметрыЗапроса.Вставить("УИД", "");
		ПараметрыЗапроса.Вставить("ИдентификаторСоединения", "");
		ПараметрыЗапроса.Вставить("КлючСессии", "");
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
		Если ДополнительныеПараметры.Свойство("КлючСессии") Тогда
			ПараметрыЗапроса.Вставить("КлючСессии", ДополнительныеПараметры.КлючСессии);
		КонецЕсли;
		
		ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.ЗапросПроверкиСоединенияСУЗ(
			ДополнительныеПараметры.Форма.УникальныйИдентификатор, ПараметрыЗапроса
		);
		
		ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Проверка подключения к СУЗ'");
		ПараметрыОперации.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОперации.ВыводитьОкноОжидания = Истина;
		ПараметрыОперации.ВыводитьСообщения = Истина;
		
		ПараметрыОбработки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
		ПараметрыОбработки.Вставить("Форма", ДополнительныеПараметры.Форма);
		ПараметрыОбработки.Вставить("Объект", ДополнительныеПараметры.Объект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения(
				"ЗавершениеОтправкиЗапросаПроверкиСоединенияСУЗ",
				ОбменССистемойМаркировкиКлиент,
				ПараметрыОбработки),
			ПараметрыОперации
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Описание действий после отправки и обработки запроса статусов в Честном знаке
//
// Параметры:
//  РезультатОтправки		 - Структура - Результат отправки
//  ДополнительныеПараметры	 - Структура - Дополнительная информация
//
Процедура ЗавершениеОтправкиЗапросаСверки(РезультатОтправки, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОтправки.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				РезультатОтправки.ПодробноеПредставлениеОшибки
			)
		);
	КонецЕсли;
	
	Если РезультатОтправки.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(РезультатОтправки.АдресРезультата);
	
	Если НЕ Результат.Успешно Тогда
		// Есть ошибки - дальнейшие действия отменены
		Если Результат.Свойство("ТекстОшибки") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				Результат.ТекстОшибки
			)
		);
			Возврат;
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Запрос не был отправлен в Честный знак.'")
			);
		КонецЕсли;
	КонецЕсли;
	
	// Нет доступных сертификатов для подписания данных
	Если Результат.ОтборСертификатов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Нет доступных сертификатов для подписания данных. Операция отменена.'")
		);
		Возврат;
	КонецЕсли;
	
	НужноПодписатьКлючСессии = 
		НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НеТребуетсяКлючСессии", Ложь)
		И НЕ Результат.Свойство("КлючСессии")
		И НЕ ЗначениеЗаполнено(Результат.Данные);
	
	// Не всегда можно корректно получить ключ сессии при длительной операции
	Если НужноПодписатьКлючСессии Тогда
		
		СтруктураКлючаСессии =
			ОбменССистемойМаркировкиВызовСервера.КлючСессииОрганизации(ДополнительныеПараметры.Организация);
		
		Если СтруктураКлючаСессии <> Неопределено Тогда
			
			ДополнительныеПараметры.Вставить("КлючСессии", СтруктураКлючаСессии.КлючСессии);
			СформироватьЗапросТекущихСтатусовМаркировки(
				ДополнительныеПараметры.Форма,
				ДополнительныеПараметры.Объект,
				ДополнительныеПараметры
			);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Необходимо указать ключ сессии
	Если НужноПодписатьКлючСессии Тогда
		
		ПараметрыПодписи = ЭлектроннаяПодписьКлиент.ПараметрыCMS();
		ПараметрыПодписи.Открепленная = Ложь; // Для авторизации она должна быть прикрепленной
		
		РезультатПодписания = Новый Структура;
		РезультатПодписания.Вставить("ДанныеАвторизации", Результат.ДанныеАвторизации);
		РезультатПодписания.Вставить("СвойстваПодписи", Неопределено);
		
		ДанныеАвторизации = Новый Структура();
		ДанныеАвторизации.Вставить("Данные", Результат.ДанныеАвторизации);
		ДанныеАвторизации.Вставить("ПараметрыCMS", ПараметрыПодписи);
		ДанныеАвторизации.Вставить("Сообщение", РезультатПодписания);
		
		ОписаниеДанных = Новый Структура();
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание данных аутентификации'"));
		ОписаниеДанных.Вставить("ОтборСертификатов", Результат.ОтборСертификатов);
		ОписаниеДанных.Вставить("НаборДанных", Новый Массив);
		ОписаниеДанных.НаборДанных.Добавить(Новый Структура("Данные", ДанныеАвторизации));
		ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
		ОписаниеДанных.Вставить("ЗаголовокДанных",     "");
		ОписаниеДанных.Вставить("ПредставлениеНабора",
			НСтр("ru = 'Данные аутентификации для обмена с системой маркировки'")
		);
		
		ДополнительныеПараметры.Вставить("ПодписатьДанныеЗапроса");
		ДополнительныеПараметры.Вставить("УИД", Результат.УИД);
		ДополнительныеПараметры.Вставить("ТочкаВхода", "ЗапросСверки");
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ПодписаниеДанныхАвторизацииЗавершение", ОбменССистемойМаркировкиКлиент, ДополнительныеПараметры);
		
		ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ДополнительныеПараметры.Форма, ОбработчикОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если Результат.Свойство("КлючСессии")
		И НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "КлючСессииСУЗ", Ложь) Тогда
		СтруктураКлючаСессии = Новый Структура("КлючСессии,СрокДействия");
		ЗаполнитьЗначенияСвойств(СтруктураКлючаСессии, Результат.КлючСессии);
		ОбменССистемойМаркировкиВызовСервера.УстановитьТекущийНомерСессии(
			ДополнительныеПараметры.Организация, Новый ФиксированнаяСтруктура(СтруктураКлючаСессии)
		);
	КонецЕсли;
	
	Сообщение = ПолучитьЗначениеПараметраСтруктуры(Результат, "Сообщение", "");
	
	Если НЕ ПустаяСтрока(Сообщение) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение);
	ИначеЕсли Результат.Успешно Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Запрос успешно выполнен с Честным знаком.'"));
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОбработкаРезультата") Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаРезультата, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Описание действий после отправки и обработки запроса статусов участников в Честном знаке
//
// Параметры:
//  РезультатОтправки		 - Структура - Результат отправки
//  ДополнительныеПараметры	 - Структура - Дополнительная информация
//
Процедура ЗавершениеПолученияСтатусаУчастниковПоИНН(РезультатОтправки, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОтправки.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				РезультатОтправки.ПодробноеПредставлениеОшибки
			)
		);

	КонецЕсли;
	
	Если РезультатОтправки.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(РезультатОтправки.АдресРезультата);
	
	// Выведим все сообщения
	Если Результат.Сообщение.Количество() > 0 Тогда
		
		Для Каждого ТекущееСообщение Из Результат.Сообщение Цикл
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекущееСообщение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Результат.Успешно Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				Результат.ТекстОшибки
			)
		);
		
	КонецЕсли;
	
	// Есть ошибки - дальнейшие действия отменены
	Если Результат.Свойство("ТекстОшибки") Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				Результат.ТекстОшибки
			)
		);
		Возврат;
		
	КонецЕсли;
	
	// Нет доступных сертификатов для подписания данных
	Если Результат.ОтборСертификатов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Нет доступных сертификатов для подписания данных. Операция отменена.'")
		);
		Возврат;
	КонецЕсли;
	
	// Не всегда можно корректно получить ключ сессии при длительной операции
	Если НЕ Результат.Свойство("КлючСессии") Тогда
		
		СтруктураКлючаСессии =
			ОбменССистемойМаркировкиВызовСервера.КлючСессииОрганизации(ДополнительныеПараметры.Организация);
		
		Если СтруктураКлючаСессии <> Неопределено Тогда
			
			ДополнительныеПараметры.Вставить("КлючСессии", СтруктураКлючаСессии.КлючСессии);
			СформироватьЗапросСтатусаУчастников(
				ДополнительныеПараметры.Форма,
				Неопределено,
				ДополнительныеПараметры
			);
			Возврат;
		КонецЕсли;
		
		ПараметрыПодписи = ЭлектроннаяПодписьКлиент.ПараметрыCMS();
		ПараметрыПодписи.Открепленная = Ложь; // Для авторизации она должна быть прикрепленной
		
		РезультатПодписания = Новый Структура;
		РезультатПодписания.Вставить("ДанныеАвторизации", Результат.ДанныеАвторизации);
		РезультатПодписания.Вставить("СвойстваПодписи", Неопределено);
		
		ДанныеАвторизации = Новый Структура();
		ДанныеАвторизации.Вставить("Данные", Результат.ДанныеАвторизации);
		ДанныеАвторизации.Вставить("ПараметрыCMS", ПараметрыПодписи);
		ДанныеАвторизации.Вставить("Сообщение", РезультатПодписания);
		
		ОписаниеДанных = Новый Структура();
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание данных аутентификации'"));
		ОписаниеДанных.Вставить("ОтборСертификатов", Результат.ОтборСертификатов);
		ОписаниеДанных.Вставить("НаборДанных", Новый Массив);
		ОписаниеДанных.НаборДанных.Добавить(Новый Структура("Данные", ДанныеАвторизации));
		ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
		ОписаниеДанных.Вставить("ЗаголовокДанных",     "");
		ОписаниеДанных.Вставить("ПредставлениеНабора",
			НСтр("ru = 'Данные аутентификации для обмена с системой маркировки'")
		);
		
		ДополнительныеПараметры.Вставить("ПодписатьДанныеЗапроса");
		ДополнительныеПараметры.Вставить("УИД", Результат.УИД);
		ДополнительныеПараметры.Вставить("ТочкаВхода", "ЗапросСтатусовУчастников");
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ПодписаниеДанныхАвторизацииЗавершение", ОбменССистемойМаркировкиКлиент, ДополнительныеПараметры);
		
		ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ДополнительныеПараметры.Форма, ОбработчикОповещения);
		
		Возврат;
		
	ИначеЕсли ТипЗнч(Результат.КлючСессии) = Тип("Структура") Тогда
		
		СтруктураКлючаСессии = Новый Структура("КлючСессии,СрокДействия");
		ЗаполнитьЗначенияСвойств(СтруктураКлючаСессии, Результат.КлючСессии);
		ОбменССистемойМаркировкиВызовСервера.УстановитьТекущийНомерСессии(
			ДополнительныеПараметры.Организация, Новый ФиксированнаяСтруктура(СтруктураКлючаСессии)
		);
	КонецЕсли;
	
	Если Результат.Успешно Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Запрос успешно выполнен с Честным знаком.'"));
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОбработкаРезультата") Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаРезультата, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Описание действий после отправки и обработки запроса статуса в Честном знаке
//
// Параметры:
//  РезультатОтправки		 - Структура - Результат отправки
//  ДополнительныеПараметры	 - Структура - Дополнительная информация
//
Процедура ЗавершениеОтправкиЗапросаСтатусаДокумента(РезультатОтправки, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОтправки.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате отправки запроса: %1%2'"),
				Символы.ПС,
				РезультатОтправки.ПодробноеПредставлениеОшибки
			)
		);
	КонецЕсли;
	
	Если РезультатОтправки.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(РезультатОтправки.АдресРезультата);
	
	Если НЕ Результат.Успешно Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Запрос не был отправлен в Честный знак. %1%2'"),
				Символы.ПС,
				Результат.ТекстОшибки)
		);
	КонецЕсли;
	
	// Есть ошибки - дальнейшие действия отменены
	Если Результат.Свойство("ТекстОшибки") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				Результат.ТекстОшибки
			)
		);
		Возврат;
	КонецЕсли;
	
	// Нет доступных сертификатов для подписания данных
	Если Результат.ОтборСертификатов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Нет доступных сертификатов для подписания данных. Операция отменена.'")
		);
		Возврат;
	КонецЕсли;
	
	НужноПодписатьКлючСессии = 
		НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НеТребуетсяКлючСессии", Ложь)
		И НЕ Результат.Свойство("КлючСессии")
		И НЕ ЗначениеЗаполнено(Результат.Данные);
	
	// Не всегда можно корректно получить ключ сессии при длительной операции
	Если НужноПодписатьКлючСессии Тогда
		
		СтруктураКлючаСессии =
			ОбменССистемойМаркировкиВызовСервера.КлючСессииОрганизации(ДополнительныеПараметры.Организация);
		
		Если СтруктураКлючаСессии <> Неопределено Тогда
			
			ДополнительныеПараметры.Вставить("КлючСессии", СтруктураКлючаСессии.КлючСессии);
			СформироватьЗапросСтатусаДокумента(
				ДополнительныеПараметры.Форма,
				ДополнительныеПараметры.Объект,
				ДополнительныеПараметры
			);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Необходимо указать ключ сессии
	Если НужноПодписатьКлючСессии Тогда
		
		ПараметрыПодписи = ЭлектроннаяПодписьКлиент.ПараметрыCMS();
		ПараметрыПодписи.Открепленная = Ложь; // Для авторизации она должна быть прикрепленной
		
		РезультатПодписания = Новый Структура;
		РезультатПодписания.Вставить("ДанныеАвторизации", Результат.ДанныеАвторизации);
		РезультатПодписания.Вставить("СвойстваПодписи", Неопределено);
		
		ДанныеАвторизации = Новый Структура();
		ДанныеАвторизации.Вставить("Данные", Результат.ДанныеАвторизации);
		ДанныеАвторизации.Вставить("ПараметрыCMS", ПараметрыПодписи);
		ДанныеАвторизации.Вставить("Сообщение", РезультатПодписания);
		
		ОписаниеДанных = Новый Структура();
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание данных аутентификации'"));
		ОписаниеДанных.Вставить("ОтборСертификатов", Результат.ОтборСертификатов);
		ОписаниеДанных.Вставить("НаборДанных", Новый Массив);
		ОписаниеДанных.НаборДанных.Добавить(Новый Структура("Данные", ДанныеАвторизации));
		ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
		ОписаниеДанных.Вставить("ЗаголовокДанных",     "");
		ОписаниеДанных.Вставить("ПредставлениеНабора",
			НСтр("ru = 'Данные аутентификации для обмена с системой маркировки'")
		);
		
		ДополнительныеПараметры.Вставить("ПодписатьДанныеЗапроса");
		ДополнительныеПараметры.Вставить("УИД", Результат.УИД);
		ДополнительныеПараметры.Вставить("ТочкаВхода", "ЗапросСтатусаДокумента");
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ПодписаниеДанныхАвторизацииЗавершение", ОбменССистемойМаркировкиКлиент, ДополнительныеПараметры);
		
		ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ДополнительныеПараметры.Форма, ОбработчикОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если Результат.Свойство("КлючСессии") Тогда
		СтруктураКлючаСессии = Новый Структура("КлючСессии,СрокДействия");
		ЗаполнитьЗначенияСвойств(СтруктураКлючаСессии, Результат.КлючСессии);
		ОбменССистемойМаркировкиВызовСервера.УстановитьТекущийНомерСессии(
			ДополнительныеПараметры.Организация, Новый ФиксированнаяСтруктура(СтруктураКлючаСессии)
		);
	КонецЕсли;
	
	Сообщение = ПолучитьЗначениеПараметраСтруктуры(Результат, "Сообщение", "");
	
	Если НЕ ПустаяСтрока(Сообщение) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение);
	ИначеЕсли Результат.Успешно Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Запрос успешно выполнен с Честным знаком.'"));
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОбработкаРезультата") Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаРезультата, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Описание действий после отправки и обработки запроса подключения к станции управления заказами в Честном знаке.
//
// Параметры:
//  РезультатОтправки		 - Структура - Результат отправки
//  ДополнительныеПараметры	 - Структура - Дополнительная информация
//
Процедура ЗавершениеОтправкиЗапросаПроверкиСоединенияСУЗ(РезультатОтправки, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОтправки.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате проверки подключения: %1%2'"),
				Символы.ПС,
				РезультатОтправки.ПодробноеПредставлениеОшибки
			)
		);
	КонецЕсли;
	
	Если РезультатОтправки.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(РезультатОтправки.АдресРезультата);
	
	Если НЕ Результат.Успешно Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Проверка подключения не выполнилась. Проверьте правильность установки настроек. %1%2'"),
				Символы.ПС,
				Результат.ТекстОшибки)
		);
		Возврат;
	КонецЕсли;
	
	// Есть ошибки - дальнейшие действия отменены
	Если Результат.Свойство("ТекстОшибки") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате проверки подключения: %1%2'"),
				Символы.ПС,
				Результат.ТекстОшибки
			)
		);
		Возврат;
	КонецЕсли;
	
	// Нет доступных сертификатов для подписания данных
	Если Результат.ОтборСертификатов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Нет доступных сертификатов для подписания данных. Операция отменена.'")
		);
		Возврат;
	КонецЕсли;
	
	НужноПодписатьКлючСессии = 
		НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НеТребуетсяКлючСессии", Ложь)
		И НЕ Результат.Свойство("КлючСессии")
		И НЕ Результат.Свойство("ПроверкаПодключенияПройдена");
	
	// Не всегда можно корректно получить ключ сессии при длительной операции
	Если НужноПодписатьКлючСессии Тогда
		
		СтруктураКлючаСессии =
			ОбменССистемойМаркировкиВызовСервера.КлючСессииОрганизацииСУЗ(
				ДополнительныеПараметры.Организация,
				Результат.ИдентификаторСоединения);
		
		Если СтруктураКлючаСессии <> Неопределено Тогда
			
			ДополнительныеПараметры.Вставить("КлючСессии", СтруктураКлючаСессии.КлючСессии);
			СформироватьЗапросПроверкиСоединенияСУЗ(
				ДополнительныеПараметры.Форма,
				ДополнительныеПараметры.Объект,
				ДополнительныеПараметры
			);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Необходимо указать ключ сессии
	Если НужноПодписатьКлючСессии Тогда
		
		ПараметрыПодписи = ЭлектроннаяПодписьКлиент.ПараметрыCMS();
		ПараметрыПодписи.Открепленная = Ложь; // Для авторизации она должна быть прикрепленной
		
		РезультатПодписания = Новый Структура;
		РезультатПодписания.Вставить("ДанныеАвторизации", Результат.ДанныеАвторизации);
		РезультатПодписания.Вставить("СвойстваПодписи", Неопределено);
		
		ДанныеАвторизации = Новый Структура();
		ДанныеАвторизации.Вставить("Данные", Результат.ДанныеАвторизации);
		ДанныеАвторизации.Вставить("ПараметрыCMS", ПараметрыПодписи);
		ДанныеАвторизации.Вставить("Сообщение", РезультатПодписания);
		
		ОписаниеДанных = Новый Структура();
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание данных аутентификации'"));
		ОписаниеДанных.Вставить("ОтборСертификатов", Результат.ОтборСертификатов);
		ОписаниеДанных.Вставить("НаборДанных", Новый Массив);
		ОписаниеДанных.НаборДанных.Добавить(Новый Структура("Данные", ДанныеАвторизации));
		ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
		ОписаниеДанных.Вставить("ЗаголовокДанных",     "");
		ОписаниеДанных.Вставить("ПредставлениеНабора",
			НСтр("ru = 'Данные аутентификации для обмена с системой маркировки'")
		);
		
		ДополнительныеПараметры.Вставить("ПодписатьДанныеЗапроса");
		ДополнительныеПараметры.Вставить("УИД", Результат.УИД);
		ДополнительныеПараметры.Вставить("ТочкаВхода", "ПроверитьСоединениеСУЗ");
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ПодписаниеДанныхАвторизацииЗавершение", ОбменССистемойМаркировкиКлиент, ДополнительныеПараметры);
		
		ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ДополнительныеПараметры.Форма, ОбработчикОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если Результат.Свойство("КлючСессии") Тогда
		СтруктураКлючаСессии = Новый Структура("КлючСессии,СрокДействия");
		ЗаполнитьЗначенияСвойств(СтруктураКлючаСессии, Результат.КлючСессии);
		ОбменССистемойМаркировкиВызовСервера.УстановитьТекущийНомерСессии(
			ДополнительныеПараметры.Организация, Новый ФиксированнаяСтруктура(СтруктураКлючаСессии)
		);
	КонецЕсли;
	
	Сообщение = ПолучитьЗначениеПараметраСтруктуры(Результат, "Сообщение", "");
	
	Если НЕ ПустаяСтрока(Сообщение) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОбработкаРезультата") Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаРезультата, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменЧереФайл

// Формирует файл запроса в Честный знак или загрузку ответа
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект     - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура ВыполнитьОбменЧерезФайл(Форма, Объект, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Действие = "ОтправкаЗапросаНаПолучениеКодовМаркировки" Тогда
		ОтправкаЗапросаНаПолучениеКодовМаркировки(Форма, Объект, ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.Действие = "ЗагрузкаКодовМаркировки" Тогда
		ЗагрузитьПолученныеКодыМаркировки(Форма, Объект, ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.Действие = "ОтправкаЗапросаВводаВОборотКодовМаркировки" Тогда
		ОтправкаЗапросаВводаВОборотКодовМаркировки(Форма, Объект, ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.Действие = "ОтправкаЗапросаВыводаИзОборотаКодовМаркировки" Тогда
		ОтправкаЗапросаВыводаИзОборотаКодовМаркировки(Форма, Объект, ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.Действие = "ОтправкаЗапросаПеремаркировкиТовара" Тогда
		ОтправкаЗапросаПеремаркировкиТовара(Форма, Объект, ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.Действие = "ОтправкаЗапросаСписанияКодовМаркировки" Тогда
		ОтправкаЗапросаСписанияКодовМаркировки(Форма, Объект, ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.Действие = "ОтправкаЗапросаВозвратаВОборотКодовМаркировки" Тогда
		ОтправкаЗапросаВозвратаВОборотКодовМаркировки(Форма, Объект, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьОбменЧерезФайл()

#КонецОбласти

#Область РазрешительныйРежим

Процедура НачатьПроверкуВРазрешительномРежиме(Форма, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗапроса = Новый Структура("Организация,КодыМаркировки,Документ");
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
	
	ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.ПроверитьКодыМаркировкиВРазрешительномРежиме(
		Форма.УникальныйИдентификатор, ПараметрыЗапроса);
	
	ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОперации.ТекстСообщения = НСтр("ru='Проверка разрешительного режима в Честный знак'");
	ПараметрыОперации.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	ПараметрыОперации.ВыводитьСообщения = Истина;
	
	ПараметрыОбработки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
	ПараметрыОбработки.Вставить("Форма", Форма);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		ДополнительныеПараметры.ОбработчикЗавершения,
		ПараметрыОперации);
	
КонецПроцедуры // НачатьПроверкуВРазрешительномРежиме()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьКлючСессии(Форма, Организация, ДополнительныеПараметры)
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Организация", Организация);
	
	ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.ПроверитьКлючСессии(
		Форма.УникальныйИдентификатор, ПараметрыЗапроса);
	
	ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОперации.ТекстСообщения = НСтр("ru='Формирование запроса в Честный знак'");
	ПараметрыОперации.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("ЗавершениеПодписанияКлючаСессии",
			ОбменССистемойМаркировкиКлиент, ДополнительныеПараметры),
		ПараметрыОперации);
	
КонецПроцедуры

Процедура СформироватьЗапросЗагрузкиКодовМаркировки(Форма, Объект, ДополнительныеПараметры)
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Документ");
	ПараметрыЗапроса.Вставить("Организация");
	ПараметрыЗапроса.Вставить("Действие", "");
	ПараметрыЗапроса.Вставить("НеТребуетсяКлючСессии", Ложь);
	ПараметрыЗапроса.Вставить("КлючСессии", "");
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.Свойство("КлючСессии") Тогда
		ПараметрыЗапроса.Вставить("КлючСессии", ДополнительныеПараметры.КлючСессии);
	КонецЕсли;
	
	ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.ЗапросЗагрузкиКодовМаркировки(
		Форма.УникальныйИдентификатор, ПараметрыЗапроса);
	
	ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОперации.ТекстСообщения = НСтр("ru='Получение кодов маркировки'");
	ПараметрыОперации.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.ВыводитьСообщения = Истина;
	
	ПараметрыОбработки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
	ПараметрыОбработки.Вставить("Форма", Форма);
	ПараметрыОбработки.Вставить("Объект", Объект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения(
			"ЗавершениеОтправкиЗапросаПолученияКодовМаркировки", 
			ОбменССистемойМаркировкиКлиент, ПараметрыОбработки),
		ПараметрыОперации);
	
КонецПроцедуры

// Описание действий после отправки и обработки запроса статусов в Честном знаке
//
// Параметры:
//  РезультатОтправки		 - Структура - Результат отправки
//  ДополнительныеПараметры	 - Структура - Дополнительная информация
//
Процедура ЗавершениеОтправкиЗапросаПолученияКодовМаркировки(РезультатОтправки, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОтправки.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				РезультатОтправки.ПодробноеПредставлениеОшибки
			)
		);
	КонецЕсли;
	
	Если РезультатОтправки.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(РезультатОтправки.АдресРезультата);
	
	Если НЕ Результат.Успешно Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				Результат.ТекстОшибки
			)
		);
	КонецЕсли;
	
	// Есть ошибки - дальнейшие действия отменены
	Если Результат.Свойство("ТекстОшибки")
		И ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате формирования запроса: %1%2'"),
				Символы.ПС,
				Результат.ТекстОшибки
			)		
		);
		Возврат;
	КонецЕсли;
	
	// Нет доступных сертификатов для подписания данных
	Если Результат.ОтборСертификатов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Нет доступных сертификатов для подписания данных. Операция отменена.'")
		);
		Возврат;
	КонецЕсли;
	
	НужноПодписатьКлючСессии = 
		НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НеТребуетсяКлючСессии", Ложь)
		И НЕ Результат.Свойство("КлючСессии")
		И НЕ ЗначениеЗаполнено(Результат.Сообщение);
	
	// Не всегда можно корректно получить ключ сессии при длительной операции
	Если НужноПодписатьКлючСессии Тогда
		
		СтруктураКлючаСессии =
			ОбменССистемойМаркировкиВызовСервера.КлючСессииОрганизацииСУЗ(
				ДополнительныеПараметры.Организация,
				Результат.ИдентификаторСоединения);
		
		Если СтруктураКлючаСессии <> Неопределено Тогда
			
			ДополнительныеПараметры.Вставить("КлючСессии", СтруктураКлючаСессии.КлючСессии);
			СформироватьЗапросЗагрузкиКодовМаркировки(
				ДополнительныеПараметры.Форма,
				ДополнительныеПараметры.Объект,
				ДополнительныеПараметры
			);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Необходимо указать ключ сессии
	Если НужноПодписатьКлючСессии Тогда
		
		ПараметрыПодписи = ЭлектроннаяПодписьКлиент.ПараметрыCMS();
		ПараметрыПодписи.Открепленная = Ложь; // Для авторизации она должна быть прикрепленной
		
		РезультатПодписания = Новый Структура;
		РезультатПодписания.Вставить("ДанныеАвторизации", Результат.ДанныеАвторизации);
		РезультатПодписания.Вставить("СвойстваПодписи", Неопределено);
		
		ДанныеАвторизации = Новый Структура();
		ДанныеАвторизации.Вставить("Данные", Результат.ДанныеАвторизации);
		ДанныеАвторизации.Вставить("ПараметрыCMS", ПараметрыПодписи);
		ДанныеАвторизации.Вставить("Сообщение", РезультатПодписания);
		
		ОписаниеДанных = Новый Структура();
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание данных аутентификации'"));
		ОписаниеДанных.Вставить("ОтборСертификатов", Результат.ОтборСертификатов);
		ОписаниеДанных.Вставить("НаборДанных", Новый Массив);
		ОписаниеДанных.НаборДанных.Добавить(Новый Структура("Данные", ДанныеАвторизации));
		ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
		ОписаниеДанных.Вставить("ЗаголовокДанных",     "");
		ОписаниеДанных.Вставить("ПредставлениеНабора",
			НСтр("ru = 'Данные аутентификации для обмена с системой маркировки'")
		);
		
		ДополнительныеПараметры.Вставить("ПодписатьДанныеЗапроса");
		ДополнительныеПараметры.Вставить("УИД", Результат.УИД);
		ДополнительныеПараметры.Вставить("ТочкаВхода", "ЗагрузкаКодовМаркировки");
		ДополнительныеПараметры.Вставить("ИдентификаторСоединения", Результат.ИдентификаторСоединения);
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ПодписаниеДанныхАвторизацииЗавершение", ОбменССистемойМаркировкиКлиент, ДополнительныеПараметры);
		
		ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ДополнительныеПараметры.Форма, ОбработчикОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Сообщение = ПолучитьЗначениеПараметраСтруктуры(Результат, "Сообщение", "");
	
	Если НЕ ПустаяСтрока(Сообщение) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение);
	ИначеЕсли Результат.Успешно Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Запрос успешно выполнен с Честным знаком.'"));
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОбработкаРезультата") Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаРезультата, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправкаЗапросаНаПолучениеКодовМаркировки(Форма, Объект, ДополнительныеПараметры)
	
	// Проверим, что в ТЧ у всех указан GTIN
	СтрокиБезGTIN = Новый Массив;
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.GTIN) Тогда
			СтрокиБезGTIN.Добавить(ТекущаяСтрока.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиБезGTIN.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Таблица <Товары>. Не заполнен GTIN в строках: %1'"), СтрСоединить(СтрокиБезGTIN, ", "))
		);
		Возврат;
		
	КонецЕсли;
	
	// Получим информацию о документе
	ДанныеЗапроса =
		ОбменССистемойМаркировкиВызовСервера.ЗапросНаПолучениеКодовМаркировки(ДополнительныеПараметры.Документ);
	
	ДополнительныеПараметры.Вставить("ТекстовыйДокумент", ДанныеЗапроса);
	
	ИмяФайла = 
		"Заказ_кодов_маркировки_" + Объект.Номер
		+ "_" + СтрЗаменить(Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ=yyyy.MM.dd"), ".", "_");
	
	ЗаписатьФайлВКаталог(ДополнительныеПараметры, ИмяФайла);
	
КонецПроцедуры

Процедура ОтправкаЗапросаВводаВОборотКодовМаркировки(Форма, Объект, ДополнительныеПараметры)
	
	// Получим информацию о документе
	ДанныеЗапроса =
		ОбменССистемойМаркировкиВызовСервера.ЗапросВводаВОборотКодовМаркировки(ДополнительныеПараметры.Документ);
	
	ДополнительныеПараметры.Вставить("ТекстовыйДокумент", ДанныеЗапроса);
	
	ИмяФайла = 
		"Ввод_в_оборот_кодов_маркировки_" + Объект.Номер
		+ "_" + СтрЗаменить(Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ=yyyy.MM.dd"), ".", "_");
	
	ЗаписатьФайлВКаталог(ДополнительныеПараметры, ИмяФайла);
	
КонецПроцедуры // ОтправкаЗапросаВводаВОборотКодовМаркировки()

Процедура ЗаписатьФайлВКаталог(ПараметрыДокумента, ИмяФайла = "", Расширение = "xml", Фильтр = "(*.xml)|*.xml")
	
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Сохранить файл ...'");
	ДиалогСохраненияФайла.ПолноеИмяФайла = ИмяФайла;
	ДиалогСохраненияФайла.Расширение = Расширение;
	ДиалогСохраненияФайла.Фильтр = Фильтр;
	
	Обработчик = Новый ОписаниеОповещения("СохранитьФайлЗапроса", ОбменССистемойМаркировкиКлиент, ПараметрыДокумента);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Обработчик, ДиалогСохраненияФайла);
	
КонецПроцедуры

Процедура СохранитьФайлЗапроса(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		ПолноеИмяФайла = ВыбранныеФайлы[0];
		ДополнительныеПараметры.ТекстовыйДокумент.НачатьЗапись(, ПолноеИмяФайла, "UTF-8");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Сформирован файл: %1'"),ПолноеИмяФайла)
		);
		
		Если ДополнительныеПараметры.Свойство("ОбработкаРезультата") Тогда
			ВыполнитьОбработкуОповещения(
				ДополнительныеПараметры.ОбработкаРезультата,
				Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьПолученныеКодыМаркировки(Форма, Объект, ДополнительныеПараметры)
	
	// Получим файл с данными
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл с кодами маркировки'");
	ДиалогВыбораФайла.Фильтр = "Все файлы (*.csv)|*.csv";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Обработчик = Новый ОписаниеОповещения(
		"ЗагрузитьПолученныеКодыМаркировкиПродолжение",
		ОбменССистемойМаркировкиКлиент,
		ДополнительныеПараметры);
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Обработчик, ДиалогВыбораФайла);
	
КонецПроцедуры

Процедура ЗагрузитьПолученныеКодыМаркировкиПродолжение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения(
		"ЗагрузитьПолученныеКодыМаркировкиЗавершение",
		ОбменССистемойМаркировкиКлиент,
		ДополнительныеПараметры);
	
	// Прочитаем файл
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ДополнительныеПараметры.Вставить("ТекстовыйДокумент", ТекстовыйДокумент);
	ТекстовыйДокумент.НачатьЧтение(
		Обработчик,
		ВыбранныеФайлы[0],
		"UTF-8");
	
КонецПроцедуры

Процедура ЗагрузитьПолученныеКодыМаркировкиЗавершение(ДополнительныеПараметры) Экспорт
	
	СписокКодовМаркировки = ДополнительныеПараметры.ТекстовыйДокумент.ПолучитьТекст();
	
	МассивКодовМаркировки = СтрРазделить(СписокКодовМаркировки, Символы.ПС, Ложь);
	
	ОписаниеОшибки = "";
	
	// Заменим недопустимые символы
	Для Индекс = 0 По МассивКодовМаркировки.Количество() - 1 Цикл
		
		Штрихкод = МассивКодовМаркировки[Индекс];
		СтруктураМаркировки = МаркировкаТоваровКлиент.РазобратьШтриховойКодТовара(ШтрихКод);
		Если МаркировкаТоваровКлиентСервер.ЭтоКодТовараВФорматеDataMatrixGS1(ШтрихКод, СтруктураМаркировки) Тогда
			МаркировкаТоваровКлиентСервер.ЗаписатьПолныйШтрихкод(СтруктураМаркировки);
		КонецЕсли;
		
		ШтрихкодированиеКлиент.ЗаменитьНаЭкранированныйСимвол(МассивКодовМаркировки[Индекс]);
		
	КонецЦикла;
	
	ВидЭмиссии = ?(
		МаркировкаТоваровКлиентСервер.ТоварнаяГруппаИспользуетОтчетОНанесении(
			ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ТоварнаяГруппа", "")),
		ПредопределенноеЗначение("Перечисление.СостоянияКодовМаркировки.ЭмитированВыпущен"),
		ПредопределенноеЗначение("Перечисление.СостоянияКодовМаркировки.Эмитирован"));
	
	// Загрузим полученные коды в регистр
	ОбменССистемойМаркировкиВызовСервера.ЗаписатьКодыМаркировкиВРегистр(
		ДополнительныеПараметры.Документ,
		Неопределено,
		МассивКодовМаркировки,
		ВидЭмиссии,
		ОписаниеОшибки,
		Истина);
	
	Если ОписаниеОшибки <> "" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Ошибки при загрузке кодов маркировки: %1'"),ОписаниеОшибки)
		);
		
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Загрузка кодов маркировки завершена'"));
	
	Если ДополнительныеПараметры.Свойство("ОбработкаРезультата") Тогда
		ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОбработкаРезультата,
		Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправкаЗапросаПеремаркировкиТовара(Форма, Объект, ДополнительныеПараметры)
	
	// Получим информацию о документе
	ТекстОшибки = "";
	ДанныеЗапроса =
		ОбменССистемойМаркировкиВызовСервера.ЗапросПеремаркировкиТовара(ДополнительныеПараметры.Документ, ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ТекстовыйДокумент", ДанныеЗапроса);
	
	ИмяФайла = 
		"Перемаркировка_" + Объект.Номер
		+ "_" + СтрЗаменить(Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ=yyyy.MM.dd"), ".", "_");
	
	ЗаписатьФайлВКаталог(ДополнительныеПараметры, ИмяФайла);
	
КонецПроцедуры // ОтправкаЗапросаПеремаркировкиТовара()

Процедура ОтправкаЗапросаСписанияКодовМаркировки(Форма, Объект, ДополнительныеПараметры)
	
	// Получим информацию о документе
	ДанныеЗапроса =
		ОбменССистемойМаркировкиВызовСервера.ЗапросСписанияКодовМаркировки(ДополнительныеПараметры.Документ);
	
	ДополнительныеПараметры.Вставить("ТекстовыйДокумент", ДанныеЗапроса);
	
	ИмяФайла = 
		"Списание_кодов_маркировки_" + Объект.Номер
		+ "_" + СтрЗаменить(Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ=yyyy.MM.dd"), ".", "_");
	
	ЗаписатьФайлВКаталог(ДополнительныеПараметры, ИмяФайла);
	
КонецПроцедуры

Процедура ОтправкаЗапросаВозвратаВОборотКодовМаркировки(Форма, Объект, ДополнительныеПараметры)
	
	// Получим информацию о документе
	ТекстОшибки = "";
	ДанныеЗапроса =
		ОбменССистемойМаркировкиВызовСервера.ЗапросВозвратаВОборотКодовМаркировки(
			ДополнительныеПараметры.Документ, ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ТекстовыйДокумент", ДанныеЗапроса);
	
	ИмяФайла = 
		"Возврат_в_оборот_кодов_маркировки_" + Объект.Номер
		+ "_" + СтрЗаменить(Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ=yyyy.MM.dd"), ".", "_");
	
	ЗаписатьФайлВКаталог(ДополнительныеПараметры, ИмяФайла);
	
КонецПроцедуры

Процедура ОтправкаЗапросаВыводаИзОборотаКодовМаркировки(Форма, Объект, ДополнительныеПараметры)
	
	// Получим информацию о документе
	ТекстОшибки = "";
	ТекстовыйДокумент =
		ОбменССистемойМаркировкиВызовСервера.ЗапросВыводаИзОборотаКодовМаркировки(
			ДополнительныеПараметры.Документ,
			ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ТекстовыйДокумент", ТекстовыйДокумент);
	
	ИмяФайла = 
		"Вывод_из_оборота_" + Объект.Номер
		+ "_" + СтрЗаменить(Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ=yyyy.MM.dd"), ".", "_");
	
	ЗаписатьФайлВКаталог(ДополнительныеПараметры, ИмяФайла);
	
КонецПроцедуры

Процедура СформироватьЗапросТекущихСтатусовМаркировки(Форма, Объект, ДополнительныеПараметры)
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Документ");
	ПараметрыЗапроса.Вставить("Организация");
	ПараметрыЗапроса.Вставить("ПодразделениеКомпании");
	ПараметрыЗапроса.Вставить("Действие", "");
	ПараметрыЗапроса.Вставить("КодыМаркировки", Неопределено);
	ПараметрыЗапроса.Вставить("НеТребуетсяКлючСессии", Ложь);
	ПараметрыЗапроса.Вставить("РазрешенныеСостояния", Неопределено);
	ПараметрыЗапроса.Вставить("КлючСессии", "");
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("КлючСессии") Тогда
		ПараметрыЗапроса.Вставить("КлючСессии", ДополнительныеПараметры.КлючСессии);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапроса.КодыМаркировки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нет кодов маркировки для проверки'"));
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.ЗапросСтатусовКодовМаркировки(
		Форма.УникальныйИдентификатор, ПараметрыЗапроса);
	
	ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Получение статусов кодов маркировки'");
	ПараметрыОперации.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.ВыводитьСообщения = Истина;
	
	ПараметрыОбработки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
	ПараметрыОбработки.Вставить("Форма", Форма);
	ПараметрыОбработки.Вставить("Объект", Объект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("ЗавершениеОтправкиЗапросаСтатусов", ОбменССистемойМаркировкиКлиент, ПараметрыОбработки),
		ПараметрыОперации
	);
	
КонецПроцедуры

Процедура СформироватьЗапросСтатусаДокумента(Форма, Объект, ДополнительныеПараметры)
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Документ");
	ПараметрыЗапроса.Вставить("Организация");
	ПараметрыЗапроса.Вставить("ПодразделениеКомпании");
	ПараметрыЗапроса.Вставить("Действие", "");
	ПараметрыЗапроса.Вставить("НеТребуетсяКлючСессии", Ложь);
	ПараметрыЗапроса.Вставить("ИдентификаторДокумента", "");
	ПараметрыЗапроса.Вставить("КлючСессии", "");
	Если ДополнительныеПараметры.Свойство("Документы") Тогда
		ПараметрыЗапроса.Вставить("Документы");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("КлючСессии") Тогда
		ПараметрыЗапроса.Вставить("КлючСессии", ДополнительныеПараметры.КлючСессии);
	КонецЕсли;
	
	ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.ЗапросСтатусаДокумента(
		Форма.УникальныйИдентификатор, ПараметрыЗапроса);
	
	ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Получение статуса документа'");
	ПараметрыОперации.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.ВыводитьСообщения = Истина;
	
	ПараметрыОбработки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДополнительныеПараметры);
	ПараметрыОбработки.Вставить("Форма", Форма);
	ПараметрыОбработки.Вставить("Объект", Объект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("ЗавершениеОтправкиЗапросаСтатусаДокумента", ОбменССистемойМаркировкиКлиент, ПараметрыОбработки),
		ПараметрыОперации
	);
	
КонецПроцедуры

Процедура СформироватьЗапросСверкиКодовМаркировки(Форма, Объект, ДополнительныеПараметры)
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Организация");
	ПараметрыЗапроса.Вставить("Действие", "");
	ПараметрыЗапроса.Вставить("НеТребуетсяКлючСессии", Ложь);
	ПараметрыЗапроса.Вставить("КлючСессии", "");
	ПараметрыЗапроса.Вставить("ПараметрыОтбора", Неопределено);
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("КлючСессии") Тогда
		ПараметрыЗапроса.Вставить("КлючСессии", ДополнительныеПараметры.КлючСессии);
	КонецЕсли;
	
	ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.ЗапросСверкиКодовМаркировки(
		Форма.УникальныйИдентификатор, ПараметрыЗапроса);
	
	ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Получение статусов кодов маркировки'");
	ПараметрыОперации.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.ВыводитьСообщения = Истина;
	
	ПараметрыОбработки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
	ПараметрыОбработки.Вставить("Форма", Форма);
	ПараметрыОбработки.Вставить("Объект", Объект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("ЗавершениеОтправкиЗапросаСверки", ОбменССистемойМаркировкиКлиент, ПараметрыОбработки),
		ПараметрыОперации
	);
	
КонецПроцедуры

Процедура СформироватьЗапросСтатусаУчастников(Форма, Объект, ДополнительныеПараметры)
	
	// Сформируем входящие параметры
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("СписокИНН");
	ПараметрыЗапроса.Вставить("Организация");
	ПараметрыЗапроса.Вставить("Действие", "");
	ПараметрыЗапроса.Вставить("НеТребуетсяКлючСессии", Ложь);
	ПараметрыЗапроса.Вставить("ЗаполнятьИНН", Ложь);
	ПараметрыЗапроса.Вставить("КлючСессии", "");
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.Свойство("КлючСессии") Тогда
		
		ПараметрыЗапроса.Вставить("КлючСессии", ДополнительныеПараметры.КлючСессии);
		
	КонецЕсли;
	
	ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.ЗапросСтатусаУчастниковПоИНН(
		Форма.УникальныйИдентификатор, ПараметрыЗапроса);
	
	ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Получение статусов участников ГИС МТ'");
	ПараметрыОперации.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.ВыводитьСообщения = Истина;
	
	ПараметрыОбработки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
	ПараметрыОбработки.Вставить("Форма", Форма);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("ЗавершениеПолученияСтатусаУчастниковПоИНН", ОбменССистемойМаркировкиКлиент, ПараметрыОбработки),
		ПараметрыОперации
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗапросПроверкиСоединенияСУЗ(Форма, Объект, ДополнительныеПараметры)
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("НастройкаСУЗ");
	ПараметрыЗапроса.Вставить("Организация");
	ПараметрыЗапроса.Вставить("Действие", "");
	ПараметрыЗапроса.Вставить("НеТребуетсяКлючСессии", Ложь);
	ПараметрыЗапроса.Вставить("КлючСессии", "");
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.Свойство("КлючСессии") Тогда
		ПараметрыЗапроса.Вставить("КлючСессии", ДополнительныеПараметры.КлючСессии);
	КонецЕсли;
	
	ДлительнаяОперация = ОбменССистемойМаркировкиВызовСервера.ЗапросПроверкиСоединенияСУЗ(
		Форма.УникальныйИдентификатор, ПараметрыЗапроса);
	
	ПараметрыОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОперации.ТекстСообщения = НСтр("ru='Проверка подключения к СУЗ'");
	ПараметрыОперации.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.ВыводитьСообщения = Истина;
	
	ПараметрыОбработки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
	ПараметрыОбработки.Вставить("Форма", Форма);
	ПараметрыОбработки.Вставить("Объект", Объект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения(
			"ЗавершениеОтправкиЗапросаПроверкиСоединенияСУЗ", 
			ОбменССистемойМаркировкиКлиент, ПараметрыОбработки),
		ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти
