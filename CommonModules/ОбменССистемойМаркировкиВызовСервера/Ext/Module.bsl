
#Область ПрограммныйИнтерфейс

// Установить текущий номер сессии
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - Организация, для которого получен ключ сессии
//  КлючСессии	 - Структура - Содержит ключ сессии и срок его использования
//
Процедура УстановитьТекущийНомерСессии(Организация, КлючСессии) Экспорт
	
	СоответствиеКлючей = Новый Соответствие(ПараметрыСеанса.НомерСессииМаркировки);
	СоответствиеКлючей.Вставить(Организация, КлючСессии);
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.НомерСессииМаркировки = Новый ФиксированноеСоответствие(СоответствиеКлючей);
	
КонецПроцедуры

// Получение ключа сессии организации
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации	 - Организация, для которой получаем ключ сессии.
// 
// Возвращаемое значение:
//  Структура - Ключ сессии и срок его актуальности.
//
Функция КлючСессииОрганизации(Организация) Экспорт
	
	НомераСессийМаркировки = ПараметрыСеанса.НомерСессииМаркировки;
	ТекущиеДанные = НомераСессийМаркировки.Получить(Организация);
	
	// Для текущей организации нет ключа сессии
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Проверим срок действия маркировки
	ДатаПроверки = ТекущаяДатаСеанса() - 90;
	Если ТекущиеДанные.СрокДействия < ДатаПроверки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТекущиеДанные;
	
КонецФункции

// Получение ключа сессии организации для станции управления заказами (СУЗ)
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации	 - Организация, для которой получаем ключ сессии.
//  ИдентификаторСоединения - Строка - Идентификатор, для которого получаем токен.
// 
// Возвращаемое значение:
//  Структура - Ключ сессии и срок его актуальности.
//
Функция КлючСессииОрганизацииСУЗ(Организация, ИдентификаторСоединения) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторСоединения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.КлиентскиеТокеныСУЗ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.ИдентификаторСоединения.Установить(ИдентификаторСоединения);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПолучениеТокена = 90;
	Если НаборЗаписей[0].СрокДействия < УниверсальноеВремя(ТекущаяДатаСеанса() - ПолучениеТокена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущиеДанные = Новый Структура;
	ТекущиеДанные.Вставить("КлючСессии", НаборЗаписей[0].Токен);
	ТекущиеДанные.Вставить("СрокДействия", НаборЗаписей[0].СрокДействия);
	
	Возврат ТекущиеДанные;
	
КонецФункции

// Добавление записей в регистр состояния кодов маркировки
//
// Параметры:
//  Документ - ДокументСсылка - Документ, на основании которого добавление в регистр
//  Товары - ТаблицаЗначений - Список товаров документа
//  МассивКодовМаркировки - Массив - Массив списка кодов маркировки
//  Состояние - ПеречислениеСсылка.СостоянияКодовМаркировки - Состояние установки
//  ОписаниеОшибки - Строка - Текст ошибки
//  ДляПечати - Булево - Признак того, что код маркировки нужен для печати
//
Процедура ЗаписатьКодыМаркировкиВРегистр(
		Документ,
		Товары,
		МассивКодовМаркировки,
		Состояние,
		ОписаниеОшибки,
		ДляПечати = Ложь) Экспорт
	
	Если Товары = Неопределено Тогда
		ТоварыДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Товары").Выгрузить();
	Иначе
		ТоварыДокумента = Товары;
	КонецЕсли;
	
	РегистрыСведений.СостоянияКодовМаркировки.ДобавитьЗаписиВРегистр(
		Документ, ТоварыДокумента, МассивКодовМаркировки, Состояние, ОписаниеОшибки, ДляПечати);
	
КонецПроцедуры

#Область ОбменЧерезAPI

// Формирует запрос JSON для передачи документа в Честный знак и при необходимости выводит данные для подписи
//
// Параметры:
//  УникальныйИдентификатор	- УникальныйИдентификатор	- Уникальный идентификатор.
//  ДополнительныеПараметры	- Структура					- Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//
Функция ФормированиеЗапросаВФоне(УникальныйИдентификатор, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование запроса в Честный знак'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменССистемойМаркировкиСервер.СформироватьЗапрос",
		ДополнительныеПараметры,
		ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции // ФормированиеЗапросаВФоне()

// Формирует запрос JSON для передачи документа в Честный знак и при необходимости выводит данные для подписи
//
// Параметры:
//  УникальныйИдентификатор	- УникальныйИдентификатор	- Уникальный идентификатор.
//  ДополнительныеПараметры	- Структура					- Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//
Функция ОтправитьЗапросВФоне(УникальныйИдентификатор, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка запроса в Честный знак'");
	
	Если ДополнительныеПараметры.Свойство("КлючСессии") И НЕ ЗначениеЗаполнено(ДополнительныеПараметры.КлючСессии) Тогда
		Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "КлючСессииСУЗ", Ложь) Тогда
			КлючСессии = КлючСессииОрганизацииСУЗ(
				ДополнительныеПараметры.Организация,
				ДополнительныеПараметры.ИдентификаторСоединения);
		Иначе
			КлючСессии = КлючСессииОрганизации(ДополнительныеПараметры.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(КлючСессии) Тогда
			ДополнительныеПараметры.КлючСессии = КлючСессии.КлючСессии;
		КонецЕсли;
	КонецЕсли;
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменССистемойМаркировкиСервер.ОтправитьЗапрос",
		ДополнительныеПараметры,
		ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции // ФормированиеЗапросаВФоне()

// Формирует запрос для получения данных по коду товаров для маркируемых остатков
//
// Параметры:
//  УникальныйИдентификатор	- УникальныйИдентификатор	- Уникальный идентификатор.
//  ДополнительныеПараметры	- Структура					- Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//
Функция ПроверитьКлючСессии(УникальныйИдентификатор, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка запроса в Честный знак'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменССистемойМаркировкиСервер.ПроверитьКлючСессии",
		ДополнительныеПараметры,
		ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции // КодыТоваровОстатков()

// Формирует запрос для получения данных по коду товаров для маркируемых остатков
//
// Параметры:
//  УникальныйИдентификатор	- УникальныйИдентификатор	- Уникальный идентификатор.
//  ДополнительныеПараметры	- Структура					- Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//
Функция КодыТоваровОстатков(УникальныйИдентификатор, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка запроса в Честный знак'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменССистемойМаркировкиСервер.ПолучениеКодыТоваровОстатков",
		ДополнительныеПараметры,
		ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции // КодыТоваровОстатков()

// Формирует запрос для получения кодов маркировки по Заказу на эмиссию кодов
//
// Параметры:
//  УникальныйИдентификатор	- УникальныйИдентификатор	- Уникальный идентификатор.
//  ДополнительныеПараметры	- Структура					- Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//
Функция ЗапросЗагрузкиКодовМаркировки(УникальныйИдентификатор, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение кодов маркировки'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменССистемойМаркировкиСервер.ЗапросЗагрузкиКодовМаркировки",
		ДополнительныеПараметры,
		ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции // ФормированиеЗапросаВФоне()

// Формирует запрос для получения актуальных статусов кодов маркировки
//
// Параметры:
//  УникальныйИдентификатор	- УникальныйИдентификатор	- Уникальный идентификатор.
//  ДополнительныеПараметры	- Структура					- Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//
Функция ЗапросСтатусовКодовМаркировки(УникальныйИдентификатор, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение статусов кодов маркировки'");
	
	Если ДополнительныеПараметры.Свойство("КлючСессии") И НЕ ЗначениеЗаполнено(ДополнительныеПараметры.КлючСессии) Тогда
		КлючСессии = КлючСессииОрганизации(ДополнительныеПараметры.Организация);
		Если ЗначениеЗаполнено(КлючСессии) Тогда
			ДополнительныеПараметры.КлючСессии = КлючСессии.КлючСессии;
		КонецЕсли;
	КонецЕсли;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменССистемойМаркировкиСервер.ЗапросСтатусовКодовМаркировки",
		ДополнительныеПараметры,
		ПараметрыВыполнения
	);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Формирует запрос для получения актуальных статусов кодов маркировки
//
// Параметры:
//  УникальныйИдентификатор	- УникальныйИдентификатор	- Уникальный идентификатор.
//  ДополнительныеПараметры	- Структура					- Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//
Функция ЗапросСтатусаДокумента(УникальныйИдентификатор, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение статусоа документа'");
	
	Если ДополнительныеПараметры.Свойство("КлючСессии") И НЕ ЗначениеЗаполнено(ДополнительныеПараметры.КлючСессии) Тогда
		КлючСессии = КлючСессииОрганизации(ДополнительныеПараметры.Организация);
		Если ЗначениеЗаполнено(КлючСессии) Тогда
			ДополнительныеПараметры.КлючСессии = КлючСессии.КлючСессии;
		КонецЕсли;
	КонецЕсли;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменССистемойМаркировкиСервер.ЗапросСтатусаДокумента",
		ДополнительныеПараметры,
		ПараметрыВыполнения
	);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Формирует запрос для получения актуальных статусов кодов маркировки
//
// Параметры:
//  УникальныйИдентификатор	- УникальныйИдентификатор	- Уникальный идентификатор.
//  ДополнительныеПараметры	- Структура					- Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//
Функция ЗапросСверкиКодовМаркировки(УникальныйИдентификатор, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение кодов маркировки'");
	
	Если ДополнительныеПараметры.Свойство("КлючСессии") И НЕ ЗначениеЗаполнено(ДополнительныеПараметры.КлючСессии) Тогда
		КлючСессии = КлючСессииОрганизации(ДополнительныеПараметры.Организация);
		Если ЗначениеЗаполнено(КлючСессии) Тогда
			ДополнительныеПараметры.КлючСессии = КлючСессии.КлючСессии;
		КонецЕсли;
	КонецЕсли;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменССистемойМаркировкиСервер.ЗапросСверкиКодовМаркировки",
		ДополнительныеПараметры,
		ПараметрыВыполнения
	);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Формирует запрос для получения статусов участников по ИНН
//
// Параметры:
//  УникальныйИдентификатор	- УникальныйИдентификатор	- Уникальный идентификатор.
//  ДополнительныеПараметры	- Структура					- Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//
Функция ЗапросСтатусаУчастниковПоИНН(УникальныйИдентификатор, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение статусов участников по ИНН'");
	
	Если ДополнительныеПараметры.Свойство("КлючСессии") И НЕ ЗначениеЗаполнено(ДополнительныеПараметры.КлючСессии) Тогда
		КлючСессии = КлючСессииОрганизации(ДополнительныеПараметры.Организация);
		Если ЗначениеЗаполнено(КлючСессии) Тогда
			ДополнительныеПараметры.КлючСессии = КлючСессии.КлючСессии;
		КонецЕсли;
	КонецЕсли;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменССистемойМаркировкиСервер.ЗапросСтатусаУчастниковПоИНН",
		ДополнительныеПараметры,
		ПараметрыВыполнения
	);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Формирует проверки подключения к станции управления заказами.
//
// Параметры:
//  УникальныйИдентификатор	- УникальныйИдентификатор	- Уникальный идентификатор.
//  ДополнительныеПараметры	- Структура					- Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//
Функция ЗапросПроверкиСоединенияСУЗ(УникальныйИдентификатор, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка подключения к СУЗ'");
	
	Если ДополнительныеПараметры.Свойство("КлючСессии") И НЕ ЗначениеЗаполнено(ДополнительныеПараметры.КлючСессии) Тогда
		КлючСессии = КлючСессииОрганизации(ДополнительныеПараметры.Организация);
		Если ЗначениеЗаполнено(КлючСессии) Тогда
			ДополнительныеПараметры.КлючСессии = КлючСессии.КлючСессии;
		КонецЕсли;
	КонецЕсли;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменССистемойМаркировкиСервер.ЗапросПроверкиСоединенияСУЗ",
		ДополнительныеПараметры,
		ПараметрыВыполнения
	);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

#КонецОбласти

#Область ОбменЧерезФайл

// Получение данных запроса заказа кодов маркировки в файл
//
// Параметры:
//  Документ - ДокументСсылка.ЗаказКодовМаркировки - Документ, для которого выполняется запрос
// 
// Возвращаемое значение:
//  ТекстовыйДокумент - Данные для запроса документа в XML
//
Функция ЗапросНаПолучениеКодовМаркировки(Документ) Экспорт
	
	ДанныеДокумента = Документы.ЗаказКодовМаркировки.ДанныеЗапросаЗаказаКодов(Документ);
	
	ВидПродукции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ТоварнаяГруппа.ТоварнаяГруппа");
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("order");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns", "urn:oms.order");
	ЗаписьXML.ЗаписатьАтрибут("xsi:schemaLocation", "urn:oms.order order-v5.5.xsd");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(ВидПродукции);
	
	ЗаписьТекстаВФайл(ЗаписьXML, "productGroup", ВидПродукции);
	
	Для Каждого ТекущийЭлемент Из ДанныеДокумента Цикл
		
		Если ТекущийЭлемент.Ключ = "products" Тогда
			Продолжить;
		Иначе
			ЗаписьТекстаВФайл(ЗаписьXML, ТекущийЭлемент.Ключ, ТекущийЭлемент.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("products");
	
	Для Каждого ТекущаяСтрока Из ДанныеДокумента.products Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("product");
		
		Для Каждого СтрокаТовара Из ТекущаяСтрока Цикл
			
			Если СтрокаТовара.Ключ = "serialNumbers" Тогда
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("serialNumbers");
				
				Для Каждого ТекущийНомер Из СтрокаТовара.Значение Цикл
					ЗаписьТекстаВФайл(ЗаписьXML, "serialNumber", ТекущийНомер);
				КонецЦикла;
				
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
			Иначе
				ЗаписьТекстаВФайл(ЗаписьXML, СтрокаТовара.Ключ, СтрокаТовара.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ТекстЗапроса = ЗаписьXML.Закрыть();
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстЗапроса);
	
	Возврат ТекстовыйДокумент;
	
КонецФункции // ЗапросаНаПолучениеКодовМаркировки()

// Получение данных запроса ввода кодов маркировки в файл
//
// Параметры:
//  Документ - ДокументСсылка.ВводВОборотКодовМаркировки - Документ, для которого выполняется запрос
// 
// Возвращаемое значение:
//  ТекстовыйДокумент - Данные для запроса документа в XML
//
Функция ЗапросВводаВОборотКодовМаркировки(Документ) Экспорт
	
	ДанныеДокумента = Документы.ВводВОборотКодовМаркировки.ДанныеВводаВОборотКодовМаркировки(Документ);
	Возврат ЗапросВводаВОборот(Документ, ДанныеДокумента);
	
КонецФункции // ЗапросВводаВОборотКодовМаркировки()

// Получение данных запроса вывода из оборота кодов маркировки в файл
//
// Параметры:
//  Документ	 - ДокументСсылка.ВводВОборотКодовМаркировки - Документ, для которого выполняется запрос
//  ТекстОшибки	 - Строка									 - Содержит текст ошибки при проверки документа
// 
// Возвращаемое значение:
//  ТекстовыйДокумент - Данные для запроса документа в XML
//
Функция ЗапросВыводаИзОборотаКодовМаркировки(Документ, ТекстОшибки = "") Экспорт
	
	ДанныеДокумента = Документы.ВыводИзОборотаКодовМаркировки.ДанныеВыводаИзОборотаКодовМаркировки(Документ, ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Заполним данными документа 
	ЗаписьXML.ЗаписатьНачалоЭлемента("withdrawal");
	ЗаписьXML.ЗаписатьАтрибут("version", "8");
	
	ЗаписьТекстаВФайл(ЗаписьXML, "trade_participant_inn", СокрЛП(ДанныеДокумента.inn));
	
	Если ДанныеДокумента.action <> "OWN_USE"
		И Не ПустаяСтрока(ПолучитьЗначениеПараметраСтруктуры(ДанныеДокумента, "buyer_inn", "")) Тогда
		ЗаписьТекстаВФайл(ЗаписьXML, "buyer_inn", ПолучитьЗначениеПараметраСтруктуры(ДанныеДокумента, "buyer_inn", ""));
	КонецЕсли;
	
	ЗаписьТекстаВФайл(ЗаписьXML, "withdrawal_type", ДанныеДокумента.action);
	
	Если ДанныеДокумента.Свойство("withdrawal_type_other") И Не ПустаяСтрока(ДанныеДокумента.withdrawal_type_other) Тогда
		ЗаписьТекстаВФайл(ЗаписьXML, "withdrawal_type_other", ДанныеДокумента.withdrawal_type_other);
	КонецЕсли;
	
	ЗаписьТекстаВФайл(ЗаписьXML, "withdrawal_date", ПреобразоватьДатуДляОтправки(ДанныеДокумента.action_date));
	
	Если ДанныеДокумента.Свойство("state_contract_id") И Не ПустаяСтрока(ДанныеДокумента.state_contract_id) Тогда
		ЗаписьТекстаВФайл(ЗаписьXML, "state_contract_id", СокрЛП(ДанныеДокумента.state_contract_id));
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("fias_id") И Не ПустаяСтрока(ДанныеДокумента.fias_id) Тогда
		ЗаписьТекстаВФайл(ЗаписьXML, "fias_id", СокрЛП(ДанныеДокумента.fias_id));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("products_list");
	
	Для Каждого ТекущаяСтрока Из ДанныеДокумента.products Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("product");
		
		Для Каждого ТекущийЭлемент Из ТекущаяСтрока Цикл
			Если ТекущийЭлемент.Ключ = "cis" Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("cis");
				ЗаписьXML.ЗаписатьСекциюCDATA(ТекущийЭлемент.Значение);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ИначеЕсли ТекущийЭлемент.Ключ = "primary_document_date" Тогда
				ЗаписьТекстаВФайл(ЗаписьXML, ТекущийЭлемент.Ключ, ПреобразоватьДатуДляОтправки(ТекущийЭлемент.Значение));
			ИначеЕсли ТекущийЭлемент.Ключ = "product_cost" Тогда
				ЗаписьТекстаВФайл(ЗаписьXML, "cost", ТекущийЭлемент.Значение);
			Иначе
				ЗаписьТекстаВФайл(ЗаписьXML, ТекущийЭлемент.Ключ, ТекущийЭлемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ТекстЗапроса = ЗаписьXML.Закрыть();
	
	// Из-за специфики работы записи нужно удалить лишнее
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстЗапроса);
	ТекстФайла = ТекстовыйДокумент.ПолучитьТекст();
	ТекстФайла = СтрЗаменить(ТекстФайла, "<cis>" + Символы.ПС, "<cis>");
	
	Пока СтрНайти(ТекстФайла, "	<![CDATA") > 0 Цикл
		ТекстФайла = СтрЗаменить(ТекстФайла, "	<![CDATA", "<![CDATA");
	КонецЦикла;
	
	ТекстовыйДокумент.УстановитьТекст(ТекстФайла);
	
	Возврат ТекстовыйДокумент;
	
КонецФункции

// Получение данных запроса перемаркировки в файл
//
// Параметры:
//  Документ - ДокументСсылка.ВводВОборотКодовМаркировки - Документ, для которого выполняется запрос
//  ТекстОшибки	 - Строка								 - Содержит текст ошибки при проверки документа
// 
// Возвращаемое значение:
//  ТекстовыйДокумент - Данные для запроса документа в XML
//
Функция ЗапросПеремаркировкиТовара(Документ, ТекстОшибки = "") Экспорт
	
	ДанныеДокумента = Документы.Перемаркировка.ДанныеПеремаркировкиКодов(Документ, ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Заполним данными документа 
	ЗаписьXML.ЗаписатьНачалоЭлемента("remark");
	ЗаписьXML.ЗаписатьАтрибут("version", "7");
	
	ЗаписьТекстаВФайл(ЗаписьXML, "trade_participant_inn", СокрЛП(ДанныеДокумента.participant_inn));
	ЗаписьТекстаВФайл(ЗаписьXML, "remark_date", ПреобразоватьДатуДляОтправки(ДанныеДокумента.remarking_date));
	ЗаписьТекстаВФайл(ЗаписьXML, "remark_cause", ДанныеДокумента.remarking_cause);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("products_list");
	
	Для Каждого ТекущаяСтрока Из ДанныеДокумента.products Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("product");
		
		Для Каждого ТекущийЭлемент Из ТекущаяСтрока Цикл
			Если ТекущийЭлемент.Ключ = "last_uin" Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("last_ki");
				ЗаписьXML.ЗаписатьСекциюCDATA(ТекущийЭлемент.Значение);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ИначеЕсли ТекущийЭлемент.Ключ = "new_uin" Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("new_ki");
				ЗаписьXML.ЗаписатьСекциюCDATA(ТекущийЭлемент.Значение);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ИначеЕсли ТекущийЭлемент.Ключ = "primary_document_date"
				ИЛИ ТекущийЭлемент.Ключ = "certificate_date" Тогда
				ЗаписьТекстаВФайл(ЗаписьXML, ТекущийЭлемент.Ключ, ПреобразоватьДатуДляОтправки(ТекущийЭлемент.Значение));
			ИначеЕсли ТекущийЭлемент.Ключ = "remarking_date" Тогда
				ЗаписьТекстаВФайл(ЗаписьXML, "remark_date", ПреобразоватьДатуДляОтправки(ТекущийЭлемент.Значение));
			ИначеЕсли ТекущийЭлемент.Ключ = "remarking_cause" Тогда
				Продолжить;
			ИначеЕсли ТекущийЭлемент.Ключ = "tnved_10" Тогда
				ЗаписьТекстаВФайл(ЗаписьXML, "tnved_code_10", ТекущийЭлемент.Значение);
			Иначе
				ЗаписьТекстаВФайл(ЗаписьXML, ТекущийЭлемент.Ключ, ТекущийЭлемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ТекстЗапроса = ЗаписьXML.Закрыть();
	
	// Из-за специфики работы записи нужно удалить лишнее
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстЗапроса);
	ТекстФайла = ТекстовыйДокумент.ПолучитьТекст();
	ТекстФайла = СтрЗаменить(ТекстФайла, "<last_ki>" + Символы.ПС, "<last_ki>");
	ТекстФайла = СтрЗаменить(ТекстФайла, "<new_ki>" + Символы.ПС, "<new_ki>");
	Пока СтрНайти(ТекстФайла, "	<![CDATA") > 0 Цикл
		ТекстФайла = СтрЗаменить(ТекстФайла, "	<![CDATA", "<![CDATA");
	КонецЦикла;
	
	ТекстовыйДокумент.УстановитьТекст(ТекстФайла);
	
	Возврат ТекстовыйДокумент;
	
КонецФункции

// Получение данных запроса списания кодов маркировки в файл
//
// Параметры:
//  Документ - ДокументСсылка.СписаниеКодовМаркировки - Документ, для которого выполняется запрос
//  ТекстОшибки	 - Строка							  - Содержит текст ошибки при проверки документа
// 
// Возвращаемое значение:
//  ТекстовыйДокумент - Данные для запроса документа в XML
//
Функция ЗапросСписанияКодовМаркировки(Документ, ТекстОшибки = "") Экспорт
	
	ДанныеДокумента = Документы.СписаниеКодовМаркировки.ДанныеСписанияКодовМаркировки(Документ);
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Заполним данными документа 
	ЗаписьXML.ЗаписатьНачалоЭлемента("km_cancellation");
	ЗаписьXML.ЗаписатьАтрибут("action_id", "14");
	ЗаписьXML.ЗаписатьАтрибут("version", "2");
	
	// Заполним шапку документа
	ЗаписьТекстаВФайл(ЗаписьXML, "trade_participant_inn", ДанныеДокумента.trade_participant_inn);
	ЗаписьТекстаВФайл(ЗаписьXML, "cancellation_reason", ДанныеДокумента.cancellation_reason);
	ЗаписьТекстаВФайл(ЗаписьXML, "cancellation_document_date", ДанныеДокумента.cancellation_doc_date);
	ЗаписьТекстаВФайл(ЗаписьXML, "cancellation_document_number", ДанныеДокумента.cancellation_doc_number);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("km_list");
	
	Для Каждого ТекущаяСтрока Из ДанныеДокумента.km_list Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("km");
		
		Для Каждого ТекущийЭлемент Из ТекущаяСтрока Цикл
			Если ТекущийЭлемент.Ключ = "uit" Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("kit");
				ЗаписьXML.ЗаписатьСекциюCDATA(ТекущийЭлемент.Значение);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				ЗаписьТекстаВФайл(ЗаписьXML, ТекущийЭлемент.Ключ, ТекущийЭлемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ТекстЗапроса = ЗаписьXML.Закрыть();
	
	// Из-за специфики работы записи нужно удалить лишнее
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстЗапроса);
	ТекстФайла = ТекстовыйДокумент.ПолучитьТекст();
	ТекстФайла = СтрЗаменить(ТекстФайла, "<kit>" + Символы.ПС, "<kit>");
	
	Пока СтрНайти(ТекстФайла, "	<![CDATA") > 0 Цикл
		ТекстФайла = СтрЗаменить(ТекстФайла, "	<![CDATA", "<![CDATA");
	КонецЦикла;
	
	ТекстовыйДокумент.УстановитьТекст(ТекстФайла);
	
	Возврат ТекстовыйДокумент;
	
КонецФункции

// Получение данных запроса перемаркировки в файл
//
// Параметры:
//  Документ - ДокументСсылка.ВозвратВОборотКодовМаркировки - Документ, для которого выполняется запрос
//  ТекстОшибки	 - Строка									 - Содержит текст ошибки при проверки документа
// 
// Возвращаемое значение:
//  ТекстовыйДокумент - Данные для запроса документа в XML
//
Функция ЗапросВозвратаВОборотКодовМаркировки(Документ, ТекстОшибки = "") Экспорт
	
	ДанныеДокумента = Документы.ВозвратВОборотКодовМаркировки.ДанныеВозвратаВОборотКодовМаркировки(Документ);
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Заполним данными документа 
	ЗаписьXML.ЗаписатьНачалоЭлемента("return");
	ЗаписьXML.ЗаписатьАтрибут("version", "1");
	
	ЗаписьТекстаВФайл(ЗаписьXML, "trade_participant_inn", ДанныеДокумента.trade_participant_inn);
	ЗаписьТекстаВФайл(ЗаписьXML, "return_type", ДанныеДокумента.return_type);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("products_list");
	
	Для Каждого ТекущаяСтрока Из ДанныеДокумента.products_list Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("product");
		
		Для Каждого ТекущийЭлемент Из ТекущаяСтрока Цикл
			Если Не ЗначениеЗаполнено(ТекущийЭлемент.Значение) Тогда
				Продолжить;
			ИначеЕсли ТекущийЭлемент.Ключ = "ki" Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("ki");
				ЗаписьXML.ЗаписатьСекциюCDATA(ТекущийЭлемент.Значение);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				ЗаписьТекстаВФайл(ЗаписьXML, ТекущийЭлемент.Ключ, ТекущийЭлемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ТекстЗапроса = ЗаписьXML.Закрыть();
	
	// Из-за специфики работы записи нужно удалить лишнее
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстЗапроса);
	ТекстФайла = ТекстовыйДокумент.ПолучитьТекст();
	ТекстФайла = СтрЗаменить(ТекстФайла, "<ki>" + Символы.ПС, "<ki>");
	
	Пока СтрНайти(ТекстФайла, "	<![CDATA") > 0 Цикл
		ТекстФайла = СтрЗаменить(ТекстФайла, "	<![CDATA", "<![CDATA");
	КонецЦикла;
	
	ТекстовыйДокумент.УстановитьТекст(ТекстФайла);
	
	Возврат ТекстовыйДокумент;
	
КонецФункции

#КонецОбласти

#Область РазрешительныйРежим

// Формирует запрос JSON для передачи документа в Честный знак и при необходимости выводит данные для подписи
//
// Параметры:
//  УникальныйИдентификатор	- УникальныйИдентификатор	- Уникальный идентификатор.
//  ДополнительныеПараметры	- Структура					- Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//
Функция ПроверитьКодыМаркировкиВРазрешительномРежиме(УникальныйИдентификатор, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка кодов маркировки в разрешительном режиме'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменССистемойМаркировкиСервер.ПроверитьКодыМаркировкиВРазрешительномРежиме",
		ДополнительныеПараметры,
		ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции // ПолучитьТокенПроверкиВРазрешительномРежиме()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписьТекстаВФайл(ЗаписьXML, ИмяЭлемента, Текст)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ЗаписьXML.ЗаписатьТекст(Текст);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ЗапросВводаВОборот(Документ, ДанныеДокумента)
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Заполним данными документа
	СпособВводаМаркировки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "СпособВводаВОборот");
	ПараметрыЗаполнения = ПараметрыФайлаПоСпособуВвода(СпособВводаМаркировки);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(ПараметрыЗаполнения.ИмяОперации);
	ЗаписьXML.ЗаписатьАтрибут("version", ПараметрыЗаполнения.НомерВерсии);
	ЗаписьXML.ЗаписатьАтрибут("action_id", ПараметрыЗаполнения.НомерДействия);
	
	// Заполним шапку документа
	Для Каждого ТекущийЭлемент Из ДанныеДокумента Цикл
		Если ТекущийЭлемент.Ключ = "products_list" Тогда
			Продолжить;
		Иначе
			ИмяПараметра =
				?(ТекущийЭлемент.Ключ = "participant_inn",
				"trade_participant_inn", 
				ТекущийЭлемент.Ключ);
			ЗаписьТекстаВФайл(ЗаписьXML, ИмяПараметра, ТекущийЭлемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("products_list");
	
	Для Каждого ТекущаяСтрока Из ДанныеДокумента.products_list Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("product");
		
		Для Каждого ТекущийЭлемент Из ТекущаяСтрока Цикл
			Если ТекущийЭлемент.Ключ = "ki" ИЛИ ТекущийЭлемент.Ключ = "uit" Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента(ПараметрыЗаполнения.ИмяКодаМаркировки);
				ЗаписьXML.ЗаписатьСекциюCDATA(ТекущийЭлемент.Значение);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				ЗаписьТекстаВФайл(ЗаписьXML, ТекущийЭлемент.Ключ, ТекущийЭлемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ТекстЗапроса = ЗаписьXML.Закрыть();
	
	// Из-за специфики работы записи нужно удалить лишнее
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстЗапроса);
	ТекстФайла = ТекстовыйДокумент.ПолучитьТекст();
	ТекстФайла = СтрЗаменить(ТекстФайла, "<ki>" + Символы.ПС, "<ki>");
	ТекстФайла = СтрЗаменить(ТекстФайла, "<kit>" + Символы.ПС, "<kit>");
	
	Пока СтрНайти(ТекстФайла, "	<![CDATA") > 0 Цикл
		ТекстФайла = СтрЗаменить(ТекстФайла, "	<![CDATA", "<![CDATA");
	КонецЦикла;
	
	ТекстовыйДокумент.УстановитьТекст(ТекстФайла);
	
	Возврат ТекстовыйДокумент;
	
КонецФункции

Функция ПараметрыФайлаПоСпособуВвода(СпособВводаВОборот)
	
	ПараметрыЗаполнения = ПараметрыЗаполненияФайлаВводаВОброт();
	
	Если СпособВводаВОборот = Перечисления.СпособыВводаВОборот.МаркировкаОстатков Тогда
		ПараметрыЗаполнения.ИмяОперации = "vvod_ostatky";
		ПараметрыЗаполнения.НомерВерсии = "2";
		ПараметрыЗаполнения.НомерДействия = "5.4";
		ПараметрыЗаполнения.ИмяКодаМаркировки = "ki";
	ИначеЕсли СпособВводаВОборот = Перечисления.СпособыВводаВОборот.ПолучениеОтФизическихЛиц Тогда
		ПараметрыЗаполнения.ИмяОперации = "vvod_individuals";
		ПараметрыЗаполнения.НомерВерсии = "3";
		ПараметрыЗаполнения.НомерДействия = "5.3";
		ПараметрыЗаполнения.ИмяКодаМаркировки = "kit";
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции 

Функция ПараметрыЗаполненияФайлаВводаВОброт()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяОперации", "");
	Результат.Вставить("НомерВерсии", "");
	Результат.Вставить("НомерДействия", "");
	Результат.Вставить("ИмяКодаМаркировки", "");
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьДатуДляОтправки(ДатаСтрокой)
	
	ДатаФормата = СтрШаблон("%1%2%3", Сред(ДатаСтрокой, 7, 4), Сред(ДатаСтрокой, 4, 2), Сред(ДатаСтрокой, 1, 2));
	Возврат Формат(Дата(ДатаФормата), "ДФ=yyyy-MM-dd");
	
КонецФункции

#КонецОбласти
