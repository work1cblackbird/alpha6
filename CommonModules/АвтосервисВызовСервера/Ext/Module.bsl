/////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с блоком документов "Заказ-наряд", "Заявка на ремонт",    //
// "Сводный ремонтный заказ", "Запись на ремонт"                               //
/////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает значение права "РаботатьВРежимеРабочегоСтола"
// 
// Возвращаемое значение:
//  Булево - Значение права "Работать в режиме рабочего стола"
//
Функция ЗапускатьВРежимеРабочегоСтола(ТекстПредупреждения = "") Экспорт
	
	// Параметр командной строки в приоритете права/настройки пользователя
	ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	
	Если СтрНайти(ПараметрЗапускаПриложения, "РаботатьВРежимеРабочегоСтола") > 0
		Или ПравоПользователя("РаботатьВРежимеРабочегоСтола") Тогда
		
		Если ПравоПользователя("ФормаВРежимеРабочегоСтола") <> Перечисления.ВариантыФормВРежимеРабочегоСтола.РучнаяНастройка Тогда
			Возврат Истина;
		КонецЕсли;
		
		НастройкиНачальнойСтраницы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(
			"Общее/НастройкиНачальнойСтраницы",
			""
		);
		Если НастройкиНачальнойСтраницы = Неопределено Тогда
			ТекстПредупреждения = НСтр(
				"ru = 'Режим рабочего стола отключен. Для работы в режиме рабочего стола необходимо заполнить настройки начальной страницы.'"
			);
			Возврат Ложь;
		КонецЕсли;
		
		СоставФорм = НастройкиНачальнойСтраницы.ПолучитьСоставФорм();
		Если СоставФорм.ЛеваяКолонка.Количество() = 0 И СоставФорм.ПраваяКолонка.Количество() = 0 Тогда
			ТекстПредупреждения = НСтр(
				"ru = 'Режим рабочего стола отключен. Для работы в режиме рабочего стола необходимо заполнить настройки начальной страницы.'"
			);
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Получает значение права "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы"
// 
// Возвращаемое значение:
//  Булево - Значение права "Запрашивать подтверждение при завершении программы"
//
Функция ЗапрашиватьПодтверждениеПриЗавершенииПрограммы() Экспорт
	
	Возврат ПравоПользователя("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы");
	
КонецФункции

// Формирует данные о состоянии запасов по номенклатуре для указанного документа.
//
// Параметры:
//  Документ           - ДокументСсылка.ЗаказНаряд, ДокументСсылка.ЗаявкаНаРемонт - Документ сервиса.
//  СписокНоменклатуры - ДанныеФормыКоллекция, ТаблицаЗначений - Список номенклатуры запаса.
//  ДопПараметры       - Структура, Неопределено - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Массив - Массив структур запасов документа.
//
Функция ПоказателиЗапасов(Документ, Знач СписокНоменклатуры, ДопПараметры=Неопределено) Экспорт
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ);
	Возврат ОбщегоНазначения
		.ТаблицаЗначенийВМассив(Менеджер.ПолучитьПоказателиЗапасов(Документ, СписокНоменклатуры, ДопПараметры));
	
КонецФункции

// Подготовка параметров для ввода сообщения SMS
//
// Параметры:
//  Документ - ДокументСсылка	 - Предмет сообщения SMS.
//  Шаблон	 - Строка - Имя шаблона для выгрузки сообщения.
// 
// Возвращаемое значение:
//  Структура - Параметры для создания документа
//
Функция ПараметрыСообщения(Документ, Шаблон) Экспорт
	
	ИмяКонтакта = "";
	// Получим контакт
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
		ИмяКонтакта = "Заказчик";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		ИмяКонтакта = "СводныйРемонтныйЗаказ.Заказчик";
	КонецЕсли;
	
	// Получим данные вида ремонта
	Контакт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Документ, 
		ИмяКонтакта);
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПреобразовыватьHTMLДляФорматированногоДокумента", Истина);
	ДополнительныеПараметры.Вставить("ВидСообщения", "СообщениеSMS");
	ДополнительныеПараметры.Вставить("ПроизвольныеПараметры", Новый Соответствие);
	
	Результат = 
		ШаблоныСообщений.СформироватьСообщение(
			Шаблон,
			Документ,
			УникальныйИдентификатор,
			ДополнительныеПараметры);
	
	Результат.Удалить("Вложения");
	Результат.Вставить("ИспользоватьПрочиеВзаимодействия", Ложь);
	
	Если Результат.Получатель.Количество() = 1 И ИмяКонтакта <> "" 
		И ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия") Тогда
		
		Адресаты = Новый Массив;
		СтрокаКонтакта = Новый Структура("Телефон, Представление, ИсточникКонтактнойИнформации");
		
		Если ТипЗнч(Результат.Получатель) = Тип("Массив") Тогда
			СтрокаКонтакта.Вставить("Телефон", Результат.Получатель[0].НомерТелефона);
		Иначе
			СтрокаКонтакта.Вставить("Телефон", Результат.Получатель[0].Значение);
		КонецЕсли;
		СтрокаКонтакта.Вставить("Представление", Результат.Получатель[0].Представление);
		СтрокаКонтакта.Вставить("ИсточникКонтактнойИнформации", Контакт);
		
		Адресаты.Добавить(СтрокаКонтакта);
		
		Результат.Получатель = Адресаты;
		Результат.ИспользоватьПрочиеВзаимодействия = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПараметрыСообщения()

// Получает форму по значению его варианта из предопределенного набора
//
Функция ПолучитьФормуНачальнойСтраницыИзВарианта(ВариантФормы)

	СоответствиеФорм = Новый Соответствие;
	ВариантыФорм = Перечисления.ВариантыФормВРежимеРабочегоСтола;
	
	СоответствиеФорм.Вставить(ВариантыФорм.УстановитьМониторАвтосервисаНаРабочийСтол, "Обработка.МониторАвтосервиса.Форма.ФормаМонитора");
	СоответствиеФорм.Вставить(ВариантыФорм.УстановитьЗаписьНаРемонтНаРабочийСтол, 	  "Обработка.ЗаписьНаРемонт.Форма.Форма");	
	СоответствиеФорм.Вставить(ВариантыФорм.УстановитьСотрудникЦехаНаРабочийСтол, 	  "Обработка.СотрудникЦеха.Форма.Форма");
	
	Если ТипЗнч(ВариантФормы) = Тип("Строка") Тогда
		ВариантФормы = Перечисления.ВариантыФормВРежимеРабочегоСтола[ВариантФормы];	
	КонецЕсли;
	
	Возврат СоответствиеФорм.Получить(ВариантФормы);
	
КонецФункции

// Размещает формы в колонках на начальной страницы программы
//
Процедура УстановитьСоставФормНачальнойСтраницы() Экспорт
	
	ФормаРабочегоСтола = Неопределено;
	ВариантыФорм = Перечисления.ВариантыФормВРежимеРабочегоСтола;
	
	// Параметр командной строки в приоритете права/настройки пользователя
	ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	
	Если СтрНайти(ПараметрЗапускаПриложения, "УстановитьМониторАвтосервисаНаРабочийСтол") > 0 Тогда
		ФормаРабочегоСтола = ВариантыФорм.УстановитьМониторАвтосервисаНаРабочийСтол;	
	ИначеЕсли СтрНайти(ПараметрЗапускаПриложения, "УстановитьЗаписьНаРемонтНаРабочийСтол") > 0 Тогда
		ФормаРабочегоСтола = ВариантыФорм.УстановитьЗаписьНаРемонтНаРабочийСтол;
	ИначеЕсли СтрНайти(ПараметрЗапускаПриложения, "УстановитьСотрудникЦехаНаРабочийСтол") > 0 Тогда
		ФормаРабочегоСтола = ВариантыФорм.УстановитьСотрудникЦехаНаРабочийСтол;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФормаРабочегоСтола) Тогда
		ФормаРабочегоСтола = ПравоПользователя("ФормаВРежимеРабочегоСтола");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФормаРабочегоСтола) И ФормаРабочегоСтола <> ВариантыФорм.РучнаяНастройка Тогда
	   
	   НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
	   СоставФорм = Новый СоставФормНачальнойСтраницы;
	   СоставФорм.ЛеваяКолонка.Добавить(ПолучитьФормуНачальнойСтраницыИзВарианта(ФормаРабочегоСтола));
	   НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
	   
	   ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", , НастройкиНачальнойСтраницы);
	   
	КонецЕсли;
	
КонецПроцедуры

#Область НачисленияСотрудникам

// Получение параметров настройки начислений сотрудников.
//
// Параметры:
//  ЗаказНаряд		 - ДокументСсылка.ЗаказНаряд - Документ, для которого выполняется заполнение.
//  СтрокаАвтоработы - ДанныеФормыЭлементКоллекции - Строка табличной части документа "Автоработы".
// 
// Возвращаемое значение:
//  Структура - Данные для расчета суммы начислений сотрудникам.
//
Функция ПараметрыРасчетаНачисленийАвтоработы(ЗаказНаряд, СтрокаАвтоработы) Экспорт
	
	Возврат Автосервис.ПараметрыРасчетаНачисленийАвтоработы(ЗаказНаряд, СтрокаАвтоработы);
	
КонецФункции

#КонецОбласти

#Область ИнтервьюКонтрагента

Функция РеспондентДокумента(Документ) Экспорт
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ);
	Возврат МенеджерДокумента.РеспондентДляИнтервью(Документ);
	
КонецФункции // РесподентДокумента()

#КонецОбласти

#КонецОбласти

