///////////////////////////////////////////////////////////////////////////////////////////////////////
// Общий модуль "Обновление информационной базы автосалон"
// Реализация интерфейса обновляения информационной базы для подсистемы "Обновление ИБ"
///////////////////////////////////////////////////////////////////////////////////////////////////////

// BSLLS:LineLength-off в модуле постаянно указываються длинные строковые константы обработчиков,
// а их лучше записывать в одну строку

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ИдентификаторИнтернетПоддержки - Строка - уникальное имя программы в сервисах Интернет-поддержки.
//   * ТребуемыеПодсистемы - Массив из Строка - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "Автосалон6";
	Описание.Версия = "6.1.13.09";
	Описание.ИдентификаторИнтернетПоддержки = "SSL";
	Описание.Вставить("ИдентфикаторПродукта", "84e3d3b7cf474b9d9942831471423bc8");
	
	Описание.ТребуемыеПодсистемы.Добавить("УправлениеЛицензированием");
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример:
//  Для добавления своей процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
		
	// Подключаемое оборудование
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБПО.ОбновитьПоставляемыеДрайвера";
	Обработчик.Комментарий = НСтр("ru = 'Обновление поставляемых драйверов подключаемого оборудования.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "РегистрыСведений.СтруктураИерархииПодразделений.ОбновитьСтруктуруИерархии";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	Обработчик.ОбщиеДанные                  = Истина;
	
	УправлениеКонтактнойИнформациейАльфаАвто.ПриДобавленииОбработчиковОбновления(Обработчики);
	СопоставлениеНоменклатурыКонтрагентовАльфаАвто.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	Обработчик 						= Обработчики.Добавить();
	Обработчик.Версия 				= "6.1.01.01";
	Обработчик.НачальноеЗаполнение  = Ложь;
	Обработчик.Процедура 			= "БанкиАльфаАвто.СоздатьКлассификаторБанков";
	
	Обработчик 						= Обработчики.Добавить();
	Обработчик.Версия 				= "6.1.01.01";
	Обработчик.Идентификатор 		= Новый УникальныйИдентификатор();
	Обработчик.НачальноеЗаполнение  = Ложь;
	Обработчик.Процедура 			= "БанкиАльфаАвто.НайтиЭлементыКлассификатораБанковРФ";
	Обработчик.Комментарий 			= НСтр("ru = 'Поиск и замена элементов справочника Классификатор банков РФ.'");
	Обработчик.РежимВыполнения 		= "Отложенно";
	Обработчик.ПроцедураПроверки 	= "БанкиАльфаАвто.ПроверитьКлассификаторБанков";
	Обработчик.БлокируемыеОбъекты 	=
		"ДокументЗаказНаАвтомобиль,
		|ДокументПланФакт,
		|ДокументРабочийЛистКредитногоОтдела,
		|ДокументСообщениеОбменСБанками,
		|СправочникБанковскиеСчета, 
		|СправочникДействияНаЗначимыеСобытия,
		|СправочникЗаметки,
		|СправочникЗначимыеСобытия,
		|СправочникКредитныеПрограммы,
		|СправочникНастройкиОбменСБанками";
		
	Обработчик 						= Обработчики.Добавить();
	Обработчик.Версия 				= "*";
	Обработчик.НачальноеЗаполнение  = Ложь;
	Обработчик.Процедура 			= "ОбновлениеИнформационнойБазыАвтосалон.ОбновитьПараметрыОтправкиСтатистики";
										
	ДополнитьОбработчикамиОбновленияДанныхНеИзменяемыхПользователямиПрограммы(Обработчики);
	ДополнитьОбработчикамиНачальногоЗаполнения(Обработчики);
	
	Обработчик 						= Обработчики.Добавить();
	Обработчик.Версия 				= "6.1.01.06";
	Обработчик.НачальноеЗаполнение  = Ложь;
	Обработчик.Процедура 			= "УправлениеДоступомАльфаАвто.ЗаполнитьПризнакВключаяНижестоящие";
	
	Обработчик 						= Обработчики.Добавить();
	Обработчик.Версия 				= "6.1.01.07";
	Обработчик.Процедура 			= "Справочники.ГруппыПравИНастроек.ВыполнитьНачальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение  = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.08";
	Обработчик.Процедура                    = "Справочники.ДоговорыВзаиморасчетов.ЗаполнитьРеквизитЕдиницаИзмеренияАвтоработВПечатныхФормах";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.11";
	Обработчик.Процедура                    = "УправлениеКонтактнойИнформациейАльфаАвто.ПеревестиКонтактнуюИнформациюДокументовНаНовыйФормат";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик 								= Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.01.13";
	Обработчик.Идентификатор 				= Новый УникальныйИдентификатор();
	Обработчик.НачальноеЗаполнение  		= Истина;
	Обработчик.РежимВыполнения 				= "Отложенно";
	Обработчик.Процедура 					= "УправлениеСвойствамиАльфаАвто.ВыполнитьПереносСвойствГрузоотправительГрузополучатель";
	Обработчик.ПроцедураПроверки 			= "УправлениеСвойствамиАльфаАвто.ПроверитьПереносСвойствГрузоотправительГрузополучатель";
	Обработчик.БлокируемыеОбъекты 			=
		"РегистрСведений.ДополнительныеСведения,	
		|Справочник.НаборыДополнительныхРеквизитовИСведений,
		|ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения";
	Обработчик.ЧитаемыеОбъекты 				= Обработчик.БлокируемыеОбъекты;
	Обработчик.ИзменяемыеОбъекты 			= Обработчик.БлокируемыеОбъекты;
	Обработчик.Комментарий 					= НСтр("ru = 'Перенос значений ""Грузоотправитель/Грузополучатель"" из дополнительных свойств в реквизиты объектов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.14";
	Обработчик.Процедура                    = "УправлениеДоступомАльфаАвто.ДобавитьБазовыйПрофильПользователям";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.14";
	Обработчик.Процедура                    = "УправлениеДоступомАльфаАвто.СозданиеГруппДоступаПоПрофилям";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.22";
	Обработчик.Процедура                    = "Справочники.СтатьиДДС.ЗаполнитьВидОперации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.23";
	Обработчик.Процедура                    = "ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЗаполнениеОпераций";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик 								= Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.01.23";
	Обработчик.Идентификатор 				= Новый УникальныйИдентификатор();
	Обработчик.НачальноеЗаполнение  		= Истина;
	Обработчик.РежимВыполнения 				= "Отложенно";
	Обработчик.Процедура 					= "УправлениеСвойствамиАльфаАвто.ВыполнитьПереносСвойстваРуководительПодразделения";
	Обработчик.ПроцедураПроверки 			= "УправлениеСвойствамиАльфаАвто.ПроверитьПереносСвойстваРуководительПодразделения";
	Обработчик.БлокируемыеОбъекты 			=
		"РегистрСведений.СведенияКомпании,
		|РегистрСведений.ДополнительныеСведения,
		|Справочник.НаборыДополнительныхРеквизитовИСведений,
		|ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения";
	Обработчик.ЧитаемыеОбъекты 				= Обработчик.БлокируемыеОбъекты;
	Обработчик.ИзменяемыеОбъекты 			= Обработчик.БлокируемыеОбъекты;
	Обработчик.Комментарий 					= НСтр("ru = 'Перенос значения ""Руководитель"" подразделения из дополнительных сведений в сведения компании.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.24";
	Обработчик.Процедура                    = "ПользователиАльфаАвто.ОтключитьИспользованиеВнешнихПользователей";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.25";
	Обработчик.Процедура                    = "ОбновлениеИнформационнойБазыАвтосалон.ЗаменитьПровайдераSMS";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.26";
	Обработчик.Процедура                    = "Справочники.НастройкаОбменаМаркировкиТоваров.ОбновитьАдресаПодключенияКСистемеМаркировки";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.27";
	Обработчик.Процедура                    = "ОбновлениеИнформационнойБазыАвтосалон.ОбновитьСписокДрайверовОборудования";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.28";
	Обработчик.Процедура                    = "Обработки.ПодборРекомендаций.НачальноеЗаполнениеРекомендацийПоАвтомобилю";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	Обработчик.РежимВыполнения              = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.30";
	Обработчик.Процедура                    = "Документы.ИнвентаризацияАвтомобилей.ЗаполнитьГТДИзлишковИзОперацииПрослеживаемыхТоваров";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеДоступомАльфаАвто.ЗаполнитьПоставляемыеГруппыДоступа";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.36";
	Обработчик.Процедура                    = "ОбновлениеИнформационнойБазыАвтосалон.ИзменитьОтложеннуюОчередьОбработчиковОбновления";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.42";
	Обработчик.Процедура                    = "Справочники.ПодразделенияКомпании.ЗаполнитьСпособРаспределенияЗаказовПоУмолчанию";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.42";
	Обработчик.Процедура                    = "Документы.ПоступлениеТоваров.ЗаполнитьСпособРаспределенияЗаказов";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.44";
	Обработчик.Процедура                    = "РегистрыСведений.ИспользоватьУтверждениеДокументов.ВыполнитьНачальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.44";
	Обработчик.Процедура                    = "РегистрыСведений.НастройкиУтвержденияДокументов.ВыполнитьНачальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.47";
	Обработчик.Процедура                    = "Справочники.ПодразделенияКомпании.ЗаполнитьПризнакОбособленноеПодразделение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.48";
	Обработчик.Процедура                    = "Документы.Инвентаризация.ЗаполнитьДанныеИнвентаризации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.48";
	Обработчик.Процедура                    = "Документы.ИнвентаризацияАвтомобилей.ЗаполнитьДанныеИнвентаризации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.48";
	Обработчик.Процедура                    = "Документы.ИнвентаризацияОрдерногоСклада.ЗаполнитьДанныеИнвентаризации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.49";
	Обработчик.Процедура                    = "ОбновлениеИнформационнойБазыАвтосалон.УстановитьСвойствоХраненияИсторииКонтактнойИнформации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.49";
	Обработчик.Процедура                    = "Справочники.СтатьиДДС.АктуализацияПредопределеннныхЭлементов";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.01.49";
	Обработчик.Процедура                    = "Справочники.СтатьиДоходовИРасходов.АктуализацияПредопределеннныхЭлементов";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.02.02";
	Обработчик.Процедура                    = "Справочники.Сотрудники.ЗаполнитьНовыеРеквизитыФИО";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.02.04";
	Обработчик.Процедура                    = "РегистрыСведений.ПрайсЛистыКонтрагентовАвтообновление.ПерезаполнитьПериодичностьПроверки";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.02.05";
	Обработчик.Процедура                    = "Справочники.СтатьиДДС.ОбновлениеПредопределеннныхЭлементов";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.02.06";
	Обработчик.Процедура                    = "Справочники.КассыКомпании.ЗаполнитьВалютуДенежныхСредств";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик 								= Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.03.02";
	Обработчик.НачальноеЗаполнение  		= Ложь;
	Обработчик.Процедура 					= "Справочники.Валюты.ЗаполнитьПараметрыПрописи";
	
	Обработчик 								= Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.03.03";
	Обработчик.Идентификатор 				= Новый УникальныйИдентификатор();
	Обработчик.НачальноеЗаполнение  		= Ложь;
	Обработчик.РежимВыполнения 				= "Отложенно";
	Обработчик.Процедура 					= "УправлениеСвойствамиАльфаАвто.ВыполнитьПереносПодписантовИзСвойств";
	Обработчик.ПроцедураПроверки 			= "УправлениеСвойствамиАльфаАвто.ПроверитьПереносПодписантовИзСвойств";
	Обработчик.БлокируемыеОбъекты 			=
		"Документ.АктРазногласий,	
		|Документ.ВозвратПоставщику,Документ.ВозвратПоставщикуАвтомобилей,
		|Документ.ЗаказНаряд,
		|Документ.КорректировкаПоступления,Документ.КорректировкаПоступленияАвтомобилей,
		|Документ.КорректировкаРеализации,Документ.КорректировкаРеализацииАвтомобилей,
		|Документ.ОтчетКомиссионера,Документ.ОтчетКомиссионераЗаАвтомобили,
		|Документ.ПоступлениеАвтомобилей,Документ.ПоступлениеДопРасходов,Документ.ПоступлениеТоваров,
		|Документ.РеализацияТоваров,Документ.РеализацияАвтомобилей,Документ.РеализацияАктивов,
		|Документ.СчетФактураВыданный,Документ.СчетФактураПолученный,Документ.Чек
		|Справочник.НаборыДополнительныхРеквизитовИСведений";
	Обработчик.ЧитаемыеОбъекты 				= Обработчик.БлокируемыеОбъекты;
	Обработчик.ИзменяемыеОбъекты 			= Обработчик.БлокируемыеОбъекты;
	Обработчик.Комментарий 					= НСтр("ru = 'Перенос значений ""Подписантов"" из дополнительных свойств в реквизиты объектов.'");
	
	Обработчик 								= Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.03.04";
	Обработчик.НачальноеЗаполнение  		= Ложь;
	Обработчик.Процедура 					= "Справочники.КлассификаторЕдиницИзмерения.ПерезаполнениеПредопределенногоЭлементаПрочерк";
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.03.05";
	Обработчик.Процедура                    = "Справочники.Номенклатура.УстановитьЗначенияКонстантНастроекЗаполненияНоменклатуры";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.03.07";
	Обработчик.Процедура                    = "ПланыВидовРасчета.НачисленияИУдержания.ВыполнитьНачальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.03.09";
	Обработчик.Процедура                    = "Справочники.Сотрудники.ЗаполнитьУчаствуетВПланировании";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.03.10";
	Обработчик.Процедура                    = "ДанныеНагрузкиИРентабельности.НачальноеЗаполнение";
	Обработчик.РежимВыполнения              = "Оперативно";
	Обработчик.ОбщиеДанные                  = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.03.10";
	Обработчик.Процедура                    = "РегистрыСведений.ПрефиксацияОбъектов.УстановитьСправочникамЗначениеПоУмолчанию";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.03.12";
	Обработчик.Процедура                    = "РегистрыСведений.НастройкиВерсионированияОбъектов.ЗаполнитьНеКорректныеЭлементыДаннымиПоУмолчанию";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.03.13";
	Обработчик.Процедура                    = "РегистрыСведений.КодыМаркировки.ПерезаполнитьНекорректныеЗаписиBase64";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик 								= Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.03.14";
	Обработчик.РежимВыполнения 				= "Отложенно";
	Обработчик.Процедура                    = "ВариантыОтчетовАльфаАвто.ДобавитьВариантВРегистрВариантовОтчета";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик                      = Обработчики.Добавить();
	Обработчик.Версия               = "6.1.03.20";
	Обработчик.РежимВыполнения      = "Отложенно";
	Обработчик.НачальноеЗаполнение  = Ложь;
	Обработчик.Процедура            = "РегистрыНакопления.Продажи.ОчиститьСкладыДляЗаписейУслуг";
	Обработчик.Идентификатор        = Новый УникальныйИдентификатор("1cbc5000-cdf9-4f51-9e38-27b923803c08");
	Обработчик.ПроцедураПроверки    = "РегистрыНакопления.Продажи.ВыполненаОчисткаСкладовДляЗаписейУслуг";
	Обработчик.БлокируемыеОбъекты   = "Документ.РеализацияТоваров,Документ.КорректировкаРеализации,
	                                   |Документ.КорректировкаДвижений,Документ.ПереносИстории";
	Обработчик.Комментарий          = НСтр("ru = 'Очистка складов для записей услуг в регистре Продажи.
	                                              |До завершения обработки некоторые документы будут недоступны.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.03.22";
	Обработчик.РежимВыполнения 				= "Отложенно";
	Обработчик.Процедура                    = "Документы.СчетФактураВыданный.ЗаполнитьРеквизитыДоступнаПечатьУПДУКД";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.04.03";
	Обработчик.Процедура                    = "РегистрыСведений.ДополнительныеРеквизитыНоменклатуры.ЗаполнитьКрастностьПоставок";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.04.05";
	Обработчик.РежимВыполнения 				= "Отложенно";
	Обработчик.Процедура                    = "Справочники.ДействияНаЗначимыеСобытия.ЗаполнитьSMSТекстСообщенияПроизвольныйКод";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь; 
	
	Обработчик 								= Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.04.17";
	Обработчик.Процедура 					= "УправлениеСвойствамиАльфаАвто.ВключитьИспользованиеСвойстваРуководитель";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик 								= Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.04.18";
	Обработчик.Процедура 					= "Документы.Разукомплектация.ЗаполнитьРеквизитДоляСтоимости";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;

	Обработчик								= Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.04.19";
	Обработчик.Процедура                    = "ОбновлениеИнформационнойБазыАвтосалон.ЗаполнитьДокументыТелефонныйЗвонок";
	Обработчик.ВыполнятьВГруппеОбязательных = Ложь;
	Обработчик.НачальноеЗаполнение          = Ложь; 

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.05.02";
	Обработчик.Процедура                    = "ОбновлениеИнформационнойБазыАвтосалон.УстановитьСвойствоХраненияИсторииКонтактнойИнформации_6_1_05_02";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь; 
	
	Обработчик 								= Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.05.04";
	Обработчик.Процедура 					= "ЗапасыТоваров.Установить_ДатаНачалаОбособленногоУчетаТоваровПоОрганизациямПередОбновлениемИБ";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение			= Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия						= "6.1.05.04";
	Обработчик.РежимВыполнения 				= "Отложенно";
	Обработчик.Процедура					= "ЗапасыТоваров.ЗаполнитьИзмерениеОрганизацияДляРегистровОстатковТоваров";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение			= Ложь;
	Обработчик.Комментарий					= НСтр("ru = 'Заполнение <Организации> в регистры <Партии товаров компании>, <ГТД партий товаров компании> и <Товары компании в производстве>'");
	
	Обработчик 								= Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.05.06";
	Обработчик.Процедура 					= "Справочники.ТипыПлатежныхКарт.УстановкаТипаПлатежнойКарты";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "6.1.05.08";
	Обработчик.Процедура = "Справочники.Пользователи.ВыполнитьНачальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "6.1.05.11";
	Обработчик.Процедура = "ПланыВидовХарактеристик.СвойстваИХарактеристикиАвтомобилей.ОбновитьСвойствоПривода";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "6.1.05.11";
	Обработчик.Процедура = "Документы.АктОценкиАвтомобиля.ОбновитьХарактеристикуАвтомобиляПривод";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "6.1.05.13";
	Обработчик.Процедура = "Справочники.НастройкаОбменаМаркировкиТоваров.ПеревестиНастройкиОбменаНаTrueApi";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "6.1.05.14";
	Обработчик.Процедура = "Справочники.ТипыМаркировки.ЗаполнитьПараметрыУпакованнойВоды";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "6.1.05.15";
	Обработчик.Процедура = "Справочники.ТипыМаркировки.ЗаполнитьПараметрыМолочнаяПродуция";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "6.1.05.16";
	Обработчик.Процедура = "ОбменСAudaPadWeb.ЗаполнитьТипДелаВидамРемонта";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "6.1.05.17";
	Обработчик.Процедура = "Справочники.ПодразделенияКомпании.ЗаполнениеНовыхРеквизитовДляСФ";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "6.1.05.17";
	Обработчик.Процедура = "Справочники.ПодразделенияКомпании.ЗаполнениеНастроекЭтоУниверсальынйДокумент";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.06.05";
	Обработчик.Процедура                    = "Справочники.Организации.ЗаполнитьРеквизитСпособЗачетаАвансов";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.06.05";
	Обработчик.Процедура                    = "Справочники.ДоговорыВзаиморасчетов.ЗаполнитьРеквизитСпособЗачетаАвансов";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.06.05";
	Обработчик.Процедура                    = "Справочники.ДоговорыВзаиморасчетов.ЗаполнитьРеквизитСпособВеденияВзаиморасчетов";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.06.05";
	Обработчик.РежимВыполнения 				= "Отложенно";
	Обработчик.Процедура                    = "РасчетыСКонтрагентамиСервер.ЗаполнитьРеквизитСпособЗачетаАвансовДокументов";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.06.06";
	Обработчик.Процедура                    = "Справочники.ТипыАвтомобилей.ОбновлениеНомеровЭлементов";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.06.06";
	Обработчик.Процедура                    = "Справочники.ТипыАвторабот.ОбновлениеНомеровЭлементов";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.06.06";
	Обработчик.Процедура                    = "Справочники.ТипыРесурсов.ОбновлениеНомеровЭлементов";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.06.06";
	Обработчик.Процедура                    = "ОбновлениеИнформационнойБазыАвтосалон.ЗаполнитьТипыРаботТипыАвтомобилейТипыРесурсовПоУмолчанию";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.06.07";
	Обработчик.Процедура                    = "Справочники.Автоработы.ЗаполнитьСпособРасчетаСтоимостиРаботПоУмолчанию";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.06.07";
	Обработчик.РежимВыполнения 				= "Отложенно";
	Обработчик.Процедура                    = "Автосервис.ЗаполнитьВДокументахСпособРасчетаСуммы";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.06.08";
	Обработчик.Процедура                    = "РегистрыСведений.ДокументыДвиженияОпцииАвтомобилей.ЗаполнитьРегистрДокументами";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.07.03";
	Обработчик.Процедура                    = "УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьПредопределенныеВидыКонтактнойИнформацииПользователей";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.07.07";
	Обработчик.Процедура                    = "Справочники.ПодразделенияКомпании.ЗаполнениеПризнаковСопоставленияНоменклатурыБЭД";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;   
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.07.11";
	Обработчик.Процедура                    = "ПланыВидовХарактеристик.ПраваИНастройки.УдалениеПраваРежимРазделенияРаботПоПакетам";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;  
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.07.12";
	Обработчик.Процедура                    = "ПланыВидовХарактеристик.ПраваИНастройки.УдалениеПраваУРВРаботатьВРежимеРабочегоСтола";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;  
	
	Обработчик 								= Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.07.13";
	Обработчик.Идентификатор 				= Новый УникальныйИдентификатор();
	Обработчик.НачальноеЗаполнение  		= Ложь;
	Обработчик.РежимВыполнения 				= "Отложенно";
	Обработчик.Процедура 					= "УправлениеСвойствамиАльфаАвто.ВыполнитьПереносИсполнителяИзСвойств";
	Обработчик.ПроцедураПроверки 			= "УправлениеСвойствамиАльфаАвто.ПроверитьПереносИсполнителяИзСвойств";
	Обработчик.БлокируемыеОбъекты 			=
		"Документ.ЗаказНаАвтомобиль,	
		|Документ.ЗаказПокупателя,
		|Документ.ЗаменаВЗаказеПокупателя,
		|Документ.КорректировкаЗаказаПокупателя,
		|Документ.РезервированиеАвтомобилей,
		|Документ.РезервированиеЗаказовПокупателя,
		|Документ.СнятиеРезервовАвтомобилей,
		|Документ.СнятиеРезервовЗаказовПокупателя,
		|Справочник.НаборыДополнительныхРеквизитовИСведений";
	Обработчик.ЧитаемыеОбъекты 				= Обработчик.БлокируемыеОбъекты;
	Обработчик.ИзменяемыеОбъекты 			= Обработчик.БлокируемыеОбъекты;
	Обработчик.Комментарий 					= НСтр("ru = 'Перенос значений ""Исполнитель организации"" из дополнительных свойств в реквизиты объектов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.07.14";
	Обработчик.Процедура                    = "Справочники.ПодразделенияКомпании.ПерезаполнениеНастроекЭтоУниверсальынйДокумент";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик 								= Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.08.02";
	Обработчик.Идентификатор 				= Новый УникальныйИдентификатор();
	Обработчик.НачальноеЗаполнение  		= Ложь;
	Обработчик.РежимВыполнения 				= "Отложенно";
	Обработчик.Процедура 					= "Документы.ЗаказНаряд.ВыполнитьЗаполнениеАвтомобиляПоРегиструПродажи";
	Обработчик.ПроцедураПроверки 			= "Документы.ЗаказНаряд.ПроверитьЗаполнениеАвтомобиляПоРегиструПродажи";
	Обработчик.БлокируемыеОбъекты 			= "Документ.ЗаказНаряд";
	Обработчик.ЧитаемыеОбъекты 				= Обработчик.БлокируемыеОбъекты;
	Обработчик.ИзменяемыеОбъекты 			= Обработчик.БлокируемыеОбъекты;
	Обработчик.Комментарий 					= НСтр("ru = 'Перезаполнение измерения ""Автомобиль"" регистра накопления ""Продажи"" по заказ-нарядам.'");
	
	Обработчик 								= Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.08.02";
	Обработчик.Идентификатор 				= Новый УникальныйИдентификатор();
	Обработчик.НачальноеЗаполнение  		= Ложь;
	Обработчик.РежимВыполнения 				= "Отложенно";
	Обработчик.Процедура 					= "Документы.КорректировкаРеализации.ВыполнитьЗаполнениеАвтомобиляПоРегиструПродажи";
	Обработчик.ПроцедураПроверки 			= "Документы.КорректировкаРеализации.ПроверитьЗаполнениеАвтомобиляПоРегиструПродажи";
	Обработчик.БлокируемыеОбъекты 			= "Документ.КорректировкаРеализации";
	Обработчик.ЧитаемыеОбъекты 				= Обработчик.БлокируемыеОбъекты;
	Обработчик.ИзменяемыеОбъекты 			= Обработчик.БлокируемыеОбъекты;
	Обработчик.Комментарий 					= НСтр("ru = 'Перезаполнение измерения ""Автомобиль"" регистра накопления ""Продажи"" по корректировкам реализации.'");
	
	Обработчик 								= Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.08.03";
	Обработчик.Идентификатор 				= Новый УникальныйИдентификатор();
	Обработчик.НачальноеЗаполнение  		= Ложь;
	Обработчик.РежимВыполнения 				= "Отложенно";
	Обработчик.Процедура 					= "АвтомобилиСервер.ВыполнитьЗаполнениеАвтомобильПриобретенУФизЛица";
	Обработчик.ЧитаемыеОбъекты 				= Обработчик.БлокируемыеОбъекты;
	Обработчик.ИзменяемыеОбъекты 			= Обработчик.БлокируемыеОбъекты;
	Обработчик.Комментарий 					= НСтр("ru = 'Установка признака ""Приобретен у физ. лица"" для автомобилей'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.08.04";
	Обработчик.Процедура                    = "Обработки.НастройкаПараметровУчета.УстановитьЗначениеКонстантыРежимКонтроляОстатковНаСкладах";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;

	Обработчик 								= Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.08.05";
	Обработчик.Идентификатор 				= Новый УникальныйИдентификатор();
	Обработчик.НачальноеЗаполнение  		= Ложь;
	Обработчик.РежимВыполнения 				= "Отложенно";
	Обработчик.Процедура 					= "Документы.ПлатежноеПоручение.ВыполнитьЗаполнениеСчетовКонтрагентов";
	Обработчик.Комментарий 					= НСтр("ru = 'Заполнение реквизита ""Счет контрагента"" в документах ""Платежное поручение"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.08.07";
	Обработчик.Процедура                    = "ЦентрМониторингаСлужебный.ПервоначальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.08.08";
	Обработчик.Процедура                    = "ПлатежныйШлюзСБП_1С.ОбновитьНастройкиУчастников";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.08.08";
	Обработчик.Процедура                    = "Обработки.НастройкаПараметровУчета.УстановитьЗначениеКонстантыИспользоватьАртикулПечатныеФормы";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.09.02";
	Обработчик.Процедура                    = "Справочники.ВидыРемонта.ОбновитьТипРемонтаКомплектацииАвтомобилей";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.09.05";
	Обработчик.Процедура                    = "Справочники.ПричиныОбращений.ЗаполнитьТипАвтоработПоУмолчанию";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 						= "6.1.09.06";
	Обработчик.Процедура                    = "Справочники.ТипыНоменклатуры.ОбновитьНаборыСвойств";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;

	// Инициализация системы учетных политик...
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.10.02";
	Обработчик.Процедура                    = "ПланыВидовХарактеристик.УчетныеПолитики.ВыполнитьНачальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.10.03";
	Обработчик.Процедура                    = "ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ОперацииВнутреннихПеремещений";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;   
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.10.03";
	Обработчик.Процедура                    = "Справочники.СтатьиДоходовИРасходов.ЗаполнитьПереводыВПути";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.11.06";
	Обработчик.Процедура                    = "Справочники.ХранилищеШаблонов.ОбновитьСКД";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.11.07";
	Обработчик.Процедура                    = "ВнешниеКомпонентыАльфаАвто.ОбновитьВнешниеКомпонентыИзМакета";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.13.03";
	Обработчик.Процедура                    = "Справочники.Модели.ЗаполнениеПризнакаПредметаРасчетаМодели";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь; 
	
    Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.13.06";
	Обработчик.Процедура                    = "Справочники.СтавкиНДС.ЗаполнитьПризнакРасчетнаяСтавка";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.13.08";
	Обработчик.Процедура                    = "Справочники.СтавкиНДС.СоздатьСтавкиНДС5и7";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "6.1.13.08";
	Обработчик.Процедура                    = "РегистрыСведений.УчетныеПолитики.ЗаполнитьНалогообложениеНДСприУСН";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Ложь;  
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПередОбновлениемИнформационнойБазы
//@skip-check module-empty-method
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
    
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы
// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия     - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия        - Строка - версия после обновления. Как правило, соответствует Метаданные.Версия.
//   ВыполненныеОбработчики     - Массив - массив структур, описывающих сведения об обновлении каждой
//                                     библиотеки и конфигурации.
//   ВыводитьОписаниеОбновлений - Булево - если установить Ложь, то не будет открыта форма
//                                с описанием изменений в новой версии программы. По умолчанию Истина.
//   МонопольныйРежим           - Булево - признак того, что обновление выполнилось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
        Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
    
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриПодготовкеМакетаОписанияОбновлений
//@skip-check module-empty-method
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
    
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
//@skip-check module-empty-method
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
    
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
//@skip-check module-empty-method
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
    
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура:
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
//@skip-check module-empty-method
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации,
                                                Знач ПредыдущаяВерсияКонфигурации,
                                                Параметры) Экспорт
    
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриОпределенииНастроек
Процедура ПриОпределенииНастроекОбновленияИнформационнойБазы(Параметры) Экспорт
	
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.Организации);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ПодразделенияКомпании);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.КассыКомпании);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СкладыКомпании);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.КлассификаторЕдиницИзмерения);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ТипыНоменклатуры);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.Номенклатура);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.Карточки);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ТипыСкидок);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.Смены);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.Контрагенты);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ВидыОтметокВремени);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ВидыСостоянийЗаказНарядов);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ВидыСостоянийПакетовРабот);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СтатусыРабочегоЛиста);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.Нормочасы);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ВидыРемонта);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.КатегорииТранспортныхСредств);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.Цеха);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СтатусыСобытий);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ТипыАвторабот);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СтатьиДДС);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СтатьиДоходовИРасходов);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СтавкиНДС);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ТипыЦен);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ГрафикиРаботы);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.ПланыВидовХарактеристик.ТипыСделок);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.ПланыВидовХарактеристик.ТипыПартий);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.ПланыВидовРасчета.НачисленияИУдержания);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.ПланыВидовХарактеристик.ПараметрыПланирования);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ВидыПлановКомпании);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ВидыИнтервалов);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.ПланыВидовРасчета.ВидыПериодовАренды);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ВидыСобытий);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СтатусыРабочегоЛистаВыкупаАвтомобиля);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ТипыМаркировки);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(
		Метаданные.ПланыВидовХарактеристик.СвойстваИХарактеристикиАвтомобилей);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.Валюты);
	//Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.Пользователи);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьОбработчикамиОбновленияДанныхНеИзменяемыхПользователямиПрограммы(Обработчики)
	
	// Инициализация системы прав и настроек...
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "*";
	Обработчик.Приоритет                    = 98;
	Обработчик.Процедура                    = "ПланыВидовХарактеристик.ПраваИНастройки.ВыполнитьНачальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	Обработчик.ОбщиеДанные                  = Истина;
	
	// Инициализация системы учетных политик...
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "*";
	Обработчик.Приоритет                    = 98;
	Обработчик.Процедура                    = "ПланыВидовХарактеристик.УчетныеПолитики.ВыполнитьНачальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	Обработчик.ОбщиеДанные                  = Истина;
	
	// Обновим правила префиксации объектов
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "*";
	Обработчик.Процедура                    = "РегистрыСведений.ПрефиксацияОбъектов.ВыполнитьНачальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	// Обновим правила утверждения документов
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "*";
	Обработчик.Процедура                    = "РегистрыСведений.НастройкиУтвержденияДокументов.ВыполнитьНачальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "*";
	Обработчик.Процедура                    = "РегистрыСведений.ИспользоватьУтверждениеДокументов.ВыполнитьНачальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	// Обновим элементы справочника действия на значимые события
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "*";
	Обработчик.Процедура                    = "Справочники.ДействияНаЗначимыеСобытия.ВыполнитьНачальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	// Обновим элементы справочника хозяйственных операций
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                       = "*";
	Обработчик.Процедура                    = "Справочники.ХозОперации.ВыполнитьНачальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	Обработчик.ОбщиеДанные                  = Истина;
	
КонецПроцедуры

Процедура ДополнитьОбработчикамиНачальногоЗаполнения(Обработчики)
	
	ДополнитьОбработчикамиНачальногоЗаполненияПараметровУчета(Обработчики);
	ДополнитьОбработчикамиНачальногоЗаполненияКлассификаторов(Обработчики);
	ДополнитьОбработчикамиНачальногоЗаполненияСправочниковБезПредопределенныхЭлементов(Обработчики);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "АвтомобилиСервер.УстановитьЗначениеДопустимыхСимволовГосНомера"; 
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьПредопределенныеВидыКИ";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.Пользователи.ВыполнитьНачальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	
КонецПроцедуры

Процедура ДополнитьОбработчикамиНачальногоЗаполненияПараметровУчета(Обработчики)
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Обработки.НастройкаПараметровУчета.ВыполнитьНачальноеЗаполнениеПараметрыУчета";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Обработки.НастройкаПараметровУчета.ВыполнитьНачальноеЗаполнениеРазделыУчета";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Обработки.НастройкаПараметровУчета.ВыполнитьНачальноеЗаполнениеАналитикиУчета";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Обработки.НастройкаПараметровУчета.ВыполнитьНачальноеЗаполнениеСлужебныеПодсистемы";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
КонецПроцедуры

Процедура ДополнитьОбработчикамиНачальногоЗаполненияКлассификаторов(Обработчики)
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ПорядокЗакрытияБалансовыхСтатей.ВыполнитьНачальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
КонецПроцедуры

Процедура ДополнитьОбработчикамиНачальногоЗаполненияСправочниковБезПредопределенныхЭлементов(Обработчики)
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.Дефекты.ВыполнитьНачальноеЗаполнение";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ТехнологическаяПлатформаВызовСервера.ОбновитьПредопределенныеДопРеквизитыИСвойства";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение          = Истина;
	
КонецПроцедуры

Процедура ОбновитьПараметрыОтправкиСтатистики() Экспорт
	
	// 1. Получение текущих настроек.
	ПараметрыЦентраМониторинга = ЦентрМониторингаСлужебный.ПолучитьПараметрыЦентраМониторинга();
	
	// 2. Определение необходимости обновления.
	Если Не (ПараметрыЦентраМониторинга.ВключитьЦентрМониторинга = Истина
			И ПараметрыЦентраМониторинга.ЦентрОбработкиИнформацииОПрограмме = Ложь
			И ПараметрыЦентраМониторинга.Сервер <> "stat.rarus.ru") Тогда 
		// Либо режим не отправка вендору, либо адрес сервера уже обновлен.
		Возврат;
	КонецЕсли;
	
	// 3. Очищаем содержимое регистра "ПакетыДляОтправки" т.к. отправка будет осуществляться на другой сервер.
	РегистрыСведений.ПакетыДляОтправки.Очистить();
	
	// 4. При необходимости (определяется разработчиком) можно очистить остальные регистры подсистемы.
	
	// 5. Установка новых параметров подсистемы.
	ТекДата = ТекущаяУниверсальнаяДата();
	
	ПараметрыЦентраМониторинга = ЦентрМониторингаСлужебный.ПолучитьПараметрыПоУмолчаниюВнешнийВызов(); // Уже содержит новый адрес сервера.
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ПараметрыЦентраМониторинга.БизнесСтатистикаПериодФормирования = 3600;
	КонецЕсли;
	
	ПараметрыЦентраМониторинга.РегистрацияДамповСледующееФормирование = ТекДата + ПараметрыЦентраМониторинга.РегистрацияДамповПериодФормирования;
	ПараметрыЦентраМониторинга.БизнесСтатистикаСледующееФормирование = ТекДата + ПараметрыЦентраМониторинга.БизнесСтатистикаПериодФормирования;
	ПараметрыЦентраМониторинга.СтатистикаКонфигурацииСледующееФормирование = ТекДата + ПараметрыЦентраМониторинга.СтатистикаКонфигурацииПериодФормирования;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	ДельтаОтправки = ГСЧ.СлучайноеЧисло(0, 86400);
	ПараметрыЦентраМониторинга.ОтправкаДанныхСледующееФормирование = ТекДата + ДельтаОтправки;
	
	ПараметрыЦентраМониторинга.ПериодАгрегацииМалый = 600;
	ПараметрыЦентраМониторинга.ПериодАгрегации = 3600;
	ПараметрыЦентраМониторинга.ПериодУдаления = 86400;
	
	ПараметрыЦентраМониторинга.ВключитьЦентрМониторинга = Истина;
	
	ЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
	
	// 6. Регистрация ИБ на новом сервере.
	// Только для БСП 3.*, т.к. в более ранних отсутствует метод "ОтправитьТестовыйПакет".
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);
	ПараметрыПроцедуры = Новый Структура("Итератор, ОтправкаТестовогоПакета, ПолучениеИдентификатора", 0, Ложь, Истина);
	ЦентрМониторингаСлужебный.ОтправитьТестовыйПакет(ПараметрыПроцедуры, АдресРезультата);
	
	// 7. Создание и настрока регламентного задания, отвечающего за сбор и отправку статистики.
	СтароеРегЗадание = ЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Ложь);
	Если СтароеРегЗадание = Неопределено Тогда 
		// Регл. задание еще не создавалось. Создаем новое.
		РегЗадание = ЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Истина);
		ЦентрМониторингаСлужебный.УстановитьРасписаниеПоУмолчаниюВнешнийВызов(РегЗадание);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьПровайдераSMS() Экспорт

	ПровайдерSMS = Константы.ПровайдерSMS.Получить();
	Если НЕ ЗначениеЗаполнено(ПровайдерSMS) Тогда
		Константы.ПровайдерSMS.Установить(Перечисления.ПровайдерыSMS.SMS4B);
	КонецЕсли;
	
КонецПроцедуры 

Процедура ОбновитьСписокДрайверовОборудования() Экспорт
	
	УдаляемыеДрайвера = Новый Массив;
	// Сканеры штрихкодов
	УдаляемыеДрайвера.Добавить("Драйвер1ССканерыШтрихкода");
	УдаляемыеДрайвера.Добавить("ДрайверАтолСканерыШтрихкода");
	УдаляемыеДрайвера.Добавить("ДрайверСканкодСканерыШтрихкода");
	
	// Офлайн-оборудование
	УдаляемыеДрайвера.Добавить("Драйвер1СККМOffline");
	УдаляемыеДрайвера.Добавить("Драйвер1СЭвоторККМOffline");
	УдаляемыеДрайвера.Добавить("ДрайверАтолККМOffline");
	УдаляемыеДрайвера.Добавить("ДрайверШтрихМККМOffline");
	УдаляемыеДрайвера.Добавить("Драйвер1СККМED");
	
	// Считыватели магнитных карт
	УдаляемыеДрайвера.Добавить("Драйвер1ССчитывателиМагнитныхКарт");
	УдаляемыеДрайвера.Добавить("ДрайверАтолСчитывателиМагнитныхКарт");
	
	// Фискальные регистраторы 
	УдаляемыеДрайвера.Добавить("Драйвер1СРарусФискальныеРегистраторыМебиус");
	УдаляемыеДрайвера.Добавить("Драйвер1СРарусФискальныеРегистраторыФеликс");
	УдаляемыеДрайвера.Добавить("Драйвер1СФискальныйРегистраторЭмулятор");
	УдаляемыеДрайвера.Добавить("ДрайверАтолФискальныеРегистраторыУниверсальный");
	УдаляемыеДрайвера.Добавить("ДрайверАтолФискальныеРегистраторы");
	УдаляемыеДрайвера.Добавить("ДрайверАтолФискальныеРегистраторы8X");
	УдаляемыеДрайвера.Добавить("ДрайверВерсияТФискальныеРегистраторы");
	УдаляемыеДрайвера.Добавить("ДрайверДримкасФискальныеРегистраторыVikiPrint");
	УдаляемыеДрайвера.Добавить("ДрайверИскраФискальныеРегистраторыПрим");
	УдаляемыеДрайвера.Добавить("ДрайверККСФискальныеРегистраторы");
	УдаляемыеДрайвера.Добавить("ДрайверКристаллСервисФискальныеРегистраторыPirit");
	УдаляемыеДрайвера.Добавить("ДрайверОРИОНФискальныеРегистраторы");
	УдаляемыеДрайвера.Добавить("ДрайверШтрихМФискальныеРегистраторы");
	УдаляемыеДрайвера.Добавить("ДрайверШтрихМФискальныеРегистраторыУниверсальный");
	
	// Дисплеи покупателя
	УдаляемыеДрайвера.Добавить("ДрайверАтолДисплеиПокупателя");
	УдаляемыеДрайвера.Добавить("ДрайверСканкодДисплеиПокупателя");
	УдаляемыеДрайвера.Добавить("ДрайверШтрихМДисплеиПокупателя");
	
	// Терминалы сбора данных
	УдаляемыеДрайвера.Добавить("ДрайверАтолТерминалыСбораДанных");
	УдаляемыеДрайвера.Добавить("ДрайверСканкодТерминалыСбораДанных");
	УдаляемыеДрайвера.Добавить("ДрайверСканситиТерминалыСбораДанных");
	УдаляемыеДрайвера.Добавить("ДрайверШтрихМТерминалыСбораДанных");
	
	// Эквайринговые терминалы
	УдаляемыеДрайвера.Добавить("ДрайверИНПАСЭквайринговыеТерминалыSmart");
	УдаляемыеДрайвера.Добавить("ДрайверСБРФЭквайринговыеТерминалы");
	
	// Электронные весы
	УдаляемыеДрайвера.Добавить("ДрайверШтрихМЭлектронныеВесы");
	
	// Весы с печатью этикеток
	УдаляемыеДрайвера.Добавить("ДрайверACOMВесыСПечатьюЭтикеток");
	УдаляемыеДрайвера.Добавить("ДрайверШтрихМВесыСПечатьюЭтикеток");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка КАК Ссылка,
	|	ДрайверыОборудования.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СтрНачинаетсяС(Выборка.ИмяПредопределенныхДанных, "#") Тогда
			УдаляемыеДрайвера.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйДрайвер Из УдаляемыеДрайвера Цикл
		
		Если ТипЗнч(УдаляемыйДрайвер) = Тип("Строка") Тогда
			Попытка
				СправочникСсылка = Справочники.ДрайверыОборудования[УдаляемыйДрайвер];
			Исключение
				СправочникСсылка = Неопределено;
			КонецПопытки;
		Иначе
			СправочникСсылка = УдаляемыйДрайвер;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьОтложеннуюОчередьОбработчиковОбновления() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбновления.ИмяОбработчика КАК ИмяОбработчика,
	|	ОбработчикиОбновления.Статус КАК Статус,
	|	ОбработчикиОбновления.Версия КАК Версия,
	|	ОбработчикиОбновления.ИмяБиблиотеки КАК ИмяБиблиотеки,
	|	ОбработчикиОбновления.ДлительностьОбработки КАК ДлительностьОбработки,
	|	ОбработчикиОбновления.РежимВыполнения КАК РежимВыполнения,
	|	ОбработчикиОбновления.ВерсияРегистрации КАК ВерсияРегистрации,
	|	ОбработчикиОбновления.ВерсияПорядок КАК ВерсияПорядок,
	|	ОбработчикиОбновления.Идентификатор КАК Идентификатор,
	|	ОбработчикиОбновления.ЧислоПопыток КАК ЧислоПопыток,
	|	ОбработчикиОбновления.СтатистикаВыполнения КАК СтатистикаВыполнения,
	|	ОбработчикиОбновления.ИнформацияОбОшибке КАК ИнформацияОбОшибке,
	|	ОбработчикиОбновления.Комментарий КАК Комментарий,
	|	ОбработчикиОбновления.Приоритет КАК Приоритет,
	|	ОбработчикиОбновления.ПроцедураПроверки КАК ПроцедураПроверки,
	|	ОбработчикиОбновления.ПроцедураЗаполненияДанныхОбновления КАК ПроцедураЗаполненияДанныхОбновления,
	|	ОбработчикиОбновления.ОчередьОтложеннойОбработки КАК ОчередьОтложеннойОбработки,
	|	ОбработчикиОбновления.ЗапускатьТолькоВГлавномУзле КАК ЗапускатьТолькоВГлавномУзле,
	|	ОбработчикиОбновления.ЗапускатьИВПодчиненномУзлеРИБСФильтрами КАК ЗапускатьИВПодчиненномУзлеРИБСФильтрами,
	|	ОбработчикиОбновления.Многопоточный КАК Многопоточный,
	|	ОбработчикиОбновления.ОбработкаПорцииЗавершена КАК ОбработкаПорцииЗавершена,
	|	ОбработчикиОбновления.ГруппаОбновления КАК ГруппаОбновления,
	|	ОбработчикиОбновления.ИтерацияЗапуска КАК ИтерацияЗапуска,
	|	ОбработчикиОбновления.ОбрабатываемыеДанные КАК ОбрабатываемыеДанные,
	|	ОбработчикиОбновления.РежимВыполненияОтложенногоОбработчика КАК РежимВыполненияОтложенногоОбработчика,
	|	ОбработчикиОбновления.ИзменяемыеОбъекты КАК ИзменяемыеОбъекты,
	|	ОбработчикиОбновления.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные
	|ИЗ
	|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
	|ГДЕ
	|	ОбработчикиОбновления.ИмяОбработчика = &ИмяОбработчика
	|	И НЕ ОбработчикиОбновления.Статус = &Статус
	|	И ОбработчикиОбновления.ОчередьОтложеннойОбработки = &ОчередьОтложеннойОбработки";
	
	Запрос.УстановитьПараметр("ИмяОбработчика", "Справочники.МаршрутыПодписания.ОбработатьДанныеДляПереходаНаНовуюВерсию");
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОбработчиковОбновления.Выполнен);
	Запрос.УстановитьПараметр("ОчередьОтложеннойОбработки", 4);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		МенеджерЗаписей = РегистрыСведений.ОбработчикиОбновления.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписей, ВыборкаДетальныеЗаписи);
		МенеджерЗаписей.ОчередьОтложеннойОбработки = 1;
		МенеджерЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвойствоХраненияИсторииКонтактнойИнформации() Экспорт
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	ПараметрыВида.ХранитьИсториюИзменений = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	ПараметрыВида.ХранитьИсториюИзменений = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура ЗаполнитьДокументыТелефонныйЗвонок() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТелефонныйЗвонок.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
				   |ГДЕ
				   |	ТелефонныйЗвонок.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				   |	ИЛИ ТелефонныйЗвонок.ПодразделениеКомпании = ЗНАЧЕНИЕ(Справочник.ПодразделенияКомпании.ПустаяСсылка)
				   |	ИЛИ ТелефонныйЗвонок.ПодразделениеОтветственного = ЗНАЧЕНИЕ(Справочник.ПодразделенияКомпании.ПустаяСсылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		ТелефонныйЗвонокОбъект = ВыборкаРезультатаЗапроса.Ссылка.ПолучитьОбъект();
		
		сфпСофтФонПроСерверПереопределяемый.ЗаполнитьОбщиеРеквизиты(ТелефонныйЗвонокОбъект);
		
		ТелефонныйЗвонокОбъект.ОбменДанными.Загрузка = Истина;

		ТелефонныйЗвонокОбъект.Записать();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УстановитьСвойствоХраненияИсторииКонтактнойИнформации_6_1_05_02() Экспорт
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	ПараметрыВида.ХранитьИсториюИзменений = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ПараметрыВида.ХранитьИсториюИзменений = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонПодразделенияКомпании);
	ПараметрыВида.ХранитьИсториюИзменений = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ЮрАдресПодразделенияКомпании);
	ПараметрыВида.ХранитьИсториюИзменений = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура ЗаполнитьТипыРаботТипыАвтомобилейТипыРесурсовПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Исполнитель
	|	И Сотрудники.ТипРесурса = ЗНАЧЕНИЕ(Справочник.ТипыРесурсов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Цеха.Ссылка
	|ИЗ
	|	Справочник.Цеха КАК Цеха
	|ГДЕ
	|	Цеха.ТипРесурса = ЗНАЧЕНИЕ(Справочник.ТипыРесурсов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Автоработы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Автоработы КАК Автоработы
	|ГДЕ
	|	Автоработы.Тип = ЗНАЧЕНИЕ(Справочник.ТипыАвторабот.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Модели.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Модели КАК Модели
	|ГДЕ
	|	Модели.ТипАвтомобиля = ЗНАЧЕНИЕ(Справочник.ТипыАвтомобилей.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыКомплектации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВариантыКомплектации КАК ВариантыКомплектации
	|ГДЕ
	|	ВариантыКомплектации.ТипАвтомобиля = ЗНАЧЕНИЕ(Справочник.ТипыАвтомобилей.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТипыРесурсовДоступныеТипыАвторабот.Ссылка КАК Ссылка,
	|	ТипыРесурсовДоступныеТипыАвторабот.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Справочник.ТипыРесурсов.ДоступныеТипыАвторабот КАК ТипыРесурсовДоступныеТипыАвторабот
	|ГДЕ
	|	ТипыРесурсовДоступныеТипыАвторабот.ТипАвтоработы = ЗНАЧЕНИЕ(Справочник.ТипыАвторабот.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТипыРесурсовДоступныеТипыАвтомобилей.Ссылка КАК Ссылка,
	|	ТипыРесурсовДоступныеТипыАвтомобилей.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Справочник.ТипыРесурсов.ДоступныеТипыАвтомобилей КАК ТипыРесурсовДоступныеТипыАвтомобилей
	|ГДЕ
	|	ТипыРесурсовДоступныеТипыАвтомобилей.ТипАвтомобиля = ЗНАЧЕНИЕ(Справочник.ТипыАвтомобилей.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТипыРесурсов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втТипыРесурсов
	|ИЗ
	|	Справочник.ТипыРесурсов КАК ТипыРесурсов
	|ГДЕ
	|	НЕ ТипыРесурсов.ДоступныеТипыАвторабот.НомерСтроки В (1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТипыРесурсов.Ссылка
	|ИЗ
	|	Справочник.ТипыРесурсов КАК ТипыРесурсов
	|ГДЕ
	|	НЕ ТипыРесурсов.ДоступныеТипыАвтомобилей.НомерСтроки В (1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТипыРесурсов.Ссылка КАК Ссылка
	|ИЗ
	|	втТипыРесурсов КАК втТипыРесурсов";
	Результат = Запрос.ВыполнитьПакет();
	
	// Сотрудники
	Выборка = Результат[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		СотрудникЦехОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СотрудникЦехОбъект.ТипРесурса = Справочники.ТипыРесурсов.ПоУмолчанию;
		СотрудникЦехОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			СотрудникЦехОбъект.Записать();
		Исключение
			Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.Сотрудники") Тогда
				ИмяСправочника = НСтр("ru = 'Сотрудники'");
			Иначе
				ИмяСправочника = НСтр("ru = 'Цеха'");
			КонецЕсли;
			ЗаписьЖурналаРегистрации(
				СтрШаблон(
					НСтр(
						"ru = 'Ошибка обновления справочника %1'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
					),
					ИмяСправочника
				),
				УровеньЖурналаРегистрации.Предупреждение,
				, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
	КонецЦикла;
	
	// Автоработы
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		АвтоработаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		АвтоработаОбъект.Тип = Справочники.ТипыАвторабот.ПоУмолчанию;
		АвтоработаОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			АвтоработаОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр(
					"ru = 'Ошибка обновления справочника Автоработы'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
				),
				УровеньЖурналаРегистрации.Предупреждение,
				, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
	КонецЦикла;
	
	// Модели
	Выборка = Результат[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		МодельОбъект = Выборка.Ссылка.ПолучитьОбъект();
		МодельОбъект.ТипАвтомобиля = Справочники.ТипыАвтомобилей.ПоУмолчанию;
		МодельОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			МодельОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр(
					"ru = 'Ошибка обновления справочника Модели'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
				),
				УровеньЖурналаРегистрации.Предупреждение,
				, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
	КонецЦикла;
	
	// Варианты комплектации
	Выборка = Результат[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		ВариантКомплектацииОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВариантКомплектацииОбъект.ТипАвтомобиля = Справочники.ТипыАвтомобилей.ПоУмолчанию;
		ВариантКомплектацииОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ВариантКомплектацииОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр(
					"ru = 'Ошибка обновления справочника Модели'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
				),
				УровеньЖурналаРегистрации.Предупреждение,
				, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
	КонецЦикла;
	
	// Типы реусрсов доступные типы авторабот
	Выборка = Результат[4].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТипРесурсаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Строка = ТипРесурсаОбъект.ДоступныеТипыАвторабот.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если Не Строка = Неопределено Тогда
			Строка.ТипАвтоработы = Справочники.ТипыАвторабот.ПоУмолчанию;
		КонецЕсли;
		ТипРесурсаОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ТипРесурсаОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр(
					"ru = 'Ошибка обновления справочника Типы ресурсов'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
				),
				УровеньЖурналаРегистрации.Предупреждение,
				, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
	КонецЦикла;
	
	// типы ресурсов доступные типы автомобилей
	Выборка = Результат[5].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТипРесурсаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Строка = ТипРесурсаОбъект.ДоступныеТипыАвтомобилей.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если Не Строка = Неопределено Тогда
			Строка.ТипАвтомобиля = Справочники.ТипыАвтомобилей.ПоУмолчанию;
		КонецЕсли;
		ТипРесурсаОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ТипРесурсаОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр(
					"ru = 'Ошибка обновления справочника Типы ресурсов'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
				),
				УровеньЖурналаРегистрации.Предупреждение,
				, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
	КонецЦикла;
	
	// Типы ресурсов пустые ТЧ
	Выборка = Результат[7].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТипРесурсаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ТипРесурсаОбъект.ДоступныеТипыАвтомобилей.Количество() = 0 Тогда
			НоваяСтрока = ТипРесурсаОбъект.ДоступныеТипыАвтомобилей.Добавить();
			НоваяСтрока.ТипАвтомобиля = Справочники.ТипыАвтомобилей.ПоУмолчанию;
		КонецЕсли;
		Если ТипРесурсаОбъект.ДоступныеТипыАвторабот.Количество() = 0 Тогда
			НоваяСтрока = ТипРесурсаОбъект.ДоступныеТипыАвторабот.Добавить();
			НоваяСтрока.ТипАвтоработы = Справочники.ТипыАвторабот.ПоУмолчанию;
		КонецЕсли;
		ТипРесурсаОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ТипРесурсаОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр(
					"ru = 'Ошибка обновления справочника Типы ресурсов'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
				),
				УровеньЖурналаРегистрации.Предупреждение,
				, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти