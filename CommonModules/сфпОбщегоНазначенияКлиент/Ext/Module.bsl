#Область ПрограммныйИнтерфейс

// Возвращает ссылку на общий модуль или модуль менеджера по имени.
//
// Параметры:
//  Имя - Строка - имя общего модуля.
//
// Возвращаемое значение:
//  ОбщийМодуль, МодульМенеджераОбъекта - общий модуль.
//
// Пример:
//	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОбновлениеКонфигурации") Тогда
//		МодульОбновлениеКонфигурацииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбновлениеКонфигурацииКлиент");
//		МодульОбновлениеКонфигурацииКлиент.<Имя метода>();
//	КонецЕсли;
//
//	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
//		МодульПолнотекстовыйПоискКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолнотекстовыйПоискКлиент");
//		МодульПолнотекстовыйПоискКлиент.<Имя метода>();
//	КонецЕсли;
//
Функция сфпОбщийМодуль(Имя) Экспорт
	
	Модуль = Вычислить(Имя);
	
	#Если НЕ ВебКлиент Тогда
		// В веб-клиенте не проверяется
		// т.к. при обращении к модулям с вызовом сервера типа такого модуля в веб-клиенте не существует.
	
		Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
			ВызватьИсключение сфпСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
		КонецЕсли;
	#КонецЕсли
	
	Возврат Модуль;

КонецФункции

#Область РаботаССохранениемЗагрузкойРезультатовОтчетов
	
// Функция открывает форму заполнения по результатам отчета, возвращает имя сохраненного списка
//  или "Неопределено" в случае нажатия кнопки "Отмена".
//
// Параметры:
//  ЭтаФорма			 - УправляемаяФорма	 - Форма
//  ОписаниеОповещения	 - ОписаниеОповещения - Используется для описания вызова процедуры программного модуля.
//
Процедура ОткрытьФормуЗаполненияПоРезультатамОтчета(ЭтаФорма, ОписаниеОповещения) Экспорт
	ПараметрыФормы = Новый Структура("Режим", "Загрузка");
	ОткрытьФорму("ОбщаяФорма.сфпСохранениеЗагрузкаРезультатовОтчетов", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // ОткрытьФормуЗаполненияПоРезультатамОтчета()

// Процедура устанавливает отбор по результатам отчета.
//
// Параметры:
//	НаименованиеСохраненногоРезультата	- Строка	- Наименование сохраненного результата.
//	ИмяПоля								- Строка	- Имя поля.
//	Настройки							- Структура	- Настройки
//	ПользовательскиеНастройки			- Структура	- Пользовательские настройки.
//
Процедура УстановитьОтборПоСпискуРезультатаОтчета(НаименованиеСохраненногоРезультата, ИмяПоля, Настройки, ПользовательскиеНастройки) Экспорт
	Список = сфпСофтФонПроСервер.ПолучитьСохраненныйРезультатОтчетаПоНаименованию(НаименованиеСохраненногоРезультата);
	Если Список = Неопределено Тогда Возврат; КонецЕсли;
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = Настройки.Отбор;
	Иначе
		Отбор = Настройки;
	КонецЕсли;
	ОтборПользовательский = Неопределено;
	ЭлементОтбора = Неопределено;
	Если ЗначениеЗаполнено(Отбор.ИдентификаторПользовательскойНастройки) Тогда
		ОтборПользовательский = ПользовательскиеНастройки.Элементы.Найти(Отбор.ИдентификаторПользовательскойНастройки);
		Если ОтборПользовательский <> Неопределено Тогда
			МодульОбщегоНазначенияКлиентСервер = сфпОбщегоНазначенияКлиент.сфпОбщийМодуль("ОбщегоНазначенияКлиентСервер");
			НайденныеЭлементы = МодульОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОтборПользовательский, ИмяПоля);
			Для Каждого НайденныйЭлемент Из НайденныеЭлементы Цикл
				НайденныйЭлемент.Использование = Ложь;
				Если ЭлементОтбора = Неопределено И НайденныйЭлемент.Родитель = Неопределено Тогда
					ЭлементОтбора = НайденныйЭлемент;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	бИспользуетсяПользовательскоеПолеОтбора = Ложь;
	МодульОбщегоНазначенияКлиентСервер = сфпОбщегоНазначенияКлиент.сфпОбщийМодуль("ОбщегоНазначенияКлиентСервер");
	НайденныеЭлементы = МодульОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Отбор, ИмяПоля);
	Для Каждого НайденныйЭлемент Из НайденныеЭлементы Цикл
		Если ЗначениеЗаполнено(НайденныйЭлемент.ИдентификаторПользовательскойНастройки) Тогда
			ЭлементОтбораПользовательский = ПользовательскиеНастройки.Элементы.Найти(НайденныйЭлемент.ИдентификаторПользовательскойНастройки);
			Если ЭлементОтбораПользовательский = Неопределено Тогда
				НайденныйЭлемент.Использование = Ложь;
			Иначе
				ЭлементОтбораПользовательский.Использование = Ложь;
				Если ЭлементОтбора = Неопределено Тогда
					ЭлементОтбора = ЭлементОтбораПользовательский;
					бИспользуетсяПользовательскоеПолеОтбора = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НайденныйЭлемент.Использование = Ложь;
		КонецЕсли;
		Если ОтборПользовательский = Неопределено И ЭлементОтбора = Неопределено И НайденныйЭлемент.Родитель = Неопределено Тогда
			ЭлементОтбора = НайденныйЭлемент;
		КонецЕсли;
	КонецЦикла;
	Если ЭлементОтбора = Неопределено Тогда
		Если ОтборПользовательский = Неопределено Тогда
			ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Иначе
			ЭлементОтбора = ОтборПользовательский.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	КонецЕсли;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Попытка
		ДоступноеПолеОтбора = Отбор.ДоступныеПоляОтбора.Элементы.Найти(Новый ПолеКомпоновкиДанных(ИмяПоля));
		ТипЗначения = ДоступноеПолеОтбора.ТипЗначения;
		Если ТипЗначения.Типы().Количество() = 0 Тогда
			ТипЗначения = Неопределено;
		КонецЕсли;
	Исключение
		ТипЗначения = Неопределено;
	КонецПопытки;
	Если ТипЗначения = Неопределено Тогда
		ЭлементОтбора.ПравоеЗначение = Список;
	Иначе
		СписокСкорректированный = Новый СписокЗначений();
		Для Каждого СтрокаСписка Из Список Цикл
			Если ТипЗначения.СодержитТип(ТипЗнч(СтрокаСписка.Значение)) Тогда
				СписокСкорректированный.Добавить(СтрокаСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		ЭлементОтбора.ПравоеЗначение = СписокСкорректированный;
	КонецЕсли;
	ЭлементОтбора.Использование = Истина;
	Если НЕ бИспользуетсяПользовательскоеПолеОтбора Тогда
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	КонецЕсли;
КонецПроцедуры // УстановитьОтборПоСпискуРезультатаОтчета()

#КонецОбласти

#КонецОбласти