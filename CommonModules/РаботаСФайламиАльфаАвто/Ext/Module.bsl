
#Область ПрограммныйИнтерфейс

// Функция распаковывает архив и выбирает из него файлы по маске
// Параметры:
//  ФайлАрхива		  - Строка, Файл - Полное имя файла.
//  КаталогРаспаковки - Строка       - Путь к каталогу, в который необходимо распаковать архив.
//  МаскаФайлов       - Строка       - Маска, по которой будет производиться поиск файлов в архиве.
//  Ошибки            - Строка       - Содержит текст ошибок.
//
// Возвращаемое значение:
//  Массив - Массив, содержащий имена найденных по маске файлов в архиве.
//
Функция РаспаковатьZIPАрхив(Знач ФайлАрхива, Знач КаталогРаспаковки, МаскаФайлов = "*.*", Ошибки = "") Экспорт
	
	Если ТипЗнч(ФайлАрхива) <> Тип("Файл") Тогда
		ФайлАрхива = Новый Файл(ФайлАрхива);
	КонецЕсли;
	
	Если НЕ ФайлАрхива.Существует() Тогда
		Ошибки = НСтр("ru = 'Указаный для распаковки файл не существует.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПустаяСтрока(КаталогРаспаковки) Тогда
		КаталогРаспаковки = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ФайлАрхива.Путь, "Tmp");
	КонецЕсли;
	
	Каталог = Новый Файл(КаталогРаспаковки);
	Если НЕ Каталог.Существует() Тогда
		СоздатьКаталог(КаталогРаспаковки);
	КонецЕсли;
	
	МаскаФайлов = СтрЗаменить(МаскаФайлов, " ", "?");
	
	Если НРег(ФайлАрхива.Расширение) = ".zip" Тогда
		ЧтениеZIP = Новый ЧтениеZIPФайла(ФайлАрхива.ПолноеИмя);
		ЧтениеZIP.ИзвлечьВсе(КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ЧтениеZIP.Закрыть();
	Иначе
		// получим путь к архиватору
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ТипПлатформыСервера = СистемнаяИнформация.ТипПлатформы;
		Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
			УстановитьПривилегированныйРежим(Истина);
			ПутьКАрхиватору = Константы.ПутьК7Zip.Получить();
			УстановитьПривилегированныйРежим(Ложь);
			
			ПроверкаФайл = Новый Файл(ПутьКАрхиватору);
			Если НЕ ПроверкаФайл.Существует() Тогда
				Ошибки = НСтр("ru = 'Указаный файл архиватора не существует.'");
				Возврат Неопределено;
			КонецЕсли;
			
			СтрокаКоманды = СтрШаблон(
				"""%1"" e ""%2"" -o ""%3"" %4 -y",
				ПутьКАрхиватору,
				ФайлАрхива.ПолноеИмя,
				КаталогРаспаковки,
				МаскаФайлов);
		Иначе
			// TODO: добавить распаковку для linux.
			Возврат Неопределено;
		КонецЕсли;
		
		ЗапуститьПриложение(СтрокаКоманды,, Истина);
	КонецЕсли;
	
	Возврат ПоследнийПоДатеФайл(НайтиФайлы(КаталогРаспаковки, МаскаФайлов, Истина))["Файл"];
	
КонецФункции //РаспаковатьZIPАрхивПрайсЛиста()

// Устанавилвает доступность команд для изображений.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из которой вызвана процедура.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
Процедура УстановитьДоступностьКомандДляИзображений(Объект, Форма) Экспорт
	
	МетаданныеСправочникаСФайлами = ПолучитьМетаданныеСправочникаХранилищаФайлов(Объект);
	Если МетаданныеСправочникаСФайлами = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресКартинки = Форма.АдресКартинки;
	УстановитьДоступностьКомандВпередНазад(Форма);
	ВладелецФайла = Объект.Ссылка;
	
	Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
		ТолькоПросмотр = Не ПравоДоступа("Редактирование", МетаданныеСправочникаСФайлами);
	Иначе
		ТолькоПросмотр = Не ПравоДоступа("Редактирование", МетаданныеСправочникаСФайлами)
		Или Не ПравоДоступа("Редактирование", ВладелецФайла.Метаданные());
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		УстановитьДоступностьКнопкиИзменения(Форма);
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьКомандДляИзображений() 

// Функция возвращает право доступа к справочнику присоединенных файлов текущего объекта
// Параметры:
//  Объект 				- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события
//
// Возвращаемое значение:
//  Булево - Есть право доступа.
//
Функция ТолькоПросмотрСправочникаХранилищаФайлов(Объект) Экспорт

	ТолькоПросмотр = Ложь;
	ВладелецФайла = Объект.Ссылка;
	МетаданныеСправочникаСФайлами  = ПолучитьМетаданныеСправочникаХранилищаФайлов(Объект);
	
	Если МетаданныеСправочникаСФайлами = Неопределено Тогда
		Возврат ТолькоПросмотр;
	КонецЕсли;
	
	Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
		ТолькоПросмотр = Не ПравоДоступа("Редактирование", МетаданныеСправочникаСФайлами);
	Иначе
		ТолькоПросмотр = Не ПравоДоступа("Редактирование", МетаданныеСправочникаСФайлами)
		Или Не ПравоДоступа("Редактирование", ВладелецФайла.Метаданные());
	КонецЕсли;
	
	Возврат ТолькоПросмотр;	
	
КонецФункции // ПолучитьПравоДоступаКСправочникуХранилищаФайлов() 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСписокКоманд()
	ИменаКоманд = Новый Массив;
	ИменаКоманд.Добавить("ДобавитьИзображение");
	ИменаКоманд.Добавить("УдалитьИзображение");
	ИменаКоманд.Добавить("АдресКартинки");
	ИменаКоманд.Добавить("НазначитьЛоготип");
	ИменаКоманд.Добавить("ОчиститьЛоготип"); 
	ИменаКоманд.Добавить("НазначитьПечать");
	ИменаКоманд.Добавить("ОчиститьПечать");
	ИменаКоманд.Добавить("ДобавитьКартинку");
	ИменаКоманд.Добавить("УдалитьКартинку");
	ИменаКоманд.Добавить("АдресИзображения");
	ИменаКоманд.Добавить("НазначитьФотографию");
	ИменаКоманд.Добавить("ОчиститьФотографию");
	ИменаКоманд.Добавить("НазначитьФаксимиле");
	ИменаКоманд.Добавить("ОчиститьФаксимиле");
	
	Возврат ИменаКоманд;
КонецФункции

Процедура УстановитьДоступностьКнопкиИзменения(Форма)
	
	ИменаКоманд = ПолучитьСписокКоманд();	
	Элементы = Форма.Элементы;           
	
	Для каждого ЭлементФормы Из Элементы Цикл
		
		Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") И ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ЭлементФормы.Доступность = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") И ИменаКоманд.Найти(ЭлементФормы.ПутьКДанным) <> Неопределено Тогда
			АдресКартинки = ?(ЭлементФормы.ПутьКДанным = "АдресКартинки", Форма.АдресКартинки, Форма.АдресИзображения);
			ЭлементФормы.Доступность = ?(АдресКартинки = "", Ложь, Истина);
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДоступностьКомандВпередНазад(Форма)
	
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	Для Каждого Реквизит Из РеквизитыФормы Цикл
		
		Если Реквизит.Имя = "АдресКартинки" Тогда
			АдресКартинки = Форма.АдресКартинки;
			
			Форма.Элементы.ПросмотрИзображенийВперед.Доступность = ?(АдресКартинки = "", Ложь, Истина);
			Форма.Элементы.ПросмотрИзображенийНазад.Доступность = ?(АдресКартинки = "", Ложь, Истина);
		ИначеЕсли Реквизит.Имя = "АдресИзображения" Тогда
			АдресКартинки = Форма.АдресИзображения;
			
			Форма.Элементы.ПросмотрКартинкиВперед.Доступность = ?(АдресКартинки = "", Ложь, Истина);
			Форма.Элементы.ПросмотрКартинкиНазад.Доступность = ?(АдресКартинки = "", Ложь, Истина);
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьМетаданныеСправочникаХранилищаФайлов(Объект)
	
	ВладелецФайла = Объект.Ссылка;
	
	ИмяСправочникаХранилищаФайлов = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(
	ВладелецФайла, "", "", "");
	ТипСправочникаСФайлами = Тип("СправочникСсылка." + ИмяСправочникаХранилищаФайлов);
	МетаданныеСправочникаСФайлами = Метаданные.НайтиПоТипу(ТипСправочникаСФайлами);
	
	Возврат МетаданныеСправочникаСФайлами;
	
КонецФункции

Функция ПоследнийПоДатеФайл(Файлы)
	
	ПоследнийФайл = Новый Структура("Файл,Дата", Неопределено, Дата(1, 1, 1));
	
	Если Файлы.Количество() = 0 Тогда
		Возврат ПоследнийФайл;
	КонецЕсли;
	
	Для Каждого Файл Из Файлы Цикл
		
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаПроверяемогоФайла = Файл.ПолучитьВремяИзменения();
		
		Если ДатаПроверяемогоФайла > ПоследнийФайл.Дата Тогда
			
			ПоследнийФайл.Файл = Файл;
			ПоследнийФайл.Дата = ДатаПроверяемогоФайла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоследнийФайл;
	
КонецФункции

#КонецОбласти