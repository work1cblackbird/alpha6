////////////////////////////////////////////////////////////////////////////////
// Менеджер защиты: Система лицензирования отраслевых и специализированных решений. 
// Область выполнения: Сервер
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Подключает внешнюю компоненту СЛК по технологии Native API. 
// Компонент может храниться в информационной базе или макете 
// конфигурации в виде двоичных данных или в ZIP-архиве.
//
// Параметры:
//  МестоположениеКомпонентыСЛК  - Строка - Местоположение внешнего компонента.
//	В качестве местоположения может использоваться: 
//	 - путь к файлу внешнего компонента в файловой системе (недоступно на веб-клиенте), не ZIP-архив; 
//	 - полное имя макета, хранящего двоичные данные или ZIP-архив; 
//	 - URL к внешнему компоненту, в виде двоичных данных или ZIP-архива, в формате, 
//	   аналогичном ПолучитьНавигационнуюСсылку.
//
// Возвращаемое значение:
//   Булево   - Истина - подключение прошло успешно
//
Функция ПодключитьКомпонентуСЛК(Знач МестоположениеКомпонентыСЛК = Неопределено, ОписаниеОшибки = "")	Экспорт

	// Подключение компоненты
	Если НЕ ПодключитьВнешнююКомпоненту(АдресКомпонентыСЛК(МестоположениеКомпонентыСЛК), "Licence", ТипВнешнейКомпоненты.Native) Тогда
		СисИнфо = Новый СистемнаяИнформация;
		ОписаниеОшибки = НСтр("ru='Ошибка подключения компоненты СЛК('") + СисИнфо.ТипПлатформы + "):
			|" + ОписаниеОшибки();
	КонецЕсли;

	Возврат Истина;
	
КонецФункции // ПодключитьКомпонентуСЛК()

// Возвращает менеджер объектов серии защиты.
//
// Параметры:
//	Серия - Строка - Уникальная серия ключей защиты СЛК
//                 
// Возвращаемое значение:
//   Структура   - Менеджер серии защиты
//
Функция ПолучитьМенеджерОбъектовСерииЗащиты(Знач Серия)	Экспорт
	
	МенеджерСерииЗащиты = ПолучитьМенеджерСерииЗащиты(Серия);	
	ПараметрыПодключения = МенеджерСерииЗащиты.ПараметрыПодключения;
	ПараметрыСвязи = ПараметрыСвязи(ПараметрыПодключения.Host, ПараметрыПодключения.Port);
	
	ПодключитьКомпонентуСЛК();
	
	// Создание объекта 
	МенеджерЛицензии = Новый("AddIn.Licence.LicenceExtension20");
	
	// Запуск
	МенеджерЛицензии.ОкноУстановкиСвязи = Ложь;
	Если ЗначениеЗаполнено(ПараметрыСвязи) Тогда
		МенеджерЛицензии.ПараметрыСвязи = ПараметрыСвязи;
	КонецЕсли;
	Если НЕ МенеджерЛицензии.Запуск(Серия, МенеджерСерииЗащиты.ТолькоНаличиеКлюча) Тогда
		слкМенеджерЗащиты.ВызватьИсключениеСЛК(МенеджерЛицензии.ПолучитьОписаниеОшибки(), Серия);
	КонецЕсли;
	
	Защита = Неопределено;
	// Обход ошибки обычного приложения
	Если ТекущийРежимЗапуска() <> РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		Попытка
			Защита = Новый ("ОписаниеЗащитыОтОпасныхДействий");
			Защита.ПредупреждатьОбОпасныхДействиях = Ложь;
		Исключение
			// Исключение возможно на предыдущих версиях платформы без механизма
			// защиты от опасных действий
		КонецПопытки;
	КонецЕсли;
	
	// Создание менеджера объектов
	Попытка
		Если Защита = Неопределено Тогда
			// Предыдущие версии платформы без механизма защиты
			МенеджерОбъектов = ВнешниеОбработки.Создать(МенеджерЛицензии.МенеджерОбъектов, БезопасныйРежим());
		Иначе
			МенеджерОбъектов = ВнешниеОбработки.Создать(
				ВнешниеОбработки.Подключить(
					ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(МенеджерЛицензии.МенеджерОбъектов)), , БезопасныйРежим(), Защита));
		КонецЕсли;
		
	Исключение
		слкМенеджерЗащиты.ВызватьИсключениеСЛК(НСтр("ru = 'Ошибка создания менеджера объектов СЛК: '") + ОписаниеОшибки(), Серия);
	КонецПопытки;
	
	// Установка менеджера лицензий с проверкой установленной версии компоненты защиты
	ТекстОшибки = "";
	флСтартНовойЗащиты = Ложь;
	Попытка
		МенеджерОбъектов.УстановитьМенеджерЛицензий(МенеджерЛицензии, Защита);
		флСтартНовойЗащиты = Истина;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если Не флСтартНовойЗащиты Тогда 
		флСтартСтаройЗащиты = Ложь;
		Попытка
			МенеджерОбъектов.УстановитьМенеджерЛицензий(МенеджерЛицензии);
			флСтартСтаройЗащиты = Истина;
		Исключение
		КонецПопытки;
		
		Если флСтартСтаройЗащиты Тогда 
			слкМенеджерЗащиты.ВызватьИсключениеСЛК(НСтр("ru = 'Ошибка создания менеджера объектов СЛК: используется устаревшая версия компоненты СЛК.'"), Серия);
		Иначе
			слкМенеджерЗащиты.ВызватьИсключениеСЛК(НСтр("ru = 'Ошибка создания менеджера объектов СЛК: '") + ТекстОшибки, Серия);
		КонецЕсли;
	КонецЕсли;
	
	Если МенеджерОбъектов.ПопыткаПроверитьЛицензиюСеанса(МенеджерСерииЗащиты.ТолькоНаличиеКлюча) Тогда
		
		// Загрузка файлов данных
		ЗагрузитьФайлыДанных(Серия, МенеджерСерииЗащиты, МенеджерОбъектов, Истина);		
		
		ИнициализироватьСериюЗащиты(Серия, МенеджерСерииЗащиты.ТолькоНаличиеКлюча);
		
	Иначе
		слкМенеджерЗащиты.ВызватьИсключениеСЛК(МенеджерОбъектов.ПолучитьОписаниеОшибки(), Серия);
	КонецЕсли;
	
	Возврат МенеджерОбъектов;

КонецФункции // ПолучитьМенеджерОбъектовСерииЗащиты()

// Возвращает менеджер серии защиты. Структура, содержащая МенеджерОбъектов СЛК и 
// описывающая  параметры подключения серии защиты.
//
// Параметры:
//	Серия - Строка - Уникальная серия ключей защиты СЛК
//                 
// Возвращаемое значение:
//   Соответствие   - Соответствие параметров подключения сериям ключей защиты
//
Функция ПолучитьМенеджерСерииЗащиты(Знач Серия)	Экспорт
	
	Если ПравоДоступа("Установка", Метаданные.ПараметрыСеанса.слкМенеджерЗащиты,,) = Ложь Тогда
		слкМенеджерЗащиты.ВызватьИсключениеСЛК(НСтр("ru = 'Доступ к системе лицензирования недоступен для пользователя!
		|Обратитесь к администратору.'"), Серия);
	КонецЕсли;
	
	МенеджерСерииЗащиты = слкМенеджерЗащитыПовтИсп.ПолучитьМенеджерЗащиты().Получить(Серия);
	
	Если МенеджерСерииЗащиты = Неопределено Тогда
		слкМенеджерЗащиты.ВызватьИсключениеСЛК(СтрШаблон(НСтр("ru = 'Серия ключей %1 недоступна для пользователя'"), Серия), Серия);
	КонецЕсли;
	
	Возврат МенеджерСерииЗащиты;

КонецФункции // ПолучитьМенеджерСерииЗащиты()

// Освобождает лицензию сеанса и удаляет менеджер объекта из 
// описания менеджера серии защиты. Для последующего обращения к
// менеджеру серии защиты требуется повторная инициализация серии.
//
// Параметры:
//	Серия - Строка, Неопределено - Уникальная серия ключей защиты СЛК. Если серия не указана,
//					удаляются менеджеры объектов всех серий защиты.
//  ОписаниеОшибки  - Строка - Информация об ошибке полученная вызовом функции 
//						СЛК ПолучитьОписаниеОшибки (описание последней ошибки)
//                 
// Возвращаемое значение:
//   Булево   - Результат удаления серии защиты ( или менеджеров всех серий защиты)
//
Функция УдалитьМенеджерСерииЗащиты(Знач Серия = Неопределено, ОписаниеОшибки = "")	Экспорт
	
	ЭтоКлиентСервернаяБаза = слкМенеджерЗащитыПовтИсп.ЭтоКлиентСервернаяБаза();
	
	Если Серия = Неопределено Тогда
		
		МенеджерЗащиты = слкМенеджерЗащитыПовтИсп.ПолучитьМенеджерЗащиты();
		Для каждого МенеджерСерииЗащиты Из МенеджерЗащиты Цикл
			
			Если ЭтоКлиентСервернаяБаза
				И слкМенеджерЗащитыСервер.СерияЗащитыИнициализирована(МенеджерСерииЗащиты.Ключ) Тогда
				Попытка
					слкМенеджерЗащиты.ПолучитьМенеджерОбъектовСерииЗащиты(МенеджерСерииЗащиты.Ключ).ОсвободитьЛицензиюСеанса();
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
			
			ЗаполнитьПоНастройкамПараметрыПодключения(МенеджерСерииЗащиты.Значение.ПараметрыПодключения, МенеджерСерииЗащиты.Ключ);			
			
			УдалитьИнициализациюСерииЗащиты(МенеджерСерииЗащиты.Ключ);
			
		КонецЦикла;
		
		ОбновитьПовторноИспользуемыеЗначения();
		
	Иначе
		МенеджерСерииЗащиты = слкМенеджерЗащитыПовтИсп.ПолучитьМенеджерСерииЗащиты(Серия);
		Если МенеджерСерииЗащиты <> Неопределено Тогда
				
			Если ЭтоКлиентСервернаяБаза
				И слкМенеджерЗащитыСервер.СерияЗащитыИнициализирована(Серия) Тогда
				Попытка
					слкМенеджерЗащиты.ПолучитьМенеджерОбъектовСерииЗащиты(Серия).ОсвободитьЛицензиюСеанса();
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
			
			ЗаполнитьПоНастройкамПараметрыПодключения(МенеджерСерииЗащиты.ПараметрыПодключения, Серия);
			
			УдалитьИнициализациюСерииЗащиты(Серия);
			ОбновитьПовторноИспользуемыеЗначения();
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // УдалитьМенеджерСерииЗащиты()

// Определяет и возвращает параметры серий ключей защиты, определенных в конфигураци
// В зависимости от параметра Активные - возвращаются параметры или всех серий или
// доступные по установленным пользователю сеанса ролям
//
// Параметры:
//  Активные - Булево - только доступные по установленным пользователю сеанса ролям
//                 
// Возвращаемое значение:
//   Соответствие   - Соответствие параметров подключения сериям ключей защиты
//
Функция ПолучитьМенеджерЗащиты(Знач Активные = Ложь)	Экспорт

	МенеджерЗащиты = Новый Соответствие;
	
	ПользовательЗащиты = ?(Активные, ПользователиИнформационнойБазы.ТекущийПользователь(), Неопределено);	
	МассивПодсистемСЛК = ПолучитьПодсистемыСЛК(ПользовательЗащиты);
	
	Для каждого ПодсистемаСЛК Из МассивПодсистемСЛК Цикл
		
		// Серия ключей должна быть уникальна
		Если МенеджерЗащиты.Получить(ПодсистемаСЛК.Комментарий) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗащиты.Вставить(ПодсистемаСЛК.Комментарий, СтруктураСерииКлючейЗащиты(ПодсистемаСЛК.Комментарий, ПодсистемаСЛК));
		
	КонецЦикла;
	
	слкМенеджерЗащитыПереопределяемый.ПереопределитьСерииКлючейКонфигурации(МенеджерЗащиты, Активные);
	
	Возврат МенеджерЗащиты;

КонецФункции // ПолучитьМенеджерЗащиты()

#Область ПараметрыСеансаСерийЗащиты

// Для вызова из обработчика УстановкаПараметровСеанса модуля сеанса.
//
// Параметры:
//  ИменаПараметровСеанса - Массив, Неопределено - в массиве имена параметров 
//							сеанса для инициализации.
//                 
// Возвращаемое значение:
//   Массив   - Возвращает массив имен установленных параметров сеанса.
//
Функция УстановкаПараметровСеанса(Знач ИменаПараметровСеанса) Экспорт
	
	// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
	// следует инициализировать сразу группой. Для того, чтобы избежать их повторной инициализации,
	// имена уже установленных параметров сеанса сохраняются в массиве УстановленныеПараметры.
	УстановленныеПараметры = Новый Массив;
	
	Если ИменаПараметровСеанса = Неопределено Тогда
		// Раздел установки параметров сеанса при начале сеанса (ИменаПараметровСеанса = Неопределено)
		// Выполняется установка параметров сеанса, которые можно инициализировать 
		// при начале работы системы.
		
		Возврат УстановленныеПараметры;
	КонецЕсли;

	Если ИменаПараметровСеанса.Найти("слкМенеджерЗащиты") <> Неопределено Тогда
		
		ПараметрыСеанса.слкМенеджерЗащиты = "";
		УстановленныеПараметры.Добавить("слкМенеджерЗащиты");
		
	КонецЕсли;
	
	слкМенеджерЗащитыПереопределяемый.ПереопределитьПараметрыСеанса(УстановленныеПараметры, ИменаПараметровСеанса);
	
	Возврат УстановленныеПараметры;
	
КонецФункции

// Возвращает менеджер объектов серии защиты.
//
// Параметры:
//	Серия - Строка - Уникальная серия ключей защиты СЛК
//	ТолькоНаличиеКлюча - Булево - Контролировать только наличие ключа
//
// Возвращаемое значение:
//   Булево   - Серия защиты инициализирована в текущем сеансе
//
Функция СерияЗащитыИнициализирована(Знач Серия, ТолькоНаличиеКлюча = Ложь)	Экспорт
	
	МассивСерий = Новый Массив;
	МассивСерийЗащиты = СтрРазделить(ПараметрыСеанса.слкМенеджерЗащиты, ";", Ложь);
		
	Для каждого СерияЗащиты Из МассивСерийЗащиты Цикл
		
		МассивСерии = СтрРазделить(СерияЗащиты, ",");
				
		Если МассивСерии[0] = Серия Тогда
			ТолькоНаличиеКлюча = ?(МассивСерии[1] = "0", Ложь, Истина);
			Возврат Истина;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции // ПолучитьМенеджерОбъектовСерииЗащиты()

// Возвращает менеджер объектов серии защиты.
//
// Параметры:
//	Серия - Строка - Уникальная серия ключей защиты СЛК
//	ТолькоНаличиеКлюча - Булево - Контролировать только наличие ключа
//                 
Процедура ИнициализироватьСериюЗащиты(Знач Серия, ТолькоНаличиеКлюча = Ложь)
	
	Если СерияЗащитыИнициализирована(Серия) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСерииЗащиты = Серия + "," + ?(ТолькоНаличиеКлюча, 1, 0);
	Если ПараметрыСеанса.слкМенеджерЗащиты <> "" Тогда
		СтрокаСерииЗащиты = ";" + СтрокаСерииЗащиты;
	КонецЕсли;
	
	ПараметрыСеанса.слкМенеджерЗащиты = ПараметрыСеанса.слкМенеджерЗащиты + СтрокаСерииЗащиты;

КонецПроцедуры // ИнициализироватьСериюЗащиты()

// Возвращает менеджер объектов серии защиты.
//
// Параметры:
//	Серия - Строка - Уникальная серия ключей защиты СЛК
//                 
Процедура УдалитьИнициализациюСерииЗащиты(Знач Серия)
	
	МассивСерийЗащиты = СтрРазделить(ПараметрыСеанса.слкМенеджерЗащиты, ";", Ложь);
		
	СерияЗащитыКУдалению = Неопределено;
	Для каждого СерияЗащиты Из МассивСерийЗащиты Цикл
		МассивСерии = СтрРазделить(СерияЗащиты, ",");
				
		Если МассивСерии[0] = Серия Тогда
			СерияЗащитыКУдалению = СерияЗащиты;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Если СерияЗащитыКУдалению <> Неопределено Тогда
		МассивСерийЗащиты.Удалить(МассивСерийЗащиты.Найти(СерияЗащитыКУдалению));
		ПараметрыСеанса.слкМенеджерЗащиты = СтрСоединить(МассивСерийЗащиты, ";");
	КонецЕсли;

КонецПроцедуры // ИнициализироватьСериюЗащиты()

#КонецОбласти

#Область РаботаСНастройкамиМенеджераЗащиты

// Возвращает настройки подключения серии защиты из персональных настроек пользователя или 
// общих настроек всех пользователей.
// Более приоритетными являются персональные настройки пользователя.
//
// Параметры:
//	Серия - Строка, Неопределено - Уникальная серия ключей защиты СЛК. Если серия не указана,
//					возращается пустая структура настроек менеджера серии защиты.
//  КлючНастроек  - Строка - Ключ загружаемых настроек.
//							Значение по умолчанию: "ПараметрыПодключения".
//                 
// Возвращаемое значение:
//   Структура   - Настройки менеджера серии защиты
//
Функция ПолучитьНастройкиМенеджераСерииЗащиты(Знач Серия = Неопределено, Знач КлючНастроек = "ПараметрыПодключения")	Экспорт
	
	// Возврат пустой структуры для заполнения
	Если Серия = Неопределено Тогда
		Возврат СтруктураПараметровПодключенияСерииКлючейЗащиты();
	КонецЕсли;
	
	// Персональные настройки пользователя
	НастройкиМенеджераЗащиты = ПолучитьНастройкиМенеджераЗащиты(КлючНастроек, СокрЛП(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор));
	
	НастройкиМенеджераСерииЗащиты = НастройкиМенеджераЗащиты.Получить(Серия);
	Если НастройкиМенеджераСерииЗащиты <> Неопределено Тогда
		Возврат НастройкиМенеджераСерииЗащиты;
	КонецЕсли;
	
	Возврат ПолучитьНастройкиМенеджераЗащиты(КлючНастроек).Получить(Серия);
	
КонецФункции

// Сохраняет настройки подключения серии защиты в общих настройках всех пользователей.
//
// Параметры:
//	Серия - Строка - Уникальная серия ключей защиты СЛК.
//	ЗначениеНастройки - Структура - Значение настройки подключения серии защиты.
//  КлючНастроек  - Строка - Ключ загружаемых настроек.
//							Значение по умолчанию: "ПараметрыПодключения".
//                 
// Возвращаемое значение:
//   Булево   - Результат сохранения общих настроек
//
Функция СохранитьНастройкиМенеджераСерииЗащиты(Знач Серия, Знач ЗначениеНастройки, Знач КлючНастроек = "ПараметрыПодключения")	Экспорт
	
	НастройкиМенеджераЗащиты = ПолучитьНастройкиМенеджераЗащиты(КлючНастроек);
	НастройкиМенеджераЗащиты.Вставить(Серия, ЗначениеНастройки);
	
	ОтключитьСериюЗащиты(Серия);
	
	НастройкиСохранены = СохранитьНастройкиМенеджераЗащиты(НастройкиМенеджераЗащиты);
	Если НастройкиСохранены Тогда
		ОтключитьСериюЗащиты(Серия);
	КонецЕсли;
	
	Возврат НастройкиСохранены;
	
КонецФункции

// Сохраняет настройки подключения серии защиты в персональных настройках пользователя.
//
// Параметры:
//	Серия - Строка - Уникальная серия ключей защиты СЛК.
//	ЗначениеНастройки - Структура - Значение настройки подключения серии защиты.
//  КлючНастроек  - Строка - Ключ загружаемых настроек.
//							Значение по умолчанию: "ПараметрыПодключения".
//                 
// Возвращаемое значение:
//   Булево   - Результат сохранения персональных настроек
//
Функция СохранитьПерсональныеНастройкиМенеджераСерииЗащиты(Знач Серия, Знач ЗначениеНастройки, Знач КлючНастроек = "ПараметрыПодключения")	Экспорт
	
	ИмяПользователя = СокрЛП(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	
	НастройкиМенеджераЗащиты = ПолучитьНастройкиМенеджераЗащиты(КлючНастроек, ИмяПользователя);
	НастройкиМенеджераЗащиты.Вставить(Серия, ЗначениеНастройки);
	
	НастройкиСохранены = СохранитьНастройкиМенеджераЗащиты(НастройкиМенеджераЗащиты,, ИмяПользователя);
	Если НастройкиСохранены Тогда
		ОтключитьСериюЗащиты(Серия);
	КонецЕсли;
	
	Возврат НастройкиСохранены;
	
КонецФункции

// Удаляет настройки подключения серии защиты в общих настройках всех пользователей.
//
// Параметры:
//	Серия - Строка - Уникальная серия ключей защиты СЛК.
//  КлючНастроек  - Строка - Ключ удаляемых настроек.
//							Значение по умолчанию: "ПараметрыПодключения".
//                 
// Возвращаемое значение:
//   Булево   - Результат удаления общих настроек
//
Функция УдалитьНастройкиМенеджераСерииЗащиты(Знач Серия, Знач КлючНастроек = "ПараметрыПодключения")	Экспорт
	
	НастройкиМенеджераЗащиты = ПолучитьНастройкиМенеджераЗащиты(КлючНастроек);
	Если НастройкиМенеджераЗащиты.Получить(Серия) <> Неопределено Тогда
		НастройкиМенеджераЗащиты.Удалить(Серия);
		ОтключитьСериюЗащиты(Серия);
	КонецЕсли;
	
	Возврат СохранитьНастройкиМенеджераЗащиты(НастройкиМенеджераЗащиты);
	
КонецФункции

// Удаляет настройки подключения серии защиты в персональных настройках пользователя.
//
// Параметры:
//	Серия - Строка - Уникальная серия ключей защиты СЛК.
//  КлючНастроек  - Строка - Ключ удаляемых настроек.
//							Значение по умолчанию: "ПараметрыПодключения".
//                 
// Возвращаемое значение:
//   Булево   - Результат удаления персональных настроек
//
Функция УдалитьПерсональныеНастройкиМенеджераСерииЗащиты(Знач Серия, Знач КлючНастроек = "ПараметрыПодключения")	Экспорт
	
	ИмяПользователя = СокрЛП(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	
	НастройкиМенеджераЗащиты = ПолучитьНастройкиМенеджераЗащиты(КлючНастроек, ИмяПользователя);
	Если НастройкиМенеджераЗащиты.Получить(Серия) <> Неопределено Тогда
		НастройкиМенеджераЗащиты.Удалить(Серия);
		ОтключитьСериюЗащиты(Серия);
	КонецЕсли;
	
	Возврат СохранитьНастройкиМенеджераЗащиты(НастройкиМенеджераЗащиты, , ИмяПользователя);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеСериямиКлючей

Функция ПолучитьПодсистемыСЛК(Знач ПользовательЗащиты)
	
	МассивПодсистем = Новый Массив;
	ОтборПодсистемСЛК(МассивПодсистем, Метаданные.Подсистемы, ПользовательЗащиты);
	
	Возврат МассивПодсистем;

КонецФункции // ПолучитьТаблицуПодсистемСЛК()

Процедура ОтборПодсистемСЛК(Знач МассивПодсистемСЛК, Знач КоллекцияПодсистем, Знач ПользовательЗащиты)
	
	Если КоллекцияПодсистем.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗащитыМетаданные = Метаданные.ПараметрыСеанса.слкМенеджерЗащиты;
	Для каждого Подсистема Из КоллекцияПодсистем Цикл
		
		// Реурсивный отбор вложенных подсистем
		ОтборПодсистемСЛК(МассивПодсистемСЛК, Подсистема.Подсистемы, ПользовательЗащиты);
		
		// Комментарий подсистемы должен содержать номер серии ключа защиты			
		Если НЕ ЭтоНомерСерииКлючаЗащитыСЛК(Подсистема.Комментарий) Тогда
			Продолжить;
		КонецЕсли;
		
		// Состав подсистемы должен включать Менеджер защиты
		Если НЕ Подсистема.Состав.Содержит(МенеджерЗащитыМетаданные) Тогда
			Продолжить;
		КонецЕсли;
		
		// Состав подсистемы должен включать одну из доступных ролей пользователя
		Если ПользовательЗащиты <> Неопределено
			И НЕ СоставПодсистемыСодержитОднуИзРолей(Подсистема.Состав, ПользовательЗащиты.Роли) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПодсистемСЛК.Добавить(Подсистема);
		
	КонецЦикла;

КонецПроцедуры // ОтборПодсистемСЛК()

Функция ЭтоНомерСерииКлючаЗащитыСЛК(Знач СтрокаНомераСерии)

	НомерСерии = СокрЛП(СтрокаНомераСерии);
	// +СофтФон
	Если ПустаяСтрока(НомерСерии) ИЛИ СтрДлина(НомерСерии) > 4 Тогда
	// -СофтФон	
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;	

КонецФункции // ЭтоНомерСерииКлючаЗащитыСЛК()

Функция СоставПодсистемыСодержитОднуИзРолей(Знач СоставПодсистемы, Знач РолиПользователя)
	
	// Пустой пользователь
	Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Метаданные.ОбщиеМодули.Найти("УправлениеДоступом") = Неопределено Тогда
		// подсистема "Управление доступом" не интегрирована 
		Для каждого РольПользователя Из РолиПользователя Цикл
			Если СоставПодсистемы.Содержит(РольПользователя) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// в конфигурацию интегрирована подсистема "Управление доступом" 
		Для Каждого ТекОбъектПодсистемы Из СоставПодсистемы Цикл
			Если Метаданные.Роли.Содержит(ТекОбъектПодсистемы) И Вычислить("УправлениеДоступом.ЕстьРоль(ТекОбъектПодсистемы.Имя)") Тогда 	
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции // СоставПодсистемыСодержитОднуИзРолей()

Функция СтруктураСерииКлючейЗащиты(Знач Серия, Знач ПодсистемаСЛК)
	
	ПараметрыПодключения = ПараметрыПодключенияСерииКлючейЗащиты(Серия, ПодсистемаСЛК);

	СтруктураСерииКлючей = Новый Структура;
	СтруктураСерииКлючей.Вставить("Наименование", ПодсистемаСЛК.Комментарий);
	СтруктураСерииКлючей.Вставить("ПараметрыПодключения", ПараметрыПодключения);
	СтруктураСерииКлючей.Вставить("ТолькоНаличиеКлюча", ПараметрыПодключения.ФайлыДанных.Количество() = 0);
	
	Возврат СтруктураСерииКлючей;

КонецФункции // СтруктураСерииКлючейЗащиты()

Функция ПараметрыПодключенияСерииКлючейЗащиты(Знач Серия, Знач ПодсистемаСЛК)
	
	ПараметрыПодключения = СтруктураПараметровПодключенияСерииКлючейЗащиты();
	ПараметрыПодключения.Вставить("ФайлыДанных", ФайлыДанныхПодсистемыСЛК(ПодсистемаСЛК));
	
	ЗаполнитьПоНастройкамПараметрыПодключения(ПараметрыПодключения, Серия);
	слкМенеджерЗащитыПереопределяемый.ПереопределитьПараметрыПодключенияСерииКлючейЗащиты(ПараметрыПодключения, Серия);
	
	Возврат ПараметрыПодключения;
	
КонецФункции // ПараметрыПодключенияСерииКлючейЗащиты()

Процедура ЗаполнитьПоНастройкамПараметрыПодключения(ПараметрыПодключения, Знач Серия)
	
	НастройкиМенеджераСерииЗащиты = ПолучитьНастройкиМенеджераСерииЗащиты(Серия);
	Если НастройкиМенеджераСерииЗащиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, НастройкиМенеджераСерииЗащиты);	

КонецПроцедуры // ЗаполнитьПоНастройкамПараметрыПодключения()

Функция ФайлыДанныхПодсистемыСЛК(Знач ПодсистемаСЛК)

	ФайлыДанныхСЛК = Новый Соответствие;
	Для каждого ОбъектПодсистемы Из ПодсистемаСЛК.Состав Цикл
		
		// Файл данных должен в комментарии должен содержать серию ключа защиты
		Если СтрНайти(ОбъектПодсистемы.Комментарий, ПодсистемаСЛК.Комментарий) = 0 Тогда
			Продолжить;
		КонецЕсли;		
		
		// Файл данных должен быть общим макетом
		Если НЕ Метаданные.ОбщиеМакеты.Содержит(ОбъектПодсистемы) Тогда
			Продолжить;
		КонецЕсли;
		
		ФайлыДанныхСЛК.Вставить(ОбъектПодсистемы.Имя, ОбъектПодсистемы.Комментарий);		
		
	КонецЦикла;
	
	Возврат ФайлыДанныхСЛК;

КонецФункции // ФайлыДанныхПодсистемыСЛК()

#КонецОбласти

#Область ВнешняяКомпонентаСЛК

Функция АдресКомпонентыСЛК(Знач МестоположениеКомпонентыСЛК = Неопределено)
	
	Если МестоположениеКомпонентыСЛК = Неопределено Тогда
		Возврат "ОбщийМакет.слкКомпонентаЗащиты"; 
	Иначе
		Возврат МестоположениеКомпонентыСЛК;
	КонецЕсли;

КонецФункции // АдресКомпонентыСЛК()

#КонецОбласти

#Область МенеджерЗащитыСервер

// Загружает файлы данных защищенных объетов из макетов.
// Как общих макетов конфигурации, так и произвольных макетов.
//
// Параметры:
//	Серия - Строка - Уникальная серия ключей защиты
//                 
//  ФайлыДанных  - ТаблицаЗначений - Загружаемые макеты
//		Макет - Объект описания макета конфигурации, содержащего файл данных, 
//		Псевдоним - Псевдоним, по которому будут искаться объекты при создании 
//		(Важно: не должен совпадать с именем общего макета в конфигурации или 
//		 псевдонимом файла данных на сервере СЛК).
//
//	ОбновитьСуществующие - Булево - Определяет действия, если данные из 
//		указанного макета уже загружены
//
// Возвращаемое значение:
//   Булево   - Результат загрузки файлов данных
//
Функция ЗагрузитьФайлыДанных(Знач Серия, МенеджерСерииЗащиты, МенеджерОбъектов, Знач ОбновитьСуществующие = Истина)	
	
	ФайлыДанных = МенеджерСерииЗащиты.ПараметрыПодключения.ФайлыДанных;
	Для каждого ФайлДанных Из ФайлыДанных Цикл
		Если НЕ МенеджерОбъектов.ПопыткаЗагрузитьИзОбщегоМакета(ФайлДанных.Ключ, ОбновитьСуществующие) Тогда			
			Если НЕ МенеджерОбъектов.ПопыткаЗагрузитьИзМакета(ФайлДанных.Ключ,, ОбновитьСуществующие) Тогда
				слкМенеджерЗащиты.ВызватьИсключениеСЛК(МенеджерОбъектов.ПолучитьОписаниеОшибки(), Серия);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // ЗагрузитьФайлыДанных()

// Останавивает и удаляет из менеджера лицензий серию ключей.
// Если серия ключей не задана, отключаются все серии. 
//
// Параметры:
//	Серия - Строка - Уникальная серия ключей защиты
//
// Возвращаемое значение:
//   Булево   - Истина - подключение прошло успешно
//
Функция ОтключитьСериюЗащиты(Знач Серия = Неопределено, ОписаниеОшибки = "")
	
	// Менеджер лицензий
	УдалитьМенеджерСерииЗащиты(Серия, ОписаниеОшибки);
	
	Возврат Истина;

КонецФункции // ОтключитьСериюКлючей()

// Параметры связи с сервером СЛК
//
// Параметры:
//  Host  - Строка - Имя или IP-адрес компьютера, где установлен сервер СЛК
//  Port  - Строка - Порт для связи
//
// Возвращаемое значение:
//   Строка   - строка вида «host=<значение>;port=<значение>
//
Функция ПараметрыСвязи(Знач Host = "", Знач Port = "")
	
	СтрокаПараметровСвязи = "";
	Если ЗначениеЗаполнено(Host) Тогда
		СтрокаПараметровСвязи = СтрокаПараметровСвязи + "host=" + СокрЛП(Host);
	КонецЕсли;
	Если ЗначениеЗаполнено(Port) Тогда
		СтрокаПараметровСвязи = СтрокаПараметровСвязи + ?(ЗначениеЗаполнено(СтрокаПараметровСвязи), ";", "") + "port=" + СокрЛП(Port);
	КонецЕсли;
	
	Возврат СтрокаПараметровСвязи;

КонецФункции // ПараметрыСвязи()

#КонецОбласти

#Область МенеджерЗащитыСЛК

Функция ПолучитьНастройкиМенеджераЗащиты(Знач КлючНастроек = "ПараметрыПодключения", Знач ИмяПользователя = Неопределено)

	Если ИмяПользователя <> Неопределено Тогда
		НастройкиМенеджераЗащиты = ХранилищеОбщихНастроек.Загрузить("НастройкиМенеджераЗащитыСЛК", КлючНастроек,, ИмяПользователя);
	Иначе
		НастройкиМенеджераЗащиты = ХранилищеОбщихНастроек.Загрузить("НастройкиМенеджераЗащитыСЛК", КлючНастроек,, ИмяПользователяДляХраненияОбщихНастроек());
	КонецЕсли;
	
	Если НастройкиМенеджераЗащиты = Неопределено Тогда
		НастройкиМенеджераЗащиты = Новый Соответствие;
	КонецЕсли;
	
	Возврат НастройкиМенеджераЗащиты;

КонецФункции // ПолучитьНастройкиМенеджераЗащиты()

Функция СохранитьНастройкиМенеджераЗащиты(Знач ЗначениеНастройки, Знач КлючНастроек = "ПараметрыПодключения", Знач ИмяПользователя = Неопределено)

	Если ИмяПользователя <> Неопределено Тогда
		ХранилищеОбщихНастроек.Сохранить("НастройкиМенеджераЗащитыСЛК", КлючНастроек, ЗначениеНастройки,, ИмяПользователя);
	Иначе
		ХранилищеОбщихНастроек.Сохранить("НастройкиМенеджераЗащитыСЛК", КлючНастроек, ЗначениеНастройки,, ИмяПользователяДляХраненияОбщихНастроек());
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // СохранитьНастройкиМенеджераЗащиты()

Функция СтруктураПараметровПодключенияСерииКлючейЗащиты()

	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("Host", "");
	ПараметрыПодключения.Вставить("Port", "");
	ПараметрыПодключения.Вставить("ФайлыДанных", Новый Соответствие);
	
	Возврат ПараметрыПодключения;

КонецФункции // СтруктураПараметровПодключенияСерииКлючейЗащиты()

Функция ИмяПользователяДляХраненияОбщихНастроек()

	Возврат "слкМенеджерЗащитыСЛК";

КонецФункции // ИмяПользователяДляХраненияОбщихНастроек()

#КонецОбласти

#КонецОбласти
