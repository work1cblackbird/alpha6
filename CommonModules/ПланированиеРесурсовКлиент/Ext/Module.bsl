#Область ПрограммныйИнтерфейс

// Общий обработчик "При активизации строки" таблицы объектов планирования.
//
// Параметры:
//  Форма - УправляемаяФорма - Объект формы.
//  ТекущиеДанные - ЭлементКоллекцииДанныхФормы - Данные выделенной строки в таблице объектов планирования.
//  ФорматИмениПолей - Строка - Шаблон наименования полей на форме.
//                              Используется если наименование полей на форме отличается от стандартного
//                              префиксом или суффиксом.
//
Процедура ОбъектыПриАктивизацииСтроки(Форма, ТекущиеДанные, ФорматИмениПолей="%1") Экспорт
	
	ИмяЭлементИнтервалов = СтрШаблон(ФорматИмениПолей, "Интервалы");
	ЭлементИнтервалов    = Форма.Элементы.Найти(ИмяЭлементИнтервалов);
	
	ЭлементВключить = Форма.Элементы.Найти(
		СтрШаблон(ФорматИмениПолей, "ОбъектыКонтекстноеМенюУстановитьРежимПланированияПоГруппеВключить"));
	
	ЭлементВыключить = Форма.Элементы.Найти(
		СтрШаблон(ФорматИмениПолей, "ОбъектыКонтекстноеМенюУстановитьРежимПланированияПоГруппеВыключить"));
	
	Если ЭлементИнтервалов <> Неопределено Тогда
		Если ТекущиеДанные = Неопределено ИЛИ (НЕ ТекущиеДанные.ЭтоПричина И ТекущиеДанные.ПланированиеПоГруппе) Тогда
			ЭлементИнтервалов.ТолькоПросмотр = Истина;
			
			ОтборСтрок = Новый ФиксированнаяСтруктура("Идентификатор", "_");
		ИначеЕсли ТекущиеДанные.ЭтоПричина И НЕ ТекущиеДанные.ПланированиеПоГруппе Тогда
			ЭлементИнтервалов.ТолькоПросмотр = Истина;
			
			ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторГруппы", ТекущиеДанные.Идентификатор);
		Иначе
			ЭлементИнтервалов.ТолькоПросмотр = Ложь;
			
			ОтборСтрок = Новый ФиксированнаяСтруктура("Идентификатор", ТекущиеДанные.Идентификатор);
		КонецЕсли;
		
		ЭлементИнтервалов.ОтборСтрок = ОтборСтрок;
	КонецЕсли;
	
	ЭлементВключить.Видимость = (ТекущиеДанные <> Неопределено)
									И (ТекущиеДанные.ЭтоПричина И НЕ ТекущиеДанные.ПланированиеПоГруппе);
	ЭлементВыключить.Видимость = (ТекущиеДанные <> Неопределено)
									И (ТекущиеДанные.ЭтоПричина И ТекущиеДанные.ПланированиеПоГруппе);
	
КонецПроцедуры

// Выполняет переключение режима планирования по причине обращения или автоработе.
// При переключении из режима редактирования по автоработам выдается запрос на перенос
// строк планирования с автоработы на причину обращения.
//
// Параметры:
//  Форма - УправляемаяФорма - Объект формы в котором происходит переключение режима.
//  ТекущаяСтрока - Число - Идентификатор выделенной строки в таблице объектов планирования на форме.
//  Объекты - ДеревоЗначений, ДанныеФормыКоллекция - Коллекция объектов планирования.
//  Интервалы - ТаблицаЗначений, ДанныеФормыКоллекция - Коллекция интервалов планирования для объектов планирования.
//  ФорматИмениПолей - Строка - Шаблон наименования полей на форме.
//                              Используется если наименование полей на форме отличается от стандартного
//                              префиксом или суффиксом.
//  Документ - ДокументОбъект - Объект, для которого выполняется обработка события.
//
Процедура УстановитьРежимПланированияПоГруппе(Форма,
		ТекущаяСтрока,
		Объекты,
		Интервалы,
		ФорматИмениПолей="%1",
		Документ=Неопределено) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объекты.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные.ПланированиеПоГруппе Тогда
		
		// Контроль редактирования интервалов 
		// а есть ли у нас недоступные интервалы
		ПараметрыОтбора = Новый Структура("Идентификатор,НеДоступностьИнтервала", ТекущиеДанные.Идентификатор, Истина);
		Результат = Интервалы.НайтиСтроки(ПараметрыОтбора);
		
		Если Результат.Количество() > 0 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Переключение режима запрещено, т.к. имеются недоступные для редактирования интервалы.'"));
			Возврат;
			
		КонецЕсли;
		
		// почистим интервалы планирования для причины
		СтрокиКУдалению = Интервалы.НайтиСтроки(Новый Структура("Идентификатор", ТекущиеДанные.Идентификатор));
		
		Если СтрокиКУдалению.Количество() > 0 Тогда
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Объекты"         , Объекты);
			ДопПараметры.Вставить("Интервалы"       , Интервалы);
			ДопПараметры.Вставить("ТекущаяСтрока"   , ТекущаяСтрока);
			ДопПараметры.Вставить("Форма"           , Форма);
			ДопПараметры.Вставить("ФорматИмениПолей", ФорматИмениПолей);
			ДопПараметры.Вставить("СтрокиКУдалению" , СтрокиКУдалению);
			
			Оповещение = Новый ОписаниеОповещения("ВопросОбОчисткеПланированияЗавершение",
													ПланированиеРесурсовКлиент, ДопПараметры);
			ТекстВопроса =
				НСтр("ru = 'При переключении режима будут удалены введенные интервалы для причины обращения. Продолжить?'");
			
			ПоказатьВопрос(
				Оповещение,
				ТекстВопроса,
				РежимДиалогаВопрос.ДаНет,
				, ,
				НСтр("ru = 'Переключение режима планирования'"));
			
		Иначе
			
			ВыполнитьПереключениеРежимаПланирования(Форма, ТекущаяСтрока, Объекты, Интервалы, ФорматИмениПолей);
			
		КонецЕсли;
		
	Иначе
		
		// Контроль редактирования интервалов 
		// а есть ли у нас недоступные интервалы
		ПараметрыОтбора = Новый Структура("ИдентификаторГруппы,НеДоступностьИнтервала", ТекущиеДанные.Идентификатор, Истина);
		Результат = Интервалы.НайтиСтроки(ПараметрыОтбора);
		
		Если Результат.Количество() > 0 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Переключение режима запрещено, т.к. имеются недоступные для редактирования интервалы.'"));
			Возврат;
			
		КонецЕсли;
		
		СтрокиКПереносу = Интервалы.НайтиСтроки(Новый Структура("ИдентификаторГруппы", ТекущиеДанные.Идентификатор));
		
		Если СтрокиКПереносу.Количество() > 0 Тогда
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Объекты"         , Объекты);
			ДопПараметры.Вставить("Интервалы"       , Интервалы);
			ДопПараметры.Вставить("ТекущаяСтрока"   , ТекущаяСтрока);
			ДопПараметры.Вставить("Форма"           , Форма);
			ДопПараметры.Вставить("ФорматИмениПолей", ФорматИмениПолей);
			ДопПараметры.Вставить("СтрокиКПереносу" , СтрокиКПереносу);
			ДопПараметры.Вставить("Документ"        , Документ);
			
			Оповещение = Новый ОписаниеОповещения("ВопросОбПереносеПланированияЗавершение",
													ПланированиеРесурсовКлиент, ДопПараметры);
			ТекстВопроса = НСтр("ru = 'Перенести интервалы подчиненных авторабот на причину обращения?'");
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,,,
				НСтр("ru = 'Переключение режима планирования'"));
			
		Иначе
			
			ВыполнитьПереключениеРежимаПланирования(Форма, ТекущаяСтрока, Объекты, Интервалы, ФорматИмениПолей);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет наличие документа в составе расшифровки ячейки ТД
//
// Параметры:
//  Документ    - ДокументСсылка - Документ для проверки наличия в составе.
//  Расшифровка - Массив         - Массив документов расшифровки ячейки ТД.
// 
// Возвращаемое значение:
//  Булево - Наличие документа в составе расшифровки.
//
Функция ДокументВходитВСоставРасшифровки(Документ, Расшифровка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Расшифровка) ИЛИ ТипЗнч(Расшифровка) <> Тип("Массив") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(Расшифровка[0]) = Тип("Структура") Тогда
		
		Для Каждого Элемент Из Расшифровка Цикл
			
			Если Элемент.Документ = Документ Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Возврат Расшифровка.Найти(Документ) <> Неопределено;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет смещение даны, единица смещения определяется по значению параметра режим.
//
// Параметры:
//  Дата     - Дата - Изменяемая дата.
//  Смещение - Число - Размер смещения даты, положительное значение сдвиг в будущее, отрицательный в прошлое.
//  Режим    - Строка - Если "Месяц" сдвиг происходит на месяцы иначе на дни.
//
Процедура СместитьПериод(Дата, Смещение, Режим) Экспорт
	
	Если Режим = "Месяц" Тогда
		
		Дата = ДобавитьМесяц(Дата, Смещение);
		
	Иначе
		
		Дата = Дата + (Смещение * 86400);
		
	КонецЕсли;
	
КонецПроцедуры

// Выделяем области документа совпадающего с документом выделенной области.
//
// Параметры:
//  Расшифровка	- Массив из ДокументСсылка	- Массив документов расшифровки ячейки ТД.
//  Форма		- УправляемаяФорма			- Объект формы, для которого происходит обработка события.
//
Процедура ВыделитьСопутствующиеИнтервалы(Расшифровка, Форма) Экспорт
	
	Если Форма.КэшЯчеекДокументов = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЦветТолстойЛинии = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ЦветРамкиВыделения");
	СтандартныйЦвет  = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ЦветРамки");
	НетЛинии         = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
	СтандартнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ТолстаяЛиния     = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	
	ЗаблокированныеЯчейки = Новый Массив;
	
	Для Каждого Документ Из Форма.КэшЯчеекДокументов Цикл
		
		Если ДокументВходитВСоставРасшифровки(Документ.Ключ, Расшифровка) Тогда
			
			ЛинияВыделения = ТолстаяЛиния;
			ЦветВыделения = ЦветТолстойЛинии;
			ВыделениеПравойГраницы = ТолстаяЛиния;
			БлокироватьЯчейки = Истина;
			
		Иначе
			
			ЛинияВыделения = СтандартнаяЛиния;
			ЦветВыделения = СтандартныйЦвет;
			ВыделениеПравойГраницы = НетЛинии;
			БлокироватьЯчейки = Ложь;
			
		КонецЕсли;
		
		Для Каждого ИмяЯчейки Из Документ.Значение Цикл
			
			Если ЗаблокированныеЯчейки.Найти(ИмяЯчейки) <> Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если БлокироватьЯчейки Тогда
				
				ЗаблокированныеЯчейки.Добавить(ИмяЯчейки);
				
			КонецЕсли;
			
			Ячейка = Форма.КалендарьДневной.Область(ИмяЯчейки);
			Ячейка.ЦветРамки = ЦветВыделения;
			
			Если Ячейка.ГраницаСверху <> НетЛинии Тогда
				
				Ячейка.ГраницаСверху = ЛинияВыделения;
				
			КонецЕсли;
			
			Если Ячейка.ГраницаСлева <> НетЛинии Тогда
				
				Ячейка.ГраницаСлева = ЛинияВыделения;
				
			КонецЕсли;
			
			Если Форма.РасположениеРесурсов = "ВЕРХ" Тогда
				
				ЯчейкаСнизу = Форма.КалендарьДневной.Область(Ячейка.Верх + 1, Ячейка.Лево, Ячейка.Верх + 1, Ячейка.Лево);
				
				Если Документ.Значение.Найти(ЯчейкаСнизу.Имя) = Неопределено Тогда
					
					Ячейка.ГраницаСнизу = ВыделениеПравойГраницы;
					
				КонецЕсли;
				
			ИначеЕсли Ячейка.ГраницаСнизу <> НетЛинии Тогда
				
				Ячейка.ГраницаСнизу = ЛинияВыделения;
				
			КонецЕсли;
			
			Если Форма.РасположениеРесурсов = "ЛЕВО" Тогда
				
				ЯчейкаСправа = Форма.КалендарьДневной.Область(Ячейка.Верх, Ячейка.Лево + 1, Ячейка.Верх, Ячейка.Лево + 1);
				
				Если Документ.Значение.Найти(ЯчейкаСправа.Имя) = Неопределено Тогда
					
					Ячейка.ГраницаСправа = ВыделениеПравойГраницы;
					
				КонецЕсли;
				
			ИначеЕсли Ячейка.ГраницаСправа <> НетЛинии Тогда
				
				Ячейка.ГраницаСправа = ЛинияВыделения;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Показывает предупреждение о доступности записи задним числом.
//
// Параметры:
//  СрокРасчета	- Число	- Количество дней планирования
//
Процедура ПоказатьПредупреждениеЗаписиЗаднимЧислом(СрокРасчета) Экспорт
	
	ТекстОшибки = СтрШаблон(
	НСтр("ru = 'Планирование доступно только в пределах %1 дней от текущей даты.'"),
	СрокРасчета);
	
	ПоказатьПредупреждение(,ТекстОшибки);
	
КонецПроцедуры 

// Показывает предупреждение при записи Автоматического планирования даты меньше текущей.
//
Процедура ПоказатьПредупреждениеАвтоматическогоПланирования() Экспорт
	
	ПоказатьПредупреждение(, НСтр("ru = 'Дата должна быть больше текущей.'"));
	
КонецПроцедуры

#Область ПодключаемыеОбработчики

// Обработка ответа об очистке интервалов планирования при переключении режима планирования.
//
// Параметры:
//  Ответ - КодВозвратаДиалогаВопрос - Ответ на вопрос.
//  ДопПараметры - Структура - Содержит дополнительные параметры обработки.
//                             Соответствует параметрам процедуры УстановитьРежимПланированияПоГруппе().
//
Процедура ВопросОбОчисткеПланированияЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СтрокиКУдалению = ДопПараметры.СтрокиКУдалению;
		Интервалы       = ДопПараметры.Интервалы;
		Форма = ДопПараметры.Форма;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			
			Интервалы.Удалить(СтрокаКУдалению);
			
		КонецЦикла;
		
		ВыполнитьПереключениеРежимаПланирования(
			ДопПараметры.Форма,
			ДопПараметры.ТекущаяСтрока,
			ДопПараметры.Объекты,
			ДопПараметры.Интервалы,
			ДопПараметры.ФорматИмениПолей);
		
		Форма.Модифицированность = Истина;
		Форма.ПризнакЗаписиПланирования = Истина;
		ОповеститьОНеобходимостиОбновитьКалендарь(ДопПараметры.Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка ответа о переносе интервалов с авторабот на причину обращения при переключении режима планирования.
//
// Параметры:
//  Ответ - КодВозвратаДиалогаВопрос - Ответ на вопрос.
//  ДопПараметры - Структура - Содержит дополнительные параметры обработки.
//                             Соответствует параметрам процедуры УстановитьРежимПланированияПоГруппе().
//
Процедура ВопросОбПереносеПланированияЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да И Ответ <> КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.Объекты.НайтиПоИдентификатору(ДопПараметры.ТекущаяСтрока);
	СтрокиПричины = ДопПараметры
		.Документ
		.ПричиныОбращения
		.НайтиСтроки(Новый Структура("ИдентификаторПричиныОбращения", ТекущиеДанные.Идентификатор));
	
	ВидПричина= ПредопределенноеЗначение("Перечисление.ВидыОбъектовПланированияРесурсов.ПричинаОбращения");
	Причина = Неопределено;
	Если СтрокиПричины.Количество() Тогда
		
		Причина = СтрокиПричины[0].ПричинаОбращения;
		
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Для Каждого Строка Из ДопПараметры.СтрокиКПереносу Цикл
			
			Строка.Идентификатор = Строка.ИдентификаторГруппы;
			Строка.ИдентификаторГруппы = "";
			Строка.Объект = Причина;
			Строка.ВидОбъектаПланирования = ВидПричина;
			
		КонецЦикла;
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		Для Каждого Строка Из ДопПараметры.СтрокиКПереносу Цикл
			
			ДопПараметры.Интервалы.Удалить(Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВыполнитьПереключениеРежимаПланирования(
		ДопПараметры.Форма,
		ДопПараметры.ТекущаяСтрока,
		ДопПараметры.Объекты,
		ДопПараметры.Интервалы,
		ДопПараметры.ФорматИмениПолей);
		
	ДопПараметры.Форма.Модифицированность = Истина;
	ДопПараметры.Форма.ПризнакЗаписиПланирования = Истина;
	
	ОповеститьОНеобходимостиОбновитьКалендарь(ДопПараметры.Форма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьПереключениеРежимаПланирования(Форма, ТекущаяСтрока, Объекты, Интервалы, ФорматИмениПолей)
	
	ТекущиеДанные = Объекты.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ТекущиеДанные.ПланированиеПоГруппе = НЕ ТекущиеДанные.ПланированиеПоГруппе;
	ПодчиненныеАвтоработы = ТекущиеДанные.ПолучитьЭлементы();
	Для Каждого Авторабота Из ПодчиненныеАвтоработы Цикл
		Авторабота.ПланированиеПоГруппе = ТекущиеДанные.ПланированиеПоГруппе;
		
		ПланированиеРесурсовКлиентСервер.ОбновитьИндикаторНормыВремениОбъекта(Авторабота, Интервалы, Ложь);
	КонецЦикла;
	
	ТекущиеДанные.Картинка = ?(ТекущиеДанные.ПланированиеПоГруппе, 5, 1);
	
	ПланированиеРесурсовКлиентСервер.ОбновитьИндикаторНормыВремениОбъекта(ТекущиеДанные, Интервалы, Ложь);
	
	ОбъектыПриАктивизацииСтроки(Форма, ТекущиеДанные, ФорматИмениПолей);
	
КонецПроцедуры

Процедура ОповеститьОНеобходимостиОбновитьКалендарь(Форма)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ОбновитьКалендарь", Форма);
	ВыполнитьОбработкуОповещения(ОбработчикОповещения, Истина);
	
КонецПроцедуры

#КонецОбласти

