
#Область ПрограммныйИнтерфейс

#Область ДанныеУчастников

// Формирует данные юридического лица.
// 
// Параметры:
//  ЮрЛицо - ОпределяемыйТип.ЮридическиеЛицаПЭП - Юридическое лицо
// 
// Возвращаемое значение:
//  Структура -  Данные юридического лица:
// * Наименование - Строка -
// * ИНН - Строка -
// * Адрес - Строка -
Функция ДанныеЮридическогоЛица(ЮрЛицо) Экспорт
	
	Результат = Новый Структура("Наименование,ИНН,Адрес", "", "", "");
	
	Если Не ЗначениеЗаполнено(ЮрЛицо) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	УчастникиПЭППереопределяемый.ПриПолученииДанныхЮридическогоЛица(ЮрЛицо, Результат);
	Возврат Результат;
	
КонецФункции

// Формирует данные физического лица.
// 
// Параметры:
//  ФизЛицо - ОпределяемыйТип.ФизическиеЛицаПЭП - Физическое лицо
// 
// Возвращаемое значение:
//  Структура -  Данные физического лица:
// * Фамилия - Строка - 
// * Имя - Строка - 
// * Отчество - Строка - 
// * Почта - Строка - 
// * Телефон - Строка - 
Функция ДанныеФизическогоЛица(ФизЛицо) Экспорт
	
	//@skip-check structure-consructor-too-many-keys
	Результат = Новый Структура("Фамилия,Имя,Отчество,Почта,Телефон", "", "", "", "", "");
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	УчастникиПЭППереопределяемый.ПриПолученииДанныхФизическогоЛица(ФизЛицо, Результат);
	Возврат Результат;
	
КонецФункции

// Формирует данные контактного лица.
// 
// Параметры:
//  КонтактноеЛицо - ОпределяемыйТип.КонтактныеЛицаПЭП - Контактное лицо
// 
// Возвращаемое значение:
//  Структура -  Данные физического лица:
// * Фамилия - Строка - 
// * Имя - Строка - 
// * Отчество - Строка - 
// * Почта - Строка - 
// * Телефон - Строка - 
Функция ДанныеКонтактногоЛица(КонтактноеЛицо) Экспорт
	
	//@skip-check structure-consructor-too-many-keys
	Результат = Новый Структура("Имя,Почта,Телефон", "", "", "", "", "");
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	УчастникиПЭППереопределяемый.ПриПолученииДанныхКонтактногоЛица(КонтактноеЛицо, Результат);
	Возврат Результат;
	
КонецФункции

// Адрес участинка.
// 
// Параметры:
//  Участник - ОпределяемыйТип.ЮридическиеЛицаПЭП  - Участник
//             ОпределяемыйТип.КонтактныеЛицаПЭП
//             ОпределяемыйТип.ФизическиеЛицаПЭП
// 
// Возвращаемое значение:
//  Строка -  Адрес участинка
Функция АдресУчастинка(Участник) Экспорт
	
	Возврат УчастникиПЭППереопределяемый.ПриПолученииКонтактнойИнформацииУчастинка(Участник, ТипыКИ().Адрес);
	
КонецФункции

// Телефон участинка.
// 
// Параметры:
//  Участник - ОпределяемыйТип.ЮридическиеЛицаПЭП  - Участник
//             ОпределяемыйТип.КонтактныеЛицаПЭП
//             ОпределяемыйТип.ФизическиеЛицаПЭП
// 
// Возвращаемое значение:
//  Строка -  Телефон участинка
Функция ТелефонУчастинка(Участник) Экспорт
	
	Возврат УчастникиПЭППереопределяемый.ПриПолученииКонтактнойИнформацииУчастинка(Участник, ТипыКИ().Телефон);
	
КонецФункции

// Почта участинка.
// 
// Параметры:
//  Участник - ОпределяемыйТип.ЮридическиеЛицаПЭП  - Участник
//             ОпределяемыйТип.КонтактныеЛицаПЭП
//             ОпределяемыйТип.ФизическиеЛицаПЭП
// 
// Возвращаемое значение:
//  Строка -  Почта участинка
Функция ПочтаУчастника(Участник) Экспорт
	
	Возврат УчастникиПЭППереопределяемый.ПриПолученииКонтактнойИнформацииУчастинка(Участник, ТипыКИ().Почта);
	
КонецФункции

// Отправить или обновить участника.
// 
// Параметры:
//  ДанныеУчастника - Структура - Данные участника
//  ТипУчастника - Структура - Тип участника
//
// Возвращаемое значение:
//  Булево -  Признак обновления
Функция ОтправитьИлиОбновитьУчастника(ДанныеУчастника, ТипУчастника) Экспорт
	
	ЭтоОбновление = Ложь;
	
	МодульИнтеграции = ОбщегоНазначенияПЭП.МодульИнтеграции();
	
	Если ТипУчастника.ЭтоЮридическоеЛицо Тогда
		
		ЭтоОбновление = УчастникЗарегистрированВПЭП(ДанныеУчастника.ЮридическоеЛицо);
		
		Если ЭтоОбновление Тогда
			
			МодульИнтеграции.ОбновитьЮридическоеЛицо(ДанныеУчастника);
			
		Иначе
			
			МодульИнтеграции.НовоеЮридическоеЛицо(ДанныеУчастника);
			ЗафиксироватьРегистрациюУчастникаВПЭП(ДанныеУчастника.ЮридическоеЛицо);
			
		КонецЕсли;
		
	ИначеЕсли ТипУчастника.ЭтоКонтактноеЛицо Тогда
		
		ЭтоОбновление = УчастникЗарегистрированВПЭП(ДанныеУчастника.КонтактноеЛицо);
		
		Если ЭтоОбновление Тогда
			
			МодульИнтеграции.ОбновитьКонтактноеЛицо(ДанныеУчастника);
			
		Иначе
			
			МодульИнтеграции.НовоеКонтактноеЛицо(ДанныеУчастника);
			ЗафиксироватьРегистрациюУчастникаВПЭП(ДанныеУчастника.КонтактноеЛицо);
			
		КонецЕсли;
		
	ИначеЕсли ТипУчастника.ЭтоФизическоеЛицо Тогда
		
		ЭтоОбновление = УчастникЗарегистрированВПЭП(ДанныеУчастника.ФизическоеЛицо);
		
		Если ЭтоОбновление Тогда
			
			МодульИнтеграции.ОбновитьФизическоеЛицо(ДанныеУчастника);
			
		Иначе
			
			МодульИнтеграции.НовоеФизическоеЛицо(ДанныеУчастника);
			ЗафиксироватьРегистрациюУчастникаВПЭП(ДанныеУчастника.ФизическоеЛицо);
			
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Не корректный тип участинка'");
		
	КонецЕсли;
	
	Возврат ЭтоОбновление;
	
КонецФункции

// Контакное лицо по умолчанию.
// 
// Параметры:
//  Участник - ОпределяемыйТип.ЮридическиеЛицаПЭП - Юридическое лицо.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КонтактныеЛицаПЭП
Функция КонтакноеЛицоПоУмолчанию(Участник) Экспорт
	
	Возврат УчастникиПЭППереопределяемый.КонтакноеЛицоПоУмолчанию(Участник);
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеМетоды

// Доступные типы контактной информации.
// 
// Возвращаемое значение:
//  Структура -  Типы КИ:
// * Адрес - Строка - 
// * Телефон - Строка - 
// * Почта - Строка - 
Функция ТипыКИ() Экспорт
	
	Возврат Новый Структура("Адрес,Телефон,Почта", "Адрес", "Телефон", "Почта");
	
КонецФункции

// Определяет является ли тип юридическим лицом в ПЭП.
// 
// Параметры:
//  Участник - Произвольный -  Участник
// 
// Возвращаемое значение:
//  Булево -  Это юридическое лицо
//
Функция ЭтоЮридическоеЛицо(Участник) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.ЮридическиеЛицаПЭП.Тип.СодержитТип(ТипЗнч(Участник));
	
КонецФункции

// Определяет является ли тип контактным лицом в ПЭП.
// 
// Параметры:
//  Участник - Произвольный -  Участник
// 
// Возвращаемое значение:
//  Булево -  Это юридическое лицо
//
Функция ЭтоКонтактноеЛицо(Участник) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.КонтактныеЛицаПЭП.Тип.СодержитТип(ТипЗнч(Участник));
	
КонецФункции

// Определяет является ли тип физическим лицом в ПЭП.
// 
// Параметры:
//  Участник - Произвольный -  Участник
// 
// Возвращаемое значение:
//  Булево -  Это юридическое лицо
//
Функция ЭтоФизическоеЛицо(Участник) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.ФизическиеЛицаПЭП.Тип.СодержитТип(ТипЗнч(Участник));
	
КонецФункции

#КонецОбласти

#Область Сопоставление

// Получение идентификатора участника в ПЭП.
// 
// Параметры:
//  Участник - ОпределяемыйТип.ЮридическиеЛицаПЭП - Ссылка на участника
//           - ОпределяемыйТип.ФизическиеЛицаПЭП -
//           - ОпределяемыйТип.КонтактныеЛицаПЭП -
// 
// Возвращаемое значение:
//  Неопределено, УникальныйИдентификатор -  Идентификатор участника
//
Функция ИдентификаторУчастника(Участник) Экспорт
	
	СтандартнаяОбработка = Истина;
	Результат = УчастникиПЭППереопределяемый.ПриПолученииИдентификатораУчастника(Участник, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат Участник.УникальныйИдентификатор();
	
КонецФункции

// Записываем признак наличия участника на сервере ПЭП
// Доступно переопределение места хранения см. УчастникиПЭППереопределяемый.ПриФиксицииРегистрацииУчастникаВПЭП
// 
// Параметры:
//  Участник - ОпределяемыйТип.ЮридическиеЛицаПЭП - Ссылка на участника
//           - ОпределяемыйТип.ФизическиеЛицаПЭП -
//           - ОпределяемыйТип.КонтактныеЛицаПЭП -
//  ИдентификаторУчастника - УникальныйИдентификатор - Идентификатор из ПЭП;
Процедура ЗафиксироватьРегистрациюУчастникаВПЭП(Участник) Экспорт
	
	СтандартнаяОбработка = Истина;
	УчастникиПЭППереопределяемый.ПриФиксицииРегистрацииУчастникаВПЭП(Участник, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ЗарегистрированныеВПЭПУчастники.СоздатьМенеджерЗаписи();
	//@skip-check wrong-type-expression
	МенеджерЗаписи.Участник = Участник;
	МенеджерЗаписи.Зарегистрирован = Истина;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Участник зарегистрирован в ПЭП.
// 
// Параметры:
//  Участник - ОпределяемыйТип.ЮридическиеЛицаПЭП - Ссылка на участника
//           - ОпределяемыйТип.ФизическиеЛицаПЭП -
//           - ОпределяемыйТип.КонтактныеЛицаПЭП -
// 
// Возвращаемое значение:
//  Булево - Признак регистрации участника в ПЭП
Функция УчастникЗарегистрированВПЭП(Участник) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗарегистрированныеВПЭПУчастники.Зарегистрирован
		|ИЗ
		|	РегистрСведений.ЗарегистрированныеВПЭПУчастники КАК ЗарегистрированныеВПЭПУчастники
		|ГДЕ
		|	ЗарегистрированныеВПЭПУчастники.Участник = &Участник"
	);
	Запрос.УстановитьПараметр("Участник", Участник);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Возврат РезультатЗапроса.Выгрузить()[0].Зарегистрирован;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Участник по идентификатору.
// 
// Параметры:
//  ИдентификаторУчастника - УникальныйИдентификатор - Идентификатор участника;
// 
// Возвращаемое значение:
//  Неопределено, СправочникСсылка -  Участник по идентификатору
Функция УчастникПоИдентификатору(ИдентификаторУчастника) Экспорт
	
	МенеджерыУчастниковПоТипам = УчастникиПЭППовтИсп.МенеджерыУчастниковПоТипам();
	
	Для Каждого КлючЗначение Из МенеджерыУчастниковПоТипам Цикл
		
		Для Каждого Менеджер Из КлючЗначение.Значение Цикл
			
			НоваяСсылка = Менеджер.ПолучитьСсылку(ИдентификаторУчастника);
			
			Если НоваяСсылка.ПолучитьОбъект() <> Неопределено Тогда
				
				Возврат НоваяСсылка;
				
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область РаботаСФормами

// Новые параметры формы списка участника.
// 
// Возвращаемое значение:
//  Структура -  Новые параметры при создании на сервере форма элемента:
// * ПустаяСсылка - Неопределено, ЛюбаяСсылка - Пустая ссылка на используемый объект;
// * Список - ДинамическийСписок, Неопределено - Объект днамического списка;
// * ЭлементСписка - ПолеФормы, Неопределено - Объект элемента формы списка;
Функция НовыеПараметрыПриСозданииНаСервере_ФормаСписка() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ПустаяСсылка", Неопределено);
	Результат.Вставить("Список", Неопределено);
	Результат.Вставить("ЭлементСписка", Неопределено);
	Возврат Результат;
	
КонецФункции

// Метод для настройки формы списка участников ПЭП.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - объект формы;
//  ПараметрыНастройкиФормы - см. УчастникиПЭП.НовыеПараметрыПриСозданииНаСервере_ФормаСписка
Процедура ПриСозданииНаСервере_ФормаСписка(Форма, ПараметрыНастройкиФормы = Неопределено) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЗарегистрированныеВПЭПУчастники) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ПараметрыНастройкиФормы.Свойство("Список") Или ПараметрыНастройкиФормы.Список = Неопределено Тогда
		
		ПараметрыНастройкиФормы.Список = Форма.Список;
		
	КонецЕсли;
	
	НовыйЗапросДинамическогоСписка = УчастникиПЭППереопределяемый.ЗапросДинамическогоСписка(
		ПараметрыНастройкиФормы.Список.ТекстЗапроса,
		ПараметрыНастройкиФормы
	);
	
	Если
		НовыйЗапросДинамическогоСписка <> Неопределено
		И НовыйЗапросДинамическогоСписка <> ПараметрыНастройкиФормы.Список.ТекстЗапроса
	Тогда
		
		ПараметрыНастройкиФормы.Список.ТекстЗапроса = НовыйЗапросДинамическогоСписка;
		УчастникиПЭППереопределяемый.ПриОбновленииЗапросаДинамическогоСписка(Форма, ПараметрыНастройкиФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Новые параметры при создании на сервере форма элемента участника.
// 
// Возвращаемое значение:
//  Структура -  Новые параметры при создании на сервере форма элемента:
// * ПустаяСсылка - ЛюбаяСсылка, Неопределено - Пустая ссылка на участинка ПЭП;
// * МестоРазмещения - ГруппаФормы, Строка, Неопределено - Место размещения команд;
Функция НовыеПараметрыПриСозданииНаСервере_ФормаЭлемента() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ПустаяСсылка", Неопределено);
	Результат.Вставить("МестоРазмещения", Неопределено);
	Возврат Результат;
	
КонецФункции

// При создании на сервере формы элемента участника ПЭП.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - объекты формы;
//  ПараметрыНастройкиФормы - см. УчастникиПЭП.НовыеПараметрыПриСозданииНаСервере_ФормаЭлемента
Процедура ПриСозданииНаСервере_ФормаЭлемента(Форма, ПараметрыНастройкиФормы = Неопределено) Экспорт
	
	КоллекцияКоманд = КомандыУчастинкаПоУмолчанию(ОбщегоНазначенияПЭП.КоллекцияКоманд());
	Результат = УчастникиПЭППереопределяемый.ПередДобавлениемКомандНаФормуЭлемента(Форма, ПараметрыНастройкиФормы,
		КоллекцияКоманд);
	
	СтандартнаяОбработка = Истина;
	Если Результат.Свойство("СтандартнаяОбработка", СтандартнаяОбработка) И Не СтандартнаяОбработка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыНастройкиФормы.МестоРазмещения = Неопределено Тогда
		
		ПараметрыНастройкиФормы.МестоРазмещения = ОбщегоНазначенияПЭП.МестоРазмещенияКоманд(Форма);
		
	КонецЕсли;
	
	Для Каждого Команда Из Результат.КоллекцияКоманд Цикл
		
		НоваяКоманда = Форма.Команды.Добавить(Команда.ИмяКоманды);
		НоваяКоманда.Действие = Команда.Действие;
		НоваяКоманда.Заголовок = Команда.Заголовок;
		НоваяКоманда.ИзменяетСохраняемыеДанные = Ложь;
		НоваяКоманда.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		НовыйЭлемент = Форма.Элементы.Добавить(Команда.ИмяКоманды, Тип("КнопкаФормы"),
			ПараметрыНастройкиФормы.МестоРазмещения);
		НовыйЭлемент.ИмяКоманды = Команда.ИмяКоманды;
		
	КонецЦикла;
	
	УчастникиПЭППереопределяемый.ПослеДобавлениемКомандНаФормуЭлемента(Форма, ПараметрыНастройкиФормы);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Команды участинка по умолчанию.
// 
// Параметры:
//  КоллекцияКоманд - см. ОбщегоНазначения.КоллекцияКоманд
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. ОбщегоНазначения.КоллекцияКоманд 
Функция КомандыУчастинкаПоУмолчанию(КоллекцияКоманд)
	
	НоваяКоманда = КоллекцияКоманд.Добавить();
	НоваяКоманда.ИмяКоманды = "ОтправитьНаСерверПЭП";
	НоваяКоманда.Действие = "Подключаемый_ВыполнитьКомандуПЭП";
	НоваяКоманда.Заголовок = НСтр("ru = 'Отправить на сервер'");
	Возврат КоллекцияКоманд;
	
КонецФункции

#КонецОбласти