////////////////////////////////////////////////////////////////////////////////
// Реализация оплаты в режиме "онлайн"
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполнить регистрацию счета в платежном шлюзе
//
// Параметры:
//  СчетНаОплату         - ДокументСсылка.СчетНаОплату, ДокументСсылка.СчетНаОплатуЗаАвтомобили - документ, который
//                         необходимо зарегистрировать в платежном шлюзе
//  ПараметрыРегистрации - Структура - параметры, передаваемые в платежный шлюз при регистрации счета
//                         Поля структуры:
//                           * Интерфейс - СправочникиСсылка.ИнтерфейсыДляВнешнихСистем - используемый интерфейс
//                           * КонтактДляОтправкиЧеков - Строка - номер телефона или адрес электронной
//                             почты плательшика, на который после оплаты будет отправлен электронный чек
//  Холдирование         - Булево - признак ходирования денежных средств (Истина - холдирование, Ложь - оплата)
//
// Возвращаемое значение:
//   Структура - см. ПолучитьСтруктуруРезультатВыполнения(). Кроме этого:
//     * АдресФормыОплаты - Строка - адрес формы оплаты
//     * СообщениеSMS - ДокументСсылка.СообщениеSMS - только для точки входа СМС
//
Функция ЗарегистрироватьСчет(СчетНаОплату, ПараметрыРегистрации, Холдирование = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = ПолучитьСтруктуруРезультатВыполнения();
	
	Если РаботаСПлатежнымШлюзомЗаблокирована(РезультатВыполнения) Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	// Получить структуру, заполненную данными счета, необходимыми лоя его регистрации в платежном шлюзе
	ДанныеСчета = ПолучитьДанныеСчетаДляРегистрации(СчетНаОплату);
	
	// Проверить корректность счета
	Если НЕ ДанныеСчетаКорректны(ДанныеСчета, РезультатВыполнения) Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Интерфейс = ПараметрыРегистрации.Интерфейс;
	Если НЕ ЗначениеЗаполнено(Интерфейс) Тогда
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Не выбран интерфейс'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	// Получить и добавить в данные счета адрес электронной почты для отправки электронных фискальных чеков
	// Если регистрация выполняется из точки входа СМС, то адрес электронной почты уже прошел проверку функцией
	// ПроверитьАдресЭлектроннойПочты()
	КонтактДляОтправкиЧека = ПолучитьЗначениеПараметраСтруктуры(ПараметрыРегистрации, "КонтактДляОтправкиЧеков", "");
	ДанныеСчета.Вставить("КонтактДляОтправкиЧека", КонтактДляОтправкиЧека);
	
	// Сформировать и добавить в данные счета назначение платежа
	НазначениеПлатежа = ПолучитьНазначениеПлатежа(ДанныеСчета);
	ДанныеСчета.Вставить("НазначениеПлатежа", НазначениеПлатежа);
	
	// Поместить данные интерфейса в параметры взаимодействия с платежным шлюзом
	ПараметрыВзаимодействия = Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия(Интерфейс);
	
	// Добавить в данные счета текущую дату в качестве даты регистрации счета в платежном шлюзе
	ДанныеСчета.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
	Если ПараметрыВзаимодействия.Свойство("ВремяЖизниПлатежнойСсылки") Тогда
		СекундВМинуте = 60;
		СрокЖизниСсылки = ДанныеСчета.ДатаРегистрации + ПараметрыВзаимодействия.ВремяЖизниПлатежнойСсылки * СекундВМинуте;
		ДанныеСчета.Вставить("СрокЖизниСсылки", СрокЖизниСсылки);
	КонецЕсли;
	
	// Вызвать функцию регистрации счета, соответствукющую типу интерфейса
	ОбщийМодульИнтерфейса = ОбщийМодульДляТипаИнтерфейса(ПараметрыВзаимодействия.ТипИнтерфейса, РезультатВыполнения);
	Если ОбщийМодульИнтерфейса = Неопределено Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ОбщийМодульИнтерфейса.ЗарегистрироватьСчет(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения, Холдирование);
	
	Возврат РезультатВыполнения;
	
КонецФункции // ЗарегистрироватьСчет()

// Запрос статусов оплаты счетов в платежном шлюзе регламентным заданием
//
Процедура ЗапросСтатусовОплаты() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗапросСтатусовОнлайнОплаты);
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Сформировать структуру РезультатВыполнения, заполненную значениями по умолчанию
	РезультатВыполнения = ПолучитьСтруктуруРезультатВыполнения();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныйШлюз.СчетНаОплату КАК СчетНаОплату
	|ИЗ
	|	РегистрСведений.ПлатежныйШлюз КАК ПлатежныйШлюз
	|ГДЕ
	|	(ПлатежныйШлюз.СтатусОперации В (&МассивСтатусовОжидания)
	|				И (ПлатежныйШлюз.ДатаУведомления > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ИЛИ ПлатежныйШлюз.СрокЖизниСсылки < &ПредельнаяДатаОплаты
	|					ИЛИ ПлатежныйШлюз.Интерфейс В (&МассивИнтерфейсовБезОбработкиВходящихУведомлений))
	|			ИЛИ ПлатежныйШлюз.СтатусОперации В (&МассивСтатусовВыполнено)
	|				И ПлатежныйШлюз.ЧекНаОплату = ЗНАЧЕНИЕ(Документ.ЧекНаОплату.ПустаяСсылка))";
	
	МассивИнтерфейсовБезОбработкиВходящихУведомлений = ПолучитьМассивИнтерфейсовБезОбработкиВходящихУведомлений();
	Запрос.УстановитьПараметр("МассивИнтерфейсовБезОбработкиВходящихУведомлений"
	, МассивИнтерфейсовБезОбработкиВходящихУведомлений);
	
	МассивСтатусовОжидания = Новый Массив;
	МассивСтатусовОжидания.Добавить(Перечисления.СтатусыОнлайнОплат.ОжиданиеОплаты);
	МассивСтатусовОжидания.Добавить(Перечисления.СтатусыОнлайнОплат.ОжиданиеВозврата);
	Запрос.УстановитьПараметр("МассивСтатусовОжидания", МассивСтатусовОжидания);
	
	МассивСтатусовВыполнено = Новый Массив;
	МассивСтатусовВыполнено.Добавить(Перечисления.СтатусыОнлайнОплат.Оплачен);
	МассивСтатусовВыполнено.Добавить(Перечисления.СтатусыОнлайнОплат.ВыполненВозврат);
	Запрос.УстановитьПараметр("МассивСтатусовВыполнено", МассивСтатусовВыполнено);
	
	ТекДата = ТекущаяДатаСеанса();
	Запас = 120; // Запас 2 минуты после истечения срока оплаты не помешает
	ПредельнаяДатаОплаты = ТекДата - Запас;
	Запрос.УстановитьПараметр("ПредельнаяДатаОплаты", ПредельнаяДатаОплаты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		РезультатВыполнения = ПолучитьСтатусОплаты(Выборка.СчетНаОплату);
		Если НЕ РезультатВыполнения.Успешно Тогда
			ДопИнформация = НСтр("ru='Запрос статусов оплаты'");
			ЗаписатьОшибкуВЖурналРегистрации(РезультатВыполнения, , ДопИнформация, Выборка.СчетНаОплату);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗапросСтатусовОплаты()

// Получить статус оплаты счета в платежном шлюзе. В случае оплаты или возврата создать соответствующий документ.
//
// Параметры:
//  СчетНаОплату - ДокументСсылка.СчетНаОплату, ДокументСсылка.СчетНаОплатуЗаАвтомобили - документ, по которому
//                 необходимо получить состояние оплаты в платежном шлюзе
//
// Возвращаемое значение:
//   Структура - см. ПолучитьСтруктуруРезультатВыполнения()
//
Функция ПолучитьСтатусОплаты(СчетНаОплату) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Сформировать структуру РезультатВыполнения, заполненную значениями по умолчанию
	РезультатВыполнения = ПолучитьСтруктуруРезультатВыполнения();
	
	НачатьТранзакцию();
	
	Попытка
		
		// Заблокировать все записи регистра по данному счету
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПлатежныйШлюз");
		ЭлементБлокировки.УстановитьЗначение("СчетНаОплату", СчетНаОплату);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		// Получить данные счета для запроса статуса
		ДанныеСчета = ПолучитьДанныеЗарегистрированногоСчета(СчетНаОплату, РезультатВыполнения);
		
		Если ЧекНаОплатуМожетБытьСоздан(ДанныеСчета, РезультатВыполнения) Тогда
			
			// Поместить данные интерфейса в параметры взаимодействия с платежным шлюзом
			ПараметрыВзаимодействия
			= Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия(ДанныеСчета.Интерфейс);
			
			// Вызвать функцию получения статуса, соответствукющую типу интерфейса
			ОбщийМодульИнтерфейса = ОбщийМодульДляТипаИнтерфейса(ПараметрыВзаимодействия.ТипИнтерфейса, РезультатВыполнения);
			Если ОбщийМодульИнтерфейса <> Неопределено Тогда
				
				Если ДанныеСчета.ЭтоВозврат Тогда
					ДанныеДляЗаписи = ОбщийМодульИнтерфейса.ПолучитьДанныеСтатусаВозврата(ДанныеСчета, ПараметрыВзаимодействия
					, РезультатВыполнения);
					СоздатьДокументВозврата(ДанныеДляЗаписи, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);
				Иначе
					ДанныеДляЗаписи = ОбщийМодульИнтерфейса.ПолучитьДанныеСтатусаОплаты(ДанныеСчета, ПараметрыВзаимодействия
					, РезультатВыполнения);
					СоздатьДокументОплаты(ДанныеДляЗаписи, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);
				КонецЕсли;
				
				ЗаписатьДанныеОбменаРегистр(ДанныеДляЗаписи, РезультатВыполнения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции // ПолучитьСтатусОплаты()

// Зарегистрировать в платежном шлюзе запрос на возврат онлайн-оплаты.
//
// Параметры:
//  СчетНаОплату         - ДокументСсылка.СчетНаОплату, ДокументСсылка.СчетНаОплатуЗаАвтомобили - счет, по которому
//                         необходимо зарегистрировать возврат в платежном шлюзе
//  ЗаявкаНаРасходДС     - ДокументСсылка.ЗаявкаНаРасходДС - основание для отмены платежа
//
// Возвращаемое значение:
//   Структура - см. ПолучитьСтруктуруРезультатВыполнения()
//
Функция ЗарегистрироватьВозврат(СчетНаОплату, ЗаявкаНаРасходДС) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = ПроверитьРегистрациюЗаявкиНаРасход(ЗаявкаНаРасходДС);
	Если НЕ РезультатВыполнения.Успешно Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	// Получить данные о текущем состоянии оплаты счета
	ДанныеСчета = ПолучитьДанныеЗарегистрированногоСчета(СчетНаОплату, РезультатВыполнения);
	
	Возврат ВернутьСумму(ДанныеСчета, ЗаявкаНаРасходДС, РезультатВыполнения);
	
КонецФункции // ЗарегистрироватьВозврат()

// Получить данные по состоянию оплаты счета для отображения на форме документов
//
// Параметры:
//  СчетНаОплату - ДокументСсылка.СчетНаОплату, ДокументСсылка.СчетНаОплатуЗаАвтомобили - документ, по которому
//                 необходимо получить данные по состоянию оплаты в платежном шлюзе
//
// Возвращаемое значение:
//   Структура - Поля структуры:
//     * Заголовок - Строка - текст для вывода на форме
//     * ЦветТекста - Цвет - цвет теста (зависит от состояния оплаты) 
//     * Оплачен - Булево - признак оплаты счета
//     * Отказ - Булево - признак отказа оплаты счета
//     * ДатаРегистрации - Дата - дата регистрации счета (время - местное)
//     * СрокЖизниСсылки - Дата - срок оплаты счета (время - московское)
//     * СтатусУведомления - ПеречислениеСсылка.СтатусыОнлайнОплат - статус callback-уведомления
//     * ДатаУведомления - Дата - дата callback-уведомления (время - местное)
//     * СтатусОперации - ПеречислениеСсылка.СтатусыОнлайнОплат - текущий статус оплаты
//     * ДатаОперации - Дата - дата завершения операции (время - местное)
//
Функция ПолучитьДанныеОплатыДляОтображенияНаФорме(СчетНаОплату) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляФормы = Новый Структура;
	ДанныеДляФормы.Вставить("Заголовок", НСтр("ru='Ссылка на оплату не создана'"));
	ДанныеДляФормы.Вставить("ЦветТекста", WebЦвета.Черный);
	ДанныеДляФормы.Вставить("Оплачен", Ложь);
	ДанныеДляФормы.Вставить("Отказ", Ложь);
	ДанныеДляФормы.Вставить("ДатаРегистрации", Неопределено);
	ДанныеДляФормы.Вставить("СрокЖизниСсылки", Неопределено);
	ДанныеДляФормы.Вставить("СтатусУведомления", Неопределено);
	ДанныеДляФормы.Вставить("ДатаУведомления", Неопределено);
	ДанныеДляФормы.Вставить("СтатусОперации", Неопределено);
	ДанныеДляФормы.Вставить("ДатаОперации", Неопределено);
	
	Если СчетНаОплату.Пустая() Тогда
		
		Возврат ДанныеДляФормы;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныйШлюз.СчетНаОплату КАК СчетНаОплату,
	|	ПлатежныйШлюз.СчетНаОплату.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ПлатежныйШлюз.ДатаРегистрации КАК ДатаРегистрации,
	|	ПлатежныйШлюз.СрокЖизниСсылки КАК СрокЖизниСсылки,
	|	ПлатежныйШлюз.ДатаУведомления КАК ДатаУведомления,
	|	ПлатежныйШлюз.СтатусУведомления КАК СтатусУведомления,
	|	ПлатежныйШлюз.ДатаОперации КАК ДатаОперации,
	|	ПлатежныйШлюз.СтатусОперации КАК СтатусОперации
	|ИЗ
	|	РегистрСведений.ПлатежныйШлюз КАК ПлатежныйШлюз
	|ГДЕ
	|	ПлатежныйШлюз.СчетНаОплату = &СчетНаОплату
	|	И ПлатежныйШлюз.ЗаявкаНаРасходДС = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходДС.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		
		Возврат ДанныеДляФормы;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеДляФормы, Выборка);
	
	ПараметрыДляОтображения = ПолучитьПараметрыДляОтображенияОплаты(Выборка, ДанныеДляФормы);
	
	Если ЗначениеЗаполнено(ПараметрыДляОтображения.ДатаСервера) Тогда
		СмещениеВремени = ОбщегоНазначенияАвтосалон.СмещениеВремениВПодразделенииКомпании(Выборка.ПодразделениеКомпании);
		МестнаяДата = ПараметрыДляОтображения.ДатаСервера + СмещениеВремени;
		ФорматВремени = НСтр("ru='ДФ=HH:mm'");
		ПредставлениеДаты = Формат(МестнаяДата, ФорматВремени);
		
		Если ДанныеДляФормы.Оплачен Тогда
			СтрокаШаблон = НСтр("ru='СЧЕТ %1 %2'");
		Иначе
			СтрокаШаблон = НСтр("ru='%1 %2'");
		КонецЕсли;
		
		ДанныеДляФормы.Заголовок = СтрШаблон(СтрокаШаблон, ПараметрыДляОтображения.Статус, ПредставлениеДаты);
	Иначе
		ДанныеДляФормы.Заголовок = ПараметрыДляОтображения.Статус;
	КонецЕсли;
	
	Возврат ДанныеДляФормы;
	
КонецФункции

// Получить данные по состоянию возврата ДС или отмене платежа для отображения на форме документа Заявка на расход ДС
//
// Параметры:
//  СчетНаОплату     - ДокументСсылка.СчетНаОплату, ДокументСсылка.СчетНаОплатуЗаАвтомобили - точнее см. функцию
//                     ПолучитьМассивТиповСчетов(). Документ, по которому необходимо получить данные по возврату
//                     ДС или отмене платежа
//  ЗаявкаНаРасходДС - ДокументСсылка.ЗаявкаНаРасходДС - заявка на расход ДС, на основании которой выполняется
//                     возврат ДС или отмена платежа
//
// Возвращаемое значение:
//   Структура - Поля структуры:
//     * Заголовок - Строка - информация для вывода на форме
//     * ЦветТекста - Цвет - цвет теста (зависит от состояния) 
//     * ОтказВозврата - Булево - признак отказа возврата
//     * ВыполненВозврат - Булево - признак возврата ДС
//
Функция ПолучитьДанныеВозвратаДляОтображенияНаФорме(СчетНаОплату, ЗаявкаНаРасходДС) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляФормы = Новый Структура;
	ДанныеДляФормы.Вставить("Заголовок", НСтр("ru='Заявка не зарегистрирована'"));
	ДанныеДляФормы.Вставить("ЦветТекста", WebЦвета.Черный);
	ДанныеДляФормы.Вставить("ВыполненВозврат", Ложь);
	ДанныеДляФормы.Вставить("ОтказВозврата", Ложь);
	
	Если НЕ ЗначениеЗаполнено(СчетНаОплату) ИЛИ НЕ ЗначениеЗаполнено(ЗаявкаНаРасходДС) Тогда
		Возврат ДанныеДляФормы;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныйШлюз.ДатаРегистрации КАК ДатаРегистрации,
	|	ПлатежныйШлюз.ДатаУведомления КАК ДатаУведомления,
	|	ПлатежныйШлюз.СтатусУведомления КАК СтатусУведомления,
	|	ПлатежныйШлюз.СтатусОперации КАК СтатусОперации,
	|	ПлатежныйШлюз.СуммаОперации КАК СуммаОперации,
	|	ПлатежныйШлюз.ДатаОперации КАК ДатаОперации,
	|	ПлатежныйШлюз.СчетНаОплату.ПодразделениеКомпании КАК ПодразделениеКомпании
	|ИЗ
	|	РегистрСведений.ПлатежныйШлюз КАК ПлатежныйШлюз
	|ГДЕ
	|	ПлатежныйШлюз.СчетНаОплату = &СчетНаОплату
	|	И ПлатежныйШлюз.ЗаявкаНаРасходДС = &ЗаявкаНаРасходДС";
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	Запрос.УстановитьПараметр("ЗаявкаНаРасходДС", ЗаявкаНаРасходДС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат ДанныеДляФормы;
	КонецЕсли;
	
	Если Выборка.СтатусОперации = Перечисления.СтатусыОнлайнОплат.ОжиданиеВозврата Тогда
		
		ДатаСервера = Выборка.ДатаРегистрации;
		СтрокаШаблон = НСтр("ru='%1 с %2'");
		ФорматВремени = НСтр("ru='ДФ=''HH:mm dd.MM.yyyy'''");
		
	Иначе
		
		ДатаСервера = Выборка.ДатаОперации;
		Если ДатаСервера = Дата(1, 1, 1) Тогда
			ДатаСервера = Выборка.ДатаУведомления;
		КонецЕсли;
		СтрокаШаблон = НСтр("ru='%1 %2'");
		ФорматВремени = НСтр("ru='ДФ=''dd.MM.yyyy ""в"" HH:mm'''");
		
		Если Выборка.СтатусОперации = Перечисления.СтатусыОнлайнОплат.ОтказВозврата Тогда
			ДанныеДляФормы.ЦветТекста = WebЦвета.Красный;
			ДанныеДляФормы.ОтказВозврата =  Истина;
		Иначе
			ДанныеДляФормы.ЦветТекста = WebЦвета.Зеленый;
			ДанныеДляФормы.ВыполненВозврат =  Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	СмещениеВремени = ОбщегоНазначенияАвтосалон.СмещениеВремениВПодразделенииКомпании(Выборка.ПодразделениеКомпании);
	МестнаяДата = ДатаСервера + СмещениеВремени;
	ПредставлениеДаты = Формат(МестнаяДата, ФорматВремени);
	ДанныеДляФормы.Заголовок = СтрШаблон(СтрокаШаблон, Выборка.СтатусОперации, ПредставлениеДаты);
	
	Возврат ДанныеДляФормы;
	
КонецФункции // ПолучитьДанныеВозвратаДляОтображенияНаФорме()

// Построить отчет по операциям
//
// Параметры:
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//
// Возвращаемое значение:
//   Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
Функция ПостроитьОтчетПоОперациям(ПараметрыВзаимодействия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = ПолучитьСтруктуруРезультатВыполнения();
	
	// Вызвать функцию регистрации счета, соответствукющую типу интерфейса
	ОбщийМодульИнтерфейса = ОбщийМодульДляТипаИнтерфейса(ПараметрыВзаимодействия.ТипИнтерфейса, РезультатВыполнения);
	Если ОбщийМодульИнтерфейса = Неопределено Тогда
		
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	ТаблицаОтчета = ПолучитьТаблицуОтчетаПоОперациям();
	
	ОбщийМодульИнтерфейса.ПостроитьОтчетПоОперациям(ТаблицаОтчета, ПараметрыВзаимодействия, РезультатВыполнения);
	
	Если РезультатВыполнения.Успешно Тогда
		
		АдресВрХранилища = ПоместитьВоВременноеХранилище(ТаблицаОтчета, ПараметрыВзаимодействия.УникальныйИдентификатор);
		ПараметрыВзаимодействия.Вставить("АдресВрХранилища", АдресВрХранилища);
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции // ПостроитьОтчетПоОперациям()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Получить структуру для описания результата выполнения операции и сообщений пользователю
//
// Возвращаемое значение:
//   Структура - Поля структуры:
//     * Успешно - Булево - признак успешного выполнения операции
//     * ТекстыСообщений - Массив из Строка - тексты сообщений пользователю
//     * ИмяСобытияЖР - Строка - имя события для журнала регистрацци событий
//
Функция ПолучитьСтруктуруРезультатВыполнения() Экспорт
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Успешно", Истина);
	ТекстыСообщений = Новый Массив;
	РезультатВыполнения.Вставить("ТекстыСообщений", ТекстыСообщений);
	ИмяСобытияЖР = ПолучитьИмяСобытияЖР();
	РезультатВыполнения.Вставить("ИмяСобытияЖР", ИмяСобытияЖР);
	
	Возврат РезультатВыполнения;
	
КонецФункции // ПолучитьСтруктуруРезультатВыполнения()

// Проверить регистрацию счета в платежном шлюзе
//
// Параметры:
//  СчетНаОплату - ДокументСсылка.СчетНаОплату, ДокументСсылка.СчетНаОплатуЗаАвтомобили - документ, регистрацию
//                 которого в платежном шлюзе необходимо проверить
//  ВернутьДанныеРегистрации - Булево - помещать параметры регистрации в результат проверки
//
// Возвращаемое значение:
//   Структура - см. ПолучитьСтруктуруРезультатВыполнения(). Кроме этого:
//     * СчетЗарегистрирован     - Булево - ИСТИНА - счет уже зарегистрирован, ЛОЖЬ - в противном случае
//   и, если ВернутьДанныеРегистрации = ИСТИНА, то:
//     * Интерфейс               - СправочникСсылка.ИнтерфейсыДляВнешнихСистем
//     * ТипИнтерфейса           - ПеречислениеСсылка.ТипыИнтерфейсовДляВнешнихСистем
//     * ДатаРегистрации         - Дата
//     * СрокЖизниСсылки         - Дата
//     * КонтактДляОтправкиЧеков - Строка
//     * АдресФормыОплаты        - Строка
//     * СтатусОперации          - ПеречислениеСсылка.СтатусыОнлайнОплат
//
Функция ПроверитьРегистрациюСчета(СчетНаОплату, ВернутьДанныеРегистрации = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = ПолучитьСтруктуруРезультатВыполнения();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныйШлюз.Интерфейс КАК Интерфейс,
	|	ПлатежныйШлюз.Интерфейс.ТипИнтерфейса КАК ТипИнтерфейса,
	|	ПлатежныйШлюз.ДатаРегистрации КАК ДатаРегистрации,
	|	ПлатежныйШлюз.СрокЖизниСсылки КАК СрокЖизниСсылки,
	|	ПлатежныйШлюз.КонтактДляОтправкиЧеков КАК КонтактДляОтправкиЧеков,
	|	ПлатежныйШлюз.АдресФормыОплаты КАК АдресФормыОплаты,
	|	ПлатежныйШлюз.СтатусОперации КАК СтатусОперации
	|ИЗ
	|	РегистрСведений.ПлатежныйШлюз КАК ПлатежныйШлюз
	|ГДЕ
	|	ПлатежныйШлюз.СчетНаОплату = &СчетНаОплату
	|	И ПлатежныйШлюз.ЗаявкаНаРасходДС = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходДС.ПустаяСсылка)";
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ВернутьДанныеРегистрации Тогда
			
			РезультатВыполнения.Вставить("Интерфейс", Выборка.Интерфейс);
			РезультатВыполнения.Вставить("ТипИнтерфейса", Выборка.ТипИнтерфейса);
			РезультатВыполнения.Вставить("ДатаРегистрации", Выборка.ДатаРегистрации);
			РезультатВыполнения.Вставить("СрокЖизниСсылки", Выборка.СрокЖизниСсылки);
			РезультатВыполнения.Вставить("КонтактДляОтправкиЧеков", Выборка.КонтактДляОтправкиЧеков);
			РезультатВыполнения.Вставить("АдресФормыОплаты", Выборка.АдресФормыОплаты);
			РезультатВыполнения.Вставить("СтатусОперации", Выборка.СтатусОперации);
			
		Иначе
			
			СтрокаШаблон = НСтр("ru='Счет уже зарегистрирован в шлюзе %1 в %2 срок оплаты - до %3'");
			ФорматДаты = НСтр("ru='ДФ=''HH:mm ""(МСК)""'''");
			ДатаРегистрации = Формат(Выборка.ДатаРегистрации, ФорматДаты);
			СрокЖизниСсылки = Формат(Выборка.СрокЖизниСсылки, ФорматДаты);
			ТекстСообщения = СтрШаблон(СтрокаШаблон, Выборка.Интерфейс, ДатаРегистрации, СрокЖизниСсылки);
			РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		РезультатВыполнения.Вставить("СчетЗарегистрирован", Истина);
		
	Иначе
		
		РезультатВыполнения.Вставить("СчетЗарегистрирован", Ложь);
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции // ПроверитьРегистрациюСчета()

// Проверить регистрацию Заявки на расход д/с в платежном шлюзе
//
// Параметры:
//  ЗаявкаНаРасходДС - ДокументСсылка.ЗаявкаНаРасходДС
//
// Возвращаемое значение:
//   Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
Функция ПроверитьРегистрациюЗаявкиНаРасход(ЗаявкаНаРасходДС) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = ПолучитьСтруктуруРезультатВыполнения();
	РезультатВыполнения.Вставить("ЗаявкаЗарегистрирована", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныйШлюз.СчетНаОплату КАК СчетНаОплату,
	|	ПлатежныйШлюз.ЗаявкаНаРасходДС КАК ЗаявкаНаРасходДС,
	|	ПлатежныйШлюз.ДатаРегистрации КАК ДатаРегистрации
	|ИЗ
	|	РегистрСведений.ПлатежныйШлюз КАК ПлатежныйШлюз
	|ГДЕ
	|	ПлатежныйШлюз.ЗаявкаНаРасходДС = &ЗаявкаНаРасходДС";
	Запрос.УстановитьПараметр("ЗаявкаНаРасходДС", ЗаявкаНаРасходДС);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтрокаШаблон = НСтр("ru='%1 уже зарегистрирована для %2. Дата регистрации - %3 в %4 (МСК)'");
		ФорматДаты = НСтр("ru='ДЛФ=D'");
		ФорматВремени = НСтр("ru='ДФ=HH:mm'");
		ДатаРегистрации = Формат(Выборка.ДатаРегистрации, ФорматДаты);
		ВремяРегистрации = Формат(Выборка.ДатаРегистрации, ФорматВремени);
		ТекстСообщения = СтрШаблон(СтрокаШаблон, Выборка.ЗаявкаНаРасходДС, Выборка.СчетНаОплату, ДатаРегистрации
		, ВремяРегистрации);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		РезультатВыполнения.Успешно = Ложь;
		РезультатВыполнения.ЗаявкаЗарегистрирована = Истина;
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции // ПроверитьРегистрациюЗаявкиНаРасход()

// Получить массив допустимых для онлайн-оплаты типов оснований у документов СчетНаОплату и СчетНаОплатуЗаАвтомобили
//
// Возвращаемое значение:
//   Массив
//
Функция ПолучитьМассивТиповОснований() Экспорт
	
	МассивТиповОснований = Новый Массив;
	МассивТиповОснований.Добавить(Тип("ДокументСсылка.ЗаказНаряд"));
	МассивТиповОснований.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	МассивТиповОснований.Добавить(Тип("ДокументСсылка.РеализацияТоваров"));
	МассивТиповОснований.Добавить(Тип("ДокументСсылка.ЗаказНаАвтомобиль"));
	МассивТиповОснований.Добавить(Тип("ДокументСсылка.РеализацияАвтомобилей"));
	МассивТиповОснований.Добавить(Тип("ДокументСсылка.ЗаявкаНаХранениеШин"));
	
	Возврат МассивТиповОснований;
	
КонецФункции // ПолучитьМассивТиповОснований()

// Получить интерфейс для заданного счета на оплату
//
// Параметры:
//  СчетНаОплату        - ДокументСсылка.СчетНаОплату, ДокументСсылка.СчетНаОплатуЗаАвтомобили
//
// Возвращаемое значение:
//   СправочникСсылка.ИнтерфейсыДляВнешнихСистем - ссылка на интерфейс или НЕОПРЕДЕЛЕНО, если интерфейс не определен
//
Функция ПолучитьИнтерфейсПоСчету(СчетНаОплату) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныйШлюз.Интерфейс КАК Интерфейс
	|ИЗ
	|	РегистрСведений.ПлатежныйШлюз КАК ПлатежныйШлюз
	|ГДЕ
	|	ПлатежныйШлюз.СчетНаОплату = &СчетНаОплату";
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.Интерфейс;
	
	Иначе
	
		Возврат Неопределено;
	
	КонецЕсли;
	
КонецФункции // ПолучитьИнтерфейсПоСчету()

// Получить доступные интерфейсы для счета
//
// Параметры:
//  СчетНаОплату        - ДокументСсылка.СчетНаОплату, ДокументСсылка.СчетНаОплатуЗаАвтомобили
//  РезультатВыполнения - см. ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.ИнтерфейсыДляВнешнихСистем - массив доступных интерфейсов
//
Функция ПолучитьДоступныеИнтерфейсы(СчетНаОплату, РезультатВыполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетНаОплату
	, "ПодразделениеКомпании,ПодразделениеКомпании.Родитель,ПодразделениеКомпании.ФилиалКомпании,Организация");
	ПодразделениеКомпании = РеквизитыСчета.ПодразделениеКомпании;
	ПодразделениеКомпанииРодитель = РеквизитыСчета.ПодразделениеКомпанииРодитель;
	ФилиалКомпании = РеквизитыСчета.ПодразделениеКомпанииФилиалКомпании;
	Организация = РеквизитыСчета.Организация;
	
	МассивПодразделений = Новый Массив;
	МассивПодразделений.Добавить(ПодразделениеКомпании);
	Пока ЗначениеЗаполнено(ПодразделениеКомпанииРодитель) Цикл
	
		МассивПодразделений.Добавить(ПодразделениеКомпанииРодитель);
		ПодразделениеКомпанииРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодразделениеКомпанииРодитель, "Родитель");
	
	КонецЦикла;
	
	МассивТиповИнтерфейсов = ПолучитьМассивТиповИнтерфейсовОнлайнОплаты();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнтерфейсыДляВнешнихСистем.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИнтерфейсыДляВнешнихСистем КАК ИнтерфейсыДляВнешнихСистем
	|ГДЕ
	|	ИнтерфейсыДляВнешнихСистем.ТипИнтерфейса В(&МассивТиповИнтерфейсов)
	|	И ИнтерфейсыДляВнешнихСистем.ПометкаУдаления = ЛОЖЬ
	|	И ИнтерфейсыДляВнешнихСистем.НеИспользуется = ЛОЖЬ
	|	И (ИнтерфейсыДляВнешнихСистем.Назначение = НЕОПРЕДЕЛЕНО
	|			ИЛИ ТИПЗНАЧЕНИЯ(ИнтерфейсыДляВнешнихСистем.Назначение) = ТИП(Справочник.Организации)
	|				И ИнтерфейсыДляВнешнихСистем.Назначение = &Организация
	|			ИЛИ ТИПЗНАЧЕНИЯ(ИнтерфейсыДляВнешнихСистем.Назначение) = ТИП(Справочник.ФилиалыКомпании)
	|				И ИнтерфейсыДляВнешнихСистем.Назначение = &ФилиалКомпании
	|			ИЛИ ТИПЗНАЧЕНИЯ(ИнтерфейсыДляВнешнихСистем.Назначение) = ТИП(Справочник.ПодразделенияКомпании)
	|				И ИнтерфейсыДляВнешнихСистем.Назначение В (&МассивПодразделений))";
	Запрос.УстановитьПараметр("МассивТиповИнтерфейсов", МассивТиповИнтерфейсов);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ФилиалКомпании", ФилиалКомпании);
	Запрос.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
	
	МассивИнтерфейсов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если МассивИнтерфейсов.Количество() = 0 Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='Подразделение %1 не имеет интерфейсов для онлайн-оплаты'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, ПодразделениеКомпании);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	Возврат МассивИнтерфейсов;
	
КонецФункции // ПолучитьДоступныеИнтерфейсы()

// Получить ответ HTTP-сервиса
//
// Параметры:
//  ПараметрыВзаимодействия  - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения      - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Соответствие   - ответ сервера
//
Функция ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения) Экспорт
	
	Соединение = ПолучитьСоединение(ПараметрыВзаимодействия, РезультатВыполнения);
	
	Если Соединение = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИмяВыходногоФайла = "";
	
	Если ПараметрыВзаимодействия.Свойство("ИмяВыходногоФайла") Тогда
		
		ИмяВыходногоФайла = ПараметрыВзаимодействия.ИмяВыходногоФайла;
		
	КонецЕсли;
	
	МетодОтправитьДляОбработки = "POST";
	МетодПолучитьЗаголовки = "HEAD";
	
	Если ПараметрыВзаимодействия.Свойство("МетодЗапроса") Тогда
		
		МетодЗапроса = ПараметрыВзаимодействия.МетодЗапроса;
		
	Иначе
		
		МетодЗапроса = МетодОтправитьДляОбработки;
		
	КонецЕсли;
	
	ФорматТелаСтрока = "ТелоКакСтрока";
	ФорматТелаДвДанные = "ТелоКакДвДанные";
	
	ФорматТела = ФорматТелаСтрока;
	
	Если ПараметрыВзаимодействия.Свойство("ФорматТела") Тогда
		
		ФорматТела = ПараметрыВзаимодействия.ФорматТела;
		
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(ПараметрыВзаимодействия.АдресРесурса, ПараметрыВзаимодействия.Заголовки);
	
	Если МетодЗапроса = МетодОтправитьДляОбработки Тогда
		
		Запрос.УстановитьТелоИзСтроки(ПараметрыВзаимодействия.ПараметрыЗапроса);
		Ответ = Соединение.ОтправитьДляОбработки(Запрос, ИмяВыходногоФайла);
		
	ИначеЕсли МетодЗапроса = МетодПолучитьЗаголовки Тогда
		
		Ответ = Соединение.ПолучитьЗаголовки(Запрос);
		
	Иначе // GET
		
		Ответ = Соединение.Получить(Запрос, ИмяВыходногоФайла);
		
	КонецЕсли;
	
	МинКодСостоянияОК = 200;
	МаксКодСостоянияОК = 299;
	
	Если Ответ.КодСостояния < МинКодСостоянияОК ИЛИ Ответ.КодСостояния > МаксКодСостоянияОК Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		РезультатВыполнения.Вставить("КодСостояния", Ответ.КодСостояния);
		СтрокаШаблон = НСтр("ru='Платежный шлюз не смог обработать запрос. Код состояния %1'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, Ответ.КодСостояния);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		Комментарий = ПолучитьТекстЗапросаБезПароля(ПараметрыВзаимодействия);
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, ,
		, ТекстСообщения + Символы.ПС + Комментарий);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если МетодЗапроса = МетодПолучитьЗаголовки Тогда
		
		ОтветСервера = Ответ.Заголовки;
		
	Иначе
		
		Если ФорматТела = ФорматТелаСтрока Тогда
			
			ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
			
			ЧтениеДанных = Новый ЧтениеJSON;
			ЧтениеДанных.УстановитьСтроку(ТелоКакСтрока);
			
			Попытка
				
				ОтветСервера = ПрочитатьJSON(ЧтениеДанных, Истина);
				
			Исключение
				
				ОтветСервера = Неопределено;
				РезультатВыполнения.Успешно = Ложь;
				ТекстСообщения = НСтр("ru='Не удалось прочитать ответ сервера в формате JSON'");
				РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
				СтрокаШаблон = НСтр("ru='Ответ сервера строкой:%1%2'");
				Комментарий = СтрШаблон(СтрокаШаблон, Символы.ПС, ТелоКакСтрока);
				ДопИнформация = ТекстСообщения + Символы.ПС + Комментарий;
				ИнфОбОшибке = ИнформацияОбОшибке();
				ЗаписатьОшибкуВЖурналРегистрации(РезультатВыполнения, ИнфОбОшибке, ДопИнформация);
				
			КонецПопытки;	
			
		Иначе // ФорматТела - ФорматТелаДвДанные
			
			ОтветСервера = Ответ.ПолучитьТелоКакДвоичныеДанные();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОтветСервера;
	
КонецФункции // ПолучитьОтветСервера()

// Записать ошибку в журнал регистрации событий
//
// Параметры:
//  РезультатВыполнения - см. ПолучитьСтруктуруРезультатВыполнения
//  ДопИнформация       - Строка - дополнительная информация
//  ИнфОбОшибке         - ИнформацияОбОшибке
//  Данные              - см. описание параметра Данные процедуры ЗаписьЖурналаРегистрации 
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(РезультатВыполнения, ИнфОбОшибке = Неопределено, ДопИнформация = ""
	, Данные = Неопределено) Экспорт
	
	ТекстКомментария = ПолучитьТекстСообщений(РезультатВыполнения);
	
	Если ИнфОбОшибке <> Неопределено Тогда
		
		ПодробнаяИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнфОбОшибке);
		СтрокаШаблон = НСтр("ru='%1Информация об ошибке:%2%3'");
		ТекстКомментария = ТекстКомментария + СтрШаблон(СтрокаШаблон, Символы.ПС, Символы.ПС, ПодробнаяИнформацияОбОшибке);
		
	КонецЕсли;
	
	Если ДопИнформация <> "" Тогда
	
		СтрокаШаблон = НСтр("ru='%1Дополнительная информация:%2%3'");
		ТекстКомментария = ТекстКомментария + СтрШаблон(СтрокаШаблон, Символы.ПС, Символы.ПС, ДопИнформация);
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстКомментария);
		
КонецПроцедуры // ЗаписатьОшибкуВЖурналРегистрации()

// Получить ответ HTTP-сервиса или параметры запроса в виде форматированного текста
//
// Параметры:
//  ОтветСервера - Соответствие - ответ HTTP-сервиса или параметры запроса в формате JSON
//  Заголовок    - Строка - заголовок форматированного текста
//
// Возвращаемое значение:
//   Строка - форматированный текст
//
Функция ПолучитьТекстОтветаСервера(ОтветСервера, Заголовок = "") Экспорт
	
	Если Заголовок = "" Тогда
		ТекстОтвета = НСтр("ru='Ответ сервера:'");
	Иначе
		ТекстОтвета = Заголовок;
	КонецЕсли;
	
	Для каждого КлючЗначение1 Из ОтветСервера Цикл
		
		Если ТипЗнч(КлючЗначение1.Значение) = Тип("Массив") Тогда
			
			СтрокаШаблон = НСтр("ru='%1%2 (Массив):'");
			СтрокаТекста = СтрШаблон(СтрокаШаблон, Символы.ПС, КлючЗначение1.Ключ);
			ТекстОтвета = ТекстОтвета + СтрокаТекста;
			
			Для каждого Элемент Из КлючЗначение1.Значение Цикл
				
				Если ТипЗнч(Элемент) = Тип("Соответствие") Тогда
					
					Для каждого КлючЗначение2 Из Элемент Цикл
						
						ТипЗначенияПеременной = ТипЗнч(КлючЗначение2.Значение);
						СтрокаШаблон = НСтр("ru='%1%2%3 = %4 (%5)'");
						СтрокаТекста = СтрШаблон(СтрокаШаблон, Символы.ПС, Символы.Таб, КлючЗначение2.Ключ
						, КлючЗначение2.Значение, ТипЗначенияПеременной);
						ТекстОтвета = ТекстОтвета + СтрокаТекста;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(КлючЗначение1.Значение) = Тип("Соответствие") Тогда
			
			СтрокаШаблон = НСтр("ru='%1%2 (Соответствие):'");
			СтрокаТекста = СтрШаблон(СтрокаШаблон, Символы.ПС, КлючЗначение1.Ключ);
			ТекстОтвета = ТекстОтвета + СтрокаТекста;
			Подробности = КлючЗначение1.Значение;
			
			Для каждого КлючЗначение2 Из Подробности Цикл
				
				Если ТипЗнч(КлючЗначение2.Значение) = Тип("Соответствие") Тогда
					
					СтрокаШаблон = НСтр("ru='%1%2%3 (Соответствие):'");
					СтрокаТекста = СтрШаблон(СтрокаШаблон, Символы.ПС, Символы.Таб, КлючЗначение2.Ключ);
					ТекстОтвета = ТекстОтвета + СтрокаТекста;
					
					Для каждого КлючЗначение3 Из КлючЗначение2.Значение Цикл
						
						ТипЗначенияПеременной = ТипЗнч(КлючЗначение3.Значение);
						СтрокаШаблон = НСтр("ru='%1%2%3%4 = %5 (%6)'");
						СтрокаТекста = СтрШаблон(СтрокаШаблон, Символы.ПС, Символы.Таб, Символы.Таб, КлючЗначение3.Ключ
						, КлючЗначение3.Значение, ТипЗначенияПеременной);
						ТекстОтвета = ТекстОтвета + СтрокаТекста;
						
					КонецЦикла;
					
				Иначе
					
					ТипЗначенияПеременной = ТипЗнч(КлючЗначение2.Значение);
					СтрокаШаблон = НСтр("ru='%1%2%3 = %4 (%5)'");
					СтрокаТекста = СтрШаблон(СтрокаШаблон, Символы.ПС, Символы.Таб, КлючЗначение2.Ключ
					, КлючЗначение2.Значение, ТипЗначенияПеременной);
					ТекстОтвета = ТекстОтвета + СтрокаТекста;	
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ТипЗначенияПеременной = ТипЗнч(КлючЗначение1.Значение);
			СтрокаШаблон = НСтр("ru='%1%2 = %3 (%4)'");
			СтрокаТекста = СтрШаблон(СтрокаШаблон, Символы.ПС, КлючЗначение1.Ключ, КлючЗначение1.Значение
			, ТипЗначенияПеременной);
			ТекстОтвета = ТекстОтвета + СтрокаТекста;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстОтвета;
	
КонецФункции // ПолучитьТекстОтветаСервиса()

// Получить текст HTTP-запроса с маскированными паролями и токенами
//
// Параметры:
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ПолучитьТекстЗапросаБезПароля(ПараметрыВзаимодействия) Экспорт
	
	СтрокаЗаголовки = НСтр("ru='Заголовки:'");
	СтрокаШаблон = НСтр("ru='%1%2: %3'");
	Для каждого КлючЗначение Из ПараметрыВзаимодействия.Заголовки Цикл
		СтрокаЗаголовки = СтрокаЗаголовки + СтрШаблон(СтрокаШаблон, Символы.ПС, КлючЗначение.Ключ
		, КлючЗначение.Значение);
	КонецЦикла;
	
	СтрокаШаблон = НСтр("ru='Хост:%1%2%1Адрес ресурса:%1%3%1Параметры запроса:%1%4'");
	
	Если ПараметрыВзаимодействия.Свойство("ПараметрыЗапроса") Тогда
		ПараметрыБезПароля = ПараметрыВзаимодействия.ПараметрыЗапроса;
	Иначе
		ПараметрыБезПароля = "";
	КонецЕсли;
	
	ПредставлениеПароля = НСтр("ru='******'");
	
	// Запикать экранированный пароль (xForm)
	Если ПараметрыВзаимодействия.Свойство("Пароль") Тогда
		
		ЭкранированныйПароль = Экран(ПараметрыВзаимодействия.Пароль);
		ПараметрыБезПароля = СтрЗаменить(ПараметрыБезПароля, ЭкранированныйПароль, ПредставлениеПароля);
		
		// Запикать неэкранированный пароль (JSON)
		НеЭкранированныйПароль = ПараметрыВзаимодействия.Пароль;
		ПараметрыБезПароля = СтрЗаменить(ПараметрыБезПароля, НеЭкранированныйПароль, ПредставлениеПароля);
		
	КонецЕсли;
	
	Если ПараметрыВзаимодействия.Свойство("ТокенАвторизации") Тогда
		ТокенАвторизации = ПараметрыВзаимодействия.ТокенАвторизации;
		ПараметрыБезПароля = СтрЗаменить(ПараметрыБезПароля, ТокенАвторизации, ПредставлениеПароля);
	КонецЕсли;
	
	Если ПараметрыВзаимодействия.Свойство("ТокенИПП") Тогда
		ТокенИПП = ПараметрыВзаимодействия.ТокенИПП;
		ПараметрыБезПароля = СтрЗаменить(ПараметрыБезПароля, ТокенИПП, ПредставлениеПароля);
	КонецЕсли;
	
	Если ПараметрыВзаимодействия.Свойство("ПарольИПП") Тогда
		ПарольИПП = ПараметрыВзаимодействия.ПарольИПП;
		ПараметрыБезПароля = СтрЗаменить(ПараметрыБезПароля, ПарольИПП, ПредставлениеПароля);
	КонецЕсли;
	
	ТекстЗапросаБезПароля = СтрШаблон(СтрокаШаблон, Символы.ПС, ПараметрыВзаимодействия.Хост
	, ПараметрыВзаимодействия.АдресРесурса, ПараметрыБезПароля);
	
	СтрокаРезультат = СтрокаЗаголовки + Символы.ПС + ТекстЗапросаБезПароля;
	
	Возврат СтрокаРезультат;
		
КонецФункции // ПолучитьТекстЗапросаБезПароля()

// Кодировать строку в КодировкаURL
//
// Параметры:
//  ЭкранируемаяСтрока - Строка - кодируемая строка
//
// Возвращаемое значение:
//   Строка - строка в кодировке URL
//
Функция Экран(ЭкранируемаяСтрока) Экспорт
	
	Возврат КодироватьСтроку(ЭкранируемаяСтрока, СпособКодированияСтроки.КодировкаURL, КодировкаТекста.UTF8);
	
КонецФункции // Экран()

// Получить данные счета на оплату, необходимые для взаимодействия с платежным шлюзом при получении статуса оплаты
// или возврата
//
// Параметры:
//  СчетНаОплату        - ДокументСсылка.СчетНаОплату, ДокументСсылка.СчетНаОплатуЗаАвтомобили - документ, по которому
//                        необходимо получить состояние оплаты в платежном шлюзе
//  РезультатВыполнения - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Структура - данные счета
//
Функция ПолучитьДанныеЗарегистрированногоСчета(СчетНаОплату, РезультатВыполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныйШлюз.СчетНаОплату КАК СчетНаОплату,
	|	ПлатежныйШлюз.ЗаявкаНаРасходДС КАК ЗаявкаНаРасходДС,
	|	ПлатежныйШлюз.СчетНаОплату.ПометкаУдаления КАК ПометкаУдаления,
	|	ПлатежныйШлюз.СчетНаОплату.ДокументОснование КАК ДокументОснование,
	|	ПлатежныйШлюз.СчетНаОплату.СуммаДокумента КАК СуммаСчета,
	|	ПлатежныйШлюз.СчетНаОплату.ОплатаОнлайн КАК ОплатаОнлайн,
	|	ПлатежныйШлюз.СчетНаОплату.Организация КАК Организация,
	|	ПлатежныйШлюз.СчетНаОплату.ПодразделениеКомпании.ФилиалКомпании КАК ФилиалКомпании,
	|	ПлатежныйШлюз.СчетНаОплату.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ПлатежныйШлюз.СчетНаОплату.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ПлатежныйШлюз.Интерфейс КАК Интерфейс,
	|	ПлатежныйШлюз.Интерфейс.ТипИнтерфейса КАК ТипИнтерфейса,
	|	ПлатежныйШлюз.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
	|	ПлатежныйШлюз.ИдентификаторОперацииОплаты КАК ИдентификаторОперацииОплаты,
	|	ПлатежныйШлюз.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ПлатежныйШлюз.КонтактДляОтправкиЧеков КАК КонтактДляОтправкиЧеков,
	|	ПлатежныйШлюз.ДатаРегистрации КАК ДатаРегистрации,
	|	ПлатежныйШлюз.СрокЖизниСсылки КАК СрокЖизниСсылки,
	|	ПлатежныйШлюз.ДатаУведомления КАК ДатаУведомления,
	|	ПлатежныйШлюз.СтатусУведомления КАК СтатусУведомления,
	|	ПлатежныйШлюз.ДатаОперации КАК ДатаОперации,
	|	ПлатежныйШлюз.СтатусОперации КАК СтатусОперации,
	|	ПлатежныйШлюз.СуммаОперации КАК СуммаОперации,
	|	ПлатежныйШлюз.ЧекНаОплату КАК ЧекНаОплату,
	|	ПлатежныйШлюз.СпособОплаты КАК СпособОплаты,
	|	ПлатежныйШлюз.ИдентификаторОперацииЭмитента КАК ИдентификаторОперацииЭмитента,
	|	ПлатежныйШлюз.КодАвторизации КАК КодАвторизации,
	|	ПлатежныйШлюз.НазначениеПлатежа КАК НазначениеПлатежа
	|ИЗ
	|	РегистрСведений.ПлатежныйШлюз КАК ПлатежныйШлюз
	|ГДЕ
	|	ПлатежныйШлюз.СчетНаОплату = &СчетНаОплату
	|	И ПлатежныйШлюз.ЗаявкаНаРасходДС = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходДС.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		// Нет записи в регистре - нет общего языка с платежным шлюзом
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = СтрШаблон(НСтр("ru='В регистре сведений Платежный шлюз нет записи для %1'"), СчетНаОплату);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСчета = Новый Структура;
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеСчета.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;
	
	ЭтоЭтапВозврата = ЭтоВозврат(СчетНаОплату);
	ДанныеСчета.Вставить("ЭтоВозврат", ЭтоЭтапВозврата);
	Если ДанныеСчета.ЭтоВозврат Тогда
		ТаблицаВозвратов = ПолучитьТаблицуАктивныхВозвратов(СчетНаОплату);
		ДанныеСчета.Вставить("ТаблицаВозвратов", ТаблицаВозвратов);
		АктивнаяСтрокаВозврат = Неопределено;
		Если ТаблицаВозвратов.Количество() > 0 Тогда
			АктивнаяСтрокаВозврат = ТаблицаВозвратов[0];
		КонецЕсли;
		ДанныеСчета.Вставить("АктивнаяСтрокаВозврат", АктивнаяСтрокаВозврат);
	КонецЕсли;
	
	Возврат ДанныеСчета;
	
КонецФункции // ПолучитьДанныеЗарегистрированногоСчета()

// Сохранить ответ HTTP-сервиса в виде текста в журнал регистрации событий
//
// Параметры:
//  ДанныеСчета         - Структура - реквизиты Счета на оплату
//  ОтветСервера        - Соответствие - ответ HTTP-сервиса в формате JSON
//  РезультатВыполнения - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
Процедура СохранитьОтветСервераВЖурнал(ДанныеСчета, ОтветСервера, РезультатВыполнения) Экспорт
	
	ТекстОтвета = ПолучитьТекстОтветаСервера(ОтветСервера);
	
	ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Информация,
	, ДанныеСчета.СчетНаОплату, ТекстОтвета);
	
КонецПроцедуры // СохранитьОтветСервераВЖурнал()

// Записать регистрацию счета в регистр ПлатежныйШлюз
//
// Параметры:
//  ДанныеСчета             - Структура - реквизиты счета на оплату
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево - признак успешного выполнения операции
//
Процедура ЗаписатьРегистрациюСчета(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения) Экспорт
	
	ДанныеРегистрации = Новый Структура;
	ДанныеРегистрации.Вставить("СчетНаОплату", ДанныеСчета.СчетНаОплату);
	ДанныеРегистрации.Вставить("ЗаявкаНаРасходДС", Документы.ЗаявкаНаРасходДС.ПустаяСсылка());
	ДанныеРегистрации.Вставить("Интерфейс", ПараметрыВзаимодействия.Интерфейс);
	ДанныеРегистрации.Вставить("ИдентификаторЗапроса", ДанныеСчета.ИдентификаторЗапроса);
	ДанныеРегистрации.Вставить("ИдентификаторОперацииОплаты", ДанныеСчета.ИдентификаторОперацииОплаты);
	ДанныеРегистрации.Вставить("ДатаРегистрации", ДанныеСчета.ДатаРегистрации);
	Если ДанныеСчета.Свойство("СрокЖизниСсылки") Тогда
		ДанныеРегистрации.Вставить("СрокЖизниСсылки", ДанныеСчета.СрокЖизниСсылки);
	ИначеЕсли ПараметрыВзаимодействия.Свойство("ВремяОжиданияОплаты") Тогда
		СекундВМинуте = 60;
		ДанныеРегистрации.Вставить("СрокЖизниСсылки", ДанныеСчета.ДатаРегистрации
		+ ПараметрыВзаимодействия.ВремяОжиданияОплаты * СекундВМинуте);
	Иначе
		ДанныеРегистрации.Вставить("СрокЖизниСсылки", ДанныеСчета.ДатаРегистрации);
	КонецЕсли;
	
	ДанныеРегистрации.Вставить("СтатусОперации", Перечисления.СтатусыОнлайнОплат.ОжиданиеОплаты);
	
	Если ДанныеСчета.Свойство("ДатаУведомления") Тогда
		ДанныеРегистрации.Вставить("ДатаУведомления", ДанныеСчета.ДатаУведомления);
	КонецЕсли;
	
	ДанныеРегистрации.Вставить("НазначениеПлатежа", ДанныеСчета.НазначениеПлатежа);
	
	Если ДанныеСчета.Свойство("АдресФормыОплаты") Тогда
		ДанныеРегистрации.Вставить("АдресФормыОплаты", ДанныеСчета.АдресФормыОплаты);
	КонецЕсли;
	
	Если ДанныеСчета.Свойство("КонтактДляОтправкиЧеков") Тогда
		ДанныеРегистрации.Вставить("КонтактДляОтправкиЧеков", ДанныеСчета.КонтактДляОтправкиЧеков);
	КонецЕсли;
	
	Попытка
		
		ЗаписатьДанныеОбменаРегистр(ДанныеРегистрации, РезультатВыполнения);
		
	Исключение
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Не удалось записать данные регистрации счета в регистр обмена с платежным шлюзом'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры // ЗаписатьРегистрациюСчета()

// Записать данные обмена в регистр ПлатежныйШлюз
//
// Параметры:
//  ДанныеДляЗаписи     - Структура - значения измерений и измененных ресурсов регистра
//  РезультатВыполнения - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
Процедура ЗаписатьДанныеОбменаРегистр(ДанныеДляЗаписи, РезультатВыполнения) Экспорт
	
	Если ДанныеДляЗаписи.Количество() = 0 Тогда
		Возврат; 
	КонецЕсли;
	
	Если НЕ ДанныеДляЗаписи.Свойство("СчетНаОплату") Тогда
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='В данных для записи в регистр Платежный шлюз нет ссылки на Счет'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПлатежныйШлюз");
		ЭлементБлокировки.УстановитьЗначение("СчетНаОплату", ДанныеДляЗаписи.СчетНаОплату);
		ЭлементБлокировки.УстановитьЗначение("ЗаявкаНаРасходДС", ДанныеДляЗаписи.ЗаявкаНаРасходДС);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПлатежныйШлюз.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СчетНаОплату.Установить(ДанныеДляЗаписи.СчетНаОплату);
		НаборЗаписей.Отбор.ЗаявкаНаРасходДС.Установить(ДанныеДляЗаписи.ЗаявкаНаРасходДС);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Запись = НаборЗаписей.Добавить();
		Иначе
			Запись = НаборЗаписей[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДляЗаписи);
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнфОбОшибке = ИнформацияОбОшибке();
		РезультатВыполнения.Успешно = Ложь;
		ДопИнформация = НСтр("ru='Ошибка записи в регистр сведений Платежный шлюз'");
		ЗаписатьОшибкуВЖурналРегистрации(РезультатВыполнения, ИнфОбОшибке, ДопИнформация, ДанныеДляЗаписи.СчетНаОплату);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецПопытки;
	
КонецПроцедуры // ЗаписатьДанныеОбменаРегистр()

// Получить признак возврата по счету
//
// Параметры:
//  СчетНаОплату - ДокументСсылка.СчетНаОплату, ДокументСсылка.СчетНаОплатуЗаАвтомобили - документ, по которому
//                 необходимо получить состояние оплаты в платежном шлюзе
//
// Возвращаемое значение:
//   Булево - ИСТИНА - есть зарегистрированные в шлюзе заявки на расход денежных средств, ЛОЖЬ - в противном случае
//
Функция ЭтоВозврат(СчетНаОплату) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныйШлюз.ЗаявкаНаРасходДС КАК ЗаявкаНаРасходДС
	|ИЗ
	|	РегистрСведений.ПлатежныйШлюз КАК ПлатежныйШлюз
	|ГДЕ
	|	ПлатежныйШлюз.СчетНаОплату = &СчетНаОплату
	|	И ПлатежныйШлюз.ЗаявкаНаРасходДС <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходДС.ПустаяСсылка)";
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции // ЭтоВозврат()

// Проверить корректность адреса электронной почты
// Взято из https://infostart.ru/public/192489/
//
// Параметры:
//  Адрес - Строка - проверяемый адрес
//
// Возвращаемое значение:
//   Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
Функция ПроверитьАдресЭлектроннойПочты(Адрес) Экспорт
	
	РезультатВыполнения = ПолучитьСтруктуруРезультатВыполнения();
	
	Если НЕ ЗначениеЗаполнено(Адрес) Тогда
	
		Возврат РезультатВыполнения;
	
	КонецЕсли;
	
	ЛатинскиеБуквы = НСтр("ru='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'");
	Цифры = НСтр("ru='0123456789'");
	ЛатинскиеБуквыИЦифры = ЛатинскиеБуквы + Цифры;
	СимволСкрепка = НСтр("ru='@'");
	СимволТочка = НСтр("ru='.'");
	СимволПробел = НСтр("ru=' '");
	Длина64 = 64;
	Длина255 = 255;
	
	РезультатВыполнения.Вставить("Адрес", Адрес);
	РезультатВыполнения.Вставить("ЛатинскиеБуквы", ЛатинскиеБуквы);
	РезультатВыполнения.Вставить("Цифры", Цифры);
	РезультатВыполнения.Вставить("ЛатинскиеБуквыИЦифры", ЛатинскиеБуквыИЦифры);
	РезультатВыполнения.Вставить("СимволСкрепка", СимволСкрепка);
	РезультатВыполнения.Вставить("СимволТочка", СимволТочка);
	РезультатВыполнения.Вставить("СимволПробел", СимволПробел);
	РезультатВыполнения.Вставить("Длина64", Длина64);
	РезультатВыполнения.Вставить("Длина255", Длина255);
	
	ПроверитьИндексРазделителя(РезультатВыполнения);
	ПроверитьОтсутствиеПробелов(РезультатВыполнения);
	ПроверитьДлинуДоменнойИЛокальнойЧастей(РезультатВыполнения);
	ПроверитьТочки(РезультатВыполнения);
	ПроверитьИдентификаторыДоменнойЧасти(РезультатВыполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции // ПроверитьАдресЭлектроннойПочты()

// Вывести на печать QR-код для онлайн-оплаты
//
// Параметры:
//  СчетНаОплату    - ДокументСсылка.СчетНаОплату, ДокументСсылка.СчетНаОплатуЗаАвтомобили - документ для оплаты
//  ПараметрыПечати - Структура - данные для вывода на печать
//  ТабДок - ТабличныйДокумент
//
Процедура РаспечататьКодQR(СчетНаОплату, ПараметрыПечати, ТабДок = Неопределено) Экспорт
	
	Если НЕ ПараметрыПечати.Свойство("АдресФормыОплаты") ИЛИ НЕ ПараметрыПечати.Свойство("СрокЖизниСсылки") Тогда
		Возврат;
	КонецЕсли;
	
	ДвДанные = ГенерацияШтрихкода.ДанныеQRКода(ПараметрыПечати.АдресФормыОплаты, 0, 190);
	
	Если ДвДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТабДок = Неопределено Тогда
		ТабДок = Новый ТабличныйДокумент;
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("ПФ_MXL_QR_КодОнлайнОплата");
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ДатаСчета", "Дата");
	Реквизиты.Вставить("НомерСчета", "Номер");
	Реквизиты.Вставить("ДокументОснование", "ДокументОснование");
	Реквизиты.Вставить("Плательщик", "Контрагент.НаименованиеПолное");
	Реквизиты.Вставить("СуммаСчета", "СуммаДокумента");
	Реквизиты.Вставить("ВалютаСчета", "ВалютаДокумента");
	Реквизиты.Вставить("Автор", "Автор");
	Реквизиты.Вставить("ПодразделениеКомпании", "ПодразделениеКомпании");
	ПараметрыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетНаОплату, Реквизиты);
	
	СмещениеВремени
	= ОбщегоНазначенияАвтосалон.СмещениеВремениВПодразделенииКомпании(ПараметрыСчета.ПодразделениеКомпании);
	
	ДатаСервера = ТекущаяДатаСеанса();
	МестнаяДатаСервера = ДатаСервера + СмещениеВремени;
	ПараметрыСчета.Вставить("ДатаПечати", МестнаяДатаСервера);
	СрокОплаты = ПараметрыПечати.СрокЖизниСсылки;
	МестнаяДата = СрокОплаты + СмещениеВремени;
	МестныйСрокОплаты = Формат(МестнаяДата, "ДФ='HH:mm dd.MM.yyyy'");
	ПараметрыСчета.Вставить("СрокОплаты", МестныйСрокОплаты);
	
	Если ЗначениеЗаполнено(ПараметрыСчета.ДокументОснование) Тогда
		Основание = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(ПараметрыСчета.ДокументОснование);
		ПараметрыСчета.Вставить("Основание", Основание);
	КонецЕсли;
	
	ОблИтого = Макет.ПолучитьОбласть("ИтогоБезСкидок");
	
	ПараметрыСчета.ДатаСчета = Формат(ПараметрыСчета.ДатаСчета, "ДЛФ=D");
	ПараметрыСчета.СуммаСчета = Формат(ПараметрыСчета.СуммаСчета, "ЧЦ=15; ЧДЦ=2");
	
	ОблШапка = Макет.ПолучитьОбласть("Шапка");
	ОблШапка.Параметры.Заполнить(ПараметрыСчета);
	ТабДок.Вывести(ОблШапка);
	
	ОблИтого.Параметры.Заполнить(ПараметрыСчета);
	ТабДок.Вывести(ОблИтого);
	
	ОблКод = Макет.ПолучитьОбласть("Код");
	КартинкаКода = Новый Картинка(ДвДанные);
	ОблКод.Рисунки["КодQR"].Картинка = КартинкаКода;
	ОблКод.Параметры.Заполнить(ПараметрыСчета);
	ТабДок.Вывести(ОблКод);
	
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
КонецПроцедуры // РаспечататьКодQR()

// Рассчитать возможную сумму на возврат для заявки на расход д/с
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - объект заявки на расход д/с, для которой нужно рассчитать сумму возврата
//  ПараметрыДействия - Структура - параметры выполнения процедуры. Поля структуры:
//    * УчитыватьОснование - Булево - ИСТИНА - учитывать данные документа-основания у заявки и остаток в банке,
//                                    ЛОЖЬ   - учитывать только остаток в банке
//
Процедура РассчитатьСуммуВозврата(Объект, ПараметрыДействия) Экспорт
	
	ОстатокВБанке = ПолучитьОстатокВБанке(Объект.ВозвратПоСчету, Объект.Ссылка);
	// СуммаВозврата будет вычисляться через функцию Мин(ОстатокВБанке, СуммаВозвратаПоОснованию)
	СуммаВозвратаПоОснованию = ОстатокВБанке;
	
	Если ПараметрыДействия.Свойство("УчитыватьОснование") Тогда
		
		Если ПараметрыДействия.УчитыватьОснование Тогда
		
			СуммаВозвратаПоОснованию = ПолучитьСуммуВозвратаПоОснованию(Объект.ДокументОснование);
			
			Если СуммаВозвратаПоОснованию < 0 Тогда
				// СуммаВозврата будет вычисляться через функцию Мин(ОстатокВБанке, СуммаВозвратаПоОснованию)
				СуммаВозвратаПоОснованию = ОстатокВБанке;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаВозврата = Мин(ОстатокВБанке, СуммаВозвратаПоОснованию);
	
	Если Объект.Платежи.Количество() = 0 Тогда
		СтрокаПлатежи = Объект.Платежи.Добавить();
		СтрокаПлатежи.ДатаПлатежа = ТекущаяДатаСеанса();
	Иначе
		СтрокаПлатежи = Объект.Платежи[0];
	КонецЕсли;
	
	СтрокаПлатежи.Сумма = СуммаВозврата;
	Документы.ЗаявкаНаРасходДС.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // РассчитатьСуммуВозврата()

// Получить остаток оплаты по счету
//
// Параметры:
//  СчетНаОплату     - ДокументСсылка.СчетНаОплату, ДокументСсылка.СчетНаОплатуЗаАвтомобили - документ, по которому
//                     необходимо получить остаток оплаты
//  ЗаявкаНаРасходДС - ДокументСсылка.ЗаявкаНаРасходДС - документ, для которого расчитывается остаток
//
// Возвращаемое значение:
//   Число - остаток оплаты по счету
//
Функция ПолучитьОстатокВБанке(СчетНаОплату, ЗаявкаНаРасходДС = Неопределено) Экспорт
	
	Если ЗаявкаНаРасходДС = Неопределено Тогда
		ЗаявкаНаРасходДС = Документы.ЗаявкаНаРасходДС.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныйШлюз.ЗаявкаНаРасходДС КАК ЗаявкаНаРасходДС,
	|	ВЫБОР
	|		КОГДА ПлатежныйШлюз.ЗаявкаНаРасходДС = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходДС.ПустаяСсылка)
	|			ТОГДА ПлатежныйШлюз.СуммаОперации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаПриход,
	|	ВЫБОР
	|		КОГДА ПлатежныйШлюз.ЗаявкаНаРасходДС = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходДС.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ПлатежныйШлюз.СуммаОперации
	|	КОНЕЦ КАК СуммаРасход
	|ИЗ
	|	РегистрСведений.ПлатежныйШлюз КАК ПлатежныйШлюз
	|ГДЕ
	|	ПлатежныйШлюз.СчетНаОплату = &СчетНаОплату";
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	
	ТабДвижения = Запрос.Выполнить().Выгрузить();
	
	СуммаПриход = 0;
	СуммаРасход = 0;
	Для каждого СтрокаДвижения Из ТабДвижения Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаДвижения.ЗаявкаНаРасходДС) Тогда
			СуммаПриход = СуммаПриход + СтрокаДвижения.СуммаПриход;
		Иначе
			Если СтрокаДвижения.ЗаявкаНаРасходДС <> ЗаявкаНаРасходДС Тогда
				СуммаРасход = СуммаРасход + СтрокаДвижения.СуммаРасход;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаПриход - СуммаРасход;
	
КонецФункции

// Остановить выполнение кода на заданное время
//
// Параметры:
//  Секунд - Число - время ожидания в секундах (от 1 до 15).
//
Процедура Пауза(Секунд) Экспорт
	
	ОбменСБанкамиСлужебный.Пауза(Секунд);
	
КонецПроцедуры

// Записать параметры выполнения запросов в цикле
//
// Параметры:
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  ПредельнаяДлительность  - Число - предельная длительность выполнения цикла запросов в секундах
//  ПаузаМеждуВызовами      - Число - пауза между запросами в цикле в секундах
//  ОписаниеЗапроса         - Строка - описание запроса для журнала регистрации событий на случай, когда установленной
//                            предельной длительности не хватило
//
Процедура УстановитьПараметрыЦиклаЗапросов(ПараметрыВзаимодействия, ПредельнаяДлительность, ПаузаМеждуВызовами
	, ОписаниеЗапроса) Экспорт
	
	ТекДата = ТекущаяДатаСеанса();
	ПредельнаяДата = ТекДата + ПредельнаяДлительность;
	ПараметрыВзаимодействия.Вставить("ПредельнаяДата", ПредельнаяДата);
	ПараметрыВзаимодействия.Вставить("ПаузаМеждуВызовами", ПаузаМеждуВызовами);
	ПараметрыВзаимодействия.Вставить("ПредельнаяДлительность", ПредельнаяДлительность);
	ПараметрыВзаимодействия.Вставить("ОписаниеЗапроса", ОписаниеЗапроса);
	ПараметрыВзаимодействия.Вставить("КоличествоЦиклов", 0);
	ПараметрыВзаимодействия.Вставить("КоличествоИтераций", 0);
	
КонецПроцедуры // УстановитьПараметрыЦиклаЗапросов()

// Определить возможность продолжения выполнения запросов в цикле
//
// Параметры:
//  ПараметрыВзаимодействия - Структура - см. ПолучитьПараметрыВзаимодействия. Кроме этих полей:
//                             * ПредельнаяДата - Дата - дата, до которой возможно выполнение очередного запроса
//                             * ПаузаМеждуВызовами - Число - пауза между запросами в цикле в секундах
//                             * ПредельнаяДлительность - Число - предельная длительность выполнения запросов в цикле
//                               в секундах
//                             * ОписаниеЗапроса - Строка - описание запроса для журнала регистрации событий на случай,
//                               когда установленной предельной длительности не хватило
//                             * КоличествоЦиклов - Число - количество выполненных циклов
//  РезультатВыполнения     - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево - ИСТИНА - выполнение очередного запроса возможно, ЛОЖЬ - в противном случае
//
Функция ПродолжениеЦиклаЗапросовВозможно(ПараметрыВзаимодействия, РезультатВыполнения) Экспорт
	
	ТекДата = ТекущаяДатаСеанса();
	
	Если ТекДата > ПараметрыВзаимодействия.ПредельнаяДата Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		
		СтрокаШаблон = НСтр("ru='Не хватило времени для %1'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, ПараметрыВзаимодействия.ОписаниеЗапроса);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		СтрокаШаблон = НСтр("ru='%1%2Параметры выполнения:'");
		Комментарий = СтрШаблон(СтрокаШаблон, ТекстСообщения, Символы.ПС);
		СтрокаШаблон = НСтр("ru='%1- предельная длительность - %2 с'");
		Комментарий = Комментарий + СтрШаблон(СтрокаШаблон, Символы.ПС, ПараметрыВзаимодействия.ПредельнаяДлительность);
		СтрокаШаблон = НСтр("ru='%1- пауза между вызовами - %2 с'");
		Комментарий = Комментарий + СтрШаблон(СтрокаШаблон, Символы.ПС, ПараметрыВзаимодействия.ПаузаМеждуВызовами);
		СтрокаШаблон = НСтр("ru='%1- количество выполненных циклов - %2'");
		Комментарий = Комментарий + СтрШаблон(СтрокаШаблон, Символы.ПС, ПараметрыВзаимодействия.КоличествоЦиклов);
		
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПараметрыВзаимодействия.КоличествоЦиклов = ПараметрыВзаимодействия.КоличествоЦиклов + 1;
	
	Пауза(ПараметрыВзаимодействия.ПаузаМеждуВызовами);
	
	Возврат Истина;
	
КонецФункции // ПродолжениеЦиклаЗапросовВозможно()

// Вызывается из модулей менеджеров документов СчетНаОплату и СчетНаОплатуЗаАвтомобили при подготовке шаблонов
// сообщений и позволяет переопределить список реквизитов и вложений
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона
//         ** Имя            - Строка - Уникальное имя общего реквизита
//         ** Представление  - Строка - Представление общего реквизита
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения
//         ** Представление  - Строка - Представление варианта
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОнлайнОплаты") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "СуммаДокумента";
	НовыйРеквизит.Представление = НСтр("ru = 'Сумма документа'");
	НовыйРеквизит.Тип = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2));
	
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "ВалютаДокумента";
	НовыйРеквизит.Представление = НСтр("ru = 'Валюта документа'");
	НовыйРеквизит.Тип = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "ПлатежнаяСсылка";
	НовыйРеквизит.Представление = НСтр("ru = 'Платежная ссылка'");
	НовыйРеквизит.Тип = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(0));
	
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "СрокЖизниСсылки";
	НовыйРеквизит.Представление = НСтр("ru = 'Срок действия платежной ссылки'");
	НовыйРеквизит.Тип = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "НазначениеПлатежа";
	НовыйРеквизит.Представление = НСтр("ru = 'Назначение платежа'");
	НовыйРеквизит.Тип = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(128, ДопустимаяДлина.Переменная));
	
КонецПроцедуры

// Вызывается из модулей менеджеров документов СчетНаОплату и СчетНаОплатуЗаАвтомобили в момент создания сообщений
// по шаблону для заполнения значений реквизитов и вложений
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОнлайнОплаты") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметСообщения, "ОплатаОнлайн") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДобавленныеРеквизиты = Новый Массив;
	ДобавленныеРеквизиты.Добавить("СуммаДокумента");
	ДобавленныеРеквизиты.Добавить("ВалютаДокумента");
	ДобавленныеРеквизиты.Добавить("ПлатежнаяСсылка");
	ДобавленныеРеквизиты.Добавить("СрокЖизниСсылки");
	ДобавленныеРеквизиты.Добавить("НазначениеПлатежа");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныйШлюз.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ПлатежныйШлюз.АдресФормыОплаты КАК ПлатежнаяСсылка,
	|	ПлатежныйШлюз.СрокЖизниСсылки КАК СрокЖизниСсылки,
	|	ПлатежныйШлюз.СчетНаОплату.СуммаДокумента КАК СуммаДокумента,
	|	ПлатежныйШлюз.СчетНаОплату.ВалютаДокумента КАК ВалютаДокумента,
	|	ПлатежныйШлюз.СчетНаОплату.ПодразделениеКомпании КАК ПодразделениеКомпании
	|ИЗ
	|	РегистрСведений.ПлатежныйШлюз КАК ПлатежныйШлюз
	|ГДЕ
	|	ПлатежныйШлюз.СчетНаОплату = &СчетНаОплату
	|	И ПлатежныйШлюз.ЗаявкаНаРасходДС = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходДС.ПустаяСсылка)";
	Запрос.УстановитьПараметр("СчетНаОплату", ПредметСообщения);
	
	ТаблицаРеквизитовОплаты = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРеквизитовОплаты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = ТаблицаРеквизитовОплаты[0];
	СмещениеВремени = ОбщегоНазначенияАвтосалон.СмещениеВремениВПодразделенииКомпании(Выборка.ПодразделениеКомпании);
	Выборка.СрокЖизниСсылки = Выборка.СрокЖизниСсылки + СмещениеВремени;
	
	НачалоФормата = "{";
	КонецФормата = "}";
	
	Для каждого ЗначениеРеквизита Из Сообщение.ЗначенияРеквизитов Цикл
		
		Ключ = ЗначениеРеквизита.Ключ;
		ФорматнаяСтрока = "";
		Поз = СтрНайти(Ключ, НачалоФормата);
		Если Поз > 0 Тогда
			Ключ = Лев(Ключ, Поз - 1);
			ФорматнаяСтрока = Прав(ЗначениеРеквизита.Ключ, СтрДлина(ЗначениеРеквизита.Ключ) - Поз);
			ФорматнаяСтрока = СтрЗаменить(ФорматнаяСтрока, КонецФормата, "");
		КонецЕсли;
		
		Индекс = ДобавленныеРеквизиты.Найти(Ключ);
		Если Индекс = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатВыборки = Выборка[Ключ];
		Если РезультатВыборки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеРеквизита.Значение) = Тип("Соответствие") Тогда
			
			// В данном случае это могут быть только реквизиты валюты документа
			ПодчиненныеРеквизиты = ЗначениеРеквизита.Значение;
			Для каждого ПодчиненныйРеквизит Из ПодчиненныеРеквизиты Цикл
				ИмяПодчиненного = ПодчиненныйРеквизит.Ключ;
				ЗначениеПодчиненного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ВалютаДокумента, ИмяПодчиненного);
				ПодчиненныеРеквизиты.Вставить(ИмяПодчиненного, СокрП(ЗначениеПодчиненного));
			КонецЦикла;
			
		Иначе
			
			Если ФорматнаяСтрока = "" Тогда
				ЗначениеПараметра = СокрП(РезультатВыборки);
			Иначе
				ЗначениеПараметра = Формат(РезультатВыборки, ФорматнаяСтрока);
			КонецЕсли;
			
			Сообщение.ЗначенияРеквизитов.Вставить(ЗначениеРеквизита.Ключ, ЗначениеПараметра);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Переводит число в систему счисления hex.
//
// Параметры:
//  Значение - Число - исходное значения для преобразования;
//
// Возвращаемое значение:
//  Строка - результат преобразования
//
Функция ПреобразоватьЧислоВHex(Знач Значение) Экспорт
	
	Если Значение <= 0 Тогда
		ЧислоHex = "0";
	Иначе
		Значение = Цел(Значение);
		ЧислоHex = "";
		Пока Значение > 0 Цикл
			ЧислоHex = Сред("0123456789ABCDEF", Значение % 16 + 1, 1) + ЧислоHex;
			Значение = Цел(Значение / 16);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЧислоHex;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получить имя события для журнала регистрации событий
//
// Возвращаемое значение:
//   Строка - имя события для журнала регистрации событий
//
Функция ПолучитьИмяСобытияЖР()
	
	Возврат НСтр("ru='ОнлайнОплата'");
	
КонецФункции // ПолучитьИмяСобытияЖР()

// Вернуть признак запрета работы с http-сервисом типа Платежный шлюз из копии базы данных.
// Может модифицироваться в расширении конфигурации для работы в тестовой среде,
// но только после перенастройки интерфейсов на тестовый сервис
//
// Параметры:
//  РезультатВыполнения     - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево   - ИСТИНА - заблокировать работу с http-сервисом, ЛОЖЬ - разрешить
//
Функция РаботаСПлатежнымШлюзомЗаблокирована(РезультатВыполнения)
	
	// ++ Закомментировать в расширении для тестирования на тестовом http-сервере в копии базы данных
	// Заблокировать работу с http-сервисом из копии базы данных
	Если ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Работа с платежным шлюзом в копии базы данных заблокирована'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат Истина;
		
	КонецЕсли;
	// ++ Закомментировать в расширении для тестирования на тестовом http-сервере в копии базы данных
	
	Возврат Ложь;
	
КонецФункции // РаботаСПлатежнымШлюзомЗаблокирована()

// Получить все типы интерфейсов для онлайн-оплаты
//
// Возвращаемое значение:
//   Массив из ПеречислениеСсылка.ТипыИнтерфейсовДляВнешнихСистем
//
Функция ПолучитьМассивТиповИнтерфейсовОнлайнОплаты()
	
	МассивТиповИнтерфейсов = Новый Массив;
	МассивТиповИнтерфейсов.Добавить(Перечисления.ТипыИнтерфейсовДляВнешнихСистем.ЮКасса);
	МассивТиповИнтерфейсов.Добавить(Перечисления.ТипыИнтерфейсовДляВнешнихСистем.СБП_1С);
	
	Возврат МассивТиповИнтерфейсов;
	
КонецФункции // ПолучитьМассивТиповИнтерфейсовОнлайнОплаты()

// Получить общий модуль подсистемы ОнлайнОплаты, соответствующий данному типу интерфейса
//
// Параметры:
//  ТипИнтерфейса - Перечисления.ТипыИнтерфейсовДляВнешнихСистем - тип интерфейса, для которого требуется определить
//                  общий модуль
//
// Возвращаемое значение:
//   ОбщийМодуль - общий модуль или Неопределено, если нужный модуля не найден
//
Функция ОбщийМодульДляТипаИнтерфейса(ТипИнтерфейса, РезультатВыполнения)
	
	СоответствиеМодулей = СоответствиеМодулейПлатежныхШлюзов();
	
	Модуль = СоответствиеМодулей.Получить(ТипИнтерфейса);
	
	Если Модуль = Неопределено Тогда
	
		СтрокаШаблон = НСтр("ru='Не найден общий модуль, соответствующий интерфейсу типа %1'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, ТипИнтерфейса);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		РезультатВыполнения.Успешно = Ложь;
	    ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции // ОбщийМодульДляТипаИнтерфейса()

// Получить соответствме общих модулей подсистемы ОнлайнОплаты значениям перечисления ТипыИнтерфейсовДляВнешнихСистем
//
// Возвращаемое значение:
//   Соответствие
//
Функция СоответствиеМодулейПлатежныхШлюзов()
	
	СоответствиеМодулей = Новый Соответствие;
	
	Префикс = "ПлатежныйШлюз";
	
	МассивТиповИнтерфейсов = ПолучитьМассивТиповИнтерфейсовОнлайнОплаты();
	
	Для каждого ОбъектМетаданных Из Метаданные.Перечисления.ТипыИнтерфейсовДляВнешнихСистем.ЗначенияПеречисления Цикл
		
		ИмяЗначенияПеречисление = ОбъектМетаданных.Имя;
		ЗначениеПеречисления = Перечисления.ТипыИнтерфейсовДляВнешнихСистем[ИмяЗначенияПеречисление];
		
		Если МассивТиповИнтерфейсов.Найти(ЗначениеПеречисления) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИмяМодуля = Префикс + ИмяЗначенияПеречисление;
		
		Если Метаданные.ОбщиеМодули.Найти(ИмяМодуля) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МодульДляТипаИнтерфейса = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
		СоответствиеМодулей.Вставить(ЗначениеПеречисления, МодульДляТипаИнтерфейса);
		
	КонецЦикла;
	
	Возврат СоответствиеМодулей;
	
КонецФункции // СоответствиеМодулейПлатежныхШлюзов()

// Получить все интерфейсы онлайн-оплаты, не обрабатывающие входящие уведомления 
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.ИнтерфейсыДляВнешнихСистем
//
Функция ПолучитьМассивИнтерфейсовБезОбработкиВходящихУведомлений()
	
	МассивТиповИнтерфейсовОнлайнОплаты = ПолучитьМассивТиповИнтерфейсовОнлайнОплаты();
	КлючПараметраОбрабатыватьВходящиеУведомления
	= Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрОбрабатыватьВходящиеУведомления().КлючПараметра;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнтерфейсыДляВнешнихСистем.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ВсеИнтерфейсы
	|ИЗ
	|	Справочник.ИнтерфейсыДляВнешнихСистем КАК ИнтерфейсыДляВнешнихСистем
	|ГДЕ
	|	ИнтерфейсыДляВнешнихСистем.ТипИнтерфейса В(&МассивТиповИнтерфейсовОнлайнОплаты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнтерфейсыДляВнешнихСистемПараметрыИнтерфейса.Ссылка КАК Ссылка,
	|	ИнтерфейсыДляВнешнихСистемПараметрыИнтерфейса.ЗначениеПараметра КАК ЗначениеПараметра
	|ПОМЕСТИТЬ ВТ_ИнтерфейсыСПараметром
	|ИЗ
	|	Справочник.ИнтерфейсыДляВнешнихСистем.ПараметрыИнтерфейса КАК ИнтерфейсыДляВнешнихСистемПараметрыИнтерфейса
	|ГДЕ
	|	ИнтерфейсыДляВнешнихСистемПараметрыИнтерфейса.КлючПараметра = &КлючПараметра
	|	И ИнтерфейсыДляВнешнихСистемПараметрыИнтерфейса.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_ВсеИнтерфейсы.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ВсеИнтерфейсы КАК ВТ_ВсеИнтерфейсы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеИнтерфейсы.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_ВсеИнтерфейсы КАК ВТ_ВсеИнтерфейсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИнтерфейсыСПараметром КАК ВТ_ИнтерфейсыСПараметром
	|		ПО ВТ_ВсеИнтерфейсы.Ссылка = ВТ_ИнтерфейсыСПараметром.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(ВТ_ИнтерфейсыСПараметром.ЗначениеПараметра, ЛОЖЬ) = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("МассивТиповИнтерфейсовОнлайнОплаты", МассивТиповИнтерфейсовОнлайнОплаты);
	Запрос.УстановитьПараметр("КлючПараметра", КлючПараметраОбрабатыватьВходящиеУведомления);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ПолучитьМассивИнтерфейсовБезОбработкиВходящихУведомлений()

// Получить данные счета для регистрации в платежном шлюзе
//
// Параметры:
//  СчетНаОплату - ДокументСсылка.СчетНаОплату, ДокументСсылка.СчетНаОплатуЗаАвтомобили - документ, регистрацию
//                 которого в платежном шлюзе необходимо выполнить
//
// Возвращаемое значение:
//   Структура - данные счета, необходисые для ргеистрации
//
Функция ПолучитьДанныеСчетаДляРегистрации(СчетНаОплату)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК СчетНаОплату,
	|	СчетНаОплату.ПометкаУдаления КАК ПометкаУдаления,
	|	СчетНаОплату.ОплатаОнлайн КАК ОплатаОнлайн,
	|	СчетНаОплату.Номер КАК Номер,
	|	СчетНаОплату.Дата КАК Дата,
	|	СчетНаОплату.СуммаДокумента КАК СуммаДокумента,
	|	СчетНаОплату.ВалютаДокумента.Код КАК ВалютаДокументаКод,
	|	СчетНаОплату.ВалютаДокумента.Наименование КАК ВалютаДокументаНаименование,
	|	СчетНаОплату.Организация КАК Организация,
	|	СчетНаОплату.ПодразделениеКомпании.ФилиалКомпании КАК ФилиалКомпании,
	|	СчетНаОплату.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	СчетНаОплату.Автор КАК Автор,
	|	СчетНаОплату.Контрагент КАК Контрагент,
	|	СчетНаОплату.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	СчетНаОплату.Контрагент.Пол КАК КонтрагентПол,
	|	СчетНаОплату.Контрагент.ФормаСобственности КАК КонтрагентФормаСобственности,
	|	СчетНаОплату.ДоговорВзаиморасчетов.НомерДоговора КАК ДоговорВзаиморасчетовНомерДоговора,
	|	СчетНаОплату.ДоговорВзаиморасчетов.ДатаНачала КАК ДоговорВзаиморасчетовДатаНачала,
	|	СчетНаОплату.ДокументОснование КАК ДокументОснование,
	|	СчетНаОплату.ДокументОснование.Номер КАК ДокументОснованиеНомер
	|ИЗ
	|	Документ.СчетНаОплату КАК СчетНаОплату
	|ГДЕ
	|	СчетНаОплату.Ссылка = &Ссылка";
	
	Если ТипЗнч(СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст
		, "Документ.СчетНаОплату"
		, "Документ.СчетНаОплатуЗаАвтомобили");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", СчетНаОплату);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДанныеСчета = Новый Структура;
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеСчета.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;
	
	Возврат ДанныеСчета;
	
КонецФункции // ПолучитьДанныеСчетаДляРегистрации()

// Проверить корректность данных счета перед регистрацией в платежном шлюзе
//
// Параметры:
//  ДанныеСчета         - Структура - данные счета для проверки
//  РезультатВыполнения - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево   - ИСТИНА - данные счета корректны, ЛОЖЬ - в протиыном случае
//
Функция ДанныеСчетаКорректны(ДанныеСчета, РезультатВыполнения)
	
	Если ДанныеСчета.ПометкаУдаления Тогда
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Счет помечен на удаление'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ДанныеСчета.ОплатаОнлайн Тогда
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Счет не имеет признака Оплата онлайн'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ТипОснования = ТипЗнч(ДанныеСчета.ДокументОснование);
	МассивТиповОснований = ПолучитьМассивТиповОснований();
	Если МассивТиповОснований.Найти(ТипОснования) = Неопределено Тогда
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='Документ типа %1 не может быть основанием у счета при онлайн-оплате'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, ТипОснования);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеСчета.СуммаДокумента <= 0 Тогда
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Недопустимая сумма счета'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ДанныеСчетаКорректны()

// Получить назначение платежа в виде строки
//
// Параметры:
//  ДанныеСчета - Структура - данные счета для формирования строки Назначение платежа
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьНазначениеПлатежа(ДанныеСчета)
	
	Если ТипЗнч(ДанныеСчета.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		СтрокаШаблон = НСтр("ru='Оплата по заказ-наряду №%1'");
		
	ИначеЕсли ТипЗнч(ДанныеСчета.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ДанныеСчета.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаАвтомобиль") Тогда
		
		СтрокаШаблон = НСтр("ru='Оплата по заказу №%1'");
		
	ИначеЕсли ТипЗнч(ДанныеСчета.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваров")
		ИЛИ ТипЗнч(ДанныеСчета.ДокументОснование) = Тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
		
		СтрокаШаблон = НСтр("ru='Оплата по накладной №%1'");
		
	ИначеЕсли ТипЗнч(ДанныеСчета.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Тогда
		
		СтрокаШаблон = НСтр("ru='Оплата по заявке на хранение шин №%1'");
		
	КонецЕсли;
	
	НазначениеПлатежа = СтрШаблон(СтрокаШаблон, ДанныеСчета.ДокументОснованиеНомер);
	
	СтрокаШаблон = НСтр("ru=', Счет №%1 от %2'");
	ФорматДаты = НСтр("ru='ДЛФ=D'");
	ДатаСчета = Формат(ДанныеСчета.Дата, ФорматДаты);
	НазначениеПлатежа = НазначениеПлатежа + СтрШаблон(СтрокаШаблон, ДанныеСчета.Номер, ДатаСчета);
	
	Возврат НазначениеПлатежа;
	
КонецФункции // ПолучитьНазначениеПлатежа()

Функция ПолучитьСоединение(ПараметрыВзаимодействия, РезультатВыполнения)
	
	АвторизоватьсяНаСоединении = Истина;
	
	Если ПараметрыВзаимодействия.Свойство("АвторизоватьсяНаСоединении") Тогда
		
		АвторизоватьсяНаСоединении = ПараметрыВзаимодействия.АвторизоватьсяНаСоединении;
		
	КонецЕсли;
	
	Логин = "";
	Пароль = "";
	
	Если АвторизоватьсяНаСоединении Тогда
		
		Логин = ПараметрыВзаимодействия.Логин;
		Пароль = ПараметрыВзаимодействия.Пароль;	
		
	КонецЕсли;
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыВзаимодействия.ИспользоватьЗащищенноеСоединение Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	КонецЕсли;
	
	Попытка
		
		HTTPСоединение = Новый HTTPСоединение(ПараметрыВзаимодействия.Хост, ПараметрыВзаимодействия.Порт
		, Логин, Пароль, , 60, ЗащищенноеСоединение);
		
	Исключение
		
		HTTPСоединение = Неопределено;
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Не удалось получить HTTP-соединение'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		СтрокаШаблон = НСтр("ru='Параметры подключения:%1Хост = %2%3Порт=%4%5Логин=%6'");
		Комментарий = СтрШаблон(СтрокаШаблон, Символы.ПС, ПараметрыВзаимодействия.Хост, Символы.ПС
		, ПараметрыВзаимодействия.Порт, Символы.ПС, ПараметрыВзаимодействия.Логин);
		ДопИнформация = ТекстСообщения + Символы.ПС + Комментарий;
		ИнфОбОшибке = ИнформацияОбОшибке();
		ЗаписатьОшибкуВЖурналРегистрации(РезультатВыполнения, ИнфОбОшибке, ДопИнформация);
		
	КонецПопытки;
	
	Возврат HTTPСоединение;
	
КонецФункции // ПолучитьHTTPСоединение()

// Получить таблицу активных (в статусе ОжиданиеВозврата или в статусе ВыполненВозврат без Чека на оплату) возвратов
// по данному счету
//
// Параметры:
//  СчетНаОплату - ДокументСсылка.СчетНаОплату, ДокументСсылка.СчетНаОплатуЗаАвтомобили - документ, по которому
//                 необходимо получить состояние оплаты в платежном шлюзе
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица активных возвратов по счету
//
Функция ПолучитьТаблицуАктивныхВозвратов(СчетНаОплату)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныйШлюз.СчетНаОплату КАК СчетНаОплату,
	|	ПлатежныйШлюз.ЗаявкаНаРасходДС КАК ЗаявкаНаРасходДС,
	|	ПлатежныйШлюз.СчетНаОплату.ПометкаУдаления КАК ПометкаУдаления,
	|	ПлатежныйШлюз.СчетНаОплату.ДокументОснование КАК ДокументОснование,
	|	ПлатежныйШлюз.СчетНаОплату.ОплатаОнлайн КАК ОплатаОнлайн,
	|	ПлатежныйШлюз.ЗаявкаНаРасходДС.СуммаДокумента КАК СуммаЗаявкиНаРасход,
	|	ПлатежныйШлюз.СчетНаОплату.Организация КАК Организация,
	|	ПлатежныйШлюз.СчетНаОплату.ПодразделениеКомпании.ФилиалКомпании КАК ФилиалКомпании,
	|	ПлатежныйШлюз.СчетНаОплату.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ПлатежныйШлюз.Интерфейс КАК Интерфейс,
	|	ПлатежныйШлюз.Интерфейс.ТипИнтерфейса КАК ТипИнтерфейса,
	|	ПлатежныйШлюз.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
	|	ПлатежныйШлюз.ИдентификаторОперацииОплаты КАК ИдентификаторОперацииОплаты,
	|	ПлатежныйШлюз.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ПлатежныйШлюз.КонтактДляОтправкиЧеков КАК КонтактДляОтправкиЧеков,
	|	ПлатежныйШлюз.ДатаРегистрации КАК ДатаРегистрации,
	|	ПлатежныйШлюз.СрокЖизниСсылки КАК СрокЖизниСсылки,
	|	ПлатежныйШлюз.ДатаУведомления КАК ДатаУведомления,
	|	ПлатежныйШлюз.СтатусУведомления КАК СтатусУведомления,
	|	ПлатежныйШлюз.ДатаОперации КАК ДатаОперации,
	|	ПлатежныйШлюз.СтатусОперации КАК СтатусОперации,
	|	ПлатежныйШлюз.СуммаОперации КАК СуммаОперации,
	|	ПлатежныйШлюз.ЧекНаОплату КАК ЧекНаОплату,
	|	ПлатежныйШлюз.СпособОплаты КАК СпособОплаты,
	|	ПлатежныйШлюз.ИдентификаторОперацииЭмитента КАК ИдентификаторОперацииЭмитента,
	|	ПлатежныйШлюз.КодАвторизации КАК КодАвторизации,
	|	ПлатежныйШлюз.ЗаявкаНаРасходДС.ПометкаУдаления КАК ЗаявкаНаРасходДСПометкаУдаления,
	|	ПлатежныйШлюз.ЗаявкаНаРасходДС.Проведен КАК ЗаявкаНаРасходДСПроведен,
	|	ПлатежныйШлюз.ЗаявкаНаРасходДС.ОплатаОнлайн КАК ЗаявкаНаРасходДСОплатаОнлайн,
	|	ПлатежныйШлюз.НазначениеПлатежа КАК НазначениеПлатежа
	|ИЗ
	|	РегистрСведений.ПлатежныйШлюз КАК ПлатежныйШлюз
	|ГДЕ
	|	ПлатежныйШлюз.СчетНаОплату = &СчетНаОплату
	|	И ПлатежныйШлюз.ЗаявкаНаРасходДС <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходДС.ПустаяСсылка)
	|	И (ПлатежныйШлюз.СтатусОперации = ЗНАЧЕНИЕ(Перечисление.СтатусыОнлайнОплат.ОжиданиеВозврата)
	|			ИЛИ ПлатежныйШлюз.СтатусОперации = ЗНАЧЕНИЕ(Перечисление.СтатусыОнлайнОплат.ВыполненВозврат)
	|				И ПлатежныйШлюз.ЧекНаОплату = ЗНАЧЕНИЕ(Документ.ЧекНаОплату.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРегистрации";
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуАктивныхВозвратов()

// Проверить фозможность создания чека на оплату на основании счета или заяки на расход
//
// Параметры:
//  ДанныеСчета         - Структура - см. ПолучитьДанныеЗарегистрированногоСчета
//  РезультатВыполнения - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево - ИСТИНА, если создание чека на оплату и возврат возможно, ЛОЖЬ - в противном случае
//
Функция ЧекНаОплатуМожетБытьСоздан(ДанныеСчета, РезультатВыполнения)
	
	Если СчетИмеетОшибки(ДанныеСчета) Тогда
		
		Если НЕ ИсправитьСчетНаОплату(ДанныеСчета.СчетНаОплату, РезультатВыполнения) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеСчета.ЭтоВозврат Тогда
		
		Если ДанныеСчета.АктивнаяСтрокаВозврат = Неопределено Тогда
			
			ШаблонКомментария = НСтр("ru='Не определена активная строка для возврата по %1'");
			Комментарий = СтрШаблон(ШаблонКомментария, ДанныеСчета.СчетНаОплату);
			ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,
			, ДанныеСчета.СчетНаОплату, Комментарий);
			
			Возврат Ложь;
			
		КонецЕсли;	
		
		Если ЗаявкаИмеетОшибки(ДанныеСчета.АктивнаяСтрокаВозврат) Тогда
			
			Если НЕ ИсправитьЗаявкуНаРасход(ДанныеСчета.АктивнаяСтрокаВозврат.ЗаявкаНаРасходДС, РезультатВыполнения) Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ЧекНаОплатуМожетБытьСоздан()

// Вернуть признак наличия ошибок Счета, препятствующих созданию на его основании Чека на оплату
//
// Параметры:
//  ДанныеСчета  - Структура - см. ПолучитьДанныеЗарегистрированногоСчета
//
// Возвращаемое значение:
//   Булево - признак наличия ошибок
//
Функция СчетИмеетОшибки(ДанныеСчета)
	
	Если ДанныеСчета.ПометкаУдаления Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если НЕ ДанныеСчета.ОплатаОнлайн Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // СчетИмеетОшибки()

// Вернуть признак наличия ошибок Заявки на расход д/с, препятствующих созданию на ее основании Чека на оплату
//
// Параметры:
//  АктивнаяСтрокаВозврат - СтрокаТаблицыЗначений - строка с реквизитами зарегистрированной Заявки на возврат д/с
//
// Возвращаемое значение:
//   Булево - признак наличия ошибок
//
Функция ЗаявкаИмеетОшибки(АктивнаяСтрокаВозврат)
	
	Если НЕ АктивнаяСтрокаВозврат.ЗаявкаНаРасходДСПроведен Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если НЕ АктивнаяСтрокаВозврат.ЗаявкаНаРасходДСОплатаОнлайн Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ЗаявкаИмеетОшибки()

// Привести Счет в состояние, пригодное для создания подчиненного документа оплаты
//
// Параметры:
//  СчетНаОплату         - ДокументСсылка.СчетНаОплату, ДокументСсылка.СчетНаОплатуЗаАвтомобили - документ, который
//                         необходимо исправить
//  РезультатВыполнения  - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Тип: Булево        - Результат выполнения: ИСТИНА - документ исправлен, ЛОЖЬ - в случае ошибки
//
Функция ИсправитьСчетНаОплату(СчетНаОплату, РезультатВыполнения)
	
	ШаблонСообщения = НСтр("ru='Не удалось исправить %1'");
	ТекстСообщения = СтрШаблон(ШаблонСообщения, СчетНаОплату);
	
	ИмяДокумента = СчетНаОплату.Метаданные().Имя;
	
	ВсеОК = Истина;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ." + ИмяДокумента);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СчетНаОплату);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ДокументОбъект = СчетНаОплату.ПолучитьОбъект();
		
		ЕстьИзменения = Ложь;
		
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.ПометкаУдаления = Ложь;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если НЕ ДокументОбъект.ОплатаОнлайн Тогда
			ДокументОбъект.ОплатаОнлайн = Истина;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ВсеОК = Ложь;
		
		ИнфОбОшибке = ИнформацияОбОшибке();
		РезультатВыполнения.Успешно = Ложь;
		ШаблонСообщения = НСтр("ru='Не удалось исправить %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СчетНаОплату);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		ЗаписатьОшибкуВЖурналРегистрации(РезультатВыполнения, ИнфОбОшибке, , СчетНаОплату);
		
	КонецПопытки;
	
	Возврат ВсеОК;
	
КонецФункции // ИсправитьСчетНаОплату()

// Привести Заявку на расход в состояние, пригодное для создания подчиненного документа оплаты
//
// Параметры:
//  ЗаявкаНаРасходДС     - ДокументСсылка.ЗаявкаНаРасходДС - документ, который необходимо исправить
//  РезультатВыполнения  - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Тип: Булево        - Результат выполнения: ИСТИНА - документ исправлен, ЛОЖЬ - в случае ошибки
//
Функция ИсправитьЗаявкуНаРасход(ЗаявкаНаРасходДС, РезультатВыполнения)
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаявкаНаРасходДС");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗаявкаНаРасходДС);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ДокументОбъект = ЗаявкаНаРасходДС.ПолучитьОбъект();
		
		ЕстьИзменения = Ложь;
		
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.ПометкаУдаления = Ложь;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если НЕ ДокументОбъект.ОплатаОнлайн Тогда
			ДокументОбъект.ОплатаОнлайн = Истина;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если НЕ ДокументОбъект.Проведен Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнфОбОшибке = ИнформацияОбОшибке();
		РезультатВыполнения.Успешно = Ложь;
		ШаблонСообщения = НСтр("ru='Не удалось исправить %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ЗаявкаНаРасходДС);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		ЗаписатьОшибкуВЖурналРегистрации(РезультатВыполнения, ИнфОбОшибке, ,  ЗаявкаНаРасходДС);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ИсправитьЗаявкуНаРасход()

// Создать документ онлайн-оплаты
//
// Параметры:
//  ДанныеДляЗаписи     - Структура - измерения и ресурсы регистра сведений Платежный шлюз для изменения 
//  ДанныеСчета         - Структура - реквизиты зарегистрированного в платежном шлюзе счета на оплату
//  РезультатВыполнения - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
Процедура СоздатьДокументОплаты(ДанныеДляЗаписи, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)

	СтатусОперации = ПолучитьАктуальноеЗначение(ДанныеДляЗаписи, ДанныеСчета, "СтатусОперации");
	
	Если СтатусОперации = Перечисления.СтатусыОнлайнОплат.Оплачен
		И НЕ ЗначениеЗаполнено(ДанныеСчета.ЧекНаОплату) Тогда
		
		Попытка
			
			СоздатьЧекНаОплату(ДанныеДляЗаписи, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);
			
		Исключение
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры // СоздатьДокументОплаты()

// Создать документ возврата онлайн-оплаты
//
// Параметры:
//  ДанныеДляЗаписи     - Структура - измерения и ресурсы регистра сведений Платежный шлюз для изменения 
//  ДанныеСчета         - Структура - реквизиты зарегистрированного в платежном шлюзе счета на оплату
//                                    и заявки на расход д/с
//  РезультатВыполнения - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
Процедура СоздатьДокументВозврата(ДанныеДляЗаписи, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	СтатусОперации = ПолучитьАктуальноеЗначение(ДанныеДляЗаписи, ДанныеСчета.АктивнаяСтрокаВозврат, "СтатусОперации");
	
	Если СтатусОперации = Перечисления.СтатусыОнлайнОплат.ВыполненВозврат
		И НЕ ЗначениеЗаполнено(ДанныеСчета.АктивнаяСтрокаВозврат.ЧекНаОплату) Тогда
		
		Попытка
			
			СоздатьЧекНаВозврат(ДанныеДляЗаписи, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);
			
		Исключение
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры // СоздатьДокументВозврата()

// Получить актуальное значение ресурса регистра сведений Платежный шлюз
//
// Параметры:
//  ДанныеДляЗаписи - Структура - измерения и ресурсы регистра сведений Платежный шлюз для изменения 
//  ДанныеСчета     - Структура - реквизиты зарегистрированного в платежном шлюзе счета на оплату
//  ИмяРеквизита    - Строка    - имя реквизита, актуальное значение которого нужно получить
//
// Возвращаемое значение:
//   Произвольный тип - актуальное значение ресурса
//
Функция ПолучитьАктуальноеЗначение(ДанныеДляЗаписи, ДанныеСчета, ИмяРеквизита)
	
	Если ДанныеДляЗаписи.Свойство(ИмяРеквизита) Тогда
		
		Возврат ДанныеДляЗаписи[ИмяРеквизита];
		
	Иначе
		
		Возврат ДанныеСчета[ИмяРеквизита];
		
	КонецЕсли;
	
КонецФункции // ПолучитьАктуальноеЗначение()

// Создать Чек онлайн-оплаты (Чек на оплату)
//
// Параметры:
//  ДанныеДляЗаписи     - Структура - измерения и ресурсы регистра сведений Платежный шлюз для изменения 
//  ДанныеСчета         - Структура - реквизиты зарегистрированного в платежном шлюзе счета на оплату
//  РезультатВыполнения - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
Процедура СоздатьЧекНаОплату(ДанныеДляЗаписи, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекНаОплату.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекНаОплату КАК ЧекНаОплату
	|ГДЕ
	|	ЧекНаОплату.Проведен = ИСТИНА
	|	И ЧекНаОплату.ДокументОснование = &ДокументОснование
	|	И ЧекНаОплату.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаОплату)
	|	И ЧекНаОплату.СуммаДокумента = &СуммаСчета";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеСчета.СчетНаОплату);
	Запрос.УстановитьПараметр("СуммаСчета", ДанныеСчета.СуммаСчета);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ДанныеДляЗаписи.Вставить("СчетНаОплату", ДанныеСчета.СчетНаОплату);
		ДанныеДляЗаписи.Вставить("ЗаявкаНаРасходДС", Документы.ЗаявкаНаРасходДС.ПустаяСсылка());
		ДанныеДляЗаписи.Вставить("ЧекНаОплату", Выборка.Ссылка);
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеОплаты = ПолучитьДанныеОплаты(ДанныеСчета, ДанныеДляЗаписи);
	
	ТекДата = ТекущаяДатаСеанса();
	НовыйЧек = Документы.ЧекНаОплату.СоздатьДокумент();
	Если ТипЗнч(ДанныеСчета.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		НовыйЧек.Сделка = ДанныеСчета.ДокументОснование;
	КонецЕсли;
	НовыйЧек.Заполнить(ДанныеСчета.СчетНаОплату);
	
	Если НЕ ВыровнятьРеквизитыЧека(НовыйЧек, ДанныеСчета, РезультатВыполнения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НовыйЧек.КассаККМ = ПараметрыВзаимодействия.КассаККМ;
	НовыйЧек.ФР = ПараметрыВзаимодействия.ФискальныйРегистратор;
	
	НовыйЧек.Оплаты.Очистить();
	
	НоваяСтрока = НовыйЧек.Оплаты.Добавить();
	НоваяСтрока.Сумма = ДанныеОплаты.СуммаОперации;
	НоваяСтрока.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно;
	
	НовыйЧек.Товары.Очистить();
	НоваяСтрока = НовыйЧек.Товары.Добавить();
	НоваяСтрока.Номенклатура = Справочники.Номенклатура.Предоплата;
	Документы.ЧекНаОплату.ТоварыНоменклатураПриИзменении(НовыйЧек, НоваяСтрока);
	НоваяСтрока.СуммаВсего = ДанныеОплаты.СуммаОперации;
	Документы.ЧекНаОплату.ТоварыСуммаВсегоПриИзменении(НовыйЧек, НоваяСтрока);
	
	Если ДанныеОплаты.СуммаОперации <> НовыйЧек.СуммаДокумента Тогда
		
		ФорматСуммы = НСтр("ru='ЧЦ=15; ЧДЦ=2'");
		СуммаОперации = Формат(ДанныеОплаты.СуммаОперации, ФорматСуммы);
		СуммаДокумента = Формат(НовыйЧек.СуммаДокумента, ФорматСуммы);
		
		Если ДанныеОплаты.СуммаОперации > НовыйЧек.СуммаДокумента Тогда
			СтрокаШаблон = НСтр("ru='Оплаченная клиентом сумма %1 превышает сумму счета %2'");
		Иначе
			СтрокаШаблон = НСтр("ru='Оплаченная клиентом сумма %1 меньше суммы счета %2'");
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(СтрокаШаблон, СуммаОперации, СуммаДокумента);
		
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		НовыйЧек.СуммаДокумента = ДанныеОплаты.СуммаОперации;
		Документы.ЧекНаОплату.СуммаДокументаПриИзменении(НовыйЧек);
		
	КонецЕсли;
	
	Если НовыйЧек.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная
		И ЗначениеЗаполнено(НовыйЧек.Сделка) Тогда
		
		СуммаСделки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйЧек.Сделка, "СуммаДокумента", Истина);
		
		Если СуммаСделки = НовыйЧек.СуммаДокумента Тогда
			
			НовыйЧек.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(НовыйЧек, НовыйЧек.Товары
	, НовыйЧек.ПризнакСпособаРасчета);
	НовыйЧек.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
	
	Документы.ЧекНаОплату.ПроизвестиРаспределениеСуммыОплаты(НовыйЧек.СуммаДокумента, НовыйЧек.Товары);
	
	Попытка
		
		НовыйЧек.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		ДанныеДляЗаписи.Вставить("СчетНаОплату", ДанныеСчета.СчетНаОплату);
		ДанныеДляЗаписи.Вставить("ЗаявкаНаРасходДС", Документы.ЗаявкаНаРасходДС.ПустаяСсылка());
		ДанныеДляЗаписи.Вставить("ЧекНаОплату", НовыйЧек.Ссылка);
		
	Исключение
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Не удалось создать чек на оплату'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		ИнфОбОшибке = ИнформацияОбОшибке();
		ЗаписатьОшибкуВЖурналРегистрации(РезультатВыполнения, ИнфОбОшибке, , ДанныеСчета.СчетНаОплату);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры // СоздатьЧекНаОплату()

// Создать Чек возврата онлайн-оплаты (Чек на оплату с хоз. операцией Возврат по чеку на оплату)
//
// Параметры:
//  ДанныеДляЗаписи     - Структура - измерения и ресурсы регистра сведений Платежный шлюз для изменения 
//  ДанныеСчета         - Структура - реквизиты зарегистрированного в платежном шлюзе счета на оплату
//  РезультатВыполнения - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
Процедура СоздатьЧекНаВозврат(ДанныеДляЗаписи, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения) Экспорт
	
	АктивнаяСтрокаВозврат = ДанныеСчета.АктивнаяСтрокаВозврат;
	ЗаявкаНаРасходДС = АктивнаяСтрокаВозврат.ЗаявкаНаРасходДС;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекНаОплату.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекНаОплату КАК ЧекНаОплату
	|ГДЕ
	|	ЧекНаОплату.Проведен = ИСТИНА
	|	И ЧекНаОплату.ДокументОснование = &ДокументОснование
	|	И ЧекНаОплату.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаОплатуВозврат)
	|	И ЧекНаОплату.СуммаДокумента = &СуммаДокумента";
	Запрос.УстановитьПараметр("ДокументОснование", ЗаявкаНаРасходДС);
	Запрос.УстановитьПараметр("СуммаДокумента", АктивнаяСтрокаВозврат.СуммаЗаявкиНаРасход);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ДанныеДляЗаписи.Вставить("СчетНаОплату", ДанныеСчета.СчетНаОплату);
		ДанныеДляЗаписи.Вставить("ЗаявкаНаРасходДС", ЗаявкаНаРасходДС);
		ДанныеДляЗаписи.Вставить("ЧекНаОплату", Выборка.Ссылка);
		
		Возврат;
		
	КонецЕсли;
	
	НовыйЧек = Документы.ЧекНаОплату.СоздатьДокумент();
	НовыйЧек.Заполнить(ЗаявкаНаРасходДС);
	
	Если НЕ ВыровнятьРеквизитыЧекаНаВозврат(НовыйЧек, ЗаявкаНаРасходДС, РезультатВыполнения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НовыйЧек.Оплаты.Очистить();
	
	НоваяСтрокаОплаты = НовыйЧек.Оплаты.Добавить();
	НоваяСтрокаОплаты.Сумма = ДанныеДляЗаписи.СуммаОперации;
	НоваяСтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно;
	
	Если НовыйЧек.СуммаДокумента <> ДанныеДляЗаписи.СуммаОперации Тогда
		
		НовыйЧек.СуммаДокумента = ДанныеДляЗаписи.СуммаОперации;
		Документы.ЧекНаОплату.СуммаДокументаПриИзменении(НовыйЧек);
		
	КонецЕсли;
	
	НовыйЧек.Товары.Очистить();
	НоваяСтрокаТовары = НовыйЧек.Товары.Добавить();
	НоваяСтрокаТовары.Номенклатура = Справочники.Номенклатура.Предоплата;
	Документы.ЧекНаОплату.ТоварыНоменклатураПриИзменении(НовыйЧек, НоваяСтрокаТовары);
	НоваяСтрокаТовары.СуммаВсего = ДанныеДляЗаписи.СуммаОперации;
	Документы.ЧекНаОплату.ТоварыСуммаВсегоПриИзменении(НовыйЧек, НоваяСтрокаТовары);
	
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(НовыйЧек, НовыйЧек.Товары
	, НовыйЧек.ПризнакСпособаРасчета);
	НовыйЧек.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
	
	Документы.ЧекНаОплату.ПроизвестиРаспределениеСуммыОплаты(НовыйЧек.СуммаДокумента, НовыйЧек.Товары);
	
	НовыйЧек.КассаККМ = ПараметрыВзаимодействия.КассаККМ;
	НовыйЧек.ФР = ПараметрыВзаимодействия.ФискальныйРегистратор;
	
	НовыйЧек.СтавкаНДС = НоваяСтрокаТовары.СтавкаНДС;
	НовыйЧек.СуммаНДС = НоваяСтрокаТовары.СуммаНДС;
	
	Попытка
		
		НовыйЧек.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		ДанныеДляЗаписи.Вставить("СчетНаОплату", ДанныеСчета.СчетНаОплату);
		ДанныеДляЗаписи.Вставить("ЗаявкаНаРасходДС", ЗаявкаНаРасходДС);
		ДанныеДляЗаписи.Вставить("ЧекНаОплату", НовыйЧек.Ссылка);
		Если НЕ ДанныеДляЗаписи.Свойство("ДатаОперации") Тогда
			ДанныеДляЗаписи.Вставить("ДатаОперации", НовыйЧек.Дата);
		КонецЕсли;
		
	Исключение
		
		ИнфОбОшибке = ИнформацияОбОшибке();
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Не удалось создать чек на возврат'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		ЗаписатьОшибкуВЖурналРегистрации(РезультатВыполнения, ИнфОбОшибке, , ЗаявкаНаРасходДС);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры // СоздатьЧекНаВозврат()

// Синхронизировать реквизиты Чека на оплату с реквизитами Счета на оплату
//
// Параметры:
//  НовыйЧек - ДокументОбъект.ЧекНаОплату
//  ДанныеСчета         - Структура - реквизиты зарегистрированного в платежном шлюзе счета на оплату
//  РезультатВыполнения - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево- результат синхронизации
//
Функция ВыровнятьРеквизитыЧека(НовыйЧек, ДанныеСчета, РезультатВыполнения)
	
	НовыйЧек.Организация = ДанныеСчета.Организация;
	Документы.ЧекНаОплату.ОрганизацияПриИзменении(НовыйЧек);
	НовыйЧек.ПодразделениеКомпании = ДанныеСчета.ПодразделениеКомпании;
	Документы.ЧекНаОплату.ПодразделениеКомпанииПриИзменении(НовыйЧек);
	НовыйЧек.ДоговорВзаиморасчетов = ДанныеСчета.ДоговорВзаиморасчетов;
	Документы.ЧекНаОплату.ДоговорВзаиморасчетовПриИзменении(НовыйЧек);
	НовыйЧек.ХозОперация = Справочники.ХозОперации.ЧекНаОплату;
	Документы.ЧекНаОплату.ХозОперацияПриИзменении(НовыйЧек);
	
	Возврат Истина;
	
КонецФункции // ВыровнятьРеквизитыЧека()

// Синхронизировать реквизиты Чека на возврат с реквизитами Заявки на расход д/с
//
// Параметры:
//  НовыйЧек         - ДокументОбъект.ЧекНаОплату
//  ЗаявкаНаРасходДС - ДокументСсылка.ЗаявкаНаРсходДС
//  РезультатВыполнения - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево- результат синхронизации
//
Функция ВыровнятьРеквизитыЧекаНаВозврат(НовыйЧек, ЗаявкаНаРасходДС, РезультатВыполнения)
	
	РеквизитыЗаявкиНаРасход = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаявкаНаРасходДС
	, "Организация,ПодразделениеКомпании,ДоговорВзаиморасчетов");
	НовыйЧек.Организация = РеквизитыЗаявкиНаРасход.Организация;
	Документы.ЧекНаОплату.ОрганизацияПриИзменении(НовыйЧек);
	НовыйЧек.ПодразделениеКомпании = РеквизитыЗаявкиНаРасход.ПодразделениеКомпании;
	Документы.ЧекНаОплату.ПодразделениеКомпанииПриИзменении(НовыйЧек);
	НовыйЧек.ДоговорВзаиморасчетов = РеквизитыЗаявкиНаРасход.ДоговорВзаиморасчетов;
	Документы.ЧекНаОплату.ДоговорВзаиморасчетовПриИзменении(НовыйЧек);
	НовыйЧек.ХозОперация = Справочники.ХозОперации.ЧекНаОплатуВозврат;
	Документы.ЧекНаОплату.ХозОперацияПриИзменении(НовыйЧек);
	
	Возврат Истина;
	
КонецФункции // ВыровнятьРеквизитыЧекаНаВозврат()

// Получить актуальные данные оплаты по данным регистра Платежный шлюз и ответу сервера
//
// Параметры:
//  ДанныеСчета - Структура - данные регистра
//  ДанныеДляЗаписи - Структура - данные из ответа сервера
//
// Возвращаемое значение:
//   Структура- актуальные значения реквизитов оплаты
//
Функция ПолучитьДанныеОплаты(ДанныеСчета, ДанныеДляЗаписи)
	
	ДанныеОплаты = Новый Структура;
	
	ПолучитьАктуальноеЗначениеДанныхОплаты("СуммаОперации", ДанныеОплаты, ДанныеСчета, ДанныеДляЗаписи);
	ПолучитьАктуальноеЗначениеДанныхОплаты("ДатаОперации", ДанныеОплаты, ДанныеСчета, ДанныеДляЗаписи);
	ПолучитьАктуальноеЗначениеДанныхОплаты("СпособОплаты", ДанныеОплаты, ДанныеСчета, ДанныеДляЗаписи);
	ПолучитьАктуальноеЗначениеДанныхОплаты("ИдентификаторОперацииОплаты", ДанныеОплаты, ДанныеСчета, ДанныеДляЗаписи);
	ПолучитьАктуальноеЗначениеДанныхОплаты("ИдентификаторОперации", ДанныеОплаты, ДанныеСчета, ДанныеДляЗаписи);
	ПолучитьАктуальноеЗначениеДанныхОплаты("ИдентификаторОперацииЭмитента", ДанныеОплаты, ДанныеСчета, ДанныеДляЗаписи);
	ПолучитьАктуальноеЗначениеДанныхОплаты("КодАвторизации", ДанныеОплаты, ДанныеСчета, ДанныеДляЗаписи);
	
	Возврат ДанныеОплаты;
	
КонецФункции // ПолучитьДанныеОплаты()

Процедура ПолучитьАктуальноеЗначениеДанныхОплаты(Ключ, ДанныеОплаты, ДанныеСчета, ДанныеДляЗаписи)

	Если ДанныеДляЗаписи.Свойство(Ключ) Тогда
		Значение = ДанныеДляЗаписи[Ключ];
	Иначе
		Значение = ДанныеСчета[Ключ];
	КонецЕсли;
	ДанныеОплаты.Вставить(Ключ, Значение);

КонецПроцедуры // ПолучитьАктуальноеЗначениеДанныхОплаты()

// Получить сводный текст сообщений, сгенерированных подсистемой ОнлайнОплаты и другими подсистемами в виде
// сообщений пользователю
//
// Параметры:
//  РезультатВыполнения - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Строка - сводный текст сообщений
//
Функция ПолучитьТекстСообщений(РезультатВыполнения)
	
	Результат = "";
	ШаблонСообщения = НСтр("ru='%1%2) %3'");
	
	Если РезультатВыполнения.ТекстыСообщений.Количество() > 0 Тогда
		
		Результат = НСтр("ru='Результат выполнения:'");
		НомерСообщения = 0;
		Для каждого ТекстСообщения Из РезультатВыполнения.ТекстыСообщений Цикл
			НомерСообщения = НомерСообщения + 1;
			Результат = Результат + СтрШаблон(ШаблонСообщения, Символы.ПС, НомерСообщения, ТекстСообщения);
		КонецЦикла;
		
	КонецЕсли;
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	
	Если СообщенияПользователю.Количество() > 0 Тогда
		
		Результат = Результат + ?(Результат = "", "", Символы.ПС) + НСтр("ru='Сообщения пользователю:'");
		НомерСообщения = 0;
		Для каждого Сообщ Из СообщенияПользователю Цикл
			НомерСообщения = НомерСообщения + 1;
			Результат = Результат + СтрШаблон(ШаблонСообщения, Символы.ПС, НомерСообщения, Сообщ.Текст);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьТекстСообщений()

// Зарегистрировать в платежном шлюзе запрос на возврат суммы по онлайн-оплате
//
// Параметры:
//  ДанныеСчета          - Структура - реквизиты Счета на оплату
//  ЗаявкаНаРасходДС     - ДокументСсылка.ЗаявкаНаРасходДС - основание для возврата платежа
//  РезультатВыполнения  - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Структура - см. функцию ПолучитьСтруктуруРезультатВыполнения
//
Функция ВернутьСумму(ДанныеСчета, ЗаявкаНаРасходДС, РезультатВыполнения)
	
	Если НЕ ВозвратСуммыВозможен(ДанныеСчета, ЗаявкаНаРасходДС, РезультатВыполнения) Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	// Поместить данные интерфейса в параметры взаимодействия с платежным шлюзом
	Интерфейс = ДанныеСчета.Интерфейс;
	ПараметрыВзаимодействия = Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия(Интерфейс);
	
	// Записать состояние ожидания отмены платежа в регистр ПлатежныйШлюз ЗАРАНЕЕ,
	// чтобы после запроса к http-сервису не блокировать запись при получении callback
	// Создать структуру для записи данных в регистр ПлатежныйШлюз
	ДанныеДляЗаписи = Новый Структура;
    ДанныеДляЗаписи.Вставить("СчетНаОплату", ДанныеСчета.СчетНаОплату);
	ДанныеДляЗаписи.Вставить("ЗаявкаНаРасходДС", ЗаявкаНаРасходДС);
	ДанныеДляЗаписи.Вставить("Интерфейс", ДанныеСчета.Интерфейс);
	ИдентификаторЗапроса = Новый УникальныйИдентификатор;
	ДанныеДляЗаписи.Вставить("ИдентификаторЗапроса", СокрП(ИдентификаторЗапроса));
	ДанныеДляЗаписи.Вставить("ИдентификаторОперацииОплаты", ДанныеСчета.ИдентификаторОперацииОплаты);
	ДанныеДляЗаписи.Вставить("КонтактДляОтправкиЧеков", ДанныеСчета.КонтактДляОтправкиЧеков);
	ТекДата = ТекущаяДатаСеанса();
	ДанныеДляЗаписи.Вставить("ДатаРегистрации", ТекДата);
	ДанныеДляЗаписи.Вставить("СрокЖизниСсылки", ТекДата);
	ДанныеДляЗаписи.Вставить("СтатусОперации", Перечисления.СтатусыОнлайнОплат.ОжиданиеВозврата);
	ДанныеДляЗаписи.Вставить("СпособОплаты", ДанныеСчета.СпособОплаты);
	ДанныеДляЗаписи.Вставить("НазначениеПлатежа", ДанныеСчета.НазначениеПлатежа);
	
	// Записать данные в регистр ПлатежныйШлюз
	Попытка
		
		ЗаписатьДанныеОбменаРегистр(ДанныеДляЗаписи, РезультатВыполнения);
		
	Исключение
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Не удалось записать регистрацию заявки на расход в регистр обмена с платежным шлюзом'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат РезультатВыполнения;
		
	КонецПопытки;
	
	// Получить уточненные ДанныеСчета
	ДанныеСчета = ПолучитьДанныеЗарегистрированногоСчета(ДанныеСчета.СчетНаОплату, РезультатВыполнения);
	
	// Вызвать функцию регистрации счета, соответствукющую типу интерфейса
	ОбщийМодульИнтерфейса = ОбщийМодульДляТипаИнтерфейса(ПараметрыВзаимодействия.ТипИнтерфейса, РезультатВыполнения);
	Если ОбщийМодульИнтерфейса = Неопределено Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ВозвратЗарегистрирован = ОбщийМодульИнтерфейса.ЗарегистрироватьВозврат(ДанныеСчета, ПараметрыВзаимодействия
	, РезультатВыполнения);
	
	Если НЕ ВозвратЗарегистрирован Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		
		// Записать ошибку регистрации возврата платежа в регистр ПлатежныйШлюз
		ДанныеДляЗаписи.Вставить("СтатусОперации", Перечисления.СтатусыОнлайнОплат.ОтказВозврата);
		
		Попытка
			
			ЗаписатьДанныеОбменаРегистр(ДанныеДляЗаписи, РезультатВыполнения);
			
		Исключение
			
			ТекстСообщения = НСтр("ru='Не удалось записать ошибку регистрации заявки на расход в регистр'");
			РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции // ВернутьСумму()

// Проверить возможность возврата онлайн-оплаты
//
// Параметры:
//  ДанныеСчета          - Структура - реквизиты Счета на оплату
//  ЗаявкаНаРасходДС     - ДокументСсылка.ЗаявкаНаРасходДС - основание для возврата платежа
//  РезультатВыполнения  - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево - ИСТИНА - возврат возможен, ЛОЖЬ - в противном случае
//
Функция ВозвратСуммыВозможен(ДанныеСчета, ЗаявкаНаРасходДС, РезультатВыполнения)
	
	Если ДанныеСчета = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ДанныеСчета.Свойство("АктивнаяСтрокаВозврат") И ДанныеСчета.АктивнаяСтрокаВозврат <> Неопределено Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Запросите возврат после завершения обработки платежным шлюзом предыдущей заявки'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСчета.ЧекНаОплату) Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Счет не был оплачен'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если РаботаСПлатежнымШлюзомЗаблокирована(РезультатВыполнения) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СуммаЗаявкиНаРасход = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаНаРасходДС, "СуммаДокумента", Истина);
	СуммаВозвратов = ПолучитьСуммуВозвратовПоСчету(ДанныеСчета.СчетНаОплату);
	Остаток = ДанныеСчета.СуммаОперации - СуммаВозвратов;
	Если СуммаЗаявкиНаРасход > Остаток Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='Сумма заявки на расход %1 превышает остаток невозвращенных средств %2'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, СуммаЗаявкиНаРасход, Остаток);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ВозвратСуммыВозможен()

// Получить сумму всех выполненных возвратов по данному счету
//
// Параметры:
//  СчетНаОплату - ДокументСсылка.СчетНаОплату, ДокументСсылка.СчетНаОплатуЗаАвтомобили - документ, по которому
//                 требуется получить сумму всех выполненных возвратов
//
// Возвращаемое значение:
//   Число - сумма всех выполненных возвратов
//
Функция ПолучитьСуммуВозвратовПоСчету(СчетНаОплату)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныйШлюз.СуммаОперации КАК СуммаОперации
	|ИЗ
	|	РегистрСведений.ПлатежныйШлюз КАК ПлатежныйШлюз
	|ГДЕ
	|	ПлатежныйШлюз.СчетНаОплату = &СчетНаОплату
	|	И ПлатежныйШлюз.ЗаявкаНаРасходДС <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходДС.ПустаяСсылка)";
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	ТаблицаВозвратов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВозвратов.Итог("СуммаОперации");

КонецФункции // ПолучитьСуммуВозвратовПоСчету()

Функция ПолучитьПараметрыДляОтображенияОплаты(Выборка, ДанныеДляФормы)
	
	ДатаСервера = Неопределено;
	
	Если ЭтоФинальноеСостояниеОплаты(Выборка.СтатусОперации) Тогда
		
		ОформитьФинальноеСостояниеОплаты(Выборка, ДанныеДляФормы, ДатаСервера);
		ШаблонСтатус = НСтр("ru='%1 в'");
		
	Иначе
		
		ДатаСервера = Выборка.ДатаРегистрации;
		ШаблонСтатус = НСтр("ru='%1 с'");
		
	КонецЕсли;
	
	Статус = СтрШаблон(ШаблонСтатус, ВРег(Выборка.СтатусОперации));
	
	Возврат Новый Структура("Статус,ДатаСервера", Статус, ДатаСервера);
	
КонецФункции

Функция ЭтоФинальноеСостояниеОплаты(СтатусОперации)
	
	Возврат (СтатусОперации = Перечисления.СтатусыОнлайнОплат.Оплачен
	ИЛИ СтатусОперации = Перечисления.СтатусыОнлайнОплат.ОтказОплаты);
	
КонецФункции

Процедура ОформитьФинальноеСостояниеОплаты(Выборка, ДанныеДляФормы, ДатаСервера)
	
	Если Выборка.СтатусОперации = Перечисления.СтатусыОнлайнОплат.Оплачен Тогда
		
		ОформитьСостояниеОплачен(Выборка, ДанныеДляФормы, ДатаСервера);
		
	Иначе
		
		ОформитьСостояниеНеОплачен(Выборка, ДанныеДляФормы, ДатаСервера);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОформитьСостояниеОплачен(Выборка, ДанныеДляФормы, ДатаСервера)
	
	ДанныеДляФормы.Оплачен = Истина;
	ДанныеДляФормы.ЦветТекста = WebЦвета.Зеленый;
	
	Если ЗначениеЗаполнено(Выборка.ДатаОперации) Тогда
		ДатаСервера = Выборка.ДатаОперации;
	Иначе
		ДатаСервера = Выборка.ДатаУведомления;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОформитьСостояниеНеОплачен(Выборка, ДанныеДляФормы, ДатаСервера)
	
	ДанныеДляФормы.Отказ = Истина;
	ДанныеДляФормы.ЦветТекста = WebЦвета.Красный;
	
	ДатаСервера = Выборка.ДатаУведомления;
	
	Если НЕ ЗначениеЗаполнено(ДатаСервера) Тогда
		
		ДатаСервера = Выборка.СрокЖизниСсылки;
		
	КонецЕсли;
	
КонецПроцедуры // ОформитьСостояниеНеОплачен()

#Область ПроцедурыПроверкиАдресаЭлектроннойПочты
	
Процедура ПроверитьИндексРазделителя(РезультатВыполнения)
	
	Если НЕ РезультатВыполнения.Успешно Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Найти крайний справа символ @ для правильного выделения локальной и доменной части
	
	ИндексРазделителя = СтрНайти(РезультатВыполнения.Адрес, РезультатВыполнения.СимволСкрепка);
	
	Если ИндексРазделителя = 0 Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='Адрес электронной почты %1 не имеет символа ""@""'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, РезультатВыполнения.Адрес);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	УрезаемаяСтрока = Сред(РезультатВыполнения.Адрес, ИндексРазделителя + 1);

    Пока СтрНайти(УрезаемаяСтрока, РезультатВыполнения.СимволСкрепка) > 0 Цикл

        ИндексРазделителя = ИндексРазделителя + СтрНайти(УрезаемаяСтрока, РезультатВыполнения.СимволСкрепка);

        УрезаемаяСтрока = Сред(УрезаемаяСтрока, ИндексРазделителя + 1);

    КонецЦикла;

    ДоменнаяЧасть = Сред(РезультатВыполнения.Адрес, ИндексРазделителя + 1);

    ЛокальнаяЧасть = Лев(РезультатВыполнения.Адрес, ИндексРазделителя - 1);
	
	РезультатВыполнения.Вставить("ДоменнаяЧасть", ДоменнаяЧасть);
	
	РезультатВыполнения.Вставить("ЛокальнаяЧасть", ЛокальнаяЧасть);
	
КонецПроцедуры // ПроверитьИндексРазделителя()

Процедура ПроверитьОтсутствиеПробелов(РезультатВыполнения)
	
	Если НЕ РезультатВыполнения.Успешно Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИндексПробела = СтрНайти(РезультатВыполнения.Адрес, РезультатВыполнения.СимволПробел);
	
	Если ИндексПробела > 0 Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='Адрес электронной почты %1 не должен иметь пробелов'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, РезультатВыполнения.Адрес);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьОтсутствиеПробелов()

Процедура ПроверитьДлинуДоменнойИЛокальнойЧастей(РезультатВыполнения)
	
	// Если уже есть ошибка, то дальше не проверять
	Если НЕ РезультатВыполнения.Успешно Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Проверить длину локальной части
	
	ДлинаЛокальнойЧасти = СтрДлина(РезультатВыполнения.ЛокальнаяЧасть);
	
	Если ДлинаЛокальнойЧасти < 1 Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='У адреса электронной почты %1 отсутствует локальная часть'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, РезультатВыполнения.Адрес);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	Если ДлинаЛокальнойЧасти > РезультатВыполнения.Длина64 Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='У адреса электронной почты %1 длина локальной части %2 (%3) больше допустимой (%4)'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, РезультатВыполнения.Адрес, РезультатВыполнения.ЛокальнаяЧасть
		, ДлинаЛокальнойЧасти, РезультатВыполнения.Длина64);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	// Проверить длину доменной части
	
	ДлинаДоменнойЧасти = СтрДлина(РезультатВыполнения.ДоменнаяЧасть);
	
	Если ДлинаДоменнойЧасти < 1 Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='У адреса электронной почты %1 отсутствует доменная часть'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, РезультатВыполнения.Адрес);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	Если ДлинаДоменнойЧасти > РезультатВыполнения.Длина255 Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='У адреса электронной почты %1 длина доменной части %2 (%3) больше допустимой (%4)'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, РезультатВыполнения.Адрес, РезультатВыполнения.ДоменнаяЧасть
		, ДлинаДоменнойЧасти, РезультатВыполнения.Длина255);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ПроыеритьДлинуДоменнойИЛокальнойЧастей()

Процедура ПроверитьТочки(РезультатВыполнения)
	
	// Если уже есть ошибка, то дальше не проверять
	Если НЕ РезультатВыполнения.Успешно Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// В адресе должна быть хотя-бы одна точка
	Поз = СтрНайти(РезультатВыполнения.Адрес, РезультатВыполнения.СимволТочка);
	Если Поз = 0 Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='Адрес %1 не имеет ни одной точки'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, РезультатВыполнения.Адрес);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	// Локальная часть адреса не может начинаться с точки
	Если Лев(РезультатВыполнения.ЛокальнаяЧасть, 1) = РезультатВыполнения.СимволТочка Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='Локальная часть адреса %1 не может начинаться с точки'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, РезультатВыполнения.ЛокальнаяЧасть);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	// Локальная часть адреса не может оканчиваться точкой
	Если Прав(РезультатВыполнения.ЛокальнаяЧасть, 1) = РезультатВыполнения.СимволТочка Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='Локальная часть адреса %1 не может оканчиваться точкой'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, РезультатВыполнения.ЛокальнаяЧасть);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	// Локальная часть адреса не может иметь 2 и более точки подряд
	ДвеТочкиПодряд = РезультатВыполнения.СимволТочка + РезультатВыполнения.СимволТочка;
	Если СтрНайти(РезультатВыполнения.ЛокальнаяЧасть, ДвеТочкиПодряд) > 0 Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='Локальная часть адреса %1 не может иметь 2 и более точки подряд'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, РезультатВыполнения.ЛокальнаяЧасть);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	// Доменная часть адреса не может начинаться с точки
	Если Лев(РезультатВыполнения.ДоменнаяЧасть, 1) = РезультатВыполнения.СимволТочка Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='Доменная часть адреса %1 не может начинаться с точки'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, РезультатВыполнения.ДоменнаяЧасть);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	// Доменная часть адреса не может оканчиваться точкой
	Если Прав(РезультатВыполнения.ДоменнаяЧасть, 1) = РезультатВыполнения.СимволТочка Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='Доменная часть адреса %1 не может оканчиваться точкой'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, РезультатВыполнения.ДоменнаяЧасть);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	// Доменная часть адреса не может имть 2 и более точки подряд
	Если СтрНайти(РезультатВыполнения.ДоменнаяЧасть, ДвеТочкиПодряд) > 0 Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='Доменная часть адреса %1 не может иметь 2 и более точки подряд'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, РезультатВыполнения.ДоменнаяЧасть);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьТочки()

Процедура ПроверитьИдентификаторыДоменнойЧасти(РезультатВыполнения)
	
	// Если уже есть ошибка, то дальше не проверять
	Если НЕ РезультатВыполнения.Успешно Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Проверка частей доменной части
    // Каждая часть должна иметь длину не более 63 символов
	// Каждая часть должна начинаться с буквы и заканчиваться буквой или цифрой

    Домены = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РезультатВыполнения.ДоменнаяЧасть
	, РезультатВыполнения.СимволТочка);
	
	Для каждого Домен Из Домены Цикл
		
		ДлинаДомена = СтрДлина(Домен);
		
		Если ДлинаДомена >= РезультатВыполнения.Длина64 Тогда

			РезультатВыполнения.Успешно = Ложь;
			СтрокаШаблон = НСтр("ru='Длина домена %1 (%2) превышает 63 символа'");
			ТекстСообщения = СтрШаблон(СтрокаШаблон, Домен, ДлинаДомена);
			РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);

        КонецЕсли;
		
		ПервыйСимвол = Лев(Домен, 1);
		// Для доменов, нарушающих RFC 1035 п.2.3.1, например @1c.ru :) пока не ясно, пропускает ли их шлюз
		Если СтрНайти(РезультатВыполнения.ЛатинскиеБуквыИЦифры, ПервыйСимвол) = 0 Тогда
		
			РезультатВыполнения.Успешно = Ложь;
			СтрокаШаблон = НСтр("ru='Первый символ домена %1 должен быть буквой латиницы или цифрой'");
			ТекстСообщения = СтрШаблон(СтрокаШаблон, Домен);
			РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		КонецЕсли;
		
		ПоследнийСимвол = Прав(Домен, 1);
		
		Если СтрНайти(РезультатВыполнения.ЛатинскиеБуквыИЦифры, ПоследнийСимвол) = 0 Тогда
		
			РезультатВыполнения.Успешно = Ложь;
			СтрокаШаблон = НСтр("ru='Последний символ домена %1 должен быть буквой латиницы или цифрой'");
			ТекстСообщения = СтрШаблон(СтрокаШаблон, Домен);
			РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьИдентификаторыДоменнойЧасти()

#КонецОбласти

// Получить сумму возврата по основанию Заявки на расход д/с
//
// Параметры:
//  Основание - ДокументСсылка - Основание у Заявки на расход д/с
//
// Возвращаемое значение:
//   Число - сумма к возврату по основанию заявки на расход д/с. Если рассчитать не удалось - 0
//
Функция ПолучитьСуммуВозвратаПоОснованию(Основание)
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипОснования = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") Тогда
		
		Возврат - ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаДокументаРазница");
		
	Иначе
		
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаДокумента");
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуОтчетаПоОперациям()

	ТаблицаОтчета = Новый ТаблицаЗначений;
	
	КвалификаторТипаОперации = Новый КвалификаторыСтроки(10);
	ТипОперации = Новый ОписаниеТипов("Строка", , , , КвалификаторТипаОперации);
	
	КвалификаторИдентификатора = Новый КвалификаторыСтроки(36);
	ТипИдентификатор = Новый ОписаниеТипов("Строка", , , , КвалификаторИдентификатора);
	
	КвалификаторТипаДата = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
    ТипДата = Новый ОписаниеТипов("Дата", , , , , КвалификаторТипаДата);
	
	КвалификаторТипаСумма = Новый КвалификаторыЧисла(15, 2);
	ТипСумма = Новый ОписаниеТипов("Число", , , КвалификаторТипаСумма);
	
	КвалификаторТипаСумма = Новый КвалификаторыЧисла(15, 2);
	
	ТаблицаОтчета.Колонки.Добавить("ТипОперации", ТипОперации);
	ТаблицаОтчета.Колонки.Добавить("ДатаОперации", ТипДата);
	ТаблицаОтчета.Колонки.Добавить("СуммаОплаты", ТипСумма);
	ТаблицаОтчета.Колонки.Добавить("СуммаВозврата", ТипСумма);
	ТаблицаОтчета.Колонки.Добавить("СуммаКомиссии", ТипСумма);
	ТаблицаОтчета.Колонки.Добавить("ИдентификаторОперации", ТипИдентификатор);
	ТаблицаОтчета.Колонки.Добавить("ИдентификаторОперацииОплаты", ТипИдентификатор);
	
	Возврат ТаблицаОтчета;
	
КонецФункции // ПолучитьТаблицуОтчетаПоОперациям()

#КонецОбласти