// Модуль набора записей регистра "Взаиморасчеты компании"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

#Область ОписаниеПеременных

Перем Контрагент Экспорт;				// Контрагент, взаиморасчеты с которым мы фиксируем
Перем ДоговорВзаиморасчетов Экспорт;	// договор взаиморасчетов с контрагентом
Перем Сделка Экспорт;					// Ссылка на документ-сделку, по которой надо зафиксировать/списать долги. 
									 	// Если сделка неопределена, то долг "вешаются" на документ-регистратор
Перем ВзаиморасчетыСПокупателем Экспорт; // Документ
Перем АвтоЗакрытиеСделок Экспорт;		// Булево. Истина - Сначала будут закрыты все долги/авансы контрагента
										//  по указанному договору в порядке ФИФО. Если Неопределено, то берется из договора.
Перем СписатьНераспределеннуюСуммуПоСделке Экспорт; // Булево. Указывает на способ списания нераспределенной суммы,
													// после погашения долгов по сделке и автораспределения.
													// Истина - нераспределенная сумма будет записана на сделку, иначе на документ регистратор.
Перем КонтрольДолгаПриПродаже Экспорт;  // Булево. Истина и Неопределено - выполняет контроль долга
										// контрагента по договору при продаже
Перем Сумма Экспорт;					// Сумма взаиморасчетов
Перем Валюта Экспорт;					// если неопределено, то сумма в валюте документа
Перем КурсВзаиморасчетов Экспорт;		// Курс валюты взаиморасчетов, если не ноль, то в расчетах используется он
Перем ДокументОбъект Экспорт;			// Исходный документ ( подлежит обнулению в любой функции)
Перем СделкиКонтрагента Экспорт;		// Сделки контрагента
Перем ПриходРасход Экспорт;				// действие (приход/расход)
Перем СуммаДоходаРасходаСуммовыхРазниц Экспорт;	// доходы/расходы от суммовых разниц
Перем ШапкаДокумента Экспорт; 			// Выборка или строка таблицы значений, в которой содержатся
										// необходимые данные о шапке документа.
Перем РежимПроведения Экспорт;		// Режим проведения документа оперативный/неоперативный

Перем МоментВремени Экспорт; // Момент времени документа

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует движения по приходу (уменьшение нашего долга / увеличение долга контрагента)
// Возвращаемое значение:
//  Булево - Истина - все хорошо, Ложь - чего-то не так.
//
Функция Приход() Экспорт
	
	Если ШапкаДокумента = Неопределено Тогда
		ШапкаДокумента = ДокументОбъект;
		Если МоментВремени = Неопределено Тогда
			МоментВремени = ШапкаДокумента.МоментВремени();
		КонецЕсли;
	Иначе
		Попытка
			Если МоментВремени = Неопределено Тогда
				МоментВремени = ШапкаДокумента.МоментВремени;
			КонецЕсли;
		Исключение
			Если МоментВремени = Неопределено Тогда
				МоментВремени = ДокументОбъект.МоментВремени();
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	// получим ускоряющие переменные
	ВалютаДоговора = ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
	ВалютаУпр      = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаБаз      = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаБаз, ШапкаДокумента.Дата);
	КурсБаз        = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Если Валюта = Неопределено Тогда 
		Валюта = ШапкаДокумента.ВалютаДокумента;
		Курс = ШапкаДокумента.КурсДокумента;
	Иначе
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ШапкаДокумента.Дата);
		Курс = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	КонецЕсли;
	
	// Курс - это курс документа
	ПараметрКурсВзаиморасчетов = ПолучитьПараметрКурсВзаиморасчетов(ВалютаДоговора, Курс);
	
	// проверки
	Если НЕ ДанныеКорректны() Тогда
		МоментВремени     = Неопределено;
		// убиваем циклическую ссылку
		ДокументОбъект    = Неопределено;
		ШапкаДокумента    = Неопределено;
		СделкиКонтрагента = Неопределено;
		ПриходРасход      = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	Если ЗначениеЗаполнено(Сделка) И (НЕ ВзаиморасчетыСПокупателем = Истина) Тогда
		АвтоЗакрытиеСделок = Ложь;
	ИначеЕсли АвтоЗакрытиеСделок = Неопределено Тогда
		Если ЗначениеЗаполнено(ДоговорВзаиморасчетов) Тогда
			АвтоЗакрытиеСделок = (ДоговорВзаиморасчетов.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
		Иначе
			// Хотя такой ситуации возникать не должно. Договор в настоящее время обязателен.
			АвтоЗакрытиеСделок = Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	КонтрольДолгаПриПродаже = ?(КонтрольДолгаПриПродаже = Неопределено, Истина, КонтрольДолгаПриПродаже);
	
	// Для документов отгрузки или если указана максимальная сумма кредита нужно рассчитать остатки взаиморасчетов.
	СуммаДолга = 0; 
	ПолучитьОстаткиПоДоговору = КонтрольДолгаПриПродаже 
		И (ШапкаДокумента.ХозОперация.ВидОперации = Перечисления.ВидыОперацийДоговора.Продажа
			ИЛИ (ПраваИНастройкиПользователя.Значение("ПроверкаМаксимальногоПревышенияКредитаКонтрагента", ДокументОбъект) 
				И НЕ ДоговорВзаиморасчетов.ОтменаКонтроляСуммыКредита));
			
	Если ПолучитьОстаткиПоДоговору Тогда
			
		// Получим остатки взаиморасчетов по договору.
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ВзаиморасчетыКомпанииОстатки.СуммаОстаток, 0) КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании.Остатки(&Момент, 
		|							Контрагент = &Контрагент И ДоговорВзаиморасчетов=&ДоговорВзаиморасчетов) КАК ВзаиморасчетыКомпанииОстатки
		|");
		Если (РежимПроведения = Неопределено) ИЛИ (РежимПроведения = РежимПроведенияДокумента.Неоперативный) Тогда
			Если ТипЗнч(МоментВремени) = Тип("Граница") Тогда
				НаМомент = Новый Граница(МоментВремени.Значение, ВидГраницы.Исключая);
			Иначе
				НаМомент = Новый Граница(МоментВремени, ВидГраницы.Исключая);
			КонецЕсли;
		Иначе
			НаМомент = Неопределено;
		КонецЕсли;
		
		// Наложим блокировку на считываемые данные
		СтруктураПараметровБлокировки = Новый Структура;
		СтруктураПараметровБлокировки.Вставить("ТипТаблицы", "РегистрНакопления");
		СтруктураПараметровБлокировки.Вставить("ИмяТаблицы", "ВзаиморасчетыКомпании");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",                Новый Диапазон(, ШапкаДокумента.Дата));
		ЗначенияБлокировки.Вставить("Контрагент",            Контрагент);
		ЗначенияБлокировки.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов); 
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
		
		Запрос.УстановитьПараметр("Момент",                НаМомент);
		Запрос.УстановитьПараметр("Контрагент",            Контрагент);
		Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Долг пересчитаем в валюту договора взаиморасчетов (так как контроль будет в этой валюте).
			СуммаДолга = Выборка.СуммаОстаток;
		КонецЕсли;
	КонецЕсли;
	
	// Пересчитаем сумму документа в валюту договора взаиморасчетов.
	СуммаСделки = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		Сумма,
		Валюта,
		Курс,
		ВалютаДоговора,
		ПараметрКурсВзаиморасчетов
	);
	
	// Для документов отгрузки проверим нет ли долгов по взаиморасчетам.
	Если КонтрольДолгаПриПродаже 
		И ШапкаДокумента.ХозОперация.ВидОперации = Перечисления.ВидыОперацийДоговора.Продажа Тогда
		// Проверим есть ли долг по договору.
		Если СуммаДолга + СуммаСделки > 0 Тогда
			// Проверим есть ли право на отгрузку при наличии задолженности.
			РазрешитьОтгрузкуВДолг = ПраваИНастройкиПользователя.Значение("РазрешитьОтгрузкуВДолг", ДокументОбъект);
			Если РазрешитьОтгрузкуВДолг И СуммаДолга > 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Зафиксирована отгрузка контрагенту при наличии задолженности по договору взаиморасчетов.'"),
					ДокументОбъект,
					, , 
					Ложь
				);
			ИначеЕсли НЕ РазрешитьОтгрузкуВДолг 
				И ((СуммаДолга + СуммаСделки) > ДоговорВзаиморасчетов.МаксимальныйКредит И НЕ ДоговорВзаиморасчетов.ОтменаКонтроляСуммыКредита) Тогда
				СообщениеОбОшибке = ?(СуммаДолга <= 0, НСтр("ru = 'Нет прав производить отгрузку без предварительной оплаты.'"),
									НСтр("ru = 'Нет прав производить отгрузку при наличии задолженности по договору взаиморасчетов.'"));
				ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке, ДокументОбъект,,, Истина);
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; // Документ отгрузки ТМЦ
	
	// Проверим на превышение максимальной суммы кредита по договору взаиморасчетов.
	Если КонтрольДолгаПриПродаже  
		И ПраваИНастройкиПользователя.Значение("ПроверкаМаксимальногоПревышенияКредитаКонтрагента", ДокументОбъект) Тогда
		// Проверим превысим ли мы максимальный кредит при проведении этого документа.
		Если НЕ ДоговорВзаиморасчетов.ОтменаКонтроляСуммыКредита И ((СуммаДолга + СуммаСделки) > ДоговорВзаиморасчетов.МаксимальныйКредит) Тогда
			// Проверим есть ли право на превышение максимального кредита.
			Если ПраваИНастройкиПользователя.Значение("РазрешитьПревышениеМаксимальногоКредитаКонтрагента", ДокументОбъект) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Зафиксировано превышение максимальной суммы кредита по договору взаиморасчетов.'"),
					ДокументОбъект,,, Ложь);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Нет прав на превышение максимальной суммы кредита по договору взаиморасчетов.'"),
					ДокументОбъект,,, Истина);
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Подлежит исправлению YABS
	// Сделки будем закрывать исходя из суммы, согласно валюты договора.
	Если Валюта = Константы.ВалютаУправленческогоУчетаКомпании.Получить() Тогда
		ИмяРесурсаСуммы = "СуммаУпр";
	ИначеЕсли Валюта = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
		ИмяРесурсаСуммы = "СуммаБаз";
	Иначе
		ИмяРесурсаСуммы = "Сумма";
	КонецЕсли; 
	
	// Суммы
	ПолнаяРаспределяемаяСумма = Сумма;
	ПолнаяСуммаСделки         = 0;
	
	ПогашениеКредиторскойЗадолженности = Перечисления.ВидыОперацийВзаиморасчетов.ПогашениеКредиторскойЗадолженности;
	
	УчитыватьРаспределениеПоСделке = ИспользоватьРаспределениеОплатыПоСделке();
	
	// 1. Если указана сделка, то сначала закроем ее долги/авансы.
	Если ЗначениеЗаполнено(Сделка) И Метаданные.РегистрыНакопления.ВзаиморасчетыКомпании.Измерения.Сделка.Тип.СодержитТип(ТипЗнч(Сделка)) Тогда
		РезультатДолгиПоСделке = ПолучитьНеЗакрытыеСделки(Истина, ?(ПриходРасход = Неопределено, Истина, ПриходРасход));
		Выборка = РезультатДолгиПоСделке.Выбрать();
		// Пройдемся по выборке.
		Пока Выборка.Следующий() Цикл
			ВалютаОстаткаСуммыПлатежа = ВалютаДоговора;
			КурсОстаткаСуммыПлатежа   = ПараметрКурсВзаиморасчетов;
			
			ОстатокСуммыПлатежа = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма, Валюта, Курс, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа);
			// Определим по какой сумме считаем все остальное для избежания двойного пересчета и как следствия ошибки округления.
			ЗнакСуммыВыборки = ?(Выборка.Сумма < 0, -1, 1); 
			Если Выборка.Сумма * ЗнакСуммыВыборки < ОстатокСуммыПлатежа Тогда
				СуммаДляПересчета = Окр(Выборка.Сумма * ЗнакСуммыВыборки, 2);
			Иначе
				ВалютаОстаткаСуммыПлатежа = Валюта;
				КурсОстаткаСуммыПлатежа = Курс;
				СуммаДляПересчета = Сумма;
			КонецЕсли;
			Если СуммаДляПересчета = 0 Тогда
				Продолжить;
			КонецЕсли; 
			// Закрываем
			НоваяЗапись = Добавить();
			НоваяЗапись.ВидДвижения           = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период                = ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор           = ШапкаДокумента.Ссылка;
			НоваяЗапись.Контрагент            = Выборка.Контрагент;
			НоваяЗапись.ДоговорВзаиморасчетов = Выборка.ДоговорВзаиморасчетов;
			НоваяЗапись.Сделка                = Выборка.Сделка;
			НоваяЗапись.ХозОперация           = ШапкаДокумента.ХозОперация;
			НоваяЗапись.ВидОперации           = ПогашениеКредиторскойЗадолженности;
			НоваяЗапись.Сумма                 = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДляПересчета, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа, ВалютаДоговора, ПараметрКурсВзаиморасчетов), 2);
			НоваяЗапись.СуммаУпр              = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДляПересчета, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа, ВалютаУпр, ?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.Дата, ШапкаДокумента.КурсВалютыУпр)), 2);
			НоваяЗапись.СуммаБаз              = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДляПересчета, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа, ВалютаБаз, КурсБаз), 2);
			// Подлежит исправлению YABS
			// Сделки будем закрывать исходя из суммы, согласно валюты договора.
			Если ИмяРесурсаСуммы="СуммаУпр" Тогда
				СуммаЗакрылиДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяЗапись[ИмяРесурсаСуммы], ВалютаУпр, ?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.Дата, ШапкаДокумента.КурсВалютыУпр), Валюта, Курс);
			ИначеЕсли ИмяРесурсаСуммы="СуммаБаз" Тогда
				СуммаЗакрылиДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяЗапись[ИмяРесурсаСуммы], ВалютаБаз, КурсБаз, Валюта, Курс);
			Иначе
				СуммаЗакрылиДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДляПересчета, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа, Валюта, Курс);
			КонецЕсли;
			
			// Уменьшим сумму
			Сумма = Сумма - СуммаЗакрылиДок;
			// Подсчитаем полную сумму
			ПолнаяСуммаСделки = ПолнаяСуммаСделки + СуммаЗакрылиДок;
			
			// Если сделка закрыта, спишем курсовую разницу по ресурсу СуммаБаз
			ОстатокПоВзаиморасчетам = НоваяЗапись.Сумма - Выборка.Сумма * ?(Выборка.Сумма < 0, -1, 1);
			ОстатокПоВзаиморасчетамЗнак = ?(ОстатокПоВзаиморасчетам < 0, -ОстатокПоВзаиморасчетам, ОстатокПоВзаиморасчетам);
			МинОстаток = 0.01;
			Если ОстатокПоВзаиморасчетамЗнак < МинОстаток Тогда
				СписаниеКурсовойРазницыБаз(НоваяЗапись.ДоговорВзаиморасчетов, НоваяЗапись.Контрагент, НоваяЗапись.Сделка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 2. Если после закрытия долгов по указанной сделке осталась еще не распределенная сумма,
	//    и надо произвести автоматическое закрытие сделок, то закроем остальные сделки в порядке ФИФО.
	Если АвтоЗакрытиеСделок И Сумма >= 0.01 Тогда
		// Получим предоплаты по документу
		Если УчитыватьРаспределениеПоСделке Тогда
			СписокПредоплатПоСделке = ПредоплатыПоСделке();
			СделкиПредоплаты = СделкиПредоплаты();
		Иначе
			СписокПредоплатПоСделке = Новый Массив();
			СделкиПредоплаты = Новый Массив();
		КонецЕсли;
		РезультатНеЗакрытыеСделки = ПолучитьНеЗакрытыеСделки(,
			?(ПриходРасход = Неопределено, Истина, ПриходРасход),
			СписокПредоплатПоСделке);
		Выборка = РезультатНеЗакрытыеСделки.Выбрать();
		// Пройдемся по выборке
		Пока Выборка.Следующий() Цикл
			
			Если СделкиПредоплаты.Найти(ТипЗнч(Выборка.Сделка)) <> Неопределено
				И СписокПредоплатПоСделке <> Неопределено
				И СписокПредоплатПоСделке.Найти(Выборка.Сделка) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Надо ли закрывать данную сделку ?
			ВалютаОстаткаСуммыПлатежа = ВалютаДоговора;
			КурсОстаткаСуммыПлатежа = ПараметрКурсВзаиморасчетов;
			
			ОстатокСуммыПлатежа = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма, Валюта ,Курс, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа);
			// Определим по какой сумме считаем все остальное для избежания двойного пересчета и как следствия ошибки округления.
			ВыборкаСуммаЗнак = ?(Выборка.Сумма < 0, -1, 1);	
			Если Выборка.Сумма * ВыборкаСуммаЗнак < ОстатокСуммыПлатежа Тогда
				СуммаДляПересчета = Окр(Выборка.Сумма * ?(Выборка.Сумма < 0, -1, 1), 2);
			Иначе
				ВалютаОстаткаСуммыПлатежа = Валюта;
				КурсОстаткаСуммыПлатежа = Курс;
				СуммаДляПересчета = Сумма;
			КонецЕсли;
			Если СуммаДляПересчета = 0 Тогда
				Продолжить;
			КонецЕсли;
			// Зачтем авансы и долги
			НоваяЗапись = Добавить();
			НоваяЗапись.ВидДвижения           = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период                = ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор           = ШапкаДокумента.Ссылка;
			НоваяЗапись.Контрагент            = Выборка.Контрагент;
			НоваяЗапись.ДоговорВзаиморасчетов = Выборка.ДоговорВзаиморасчетов;
			НоваяЗапись.Сделка                = Выборка.Сделка;
			НоваяЗапись.ХозОперация           = ШапкаДокумента.ХозОперация;
			НоваяЗапись.ВидОперации           = ПогашениеКредиторскойЗадолженности;
			НоваяЗапись.Сумма                 = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДляПересчета, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа, ВалютаДоговора, ПараметрКурсВзаиморасчетов), 2);
			НоваяЗапись.СуммаУпр              = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДляПересчета, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа, ВалютаУпр,?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.Дата, ШапкаДокумента.КурсВалютыУпр)), 2);
			НоваяЗапись.СуммаБаз              = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДляПересчета, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа, ВалютаБаз, КурсБаз), 2);
			// Сделки будем закрывать исходя из суммы, согласно валюты договора
			Если ИмяРесурсаСуммы = "СуммаУпр" Тогда
				СуммаЗакрылиДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяЗапись[ИмяРесурсаСуммы], ВалютаУпр, ?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.Дата, ШапкаДокумента.КурсВалютыУпр), Валюта, Курс);
			ИначеЕсли ИмяРесурсаСуммы = "СуммаБаз" Тогда
				СуммаЗакрылиДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяЗапись[ИмяРесурсаСуммы], ВалютаБаз, КурсБаз, Валюта, Курс);
			Иначе
				СуммаЗакрылиДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДляПересчета, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа, Валюта, Курс);
			КонецЕсли;
			
			// Уменьшим сумму
			Сумма = Сумма - СуммаЗакрылиДок;
			// подсчитаем полную сумму
			ПолнаяСуммаСделки = ПолнаяСуммаСделки + СуммаЗакрылиДок;
			
			// Если сделка закрыта, спишем курсовую разницу по ресурсу СуммаБаз
			ОстатокПоВзаиморасчетам = НоваяЗапись.Сумма - Выборка.Сумма * ?(Выборка.Сумма < 0, -1 ,1);
			ОстатокПоВзаиморасчетамЗнак = ?(ОстатокПоВзаиморасчетам < 0, - ОстатокПоВзаиморасчетам, ОстатокПоВзаиморасчетам);	
			МинОстаток = 0.01;
			Если ОстатокПоВзаиморасчетамЗнак < МинОстаток Тогда
				СписаниеКурсовойРазницыБаз(НоваяЗапись.ДоговорВзаиморасчетов, НоваяЗапись.Контрагент, НоваяЗапись.Сделка);
			КонецЕсли;
			// Если распределили всю сумму, то выходим
			Если Сумма < МинОстаток Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 3. Если осталась нераспределенная сумма...
	СуммаОстаток    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма, Валюта, Курс, ВалютаДоговора, ПараметрКурсВзаиморасчетов);
	СуммаОстатокАбс = СуммаОстаток;
	Если СуммаОстаток < 0 Тогда
		СуммаОстатокАбс = -СуммаОстаток;
	КонецЕсли;
	Если СуммаОстатокАбс >= 0.01 Тогда
		ЭтоОплатаСделки = ЭтоДокументОплатыСделки(ШапкаДокумента.Ссылка, УчитыватьРаспределениеПоСделке);
		
		Если ЗначениеЗаполнено(Сделка) И ((НЕ ВзаиморасчетыСПокупателем = Истина)
			И Не ЭтоОплатаСделки
			ИЛИ ЭтоКорректировкаВзаиморасчетов(ШапкаДокумента.Ссылка, УчитыватьРаспределениеПоСделке)) Тогда
			СделкаПереплаты = Сделка;
			СделкаПроверки = Сделка;
		Иначе
			Если ЭтоОплатаСделки Тогда
				СделкаПроверки = Сделка;
			Иначе
				СделкаПроверки = ШапкаДокумента.Ссылка;
			КонецЕсли;
			СделкаПереплаты = ШапкаДокумента.Ссылка;
		КонецЕсли;
		Если СделкаПроверки <> ШапкаДокумента.Ссылка И СуммаОстатокАбс > 0 Тогда
			// Проверили, что закрываемая сделка не есть сам документ движения.
			// Посмотрим, запрещена ли по данной сделке переплата. и если запрещена, то падаем.
			Попытка
				ЗапретПереплатПоСделкам = 
							ПланыВидовХарактеристик.ТипыСделок[СделкаПроверки.Метаданные().Имя].ЗапретитьПереплатуПоСделкам;
			Исключение
				ЗапретПереплатПоСделкам = Ложь;
			КонецПопытки;
			
			Если ЗапретПереплатПоСделкам Тогда
				// Переплата запрещена.
				ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Распределяемая сумма'") + " " + Формат(ПолнаяРаспределяемаяСумма, "ЧДЦ=2; ЧН=0,00")
				+ " " + НСтр("ru = 'превышает незакрытую сумму сделки'") + " " + Формат(ПолнаяСуммаСделки, "ЧЦ=15; ЧДЦ=2; ЧН=0,00")
				+ " " + "на" + " "  + Формат(Сумма, "ЧЦ=15; ЧДЦ=2; ЧН=0,00") + " .",
				ДокументОбъект,
				,
				,
				Истина
				);
				Результат = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// Вешаем оставшуюся сумму либо на сделку (если она указана), либо на сам документ.
		НоваяЗапись = Добавить();
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяЗапись.Период                = ШапкаДокумента.Дата;
		НоваяЗапись.Регистратор           = ШапкаДокумента.Ссылка;
		НоваяЗапись.Контрагент            = Контрагент;
		НоваяЗапись.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
		НоваяЗапись.Сделка                = СделкаПереплаты;
		НоваяЗапись.ХозОперация           = ШапкаДокумента.ХозОперация;
		НоваяЗапись.ВидОперации           = Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности;
		НоваяЗапись.Сумма				  = Окр(СуммаОстаток, 2);
		НоваяЗапись.СуммаУпр			  = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма, Валюта, Курс, ВалютаУпр, ?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.Дата, ШапкаДокумента.КурсВалютыУпр)), 2);
		НоваяЗапись.СуммаБаз			  = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма, Валюта, Курс, ВалютаБаз, КурсБаз), 2);
	КонецЕсли;
	
	Если НЕ КонтрольВзаиморасчетовПоСделкам() Тогда
		Результат = Ложь;
	КонецЕсли;
	
	// Если списываем, суммовые разницы первичным документом, то спишем их
	РежимСписанияСуммовыхРазниц = УчетныеПолитикиСервер.Значение("РежимСписанияСуммовыхРазниц", ДокументОбъект.Дата);
	Если Результат = Истина
		 И РежимСписанияСуммовыхРазниц = Перечисления.РежимыРегламентныхОпераций.ПриПроведенииДокумента Тогда
		 СписаниеСуммовыхРазниц();
	КонецЕсли;
	
	// Убиваем циклическую ссылку
	МоментВремени                        = Неопределено;
	ДокументОбъект                       = Неопределено;
	АвтоЗакрытиеСделок                   = Неопределено;
	СписатьНераспределеннуюСуммуПоСделке = Неопределено;
	КонтрольДолгаПриПродаже              = Неопределено;
	ШапкаДокумента                       = Неопределено;
	Валюта                               = Неопределено;
	СделкиКонтрагента                    = Неопределено;
	ПриходРасход                         = Неопределено;
	
	Возврат Результат;
КонецФункции

// Формирует движения по расходу (увеличение нашего долга)
// Возвращаемое значение: Булево. Истина - все ОК, Ложь - чего-то не так.
Функция Расход() Экспорт
	
	Результат = Истина;
	
	Если ШапкаДокумента = Неопределено Тогда
		ШапкаДокумента = ДокументОбъект;
		Если МоментВремени = Неопределено Тогда
			МоментВремени = ШапкаДокумента.МоментВремени();
		КонецЕсли;
	Иначе
		Попытка
			Если МоментВремени = Неопределено Тогда
				МоментВремени = ШапкаДокумента.МоментВремени;
			КонецЕсли;
		Исключение
			Если МоментВремени = Неопределено Тогда
				МоментВремени = ДокументОбъект.МоментВремени();
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	// Получим ускоряющие переменные	
	ВалютаДоговора = ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаБаз = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаБаз, ШапкаДокумента.Дата);
	КурсБаз = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Если Валюта = Неопределено Тогда 
		Валюта = ШапкаДокумента.ВалютаДокумента;
		Курс   = ШапкаДокумента.КурсДокумента;
	Иначе
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ШапкаДокумента.Дата);
		Курс = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	КонецЕсли;
	
	// Курс - это курс документа
	ПараметрКурсВзаиморасчетов = ПолучитьПараметрКурсВзаиморасчетов(ВалютаДоговора, Курс);
	
	// Проверки
	Если НЕ ДанныеКорректны() Тогда 
		// убиваем циклическую ссылку
		МоментВремени     = Неопределено;
		ДокументОбъект    = Неопределено;
		ШапкаДокумента    = Неопределено;
		СделкиКонтрагента = Неопределено;
		ПриходРасход      = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сделка) И ВзаиморасчетыСПокупателем = Истина Тогда
		АвтоЗакрытиеСделок = Ложь;
	ИначеЕсли АвтоЗакрытиеСделок = Неопределено Тогда
		Если ЗначениеЗаполнено(ДоговорВзаиморасчетов) Тогда
			АвтоЗакрытиеСделок = (ДоговорВзаиморасчетов.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
		Иначе	
			// Хотя такой ситуации возникать не должно. Договор в настоящее время обязателен
			АвтоЗакрытиеСделок = Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	// Сделки будем закрывать исходя из суммы, согласно валюты договора
	Если Валюта = Константы.ВалютаУправленческогоУчетаКомпании.Получить() Тогда
		ИмяРесурсаСуммы = "СуммаУпр";
	ИначеЕсли Валюта = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
		ИмяРесурсаСуммы = "СуммаБаз";
	Иначе
		ИмяРесурсаСуммы = "Сумма";
	КонецЕсли; 
	
	// Суммы
	ПолнаяРаспределяемаяСумма = Сумма;
	ПолнаяСуммаСделки         = 0;
	
	УчитыватьРаспределениеПоСделке = ИспользоватьРаспределениеОплатыПоСделке();
	
	// 1. Если указана сделка, то сначала закроем ее долги/авансы
	ПогашениеДебиторскойЗадолженности = Перечисления.ВидыОперацийВзаиморасчетов.ПогашениеДебиторскойЗадолженности;
	Если ЗначениеЗаполнено(Сделка) И Метаданные.РегистрыНакопления.ВзаиморасчетыКомпании.Измерения.Сделка.Тип.СодержитТип(ТипЗнч(Сделка)) Тогда
		РезультатДолгиПоСделке = ПолучитьНеЗакрытыеСделки(Истина, ?(ПриходРасход = Неопределено, Ложь, ПриходРасход));
		
		// Вернем полностью всю сумму на сделку
		Если РезультатДолгиПоСделке.Пустой() И ПриходРасход = Истина Тогда
			
			НоваяЗапись = Добавить();
			НоваяЗапись.ВидДвижения           = ВидДвиженияНакопления.Расход;
			НоваяЗапись.Период                = ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор           = ШапкаДокумента.Ссылка;
			НоваяЗапись.Контрагент            = ШапкаДокумента.Контрагент;
			НоваяЗапись.ДоговорВзаиморасчетов = ШапкаДокумента.ДоговорВзаиморасчетов;
			НоваяЗапись.Сделка                = Сделка;
			НоваяЗапись.ХозОперация           = ШапкаДокумента.ХозОперация;
			НоваяЗапись.ВидОперации           = ПогашениеДебиторскойЗадолженности;
			НоваяЗапись.Сумма                 = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					Сумма,
					ШапкаДокумента.ВалютаДокумента,
					ШапкаДокумента.КурсДокумента,
					ВалютаДоговора,
					ПараметрКурсВзаиморасчетов),
				2);
			НоваяЗапись.СуммаУпр              = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					Сумма,
					ШапкаДокумента.ВалютаДокумента,
					ШапкаДокумента.КурсДокумента,
					ВалютаУпр,
					?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.Дата, ШапкаДокумента.КурсВалютыУпр)),
				2);
			НоваяЗапись.СуммаБаз              = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					Сумма,
					ШапкаДокумента.ВалютаДокумента,
					ШапкаДокумента.КурсДокумента,
					ВалютаБаз,
					КурсБаз),
				2);
			// Сделки будем закрывать исходя из суммы, согласно валюты договора
			Если ИмяРесурсаСуммы      ="СуммаУпр" Тогда
				СуммаЗакрылиДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					НоваяЗапись[ИмяРесурсаСуммы],
					ВалютаУпр,
					?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.Дата, ШапкаДокумента.КурсВалютыУпр),
					Валюта,
					Курс);
			ИначеЕсли ИмяРесурсаСуммы = "СуммаБаз" Тогда
				СуммаЗакрылиДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					НоваяЗапись[ИмяРесурсаСуммы],
					ВалютаБаз,
					КурсБаз,
					Валюта,
					Курс);
			Иначе
				СуммаЗакрылиДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					Сумма,
					ШапкаДокумента.ВалютаДокумента,
					ШапкаДокумента.КурсДокумента,
					Валюта,
					Курс);
			КонецЕсли;
			
			// Уменьшим сумму
			Сумма = 0;
			
			// Подсчитаем полную сумму
			ПолнаяСуммаСделки = ПолнаяСуммаСделки + СуммаЗакрылиДок;
			
		КонецЕсли;
		
		// Пройдемся по выборке
		Выборка = РезультатДолгиПоСделке.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВалютаОстаткаСуммыПлатежа = ВалютаДоговора;
			КурсОстаткаСуммыПлатежа   = ПараметрКурсВзаиморасчетов;
			ОстатокСуммыПлатежа = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма, Валюта, Курс, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа);
			// Определим по какой сумме считаем все остальное для избежания двойного пересчета и как следствия ошибки округления.
			ЗнакСуммыВыборки = ?(Выборка.Сумма < 0, -1, 1);
			Если Выборка.Сумма * ЗнакСуммыВыборки < ОстатокСуммыПлатежа Тогда
				СуммаДляПересчета = Окр(Выборка.Сумма * ЗнакСуммыВыборки, 2);
			Иначе
				ВалютаОстаткаСуммыПлатежа = Валюта;
				КурсОстаткаСуммыПлатежа = Курс;
				СуммаДляПересчета = Сумма;
			КонецЕсли;
			
			Если СуммаДляПересчета = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Закрываем
			НоваяЗапись = Добавить();
			НоваяЗапись.ВидДвижения           = ВидДвиженияНакопления.Расход;
			НоваяЗапись.Период                = ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор           = ШапкаДокумента.Ссылка;
			НоваяЗапись.Контрагент            = Выборка.Контрагент;
			НоваяЗапись.ДоговорВзаиморасчетов = Выборка.ДоговорВзаиморасчетов;
			НоваяЗапись.Сделка                = Выборка.Сделка;
			НоваяЗапись.ХозОперация           = ШапкаДокумента.ХозОперация;
			НоваяЗапись.ВидОперации           = ПогашениеДебиторскойЗадолженности;
			НоваяЗапись.Сумма                 = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДляПересчета, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа, ВалютаДоговора,ПараметрКурсВзаиморасчетов), 2);
			НоваяЗапись.СуммаУпр              = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДляПересчета, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа, ВалютаУпр, ?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.Дата, ШапкаДокумента.КурсВалютыУпр)), 2);
			НоваяЗапись.СуммаБаз              = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДляПересчета, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа, ВалютаБаз, КурсБаз), 2);
			// Сделки будем закрывать исходя из суммы, согласно валюты договора
			Если ИмяРесурсаСуммы      ="СуммаУпр" Тогда
				СуммаЗакрылиДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяЗапись[ИмяРесурсаСуммы], ВалютаУпр, ?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.Дата, ШапкаДокумента.КурсВалютыУпр), Валюта, Курс);
			ИначеЕсли ИмяРесурсаСуммы = "СуммаБаз" Тогда
				СуммаЗакрылиДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяЗапись[ИмяРесурсаСуммы], ВалютаБаз, КурсБаз, Валюта, Курс);
			Иначе
				СуммаЗакрылиДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДляПересчета, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа, Валюта, Курс);
			КонецЕсли;
			
			// Уменьшим сумму
			Сумма = Сумма - СуммаЗакрылиДок;
			
			// Подсчитаем полную сумму
			ПолнаяСуммаСделки = ПолнаяСуммаСделки + СуммаЗакрылиДок;
			
			// Если сделка закрыта, спишем курсовую разницу по ресурсу СуммаБаз
			ОстатокПоВзаиморасчетам = НоваяЗапись.Сумма-Выборка.Сумма * ?(Выборка.Сумма < 0, -1, 1);
			ОстатокПоВзаиморасчетамЗнак = ?(ОстатокПоВзаиморасчетам < 0, -ОстатокПоВзаиморасчетам, ОстатокПоВзаиморасчетам); 
			МинОстаток = 0.01;
			Если ОстатокПоВзаиморасчетамЗнак < МинОстаток Тогда
				СписаниеКурсовойРазницыБаз(НоваяЗапись.ДоговорВзаиморасчетов, НоваяЗапись.Контрагент, НоваяЗапись.Сделка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 2. Если после закрытия долгов по указанной сделке осталась еще не распределенная сумма,
	//    и надо произвести автоматическое закрытие сделок, то закроем остальные сделки в порядке ФИФО.
	Если АвтоЗакрытиеСделок И Сумма >= 0.01 Тогда
		
		РезультатНеЗакрытыеСделки = ПолучитьНеЗакрытыеСделки(, ?(ПриходРасход = Неопределено, Ложь, ПриходРасход));
		Выборка = РезультатНеЗакрытыеСделки.Выбрать();
		// Пройдемся по выборке
		Пока Выборка.Следующий() Цикл
			// Сделки будем закрывать исходя из суммы, согласно валюты договора
			ВалютаОстаткаСуммыПлатежа = ВалютаДоговора;
			КурсОстаткаСуммыПлатежа = ПараметрКурсВзаиморасчетов;
			ОстатокСуммыПлатежа = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма, Валюта, Курс, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа);
			// Определим по какой сумме считаем все остальное для избежания двойного пересчета и как следствия ошибки округления.
			ЗнакСуммыВыборки = ?(Выборка.Сумма < 0, -1, 1);
			Если Выборка.Сумма * ЗнакСуммыВыборки < ОстатокСуммыПлатежа Тогда
				СуммаДляПересчета = Окр(Выборка.Сумма * ЗнакСуммыВыборки, 2);
			Иначе
				ВалютаОстаткаСуммыПлатежа = Валюта;
				КурсОстаткаСуммыПлатежа = Курс;
				СуммаДляПересчета = Сумма;
			КонецЕсли;
			
			Если СуммаДляПересчета <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Зачтем авансы и долги
			НоваяЗапись = Добавить();
			НоваяЗапись.ВидДвижения           = ВидДвиженияНакопления.Расход;
			НоваяЗапись.Период                = ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор           = ШапкаДокумента.Ссылка;
			НоваяЗапись.Контрагент            = Выборка.Контрагент;
			НоваяЗапись.ДоговорВзаиморасчетов = Выборка.ДоговорВзаиморасчетов;
			НоваяЗапись.Сделка                = Выборка.Сделка;
			НоваяЗапись.ХозОперация           = ШапкаДокумента.ХозОперация;
			НоваяЗапись.ВидОперации           = ПогашениеДебиторскойЗадолженности;
			НоваяЗапись.Сумма                 = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДляПересчета, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа, ВалютаДоговора, ПараметрКурсВзаиморасчетов), 2);
			НоваяЗапись.СуммаУпр              = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДляПересчета, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа, ВалютаУпр, ?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.Дата, ШапкаДокумента.КурсВалютыУпр)), 2);
			НоваяЗапись.СуммаБаз              = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДляПересчета, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа, ВалютаБаз, КурсБаз), 2);
			// Сделки будем закрывать исходя из суммы, согласно валюты договора
			Если ИмяРесурсаСуммы      = "СуммаУпр" Тогда
				СуммаЗакрылиДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяЗапись[ИмяРесурсаСуммы], ВалютаУпр, ?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.Дата, ШапкаДокумента.КурсВалютыУпр), Валюта, Курс);
			ИначеЕсли ИмяРесурсаСуммы = "СуммаБаз" Тогда
				СуммаЗакрылиДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяЗапись[ИмяРесурсаСуммы], ВалютаБаз, КурсБаз, Валюта, Курс);
			Иначе
				СуммаЗакрылиДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДляПересчета, ВалютаОстаткаСуммыПлатежа, КурсОстаткаСуммыПлатежа, Валюта, Курс);
			КонецЕсли;
			
			// уменьшим сумму
			Сумма = Сумма - СуммаЗакрылиДок;
			// подсчитаем полную сумму
			ПолнаяСуммаСделки = ПолнаяСуммаСделки + СуммаЗакрылиДок;
			
			// Если сделка закрыта, спишем курсовую разницу по ресурсу СуммаБаз
			ОстатокПоВзаиморасчетам = НоваяЗапись.Сумма - Выборка.Сумма * ?(Выборка.Сумма < 0, -1 , 1);
			ОстатокПоВзаиморасчетамЗнак = ?(ОстатокПоВзаиморасчетам < 0, -ОстатокПоВзаиморасчетам, ОстатокПоВзаиморасчетам);
			МинОстаток = 0.01;
			Если ОстатокПоВзаиморасчетамЗнак < МинОстаток Тогда
				СписаниеКурсовойРазницыБаз(НоваяЗапись.ДоговорВзаиморасчетов, НоваяЗапись.Контрагент, НоваяЗапись.Сделка);
			КонецЕсли;
			
			// если распределили всю сумму, то выходим
			Если Сумма < МинОстаток Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// 3. Если осталась нераспределенная сумма...
	СуммаОстаток = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма, Валюта, Курс, ВалютаДоговора, ПараметрКурсВзаиморасчетов);
	СуммаОстатокАбс = СуммаОстаток;
	Если СуммаОстаток < 0 Тогда
		СуммаОстатокАбс = -СуммаОстаток;
	КонецЕсли;
	Если СуммаОстатокАбс >= 0.01 Тогда
		ЭтоОплатаСделки = ЭтоДокументОплатыСделки(ШапкаДокумента.Ссылка, УчитыватьРаспределениеПоСделке);
		Если ЗначениеЗаполнено(Сделка) И (ВзаиморасчетыСПокупателем = Истина
			И Не ЭтоОплатаСделки
			ИЛИ ЭтоКорректировкаВзаиморасчетов(ШапкаДокумента.Ссылка, УчитыватьРаспределениеПоСделке)) Тогда
			СделкаПереплаты = Сделка;
			СделкаПроверки = Сделка;
		Иначе
			Если ЭтоОплатаСделки Тогда
				СделкаПроверки = Сделка;
			Иначе
				СделкаПроверки = ШапкаДокумента.Ссылка;
			КонецЕсли;
			СделкаПереплаты = ШапкаДокумента.Ссылка;
		КонецЕсли;
		Если СделкаПроверки <> ШапкаДокумента.Ссылка И СуммаОстатокАбс > 0 Тогда
			// Проверили, что закрываемая сделка не есть сам документ движения
			// Посмотрим, запрещена ли по данной сделке переплата. И если запрещена, то падаем.
			Попытка
				ЗапретПереплатПоСделкам = 
						ПланыВидовХарактеристик.ТипыСделок[СделкаПроверки.Метаданные().Имя].ЗапретитьПереплатуПоСделкам;
			Исключение
				ЗапретПереплатПоСделкам = Ложь;
			КонецПопытки;
			
			Если ЗапретПереплатПоСделкам Тогда
				// Переплата запрещена.
				ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Распределяемая сумма'") + " " + Формат(ПолнаяРаспределяемаяСумма, "ЧДЦ=2; ЧН=0,00")
				+ " " + НСтр("ru = 'превышает незакрытую сумму сделки'") + " " + Формат(ПолнаяСуммаСделки, "ЧДЦ=2; ЧН=0,00")
				+ " " + "на" + " " + Формат(Сумма, "ЧДЦ=2; ЧН=0,00") + " .",
				ДокументОбъект,
				,
				,
				Истина
				);
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И ЗначениеЗаполнено(Сделка) И СделкаПереплаты <> Сделка Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Сумма переплаты'") + " " + Формат(СуммаОстаток, "ЧДЦ=2; ЧН=0,00") + " "
					+ СокрЛП(ДоговорВзаиморасчетов.ВалютаВзаиморасчетов) + " " + НСтр("ru = 'распределена на сделку'") + " <"
					+ СокрЛП(СделкаПереплаты) + ">.",
				ДокументОбъект
			);
		КонецЕсли;
		
		// Вешаем оставшуюся сумму либо на сделку (если она указана), либо на сам документ
		НоваяЗапись = Добавить();
		НоваяЗапись.ВидДвижения           = ВидДвиженияНакопления.Расход;
		НоваяЗапись.Период                = ШапкаДокумента.Дата;
		НоваяЗапись.Регистратор           = ШапкаДокумента.Ссылка;
		НоваяЗапись.Контрагент            = Контрагент;
		НоваяЗапись.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
		НоваяЗапись.Сделка                = СделкаПереплаты;
		НоваяЗапись.ХозОперация           = ШапкаДокумента.ХозОперация;
		НоваяЗапись.ВидОперации           = Перечисления.ВидыОперацийВзаиморасчетов.НачислениеКредиторскойЗадолженности;
		НоваяЗапись.Сумма				  = Окр(СуммаОстаток, 2);
		НоваяЗапись.СуммаУпр			  = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма, Валюта, Курс, ВалютаУпр, ?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.Дата, ШапкаДокумента.КурсВалютыУпр)), 2);
		НоваяЗапись.СуммаБаз			  = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма, Валюта, Курс, ВалютаБаз, КурсБаз), 2);
	КонецЕсли;
	
	Если НЕ КонтрольВзаиморасчетовПоСделкам() Тогда
		Результат = Ложь;
	КонецЕсли;
	
	// Если списываем, суммовые разницы первичным документом, то спишем их
	РежимСписанияСуммовыхРазниц = УчетныеПолитикиСервер.Значение("РежимСписанияСуммовыхРазниц", ДокументОбъект.Дата);
	Если Результат = Истина
		 И РежимСписанияСуммовыхРазниц = Перечисления.РежимыРегламентныхОпераций.ПриПроведенииДокумента Тогда
		 СписаниеСуммовыхРазниц();
	КонецЕсли;

	// Убиваем циклическую ссылку
	МоментВремени                        = Неопределено;
	ДокументОбъект                       = Неопределено;
	ШапкаДокумента                       = Неопределено;
	АвтоЗакрытиеСделок                   = Неопределено;
	СписатьНераспределеннуюСуммуПоСделке = Неопределено;
	КонтрольДолгаПриПродаже              = Неопределено;
	Валюта                               = Неопределено;
	СделкиКонтрагента                    = Неопределено;
	ПриходРасход                         = Неопределено;
	
	Возврат Результат;
КонецФункции

// Списывает суммовые разницы
Функция СписаниеСуммовыхРазниц() Экспорт
	
	Если ШапкаДокумента = Неопределено Тогда 
		ШапкаДокумента = ДокументОбъект; 
		Если МоментВремени = Неопределено Тогда
			МоментВремени = ШапкаДокумента.МоментВремени();
		КонецЕсли; 
	Иначе
		Попытка
			Если МоментВремени = Неопределено Тогда
				МоментВремени = ШапкаДокумента.МоментВремени;
			КонецЕсли; 
		Исключение
			Если МоментВремени = Неопределено Тогда
				МоментВремени = ДокументОбъект.МоментВремени();
			КонецЕсли; 
		КонецПопытки;
	КонецЕсли;
	
	// Запишем предыдущие движения иначе остатки будут неверны в запросе
	Записать();
	// Определимся, как списываем, регламентно или первичным документом
	Регламентно = (УчетныеПолитикиСервер.Значение("РежимСписанияСуммовыхРазниц", ДокументОбъект.Дата) = Перечисления.РежимыРегламентныхОпераций.Регламентно);
	СуммаДоходаРасходаСуммовыхРазниц = 0;
	
	// Если списываем не регламентно, то установим фильтры по контрагенту и договору
	СтрокаФильтра = "";
	Если НЕ Регламентно Тогда
		СтрокаФильтра = ",Контрагент=&Контрагент И ДоговорВзаиморасчетов=&ДоговорВзаиморасчетов";		
	ИначеЕсли ДополнительныеСвойства.Свойство("ФильтрПоПодразделению") Тогда	
		СтрокаФильтра = ", ДоговорВзаиморасчетов.ПодразделениеКомпании=&ПодразделениеКомпании"; 
	ИначеЕсли ДополнительныеСвойства.Свойство("ФильтрПоОрганизации") Тогда
		СтрокаФильтра = ", ДоговорВзаиморасчетов.Организация=&Организация";
	КонецЕсли;
	
	// Получим таблицу суммовых разниц
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыКомпанииОстатки.Контрагент КАК Контрагент,
	|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВзаиморасчетыКомпанииОстатки.Сделка КАК Сделка,
	|	ВзаиморасчетыКомпанииОстатки.СуммаОстаток КАК Сумма,
	|	ВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток КАК СуммаУпр,
	|	ВзаиморасчетыКомпанииОстатки.СуммаБазОстаток КАК СуммаБаз
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыКомпании.Остатки(&Момент"+СтрокаФильтра+") КАК ВзаиморасчетыКомпанииОстатки
	|ГДЕ
	|	ЕСТЬNULL(ВзаиморасчетыКомпанииОстатки.СуммаОстаток,0)=0
	|";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ВзаиморасчетыКомпании");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ШапкаДокумента.Дата));
	
	Если НЕ Регламентно Тогда
		Если ТипЗнч(МоментВремени)=Тип("Граница") Тогда
			ГраницаРасчетов=Новый Граница(МоментВремени.Значение,ВидГраницы.Включая);
		Иначе
			ГраницаРасчетов=Новый Граница(МоментВремени,ВидГраницы.Включая);
		КонецЕсли;
		Запрос.УстановитьПараметр("Момент",ГраницаРасчетов);
		Запрос.УстановитьПараметр("Контрагент",Контрагент);
		Запрос.УстановитьПараметр("ДоговорВзаиморасчетов",ДоговорВзаиморасчетов);
		
		ЗначенияБлокировки.Вставить("Контрагент", Контрагент);
		ЗначенияБлокировки.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов); 
	Иначе
		Запрос.УстановитьПараметр("Момент",МоментВремени);
	КонецЕсли;
	
	// Если нужно добавим фильтр.
	Если ДополнительныеСвойства.Свойство("ФильтрПоПодразделению") Тогда
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ДополнительныеСвойства.ФильтрПоПодразделению);
	ИначеЕсли ДополнительныеСвойства.Свойство("ФильтрПоОрганизации") Тогда
		Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.ФильтрПоОрганизации);	
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
	
	РезультатЗапросаСуммовыеРазницы = Запрос.Выполнить(); 
	СуммаДохода = 0; 
	СуммаРасхода = 0;
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	Если НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, ШапкаДокумента.Дата);
		КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		КурсУпр = ШапкаДокумента.КурсВалютыУпр;
	КонецЕсли;	
	
	// Если необходимо, заполним вспомогательную таблицу движений, которую 
	// можно использовать во "внешнем" коде.
	Если ДополнительныеСвойства.Свойство("ТаблицаДвижений") Тогда
		ЗаполнитьТаблицуДвижений = Истина;
	Иначе
		ЗаполнитьТаблицуДвижений = Ложь;
	КонецЕсли;
	
	// Закрываем	
	Выборка = РезультатЗапросаСуммовыеРазницы.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СуммаУпр <> 0 Тогда
			НоваяЗапись = Добавить();
			НоваяЗапись.Период = ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор = ШапкаДокумента.Ссылка;
			НоваяЗапись.Контрагент = Выборка.Контрагент;
			НоваяЗапись.ДоговорВзаиморасчетов = Выборка.ДоговорВзаиморасчетов;
			НоваяЗапись.Сделка = Выборка.Сделка;
			Если Выборка.СуммаУпр > 0 Тогда
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
				НоваяЗапись.СуммаУпр = Окр(Выборка.СуммаУпр, 2);
				СуммаДоходаРасходаСуммовыхРазниц = СуммаДоходаРасходаСуммовыхРазниц - НоваяЗапись.СуммаУпр;
			Иначе
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяЗапись.СуммаУпр = Окр(-Выборка.СуммаУпр, 2);
				СуммаДоходаРасходаСуммовыхРазниц = СуммаДоходаРасходаСуммовыхРазниц + НоваяЗапись.СуммаУпр;
			КонецЕсли;
			НоваяЗапись.Сумма = 0;
			НоваяЗапись.СуммаБаз = 0;
			НоваяЗапись.ХозОперация = ШапкаДокумента.ХозОперация;
			НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.СписаниеКурсовойРазницыУпрВалюты;
			
			// Заполняем вспомогательную таблицу движений.
			Если ЗаполнитьТаблицуДвижений Тогда
				НоваяСтрока = ДополнительныеСвойства.ТаблицаДвижений.Добавить();
				НоваяСтрока.Подразделение      = Выборка.ДоговорВзаиморасчетов.ПодразделениеКомпании;
				НоваяСтрока.СуммоваяРазницаУпр = ?(Выборка.СуммаУпр<0, НоваяЗапись.СуммаУпр, -НоваяЗапись.СуммаУпр);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.СуммаБаз <> 0 Тогда
			НоваяЗапись = Добавить();
			НоваяЗапись.Период = ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор = ШапкаДокумента.Ссылка;
			НоваяЗапись.Контрагент = Выборка.Контрагент;
			НоваяЗапись.ДоговорВзаиморасчетов = Выборка.ДоговорВзаиморасчетов;
			НоваяЗапись.Сделка = Выборка.Сделка;
			Если Выборка.СуммаБаз > 0 Тогда
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
				НоваяЗапись.СуммаБаз = Окр(Выборка.СуммаБаз, 2);
			Иначе
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяЗапись.СуммаБаз = Окр(-Выборка.СуммаБаз, 2);
			КонецЕсли;
			НоваяЗапись.Сумма = 0;
			НоваяЗапись.СуммаУпр = 0;
			НоваяЗапись.ХозОперация = ШапкаДокумента.ХозОперация;
			НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.СписаниеКурсовойРазницыБазВалюты;
		КонецЕсли;
	КонецЦикла;
	
	// Убиваем циклическую ссылку
	МоментВремени  = Неопределено;
	ДокументОбъект = Неопределено;
	ШапкаДокумента = Неопределено;
	
	Возврат Истина;
	
КонецФункции

// Списывает курсовые разницы
Функция СписаниеКурсовыхРазниц() Экспорт
	Если ШапкаДокумента = Неопределено Тогда 
		ШапкаДокумента = ДокументОбъект; 
		Если МоментВремени = Неопределено Тогда
			МоментВремени = ШапкаДокумента.МоментВремени();
		КонецЕсли; 
	Иначе
		Попытка
			Если МоментВремени = Неопределено Тогда
				МоментВремени = ШапкаДокумента.МоментВремени;
			КонецЕсли; 
		Исключение
			Если МоментВремени = Неопределено Тогда
				МоментВремени = ДокументОбъект.МоментВремени();
			КонецЕсли; 
		КонецПопытки;
	КонецЕсли;
	
	// Запишем предыдущие движения иначе остатки будут неверны в запросе
	Записать();
	// Вспомогательные переменные
	СуммаДоходаРасходаСуммовыхРазниц = 0;
	ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	Если НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,ШапкаДокумента.Дата);
		КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		КурсУпр = ШапкаДокумента.КурсВалютыУпр;
	КонецЕсли;	
	
	СтрокаФильтра = "";
	Если ДополнительныеСвойства.Свойство("ФильтрПоПодразделению") Тогда	
		СтрокаФильтра = ", ДоговорВзаиморасчетов.ПодразделениеКомпании=&ПодразделениеКомпании"; 
	ИначеЕсли ДополнительныеСвойства.Свойство("ФильтрПоОрганизации") Тогда
		СтрокаФильтра = ", ДоговорВзаиморасчетов.Организация=&Организация";
	КонецЕсли; 
	
	// Получаем выборку
	Запрос=Новый Запрос("
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА КурсыВалютСрезПоследних.Кратность = 0 ТОГДА
	|			КурсыВалютСрезПоследних.Курс
	|		ИНАЧЕ
	|			КурсыВалютСрезПоследних.Курс/КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК Курс
	|ПОМЕСТИТЬ
	|	КурсыВалютСрезПоследних
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Момент) КАК КурсыВалютСрезПоследних
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыКомпанииОстатки.Контрагент КАК Контрагент,
	|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВзаиморасчетыКомпанииОстатки.Сделка КАК Сделка,
	|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(ВзаиморасчетыКомпанииОстатки.СуммаОстаток,0) КАК Сумма,
	|	ЕСТЬNULL(ВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток,0) КАК СуммаУпр,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК Курс
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыКомпании.Остатки(&Момент" + СтрокаФильтра + ") КАК ВзаиморасчетыКомпанииОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	КурсыВалютСрезПоследних КАК КурсыВалютСрезПоследних
	|ПО
	|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	|");
	Если ТипЗнч(МоментВремени) = Тип("Граница") Тогда
		ГраницаРасчетов = Новый Граница(МоментВремени.Значение,ВидГраницы.Включая);
	Иначе
		ГраницаРасчетов = Новый Граница(МоментВремени,ВидГраницы.Включая);
	КонецЕсли;
	Запрос.УстановитьПараметр("Момент",ГраницаРасчетов);
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ВзаиморасчетыКомпании");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ШапкаДокумента.Дата));
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
	
	// Если нужно добавим фильтр.
	Если ДополнительныеСвойства.Свойство("ФильтрПоПодразделению") Тогда
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ДополнительныеСвойства.ФильтрПоПодразделению);
	ИначеЕсли ДополнительныеСвойства.Свойство("ФильтрПоОрганизации") Тогда
		Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.ФильтрПоОрганизации);	
	КонецЕсли;
	
	РезультатЗапросаКурсовые=Запрос.Выполнить();
	
	// Если необходимо, заполним вспомогательную таблицу движений, которую 
	// можно использовать во "внешнем" коде.
	Если ДополнительныеСвойства.Свойство("ТаблицаДвижений") Тогда
		ЗаполнитьТаблицуДвижений = Истина;
	Иначе
		ЗаполнитьТаблицуДвижений = Ложь;
	КонецЕсли;
	
	// Идем по выборке
	Выборка=РезультатЗапросаКурсовые.Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаПереоценки=Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.Сумма,Выборка.ВалютаВзаиморасчетов,Выборка.Курс,ВалютаУпр,КурсУпр)-Выборка.СуммаУпр,2);
		Если СуммаПереоценки=0 Тогда Продолжить; КонецЕсли; // переоценивать нечего
		// Переоцениваем
		НоваяЗапись = Добавить();
		НоваяЗапись.Период = ШапкаДокумента.Дата;
		НоваяЗапись.Регистратор = ШапкаДокумента.Ссылка;
		НоваяЗапись.Контрагент = Выборка.Контрагент;
		НоваяЗапись.ДоговорВзаиморасчетов = Выборка.ДоговорВзаиморасчетов;
		НоваяЗапись.Сделка = Выборка.Сделка;
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяЗапись.СуммаУпр = СуммаПереоценки;
		НоваяЗапись.Сумма = 0;
		НоваяЗапись.СуммаБаз = 0;
		// Доходы/расходы
		СуммаДоходаРасходаСуммовыхРазниц = СуммаДоходаРасходаСуммовыхРазниц + НоваяЗапись.СуммаУпр;
		// Определяемся с хоз. операцией
		НоваяЗапись.ХозОперация = ШапкаДокумента.ХозОперация;
		НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.СписаниеКурсовойРазницыУпрВалюты;
		
		// Заполняем вспомогательную таблицу движений.
		Если ЗаполнитьТаблицуДвижений Тогда
			НоваяСтрока = ДополнительныеСвойства.ТаблицаДвижений.Добавить();
			НоваяСтрока.Подразделение      = Выборка.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НоваяСтрока.КурсоваяРазницаУпр = НоваяЗапись.СуммаУпр;
		КонецЕсли;
	КонецЦикла;
	
	// Убиваем циклическую ссылку
	МоментВремени = Неопределено;
	ДокументОбъект = Неопределено;
	ШапкаДокумента = Неопределено;
	
	// Все ОК
	Возврат Истина;
КонецФункции

// Списание курсовой разницы на ресурсе СуммаБаз при закрытии сделки
Функция СписаниеКурсовойРазницыБаз(ПараметрДоговор = Неопределено, ПараметрКонтрагент = Неопределено, ПараметрСделка = Неопределено) Экспорт
	// Запишем предыдущие движения иначе остатки будут неверны в запросе
	Записать();
	КонтрагентЗначение = ?(НЕ ЗначениеЗаполнено(Контрагент), ДоговорВзаиморасчетов.Владелец, Контрагент);
	ОтборКонтрагент = ?(НЕ ЗначениеЗаполнено(ПараметрКонтрагент), КонтрагентЗначение, ПараметрКонтрагент);
	СделкаЗначение = ?(НЕ ЗначениеЗаполнено(Сделка), ШапкаДокумента.Ссылка, Сделка);
	ОтборСделка = ?(НЕ ЗначениеЗаполнено(ПараметрСделка), СделкаЗначение, ПараметрСделка);
	ОтборДоговор = ?(НЕ ЗначениеЗаполнено(ПараметрДоговор), ДоговорВзаиморасчетов, ПараметрДоговор);
	
	ВалютаБаз = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаБаз, ШапкаДокумента.Дата);
	КурсБаз = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	// Получаем выборку
	Запрос=Новый Запрос("
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА КурсыВалютСрезПоследних.Кратность = 0 ТОГДА
	|			КурсыВалютСрезПоследних.Курс
	|		ИНАЧЕ
	|			КурсыВалютСрезПоследних.Курс/КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК Курс
	|ПОМЕСТИТЬ
	|	КурсыВалютСрезПоследних
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Момент) КАК КурсыВалютСрезПоследних
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыКомпанииОстатки.Контрагент КАК Контрагент,
	|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВзаиморасчетыКомпанииОстатки.Сделка КАК Сделка,
	|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(ВзаиморасчетыКомпанииОстатки.СуммаОстаток, 0) КАК Сумма,
	|	ЕСТЬNULL(ВзаиморасчетыКомпанииОстатки.СуммаБазОстаток, 0) КАК СуммаБаз,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК Курс
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыКомпании.Остатки(
	|		&Момент,
	|		Контрагент = &Контрагент
	|		И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
	|		И Сделка = &Сделка) КАК ВзаиморасчетыКомпанииОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	КурсыВалютСрезПоследних КАК КурсыВалютСрезПоследних
	|ПО
	|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	|");
	Если ТипЗнч(МоментВремени) = Тип("Граница") Тогда
		ГраницаРасчетов = Новый Граница(МоментВремени.Значение, ВидГраницы.Включая);
	Иначе
		ГраницаРасчетов = Новый Граница(МоментВремени, ВидГраницы.Включая);
	КонецЕсли;
	Запрос.УстановитьПараметр("Момент", ГраницаРасчетов);
	Запрос.УстановитьПараметр("Контрагент", ОтборКонтрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ОтборДоговор);
	Запрос.УстановитьПараметр("Сделка", ОтборСделка);
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ВзаиморасчетыКомпании");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ШапкаДокумента.Дата));
	ЗначенияБлокировки.Вставить("Контрагент", ОтборКонтрагент);
	ЗначенияБлокировки.Вставить("ДоговорВзаиморасчетов", ОтборДоговор);
	ЗначенияБлокировки.Вставить("Сделка", ОтборСделка);
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
	
	РезультатЗапросаКурсовые = Запрос.Выполнить();
	Выборка = РезультатЗапросаКурсовые.Выбрать();
	СуммаПереоценки = 0;
	Пока Выборка.Следующий() Цикл
		СуммаПереоценки = СуммаПереоценки + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.Сумма, Выборка.ВалютаВзаиморасчетов, Выборка.Курс, ВалютаБаз, КурсБаз) - Выборка.СуммаБаз;
	КонецЦикла;
	
	// Делаем корректирующее движение, если есть курсовая разница
	СуммаПереоценки = Окр(СуммаПереоценки,2);
	Если СуммаПереоценки <> 0 Тогда
		НоваяЗапись = Добавить();
		НоваяЗапись.Период = ШапкаДокумента.Дата;
		НоваяЗапись.Регистратор = ШапкаДокумента.Ссылка;
		НоваяЗапись.Контрагент = ОтборКонтрагент;
		НоваяЗапись.ДоговорВзаиморасчетов = ОтборДоговор;
		НоваяЗапись.Сделка = ОтборСделка;
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяЗапись.Сумма = 0;
		НоваяЗапись.СуммаУпр = 0;
		НоваяЗапись.СуммаБаз = СуммаПереоценки;
		НоваяЗапись.ХозОперация = ШапкаДокумента.ХозОперация;
		НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.СписаниеКурсовойРазницыБазВалюты;
	КонецЕсли;
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает параметр для использования в функции РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте
// в качестве курса валюты взаиморасчетов.
Функция ПолучитьПараметрКурсВзаиморасчетов(ВалютаДоговора, КурсДокумента)
	
	Если ЗначениеЗаполнено(КурсВзаиморасчетов) Тогда
		// Если заполнена экспортная переменная КурсВзаиморасчетов то она и определяет курс.
		ПараметрКурсРасчетов = КурсВзаиморасчетов;
	Иначе
		Если ЕстьРеквизит(ДокументОбъект,"КурсВалютыВзаиморасчетов") Тогда
			Если ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыВзаиморасчетов) Тогда
				ПараметрКурсРасчетов = ШапкаДокумента.КурсВалютыВзаиморасчетов;
			Иначе
				// Если курс не заполнен, возвращаем дату документа
				Если Валюта = ВалютаДоговора Тогда
					ПараметрКурсРасчетов = КурсДокумента;
				Иначе
					ПараметрКурсРасчетов = ШапкаДокумента.Дата;
				КонецЕсли;
			КонецЕсли; 
		Иначе
			// Если у документа нет реквизита "КурсВалютыВзаиморасчетов" возвращаем дату документа.
			Если Валюта = ВалютаДоговора Тогда
				ПараметрКурсРасчетов = КурсДокумента;
			Иначе
				ПараметрКурсРасчетов = ШапкаДокумента.Дата;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ПараметрКурсРасчетов;
КонецФункции

// Проверка корректности заполнения обязательных данных
Функция ДанныеКорректны()
	// Заполненность
	Если (НЕ ЗначениеЗаполнено(Контрагент)) Тогда
		// Не указан контрагент. Так нельзя
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не достаточно параметров для списания долга. Не указан контрагент.'"),
			ДокументОбъект,
			"Контрагент",
			,
			Истина
		);
		Возврат Ложь;
	КонецЕсли;
	Если (НЕ ЗначениеЗаполнено(ДоговорВзаиморасчетов)) Тогда
		// Не указан договор взаиморасчетов. Так нельзя
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не достаточно параметров для списания долга. Не указан договор взаиморасчетов.'"),
			ДокументОбъект, 
			"ДоговорВзаиморасчетов",
			,
			Истина
		);
		Возврат Ложь;
	КонецЕсли;
	// Соответствие договора контрагенту
	Если ДоговорВзаиморасчетов.Владелец<>Контрагент Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Договор взаиморасчетов'") + " """ + СокрЛП(ДоговорВзаиморасчетов) + """ " 
				+ НСтр("ru = 'не соответствует контрагенту'") + " """ + СокрЛП(Контрагент) + """.",
			ДокументОбъект,
			"ДоговорВзаиморасчетов",
			,
			Истина
		);
		Возврат Ложь;
	КонецЕсли;
	// Соответствие сделки контрагенту
	Если СделкиКонтрагента <> Неопределено И СделкиКонтрагента Тогда
		Если ЗначениеЗаполнено(Сделка) Тогда
			Если ЕстьРеквизит(Сделка, "Контрагент") Тогда
				Если Сделка.Контрагент <> Контрагент Тогда
					Сделка = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Истина;
КонецФункции

Функция КонтрольВзаиморасчетовПоСделкам()
	
	КонтрольВзаиморасчетовПоСделкам = ПраваИНастройкиПользователя.Значение("КонтрольВзаиморасчетовПоСделкам");
	
	Если НЕ КонтрольВзаиморасчетовПоСделкам Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	КонтрольПрошел = Истина;
	
	Для Каждого ЗаписьРегистра Из ЭтотОбъект Цикл
		
		КонтрагентКонтрольПрошел = Истина;
		ДоговорКонтрольПрошел = Истина;
		
		Попытка
			
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЗаписьРегистра.Сделка);
			КонтрольВзаиморасчетов = МенеджерДокумента.КонтрольСоответствияВзаиморасчетовСделке(ЗаписьРегистра);
			КонтрагентКонтрольПрошел = ПолучитьЗначениеПараметраСтруктуры(
				КонтрольВзаиморасчетов,
				"КонтрагентКонтрольПрошел",
				Истина);
			ДоговорКонтрольПрошел = ПолучитьЗначениеПараметраСтруктуры(
				КонтрольВзаиморасчетов,
				"ДоговорКонтрольПрошел",
				Истина);
				
		Исключение
			
			Если ЕстьРеквизит(ЗаписьРегистра.Сделка, "Контрагент") Тогда
				
				КонтрагентСделки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ЗаписьРегистра.Сделка,
					"Контрагент");
				КонтрагентКонтрольПрошел = Не ЗначениеЗаполнено(КонтрагентСделки)
					ИЛИ КонтрагентСделки = ЗаписьРегистра.Контрагент;
				
			КонецЕсли;
			
			Если ЕстьРеквизит(ЗаписьРегистра.Сделка, "ДоговорВзаиморасчетов") Тогда
				
				ДоговорВзаиморасчетовСделки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ЗаписьРегистра.Сделка,
					"ДоговорВзаиморасчетов");
				ДоговорКонтрольПрошел = Не ЗначениеЗаполнено(ДоговорВзаиморасчетовСделки)
					ИЛИ ДоговорВзаиморасчетовСделки = ЗаписьРегистра.ДоговорВзаиморасчетов;
				
			КонецЕсли;
			
		КонецПопытки;
		
		Если Не КонтрагентКонтрольПрошел Тогда
			
			ШаблонСообщения = СтрШаблон(
				НСтр("ru = 'Контрагент сделки ""%1"" не соответствует контрагенту ""%2""'"),
				ЗаписьРегистра.Сделка,
				ЗаписьРегистра.Контрагент);
			ОбщегоНазначения.СообщитьПользователю(ШаблонСообщения, ДокументОбъект);
			КонтрольПрошел = Ложь;
			
		КонецЕсли;
		
		Если Не ДоговорКонтрольПрошел Тогда
			
			ШаблонСообщения = СтрШаблон(
				НСтр("ru = 'Договор взаиморасчетов сделки ""%1"" не соответствует договору ""%2""'"),
				ЗаписьРегистра.Сделка, 
				ЗаписьРегистра.ДоговорВзаиморасчетов);
			ОбщегоНазначения.СообщитьПользователю(ШаблонСообщения, ДокументОбъект);
			КонтрольПрошел = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КонтрольПрошел;
	
КонецФункции

// Возвращает таблицу сделок по которым есть долги
// ТолькоОстаткиПоСделке - Булево. Истина - получаем только долги по указанной сделке.
Функция ПолучитьНеЗакрытыеСделки(ТолькоОстаткиПоСделке = Ложь, Приход = Неопределено, ПриоритетныеСделки = Неопределено)
	
	// Получим фильтр на сделки
	Если ТолькоОстаткиПоСделке Тогда
		СтрОтбор       = "(Сделка=&Сделка)";
		СтрОтборФизТаб = "";
	ИначеЕсли ЗначениеЗаполнено(Сделка) Тогда
		СтрОтбор = "(Сделка<>&Сделка)";
		СтрОтборФизТаб = "ГДЕ
		|	ВзаиморасчетыКомпании.Сделка<>&Сделка";
	Иначе
		СтрОтбор = "";
		СтрОтборФизТаб = "";
	КонецЕсли;
	
	Если СделкиКонтрагента = Неопределено ИЛИ СделкиКонтрагента Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СтрОтбор = СтрОтбор + ?(ПустаяСтрока(СтрОтбор), "", " И ") + "Контрагент = &Контрагент";
			СтрОтборФизТаб = СтрОтборФизТаб + ?(ПустаяСтрока(СтрОтборФизТаб), "ГДЕ ", " И ") + "
			|	ВзаиморасчетыКомпании.Контрагент = &Контрагент";
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорВзаиморасчетов) Тогда
			СтрОтбор = СтрОтбор + ?(ПустаяСтрока(СтрОтбор), "", " И ") + "ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов";
			СтрОтборФизТаб = СтрОтборФизТаб + ?(ПустаяСтрока(СтрОтборФизТаб), "ГДЕ ", " И ") + "
			|	ВзаиморасчетыКомпании.ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов";
		КонецЕсли;
	КонецЕсли; 
	
	ПорядокПолученияСделок = "";
	ОписаниеПорядка = "";
	Если ПриоритетныеСделки <> Неопределено И ПриоритетныеСделки.Количество() > 0 Тогда
		
		ПорядокПолученияСделок = 
			"ВЫБОР КОГДА ВзаиморасчетыКомпанииОстатки.Сделка В (&СделкиПредоплаты) ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК ПорядокПоСделке,";
		ОписаниеПорядка = "ПорядокПоСделке,";
		
	КонецЕсли;
	
	// Установим, есть ли у сделки документ основание
	Если ТолькоОстаткиПоСделке ИЛИ ПустаяСтрока(СтрОтборФизТаб) Тогда
		Запрос=Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыКомпанииОстатки.Контрагент КАК Контрагент,
		|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	ВзаиморасчетыКомпанииОстатки.Сделка КАК Сделка,
		|	ЕСТЬNULL(ВзаиморасчетыКомпанииОстатки.СуммаОстаток, 0) КАК Сумма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании.Остатки(&Момент, "+СтрОтбор+") КАК ВзаиморасчетыКомпанииОстатки
		|ГДЕ
		|	ВзаиморасчетыКомпанииОстатки.СуммаОстаток"+?(Приход,"<",">")+"0
		|" + ?(ТолькоОстаткиПоСделке, "", "
		|УПОРЯДОЧИТЬ ПО
		|	Сделка.Дата ВОЗР,
		|	Сделка.МоментВремени ВОЗР") + "
		|");
	Иначе
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыКомпании.Сделка КАК Сделка,
		|	МИНИМУМ(ВзаиморасчетыКомпании.Период) КАК Период
		|ПОМЕСТИТЬ
		|	ТаблицаСортировки
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании КАК ВзаиморасчетыКомпании
		|"+СтрОтборФизТаб+"
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыКомпании.Сделка
		|;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыКомпанииОстатки.Контрагент КАК Контрагент,
		|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	ВзаиморасчетыКомпанииОстатки.Сделка КАК Сделка,
		|	ТаблицаСортировки.Период КАК Период,
		|" + ПорядокПолученияСделок + "
		|	ЕСТЬNULL(ВзаиморасчетыКомпанииОстатки.СуммаОстаток, 0) КАК Сумма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании.Остатки(&Момент, "+СтрОтбор+") КАК ВзаиморасчетыКомпанииОстатки
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	ТаблицаСортировки КАК ТаблицаСортировки
		|ПО
		|	ВзаиморасчетыКомпанииОстатки.Сделка = ТаблицаСортировки.Сделка
		|ГДЕ
		|	ВзаиморасчетыКомпанииОстатки.СуммаОстаток"+?(Приход,"<",">")+"0
		|УПОРЯДОЧИТЬ ПО
		|	" + ОписаниеПорядка + "
		|	Период ВОЗР,
		|	Сделка ВОЗР
		|");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контрагент",            Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("Сделка",                Сделка);
	Запрос.УстановитьПараметр("Момент",                ?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, МоментВремени));
	Запрос.УстановитьПараметр("СделкиПредоплаты",      ПриоритетныеСделки);

	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ВзаиморасчетыКомпании");
	ЗначенияБлокировки = Новый Соответствие;
	
	Если СделкиКонтрагента=Неопределено ИЛИ СделкиКонтрагента Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЗначенияБлокировки.Вставить("Контрагент",            Контрагент);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорВзаиморасчетов) Тогда
			ЗначенияБлокировки.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
		КонецЕсли;
	КонецЕсли;
	Если ТолькоОстаткиПоСделке Тогда
		ЗначенияБлокировки.Вставить("Сделка", Сделка);
	КонецЕсли;
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЭтоДокументОплатыСделки(ПроверяемыйДокумент, УчитыватьРаспределениеПоСделке)
	
	Если Не УчитыватьРаспределениеПоСделке Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сделка)
		И (НЕ Метаданные.РегистрыНакопления.ВзаиморасчетыКомпании.СтандартныеРеквизиты.Регистратор.Тип.СодержитТип(ТипЗнч(Сделка))
		ИЛИ Не ЕстьДвиженияПоСделке()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДокументыОплаты = Новый Массив();
	ДокументыОплаты.Добавить(Тип("ДокументСсылка.Выписка"));
	ДокументыОплаты.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	ДокументыОплаты.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ДокументыОплаты.Добавить(Тип("ДокументСсылка.ЧекНаОплату"));
	
	Возврат ДокументыОплаты.Найти(ТипЗнч(ПроверяемыйДокумент)) <> Неопределено;
	
КонецФункции

Функция ЭтоКорректировкаВзаиморасчетов(ПроверяемыйДокумент, УчитыватьРаспределениеПоСделке)
	
	Если Не УчитыватьРаспределениеПоСделке Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДокументыОплаты = Новый Массив();
	ДокументыОплаты.Добавить(Тип("ДокументСсылка.Взаимозачет"));
	ДокументыОплаты.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	
	Возврат ДокументыОплаты.Найти(ТипЗнч(ПроверяемыйДокумент)) <> Неопределено;
	
КонецФункции

Функция ЕстьДвиженияПоСделке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВзаиморасчетыКомпании.Контрагент КАК Контрагент,
	|	ВзаиморасчетыКомпании.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВзаиморасчетыКомпании.Сделка КАК Сделка,
	|	ВзаиморасчетыКомпании.Сумма КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыКомпании КАК ВзаиморасчетыКомпании
	|ГДЕ
	|	ВзаиморасчетыКомпании.Регистратор = &Регистратор
	|	И ВзаиморасчетыКомпании.Период <= &Период";
	Запрос.УстановитьПараметр("Регистратор", Сделка);
	Запрос.УстановитьПараметр("Период", ШапкаДокумента.Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

Функция ПредоплатыПоСделке()
	
	ДоступныеСделкиДляПредоплаты = Новый Массив;
	Если Не ЗначениеЗаполнено(Сделка) ИЛИ Сделка <> ШапкаДокумента.Ссылка Тогда
		
		Возврат ДоступныеСделкиДляПредоплаты;
		
	КонецЕсли;
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		ДоступныеСделкиДляПредоплаты.Добавить(Сделка);
		
	КонецЕсли;
	
	Возврат ДоступныеСделкиДляПредоплаты;
	
КонецФункции

Функция СделкиПредоплаты()
	
	Предоплаты = Новый Массив;
	Предоплаты.Добавить(Тип("ДокументСсылка.ЗаказНаряд"));
	
	Возврат Предоплаты;
	
КонецФункции

Функция ИспользоватьРаспределениеОплатыПоСделке()
	
	Если ШапкаДокумента = ДокументОбъект Тогда
		
		Возврат ЕстьРеквизит(ШапкаДокумента.Ссылка, "ВерсияОбъекта")
			И ШапкаДокумента.ВерсияОбъекта >= НомерВерсииДокументаДляИспользованияРаспределенияОплаты();
		
	КонецЕсли;
	
	Попытка
		
		Возврат ШапкаДокумента.ВерсияОбъекта >= НомерВерсииДокументаДляИспользованияРаспределенияОплаты();
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция НомерВерсииДокументаДляИспользованияРаспределенияОплаты()
	
	Возврат "02.00";
	
КонецФункции

#КонецОбласти

#Область Инициализация

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

РежимПроведения = НЕОПРЕДЕЛЕНО;
Валюта = Неопределено;
КурсВзаиморасчетов = 0;
СуммаДоходаРасходаСуммовыхРазниц=0;
ВзаиморасчетыСПокупателем=Неопределено;
МоментВремени=Неопределено;

#КонецОбласти

#КонецЕсли
