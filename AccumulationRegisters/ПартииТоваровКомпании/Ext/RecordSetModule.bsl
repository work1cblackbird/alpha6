// Модуль набора записей регистра "ПартииТоваровКомпании"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СкладКомпании Экспорт;                // склад компании
Перем СтатусПартии Экспорт;                 // статус партии
Перем Сторно Экспорт;                       // признак сторно записи
Перем СкладКомпанииКуда Экспорт; 			// для перемещения между складами
Перем РезультатЗапросаПоТоварам Экспорт; 	// если результат запроса (или таблица значений) неопределен, то подразумевается, что в документе есть таблица "Товары". И наименования колонок стандартные.
Перем ДокументОбъект Экспорт;               // документ выполняющий движения
Перем ГраницаРасчетаОстатков Экспорт; 		// граница на которую надо рассчитывать остатки 
Перем РежимВозврата Экспорт; 				// установленный режим возврата для пользователя ПраваИНастройкиПользователя.Значение("РежимСписанияПриВозвратеПоставщику") 
Перем РежимДопРасходы Экспорт; 				// Число. 0-нет, 1-поступление, 2-только доп расходы (автоматическое распределение), 3 - только доп расходы (ручное распределение).
Перем ЗаписыватьДвижения Экспорт; 			// Булево. Истина - движения записываются сразу по окончании выполнения процедуры. Ложь - движения записываются при записи документа.
Перем ПоБазовомуКоличеству Экспорт; 		// Булево. Ложь - количество товаров будет рассчитываться как "Количество*Коэффициент", Истина - количество будет браться из реквизита "КоличествоБазовое"
Перем ИмяРеквизитаДокумент Экспорт; 		// Строка. Имя реквизита табличной части "Товары". Этот реквизит определяет партию либо документ отгрузки
Перем ОтрицательныеОстаткиРазрешены; 		// Булево. Право разрешающее образовывать отрицательные остатки товаров
Перем ХозОперация Экспорт; 					// СправочникСсылка.ХозОперации. Если Неопределено, то движение идет по хоз операции документа
Перем МассивПартий Экспорт; 				// Массив. Если надо установить фильтр на партии, то заполняем этот массив
Перем СтратегияСписанияПартийТоваровПоДатам; // Стратегия списания партий склада-отправителя
Перем СтратегияСписанияПартийТоваровПоДатамКуда; // Стратегия списания партий склада-получателя
Перем ЕстьСтавкаНДС Экспорт; 				// Булево. Истина - в таблице товаров есть ставка НДС, Ложь - нет
Перем ШапкаДокумента Экспорт; 				// Выборка или строка таблицы значений, в которой содержаться необходимые данные о шапке документа
Перем РежимПроведения Экспорт; 				// Режим проведения документа оперативный/неоперативный
Перем Организация Экспорт;					// Организация
Перем ТаблицаВозвратов Экспорт;				// Таблица возвратов
Перем РасчетыСКонтрагентами Экспорт; // Расчеты с контрагентами для формирования себестоимости

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует движения по регистру приход (увеличение товарного запаса)
// Возвращаемое значение: Булево. Истина - все ОК, Ложь - чего-то не так.
Функция Приход() Экспорт
	ЕстьОшибки = Ложь;
	
	КонтрольЗаполненияОрганизации();

	Сторно = ?(Сторно = Неопределено, Ложь, Сторно);
	ЕстьСтавкаНДС = ?(ЕстьСтавкаНДС = Неопределено, Ложь, ЕстьСтавкаНДС);
	РежимДопРасходы = ?(РежимДопРасходы = Неопределено, 0, РежимДопРасходы);
	
	// Получим товары
	Если (РезультатЗапросаПоТоварам = Неопределено) ИЛИ (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("РезультатЗапроса")
		И ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("ТаблицаЗначений")) Тогда
		// Если неопределен результат запроса по таблице товаров, значит она в документе.
		РезультатЗапросаПоТоварам = ПолучитьТаблицуТоваров(ВидДвиженияНакопления.Приход);
	КонецЕсли;
	// Если передали результат запроса, то выгрузим в таблицу значений
	Если ТипЗнч(РезультатЗапросаПоТоварам) = Тип("РезультатЗапроса") Тогда
		РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	КонецЕсли;
	
	СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(СкладКомпании, Организация,
		?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, ДокументОбъект.Дата));
	
	ПартияТоваровОтрицательныхОстатков = Константы.ПартияТоваровОтрицательныхОстатков.Получить();
	
	// Получим права пользователя
	ОтрицательныеОстаткиРазрешены = (ПраваИНастройкиПользователя.Значение(
		"РазрешитьОтрицательныеСкладскиеОстатки", ДокументОбъект) <>
		Перечисления.ВидыРазрешенныхОтрицательныхОстатков.Запрещены);
	
	// Проверим на возврат
	Если Сторно Тогда
		Возврат ВозвратТоваров(ВидДвиженияНакопления.Приход);
	КонецЕсли;
	
	КопияРезультатЗапросаПоТоварам = Неопределено;
	Если ДополнительныеСвойства.Свойство("КопияРезультатЗапросаПоТоварам") Тогда
		КопияРезультатЗапросаПоТоварам = ДополнительныеСвойства.КопияРезультатЗапросаПоТоварам;
	КонецЕсли;
	
	// Посмотрим, что у нас с доп. расходами
	Если ЗначениеЗаполнено(РежимДопРасходы) И РежимДопРасходы <> 3 Тогда
		МассивОшибок = Новый Массив;
		Если РежимДопРасходы = 2 Тогда
			// Сделаем копию
			КопияРезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Скопировать();
		КонецЕсли;
		
		СуммаДопРасходов = РасчетДополнительныхРасходов(РезультатЗапросаПоТоварам, ШапкаДокумента.Ссылка,
			МассивОшибок, РежимДопРасходы);
		
		// Проверим распределение доп. расходов
		Если МассивОшибок.Количество() <> 0 Тогда
			ЕстьОшибки = Истина; 
			Для каждого ТекОшибка Из МассивОшибок Цикл  	
				ОбщегоНазначения.СообщитьПользователю(ТекОшибка, ДокументОбъект, , , Истина);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ПроверкаЦенПриПриходе = ПравоПользователя("ПроверкаПревышенияЦеныПриходаНадЦенойРеализации", ШапкаДокумента.Ссылка);
	
	Если ПроверкаЦенПриПриходе <> Перечисления.ВариантыПроверкиЦеныПрихода.НеПроверять Тогда
		ПроверкаАктивна = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ШапкаДокумента.Организация,
			"ПроверятьПревышениеЦеныПриходаНадЦенойРеализации"
		);
		
		Если ПроверкаАктивна И ШапкаДокумента.Организация.ТипыЦенДляПроверки.Количество() = 0 Тогда
			ОшибкаНастройки = НСтр(
				"ru = 'Включена проверка цен прихода, однако в организации документа не заполнены типы цен для проверки!'"
			);
			ВывестиСообщение(ОшибкаНастройки); 
			ЕстьОшибки = Истина;
		ИначеЕсли ПроверкаАктивна Тогда
			Если КопияРезультатЗапросаПоТоварам <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапросаПоТоварам, КопияРезультатЗапросаПоТоварам);
				МассивОшибок = ЕстьПревышениеЦеныПрихода(КопияРезультатЗапросаПоТоварам, ШапкаДокумента.Ссылка);
			Иначе
				МассивОшибок = ЕстьПревышениеЦеныПрихода(РезультатЗапросаПоТоварам, ШапкаДокумента.Ссылка);
			КонецЕсли;
			
			// Проверим распределение доп. расходов
			Если МассивОшибок.Количество() <> 0 Тогда
				Если ПроверкаЦенПриПриходе = Перечисления.ВариантыПроверкиЦеныПрихода.БлокироватьПриход Тогда
					ЕстьОшибки = Истина;
				КонецЕсли;
				
				Для каждого ТекОшибка Из МассивОшибок Цикл
					ОбщегоНазначения.СообщитьПользователю(ТекОшибка, ДокументОбъект);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Приходуем партии
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, ШапкаДокумента.Дата);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	Если НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, ШапкаДокумента.Дата);
		КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		КурсУпр = ШапкаДокумента.КурсВалютыУпр;
	КонецЕсли;
	
	ЕстьГТД = (РезультатЗапросаПоТоварам.Колонки.Найти("ГТД") <> Неопределено);
	Если ЕстьГТД Тогда
		ГТДПартийТоваровКомпанииНаборЗаписей = ДокументОбъект.Движения.ГТДПартийТоваровКомпании;
	КонецЕсли; 
	
	// Пересчитать суммы документа
	ПересчитаныСуммы = Ложь;
	Если РасчетыСКонтрагентами <> Неопределено
		И РасчетыСКонтрагентами.Количество() > 0 Тогда
		
		СведенияОВалюте = Новый Структура();
		СведенияОВалюте.Вставить("ВалютаДоговора", ШапкаДокумента.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов);
		СведенияОВалюте.Вставить("ВалютаРегл", ВалютаРегл);
		СведенияОВалюте.Вставить("ВалютаУпр", ВалютаУпр);
		СведенияОВалюте.Вставить("КурсРегл", КурсРегл);
		СведенияОВалюте.Вставить("КурсУпр", КурсУпр);
		
		ПересчитаныСуммы = ОбработкаСобытийДокументаСервер.ПересчитанаВВалюту(
			ШапкаДокумента,
			РезультатЗапросаПоТоварам,
			РасчетыСКонтрагентами,
			СведенияОВалюте,
			Ложь);
		
	КонецЕсли;
	
	ЕстьВидНоменклатуры = ЕстьРеквизит(РезультатЗапросаПоТоварам, "ВидНоменклатуры");
	ЕстьСтатусПартии    = ЕстьРеквизит(РезультатЗапросаПоТоварам, "СтатусПартии");
	
	Для Каждого СтрокаТовар Из РезультатЗапросаПоТоварам Цикл
		
		Если ЕстьВидНоменклатуры И СтрокаТовар.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга
			ИЛИ РежимДопРасходы = 0 И СтрокаТовар.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Пропустим пустые строки
		Если РежимДопРасходы = 2 И СтрокаТовар.СуммаВсего = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СкладКомпании) Тогда
			СкладДвижения = СкладКомпании;
		Иначе
			СкладДвижения = СтрокаТовар.СкладКомпании;
		КонецЕсли;
		
		// Получим партию
		Если СтратегияСписанияПартийТоваровПоДатам = Неопределено Тогда
			СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(
				СкладДвижения,
				Организация,
				?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, ДокументОбъект.Дата)
			);
		КонецЕсли;
		
		Если СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя Тогда
			Партия = ПартияТоваровОтрицательныхОстатков;
		Иначе
			Если ЕстьРеквизит(СтрокаТовар, "Партия") Тогда
				Партия = СтрокаТовар.Партия;
			Иначе
				Партия = ?(РежимДопРасходы = 2, ШапкаДокумента.ДокументОснование, ШапкаДокумента.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтатусПартии) Тогда
			СтатусПартииДвижения = СтатусПартии;
		Иначе
			СтатусПартииДвижения = ?(ЕстьСтатусПартии, СтрокаТовар.СтатусПартии, Перечисления.СтатусыПартий.ТоварКупленный);
		КонецЕсли;
		
		// Записываем движения
		НоваяЗапись = Добавить();
		НоваяЗапись.ВидДвижения					= ВидДвиженияНакопления.Приход;
		НоваяЗапись.Период						= ШапкаДокумента.Дата;
		НоваяЗапись.Регистратор					= ШапкаДокумента.Ссылка;
		НоваяЗапись.Партия						= Партия;
		НоваяЗапись.СтатусПартии				= СтатусПартииДвижения;
		НоваяЗапись.СкладКомпании				= СкладДвижения;
		НоваяЗапись.Организация					= ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
			Организация,
			НоваяЗапись.СкладКомпании,
			НоваяЗапись.Период
		);
		НоваяЗапись.Номенклатура				= СтрокаТовар.Номенклатура;
		НоваяЗапись.ХарактеристикаНоменклатуры	= СтрокаТовар.ХарактеристикаНоменклатуры;
		НоваяЗапись.ХозОперация					= ШапкаДокумента.ХозОперация;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШапкаДокумента, "Проект") Тогда
			НоваяЗапись.Проект                  = ШапкаДокумента.Проект;	
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШапкаДокумента, "ДокументПродажи") Тогда
			НоваяЗапись.ДокументПродажи         = ШапкаДокумента.ДокументПродажи;	
		КонецЕсли;
		
		Если ЕстьСтавкаНДС Тогда
			НоваяЗапись.СтавкаНДС 				= СтрокаТовар.СтавкаНДС;
		КонецЕсли;
		
		НоваяЗапись.Количество = СтрокаТовар.Количество;
		
		Если ПересчитаныСуммы Тогда
			НоваяЗапись.Сумма = СтрокаТовар.Сумма;
			НоваяЗапись.СуммаУпр = СтрокаТовар.СуммаУпр;
			НоваяЗапись.СуммаНДС = СтрокаТовар.СуммаНДС;
			НоваяЗапись.СуммаНДСУпр = СтрокаТовар.СуммаНДСУпр;
		Иначе
			НоваяЗапись.Сумма = Окр(?(СтрокаТовар.СуммаВсего = NULL, 0,
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.СуммаВсего,
				ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаРегл, КурсРегл)), 2);
			НоваяЗапись.СуммаНДС = Окр(?(СтрокаТовар.СуммаНДС = NULL, 0,
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.СуммаНДС, ШапкаДокумента.ВалютаДокумента,
				ШапкаДокумента.КурсДокумента, ВалютаРегл, КурсРегл)), 2);
			НоваяЗапись.СуммаУпр = Окр(?(СтрокаТовар.СуммаВсего = NULL, 0,
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.СуммаВсего, ШапкаДокумента.ВалютаДокумента,
				ШапкаДокумента.КурсДокумента, ВалютаУпр, КурсУпр)), 2);
			НоваяЗапись.СуммаНДСУпр = Окр(?(СтрокаТовар.СуммаНДС = NULL, 0, РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаТовар.СуммаНДС, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаУпр, КурсУпр)), 2);
		КонецЕсли;

		НоваяЗапись.СуммаБезНДС = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
		НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
		
		Если ЕстьГТД Тогда
			ГТДПартийТоваровКомпанииНаборЗаписей.ДобавитьЗапись(НоваяЗапись, СтрокаТовар.ГТД);
		КонецЕсли; 
	КонецЦикла;
	
	// Запись движений
	ЗаписыватьДвижения = ?(ЗаписыватьДвижения = Неопределено, Ложь, ЗаписыватьДвижения);
	Если НЕ ЕстьОшибки И ЗаписыватьДвижения Тогда
		Записать();
	КонецЕсли;
	
	// Обнуляем переменные
	РезультатЗапросаПоТоварам	= Неопределено;
	ГраницаРасчетаОстатков		= Неопределено;
	СтатусПартии				= Неопределено;
	// Убиваем циклическую ссылку
	ДокументОбъект				= Неопределено;
	ШапкаДокумента				= Неопределено;
	
	// Все ОК
	Возврат НЕ ЕстьОшибки;
КонецФункции

// Формирует движения по регистру расход (уменьшение товарного запаса)
// Возвращаемое значение: Булево. Истина - все ОК, Ложь - чего-то не так.
Функция Расход() Экспорт
	ВсеОК = Истина;
	
	КонтрольЗаполненияОрганизации();
	
	ЕстьСтавкаНДС = ?(ЕстьСтавкаНДС = Неопределено, Ложь, ЕстьСтавкаНДС);
	Сторно = ?(Сторно = Неопределено, Ложь, Сторно);
	ПартииУказаны = ЗначениеЗаполнено(ИмяРеквизитаДокумент);
	
	// Получим права пользователя
	ОтрицательныеОстаткиРазрешены = (ПраваИНастройкиПользователя.Значение(
		"РазрешитьОтрицательныеСкладскиеОстатки", ДокументОбъект)
		<> Перечисления.ВидыРазрешенныхОтрицательныхОстатков.Запрещены);
	
	// Проверим на возврат
	Если Сторно Тогда
		Возврат ВозвратТоваров(ВидДвиженияНакопления.Расход);
	КонецЕсли;
	
	ПартияТоваровОтрицательныхОстатков = Константы.ПартияТоваровОтрицательныхОстатков.Получить();
	// Получим товары
	Если (РезультатЗапросаПоТоварам = Неопределено) ИЛИ (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("РезультатЗапроса")
		И ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("ТаблицаЗначений")) Тогда
		ТаблицаТовары = ПолучитьТаблицуТоваров(ВидДвиженияНакопления.Расход);
	Иначе
		ТаблицаТовары = РезультатЗапросаПоТоварам;
	КонецЕсли;
	Если ТипЗнч(ТаблицаТовары) = Тип("РезультатЗапроса") Тогда
		ТаблицаТовары = ТаблицаТовары.Выгрузить();
	КонецЕсли;
	
	// Списываем партии
	ТабДеревьевПартий = Новый ТаблицаЗначений;
	ТабДеревьевПартий.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТабДеревьевПартий.Колонки.Добавить("ДеревоПартий");
	ТабДеревьевПартий.Колонки.Добавить("ЗапасыДругойОрганизацииПоИнтеркампани", Новый ОписаниеТипов("Булево"));
	
	СтрДеревьевПартий = ТабДеревьевПартий.Добавить();
	СтрДеревьевПартий.Организация 							= Организация;
	СтрДеревьевПартий.ДеревоПартий							= ПолучитьДеревоПартий(ТаблицаТовары,,Организация);
	СтрДеревьевПартий.ЗапасыДругойОрганизацииПоИнтеркампани	= Ложь;
	
	ИнтеркампаниРазрешено = ЗапасыТоваров.ИнтеркампаниРазрешено(ШапкаДокумента.ХозОперация);
	
	Если ИнтеркампаниРазрешено Тогда
			
		ОрганизацииДляИнтеркампани = ЗапасыТоваров.ОрганизацииДляИнтеркампани(Организация, ШапкаДокумента.Дата);
		Если ОрганизацииДляИнтеркампани.Количество() = 0 Тогда
			
			ИнтеркампаниРазрешено = Ложь;
			
		Иначе
		
			Для каждого ОрганизацияОтправитель Из ОрганизацииДляИнтеркампани Цикл
			
				СтрДеревьевПартий = ТабДеревьевПартий.Добавить();
				СтрДеревьевПартий.Организация 							= ОрганизацияОтправитель;
				СтрДеревьевПартий.ДеревоПартий							= ПолучитьДеревоПартий(ТаблицаТовары, , ОрганизацияОтправитель);
				СтрДеревьевПартий.ЗапасыДругойОрганизацииПоИнтеркампани	= Истина;
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Идем по таблице товаров и списываем партии
	Расход = 0;
	// Упорядочим по нормальному
	ТаблицаТовары.Сортировать("Номенклатура Возр,ХарактеристикаНоменклатуры Убыв"
		+ ?(ЗначениеЗаполнено(ИмяРеквизитаДокумент), ",Партия Убыв", ""));
	
	// Получим таблицу номенклатуры с ручным списанием характеристик
	ТаблицаРучныхХарактеристик = ОбработкаТабличнойЧастиТовары.ПолучитьНоменклатуруСРучнымСписаниемХарактеристик(ШапкаДокумента.Ссылка);
	
	ИмяКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах().Имя;
	
	Если НЕ ТаблицаВозвратов = Неопределено Тогда
		ТаблицаВозвратовПартии = ТаблицаВозвратов.Скопировать();
		ТаблицаВозвратовПартии.Очистить();
		ТаблицаВозвратовПартии.Колонки.Добавить("Партия");
		ТаблицаВозвратовПартии.Колонки.Добавить("Организация");
	Иначе
		ТаблицаВозвратовПартии = Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаТовар Из ТаблицаТовары Цикл
		НадоСписать = Окр(СтрокаТовар.Количество, 3);
		// Получим строки таблицы партий с нашим товаром
		ПоследнийСтатус = Перечисления.СтатусыПартий.ТоварКупленный;
		
		// Инициализируем переменные для расчета усредненной цены списанных партий
		ОбщееКоличество = 0;
		ОбщаяСумма = 0;
		ОбщаяСуммаНДС = 0;
		ОбщаяСуммаБезНДС = 0;
		ОбщаяСуммаУпр = 0;
		ОбщаяСуммаНДСУпр = 0;
		ОбщаяСуммаБезНДСУпр = 0;
		ЕстьПартииТоваров = Ложь;
		
		КоличествоВозврата = 0;
		СтрокаВозврата = Неопределено;
		Если НЕ ТаблицаВозвратов = Неопределено Тогда
			СтруктураОтбораВозврата = Новый Структура();
			СтруктураОтбораВозврата.Вставить("Номенклатура", СтрокаТовар.Номенклатура);
			СтруктураОтбораВозврата.Вставить("ХарактеристикаНоменклатуры", СтрокаТовар.ХарактеристикаНоменклатуры);
			СтрокиВозвратов = ТаблицаВозвратов.НайтиСтроки(СтруктураОтбораВозврата);
			Если СтрокиВозвратов.Количество() > 0 Тогда
				КоличествоВозврата = СтрокиВозвратов[0].Количество;
				СтрокаВозврата = СтрокиВозвратов[0];
			КонецЕсли;
		КонецЕсли;
		
		Для каждого СтрДеревьевПартий Из ТабДеревьевПартий Цикл
		
		СтрокаПартийНоменклатуры = СтрДеревьевПартий.ДеревоПартий.Строки.Найти(СтрокаТовар.Номенклатура, "Номенклатура");
		
		Если СтрокаПартийНоменклатуры <> Неопределено Тогда
			СтруктураОтбора = Новый Структура("Номенклатура");
			СтруктураОтбора.Номенклатура = СтрокаТовар.Номенклатура; 
			Если ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры)
				ИЛИ (ТаблицаРучныхХарактеристик <> Неопределено
				И ТаблицаРучныхХарактеристик.Найти(СтрокаТовар.Номенклатура, "Номенклатура") <> Неопределено) Тогда 
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТовар.ХарактеристикаНоменклатуры);
			КонецЕсли;
			МассивНайденныхСтрок = СтрокаПартийНоменклатуры.Строки.НайтиСтроки(СтруктураОтбора);
			// Теперь идем по партиям товаров и списываем в соответствии с выбранной стратегией.
			Для Сч = 0 По МассивНайденныхСтрок.ВГраница() Цикл
				ТекСтрока = МассивНайденныхСтрок[Сч];
				// Проверки на нулевую партию или партию отрицательных остатков
				Если ТекСтрока.Количество = NULL ИЛИ ТекСтрока.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Если указаны партии, то пропустим все партии не наши
				Если ПартииУказаны И ЗначениеЗаполнено(СтрокаТовар.Партия) И ТекСтрока.Партия <> СтрокаТовар.Партия Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьПартииТоваров = Истина; // Если есть партия с которой производим списание, значит и цены будем брать из списаний
				
				Если ТекСтрока.Количество < 0 Тогда
					// Запомним удельные значения списания для отрицательной партии товаров
					ОбщееКоличество		= ОбщееКоличество     + ТекСтрока.Количество;
					ОбщаяСумма			= ОбщаяСумма          + Окр(ТекСтрока.Сумма, 2);
					ОбщаяСуммаНДС		= ОбщаяСуммаНДС       + Окр(ТекСтрока.СуммаНДС, 2);
					ОбщаяСуммаБезНДС	= ОбщаяСуммаБезНДС    + Окр(ТекСтрока.СуммаБезНДС, 2);
					ОбщаяСуммаУпр		= ОбщаяСуммаУпр       + Окр(ТекСтрока.СуммаУпр, 2);
					ОбщаяСуммаНДСУпр	= ОбщаяСуммаНДСУпр    + Окр(ТекСтрока.СуммаНДСУпр, 2);
					ОбщаяСуммаБезНДСУпр	= ОбщаяСуммаБезНДСУпр + Окр(ТекСтрока.СуммаБезНДСУпр, 2);
					Продолжить;
				КонецЕсли;
				
				НоваяЗапись = Добавить();
				НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Расход;
				НоваяЗапись.Период                     = ШапкаДокумента.Дата;
				НоваяЗапись.Регистратор                = ШапкаДокумента.Ссылка;
				Партия								   = ТекСтрока.Партия;
				НоваяЗапись.Партия                     = Партия;
				НоваяЗапись.СтатусПартии               = ТекСтрока.СтатусПартии;
				ПоследнийСтатус						   = ТекСтрока.СтатусПартии;
				НоваяЗапись.СкладКомпании              = СкладКомпании;
				НоваяЗапись.ЗапасыДругойОрганизацииПоИнтеркампани = СтрДеревьевПартий.ЗапасыДругойОрганизацииПоИнтеркампани;
				НоваяЗапись.Организация				   = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
					СтрДеревьевПартий.Организация,
					НоваяЗапись.СкладКомпании,
					НоваяЗапись.Период,
					ТекСтрока.Организация
				);
				НоваяЗапись.Номенклатура               = ТекСтрока.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры = ТекСтрока.ХарактеристикаНоменклатуры;
				// Определяемся с хоз. операцией
				НоваяЗапись.ХозОперация				   = ШапкаДокумента.ХозОперация;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШапкаДокумента, "Проект") Тогда
					НоваяЗапись.Проект                  = ШапкаДокумента.Проект;	
				КонецЕсли;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШапкаДокумента, "ДокументПродажи") Тогда
					НоваяЗапись.ДокументПродажи         = ШапкаДокумента.ДокументПродажи;	
				КонецЕсли;
				
				Проект = НоваяЗапись.Проект;
				ДокументПродажи = НоваяЗапись.ДокументПродажи;
				
				Если ТекСтрока.Количество > НадоСписать И ТекСтрока.Количество > 0 Тогда
					КоличествоСписания		= НадоСписать;
					СуммаСписания			= Окр(ТекСтрока.Сумма / ТекСтрока.Количество * НадоСписать, 2);
					СуммаНДССписания		= Окр(ТекСтрока.СуммаНДС / ТекСтрока.Количество * НадоСписать, 2);
					СуммаБезНДССписания		= СуммаСписания - СуммаНДССписания;
					СуммаУпрСписания		= Окр(ТекСтрока.СуммаУпр / ТекСтрока.Количество * НадоСписать, 2);
					СуммаНДСУпрСписания		= Окр(ТекСтрока.СуммаНДСУпр / ТекСтрока.Количество * НадоСписать, 2);
					СуммаБезНДСУпрСписания	= СуммаУпрСписания - СуммаНДСУпрСписания;
				Иначе
					КоличествоСписания		= ТекСтрока.Количество;
					СуммаСписания			= Окр(ТекСтрока.Сумма, 2);
					СуммаНДССписания		= Окр(ТекСтрока.СуммаНДС, 2);
					СуммаБезНДССписания		= Окр(ТекСтрока.СуммаБезНДС, 2);
					СуммаУпрСписания		= Окр(ТекСтрока.СуммаУпр, 2);
					СуммаНДСУпрСписания		= Окр(ТекСтрока.СуммаНДСУпр, 2);
					СуммаБезНДСУпрСписания	= Окр(ТекСтрока.СуммаБезНДСУпр, 2);
				КонецЕсли;
				
				НоваяЗапись.Количество		= КоличествоСписания;
				НоваяЗапись.Сумма			= СуммаСписания;
				НоваяЗапись.СуммаНДС		= СуммаНДССписания;
				НоваяЗапись.СуммаБезНДС		= СуммаБезНДССписания;
				НоваяЗапись.СуммаУпр		= СуммаУпрСписания;
				НоваяЗапись.СуммаНДСУпр		= СуммаНДСУпрСписания;
				НоваяЗапись.СуммаБезНДСУпр	= СуммаБезНДСУпрСписания;
				
				Расход = Расход + СуммаУпрСписания;
				
				// Запомним удельные значения списания для отрицательной партии товаров
				ОбщееКоличество		= ОбщееКоличество + КоличествоСписания;
				ОбщаяСумма			= ОбщаяСумма + СуммаСписания;
				ОбщаяСуммаНДС		= ОбщаяСуммаНДС + СуммаНДССписания;
				ОбщаяСуммаБезНДС	= ОбщаяСуммаБезНДС + СуммаБезНДССписания;
				ОбщаяСуммаУпр		= ОбщаяСуммаУпр + СуммаУпрСписания;
				ОбщаяСуммаНДСУпр	= ОбщаяСуммаНДСУпр + СуммаНДСУпрСписания;
				ОбщаяСуммаБезНДСУпр	= ОбщаяСуммаБезНДСУпр + СуммаБезНДСУпрСписания;
							
				// Если выбран склад куда, тогда сразу оприходуем партию на склад-получатель
				Если ЗначениеЗаполнено(СкладКомпанииКуда) Тогда
					// Сохраним себестоимость и количество
					НоваяЗапись = Добавить();
					НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
					НоваяЗапись.Период = ШапкаДокумента.Дата;
					НоваяЗапись.Регистратор = ШапкаДокумента.Ссылка;
					Если СтратегияСписанияПартийТоваровПоДатамКуда = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя Тогда
						Партия = ПартияТоваровОтрицательныхОстатков;
					Иначе
						Партия = ТекСтрока.Партия;
					КонецЕсли;	
					НоваяЗапись.Партия = Партия;
					НоваяЗапись.СтатусПартии = ТекСтрока.СтатусПартии;
					НоваяЗапись.СкладКомпании = СкладКомпанииКуда;
					НоваяЗапись.Организация	= ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
						Организация,
						НоваяЗапись.СкладКомпании,
						НоваяЗапись.Период
					);
					НоваяЗапись.Номенклатура = ТекСтрока.Номенклатура;
					НоваяЗапись.ХарактеристикаНоменклатуры = ТекСтрока.ХарактеристикаНоменклатуры;
					НоваяЗапись.ХозОперация = ШапкаДокумента.ХозОперация;
					
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШапкаДокумента, "Проект") Тогда
						НоваяЗапись.Проект = ШапкаДокумента.Проект;	
					КонецЕсли;
					
					НоваяЗапись.Количество		= КоличествоСписания;
					НоваяЗапись.Сумма			= СуммаСписания;
					НоваяЗапись.СуммаНДС		= СуммаНДССписания;
					НоваяЗапись.СуммаБезНДС		= СуммаБезНДССписания;
					НоваяЗапись.СуммаУпр		= СуммаУпрСписания;
					НоваяЗапись.СуммаНДСУпр		= СуммаНДСУпрСписания;
					НоваяЗапись.СуммаБезНДСУпр	= СуммаБезНДСУпрСписания;
				КонецЕсли;
				// Уменьшим ресурсы для остатка текущей партии
				Если КоличествоВозврата <> 0 Тогда
					
					Возвращено = Мин(ТекСтрока.Количество, КоличествоВозврата, КоличествоСписания);
					
					// Приход
					НоваяЗапись = Добавить();
					НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
					НоваяЗапись.Период = ШапкаДокумента.Дата;
					НоваяЗапись.Регистратор = ШапкаДокумента.Ссылка;
					Партия = ТекСтрока.Партия;
					НоваяЗапись.Партия = Партия;
					НоваяЗапись.СтатусПартии = ТекСтрока.СтатусПартии;
					НоваяЗапись.СкладКомпании = СкладКомпании;
					НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
						Организация,
						НоваяЗапись.СкладКомпании,
						НоваяЗапись.Период,
						ТекСтрока.Организация
					);
					НоваяЗапись.Номенклатура = ТекСтрока.Номенклатура;
					НоваяЗапись.ХарактеристикаНоменклатуры = ТекСтрока.ХарактеристикаНоменклатуры;
					НоваяЗапись.ХозОперация = ШапкаДокумента.ХозОперация;
					НоваяЗапись.Проект = Проект;
					НоваяЗапись.ДокументПродажи = ДокументПродажи;
					
					НоваяЗапись.Количество		= -Возвращено;
					НоваяЗапись.Сумма			= -Окр(ТекСтрока.Сумма / ТекСтрока.Количество * Возвращено, 2);
					НоваяЗапись.СуммаНДС		= -Окр(ТекСтрока.СуммаНДС / ТекСтрока.Количество * Возвращено, 2);
					НоваяЗапись.СуммаБезНДС		= НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
					НоваяЗапись.СуммаУпр		= -Окр(ТекСтрока.СуммаУпр / ТекСтрока.Количество * Возвращено, 2);
					НоваяЗапись.СуммаНДСУпр		= -Окр(ТекСтрока.СуммаНДСУпр / ТекСтрока.Количество * Возвращено, 2);
					НоваяЗапись.СуммаБезНДСУпр	= НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
					
					КоличествоВозврата = КоличествоВозврата - Возвращено;
					
					ВозвратТовара = ТаблицаВозвратовПартии.Добавить();
					ЗаполнитьЗначенияСвойств(ВозвратТовара, СтрокаВозврата);
					ВозвратТовара.Количество = Возвращено;
					ВозвратТовара.Партия = НоваяЗапись.Партия;
					ВозвратТовара.Организация = НоваяЗапись.Организация;
					
					Текстрока.Количество = Текстрока.Количество - НоваяЗапись.Количество;
					Текстрока.Сумма = Текстрока.Сумма - НоваяЗапись.Сумма;
					Текстрока.СуммаНДС = Текстрока.СуммаНДС - НоваяЗапись.СуммаНДС;
					Текстрока.СуммаБезНДС = Текстрока.СуммаБезНДС - НоваяЗапись.СуммаБезНДС;
					Текстрока.СуммаУпр = Текстрока.СуммаУпр - НоваяЗапись.СуммаУпр;
					Текстрока.СуммаНДСУпр = Текстрока.СуммаНДСУпр - НоваяЗапись.СуммаНДСУпр;
					Текстрока.СуммаБезНДСУпр = Текстрока.СуммаБезНДСУпр - НоваяЗапись.СуммаБезНДСУпр;
					
					СтрокаВозврата.Количество = КоличествоВозврата;
					
					Сч = Сч - 1;
				КонецЕсли;
				
				Если КоличествоВозврата = 0 И СтрокаВозврата <> Неопределено Тогда
					ТаблицаВозвратов.Удалить(СтрокаВозврата);
					СтрокаВозврата = Неопределено;
				КонецЕсли;
				Если КоличествоСписания >= ТекСтрока.Количество Тогда
					СтрокаПартийНоменклатуры.Строки.Удалить(ТекСтрока);
				Иначе
					ТекСтрока.Количество		= ТекСтрока.Количество		- КоличествоСписания;
					ТекСтрока.Сумма				= ТекСтрока.Сумма			- СуммаСписания;
					ТекСтрока.СуммаНДС			= ТекСтрока.СуммаНДС		- СуммаНДССписания;
					ТекСтрока.СуммаБезНДС		= ТекСтрока.СуммаБезНДС		- СуммаБезНДССписания;
					ТекСтрока.СуммаУпр			= ТекСтрока.СуммаУпр		- СуммаУпрСписания;
					ТекСтрока.СуммаНДСУпр		= ТекСтрока.СуммаНДСУпр		- СуммаНДСУпрСписания;
					ТекСтрока.СуммаБезНДСУпр	= ТекСтрока.СуммаБезНДСУпр	- СуммаБезНДСУпрСписания;
				КонецЕсли;
				
				// Уменьшаем количество которое надо списать (или увеличиваем если это коррекция отрицательной партии).
				НадоСписать = НадоСписать - КоличествоСписания;
				Если НадоСписать <= 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Уменьшим ресурсы для остатка по номенклатуре
			Если ОбщееКоличество >= СтрокаПартийНоменклатуры.Количество Тогда
				СтрДеревьевПартий.ДеревоПартий.Строки.Удалить(СтрокаПартийНоменклатуры);
			Иначе
				СтрокаПартийНоменклатуры.Количество	 = СтрокаПартийНоменклатуры.Количество	- ОбщееКоличество;
			КонецЕсли;
		КонецЕсли;
		
		Если НадоСписать <= 0 Тогда
			Прервать;
		КонецЕсли;
		
		КонецЦикла;
			
		// Если после списания по партиям осталось еще что-то, то либо образуем партию отрицательных остатков,
		// либо предупредим о не распределении по партиям.
		// Проверим чего осталось.
		Если (НадоСписать <> 0) И (ОтрицательныеОстаткиРазрешены ИЛИ НадоСписать < 0) Тогда
			НоваяЗапись = Добавить();
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяЗапись.Период = ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор = ШапкаДокумента.Ссылка;
			// Если партия указана непосредственно, то на нее. Иначе служебная
			Если ПартииУказаны И ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
				НоваяЗапись.Партия = СтрокаТовар.Партия;
				НоваяЗапись.СтатусПартии = ПоследнийСтатус;
			Иначе
				НоваяЗапись.Партия = ПартияТоваровОтрицательныхОстатков;
				НоваяЗапись.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный;
			КонецЕсли;
				
			НоваяЗапись.СкладКомпании = СкладКомпании;
			НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
				Организация,
				НоваяЗапись.СкладКомпании,
				НоваяЗапись.Период
			);
			НоваяЗапись.Номенклатура = СтрокаТовар.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатуры;
			// Хоз. операция будет соответствовать статусу партии или текущей хоз. операции?
			НоваяЗапись.ХозОперация = ШапкаДокумента.ХозОперация;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШапкаДокумента, "Проект") Тогда
				НоваяЗапись.Проект = ШапкаДокумента.Проект;	
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШапкаДокумента, "ДокументПродажи") Тогда
				НоваяЗапись.ДокументПродажи = ШапкаДокумента.ДокументПродажи;	
			КонецЕсли;
			
			НоваяЗапись.Количество = НадоСписать;
			
			// Теперь попробуем определиться с суммой списания
			Если ЕстьПартииТоваров Тогда
				Если ОбщееКоличество = 0 Тогда
					ЦенаПоследнейПартии = 0;
					УдельныйНДСПоследнейПартии = 0;
					ЦенаБезНДСПоследнейПартии = 0;
					ЦенаУпрПоследнейПартии = 0;
					УдельныйНДСУпрПоследнейПартии = 0;
					ЦенаБезНДСУпрПоследнейПартии = 0;
				Иначе
					ЦенаПоследнейПартии = ОбщаяСумма / ОбщееКоличество;
					УдельныйНДСПоследнейПартии = ОбщаяСуммаНДС / ОбщееКоличество;
					ЦенаБезНДСПоследнейПартии = ЦенаПоследнейПартии - УдельныйНДСПоследнейПартии;
					ЦенаУпрПоследнейПартии = ОбщаяСуммаУпр / ОбщееКоличество;
					УдельныйНДСУпрПоследнейПартии = ОбщаяСуммаНДСУпр / ОбщееКоличество;
					ЦенаБезНДСУпрПоследнейПартии = ЦенаУпрПоследнейПартии - УдельныйНДСУпрПоследнейПартии;
				КонецЕсли; 
			Иначе // В этом случае пробуем достать оценку из регистра сведений Цены по типу цен Нормативная цена
				ТипЦен = Справочники.ТипыЦен.НормативнаяЦена;
				// Получим цену в валюте управленческого учета компании
				ЦенаПоследнейПартии = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, СтрокаТовар.Номенклатура,
					ШапкаДокумента.МоментВремени, , Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), ,
					СтрокаТовар.ХарактеристикаНоменклатуры, , СкладКомпании.ПодразделениеКомпании);
				ЦенаУпрПоследнейПартии = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, СтрокаТовар.Номенклатура,
					ШапкаДокумента.МоментВремени, , Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ,
					СтрокаТовар.ХарактеристикаНоменклатуры, , СкладКомпании.ПодразделениеКомпании);
				// Розничную оценку берем по типу цен основной тип цен отгрузки
				ТипЦен = Справочники.ТипыЦен.ОсновнойТипЦенПродажи;
				// Для расчета НДС сначала определимся со ставкой
				СтавкаНДС = СтрокаТовар.Номенклатура.СтавкаНДС;
				УдельныйНДСПоследнейПартии = (ЦенаПоследнейПартии * СтавкаНДС.Ставка) / 100;
				ЦенаБезНДСПоследнейПартии = ЦенаПоследнейПартии - УдельныйНДСПоследнейПартии;
				УдельныйНДСУпрПоследнейПартии = (ЦенаУпрПоследнейПартии * СтавкаНДС.Ставка) / 100;
				ЦенаБезНДСУпрПоследнейПартии = ЦенаУпрПоследнейПартии - УдельныйНДСУпрПоследнейПартии;
			КонецЕсли;
			
			НоваяЗапись.Сумма = Окр(ЦенаПоследнейПартии * НадоСписать, 2);
			НоваяЗапись.СуммаНДС = Окр(УдельныйНДСПоследнейПартии * НадоСписать, 2);
			НоваяЗапись.СуммаБезНДС = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
			НоваяЗапись.СуммаУпр = Окр(ЦенаУпрПоследнейПартии * НадоСписать, 2);
			НоваяЗапись.СуммаНДСУпр = Окр(УдельныйНДСУпрПоследнейПартии * НадоСписать, 2);
			НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
			
			// ПОДЛЕЖИТ ИСПРАВЛЕНИЮ? Стоит ли влиять на сумму расхода?		
			Расход = Расход + НоваяЗапись.СуммаУпр;
		
			// Если выбран склад куда, тогда сразу оприходуем партию на склад-получатель
			Если ЗначениеЗаполнено(СкладКомпанииКуда) Тогда
				// Сохраним себестоимость и количество
				Количество = НоваяЗапись.Количество;
				Сумма = НоваяЗапись.Сумма;
				СуммаНДС = НоваяЗапись.СуммаНДС;
				СуммаБезНДС = НоваяЗапись.СуммаБезНДС;
				СуммаУпр = НоваяЗапись.СуммаУпр;
				СуммаНДСУпр = НоваяЗапись.СуммаНДСУпр;
				СуммаБезНДСУпр = НоваяЗапись.СуммаБезНДСУпр;
				НоваяЗапись = Добавить();
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяЗапись.Период = ШапкаДокумента.Дата;
				НоваяЗапись.Регистратор = ШапкаДокумента.Ссылка;
				// Если партия указана непосредственно, то на нее. Иначе служебная
				Если ПартииУказаны И ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
					НоваяЗапись.Партия = СтрокаТовар.Партия;
					НоваяЗапись.СтатусПартии = ПоследнийСтатус;
				Иначе
					НоваяЗапись.Партия = ПартияТоваровОтрицательныхОстатков;
					НоваяЗапись.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный;
				КонецЕсли;
				НоваяЗапись.СкладКомпании = СкладКомпанииКуда;
				НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
					Организация,
					НоваяЗапись.СкладКомпании,
					НоваяЗапись.Период
				);
				НоваяЗапись.Номенклатура = СтрокаТовар.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатуры;
				// Определяемся с хоз. операцией
				НоваяЗапись.ХозОперация = ШапкаДокумента.ХозОперация;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШапкаДокумента, "Проект") Тогда
					НоваяЗапись.Проект = ШапкаДокумента.Проект;	
				КонецЕсли;
				
				НоваяЗапись.Количество = НадоСписать;
				НоваяЗапись.Сумма = Окр(Сумма, 2);
				НоваяЗапись.СуммаНДС = Окр(СуммаНДС, 2);
				НоваяЗапись.СуммаБезНДС = Окр(СуммаБезНДС, 2);
				НоваяЗапись.СуммаУпр = Окр(СуммаУпр, 2);
				НоваяЗапись.СуммаНДСУпр = Окр(СуммаНДСУпр, 2);
				НоваяЗапись.СуммаБезНДСУпр = Окр(СуммаБезНДСУпр, 2);
			КонецЕсли;
			
		ИначеЕсли НадоСписать <> 0 Тогда
			ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТовар.Номенклатура);
			Если ПартииУказаны И ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
				// Не хватило товара по партии. Ошибка
				Если НЕ ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" не распределился по партии %3. Превышение %4, по организации ""%5""'"),
							ЗначениеКолонкиКода,
							СокрЛП(СтрокаТовар.Номенклатура), 
							СокрЛП(СтрокаТовар.Партия),
							Формат(НадоСписать, "ЧДЦ=3; ЧН=0,00"),
							Организация
						), 
						ДокументОбъект, , , Истина
					);
				Иначе 
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"" не распределился по партии %4. Превышение %5, по организации ""%6""'"),
							ЗначениеКолонкиКода,
							СокрЛП(СтрокаТовар.Номенклатура),
							СокрЛП(СтрокаТовар.ХарактеристикаНоменклатуры),
							СокрЛП(СтрокаТовар.Партия),
							Формат(НадоСписать, "ЧДЦ=3; ЧН=0,00"),
							Организация
						),
						ДокументОбъект, , , Истина
					);
				КонецЕсли; 
				ВсеОК = Ложь;
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" не распределился по партиям. Превышение %3, по организации ""%4""'"),
							ЗначениеКолонкиКода, 
							СокрЛП(СтрокаТовар.Номенклатура),
							Формат(НадоСписать, "ЧДЦ=3; ЧН=0,00"),
							Организация
						),
						ДокументОбъект
					);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"" не распределился по партиям. Превышение %4, по организации ""%5""'"),
							ЗначениеКолонкиКода,
							СокрЛП(СтрокаТовар.Номенклатура),
							СокрЛП(СтрокаТовар.ХарактеристикаНоменклатуры),
							Формат(НадоСписать, "ЧДЦ=3; ЧН=0,00"),
							Организация
						),
						ДокументОбъект
					);
				КонецЕсли; 
				ВсеОК = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ГТДПартийТоваровКомпанииНаборЗаписей = ДокументОбъект.Движения.ГТДПартийТоваровКомпании;
	ГТДПартийТоваровКомпанииНаборЗаписей.ДокументОбъект = ДокументОбъект;
	ГТДПартийТоваровКомпанииНаборЗаписей.ШапкаДокумента = ШапкаДокумента;
	ГТДПартийТоваровКомпанииНаборЗаписей.ГраницаРасчетаОстатков = ГраницаРасчетаОстатков;
	ГТДПартийТоваровКомпанииНаборЗаписей.ТаблицаПартий = Выгрузить();
	ГТДПартийТоваровКомпанииНаборЗаписей.ТаблицаТовары = ТаблицаТовары.Скопировать();
	ГТДПартийТоваровКомпанииНаборЗаписей.ТаблицаВозвратТоваров = ТаблицаВозвратовПартии;
	ГТДПартийТоваровКомпанииНаборЗаписей.СкладКомпании = СкладКомпании;
	ГТДПартийТоваровКомпанииНаборЗаписей.МассивПартий = Выгрузить().ВыгрузитьКолонку("Партия");
	ГТДПартийТоваровКомпанииНаборЗаписей.РежимПроведения = РежимПроведения;
	ВсеОК = (ГТДПартийТоваровКомпанииНаборЗаписей.Расход() И ВсеОК);
	// Если выбран склад куда, тогда сразу оприходуем ГТД на склад-получатель
	Если ЗначениеЗаполнено(СкладКомпанииКуда) Тогда
		ГТДПартийТоваровКомпанииРасход = ГТДПартийТоваровКомпанииНаборЗаписей.Выгрузить();
		Для каждого ГТДРасхода Из ГТДПартийТоваровКомпанииРасход Цикл
			НоваяЗапись = ГТДПартийТоваровКомпанииНаборЗаписей.Добавить();
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период = ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор = ШапкаДокумента.Ссылка;
			НоваяЗапись.СкладКомпании = СкладКомпанииКуда;
			НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
				Организация,
				НоваяЗапись.СкладКомпании,
				НоваяЗапись.Период
			);
			НоваяЗапись.Номенклатура = ГТДРасхода.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = ГТДРасхода.ХарактеристикаНоменклатуры;
			НоваяЗапись.Партия = ГТДРасхода.Партия;
			НоваяЗапись.ГТД = ГТДРасхода.ГТД;
			НоваяЗапись.ХозОперация = ГТДРасхода.ХозОперация;
			НоваяЗапись.Количество = ГТДРасхода.Количество;
		КонецЦикла; 
	КонецЕсли;
	
	Если ИнтеркампаниРазрешено Тогда
		
		НаборЗаписейТоварыОрганизацийКПередаче = ДокументОбъект.Движения.ТоварыОрганизацийКПередаче;
		НаборЗаписейТоварыОрганизацийКПередаче.ДокументОбъект							= ДокументОбъект;
		НаборЗаписейТоварыОрганизацийКПередаче.ОрганизацияПолучатель					= Организация;
		НаборЗаписейТоварыОрганизацийКПередаче.ТаблицаДвиженийПартииТоваровКомпании		= ДокументОбъект.Движения.ПартииТоваровКомпании.Выгрузить();
		НаборЗаписейТоварыОрганизацийКПередаче.ТаблицаДвиженийГТДПартийТоваровКомпании	= ДокументОбъект.Движения.ГТДПартийТоваровКомпании.Выгрузить();
		НаборЗаписейТоварыОрганизацийКПередаче.ШапкаДокумента							= ШапкаДокумента;
		ВсеОК = (НаборЗаписейТоварыОрганизацийКПередаче.Приход() И ВсеОК);
		
	КонецЕсли;
	
	// Запись движений
	ЗаписыватьДвижения = ?(ЗаписыватьДвижения = Неопределено, Ложь, ЗаписыватьДвижения);
	Если ВсеОК И ЗаписыватьДвижения Тогда
		Записать();
	КонецЕсли;
	
	// Обнуляем переменные
	ТаблицаТовары = Неопределено;
	РезультатЗапросаПоТоварам = Неопределено;
	ГраницаРасчетаОстатков = Неопределено;
	СтатусПартии = Неопределено;
	// Убиваем циклическую ссылку
	ДокументОбъект = Неопределено;
	ШапкаДокумента = Неопределено;
	
	Возврат ВсеОК;
КонецФункции

// Пересортица товаров
Функция Пересортица() Экспорт
	
	КонтрольЗаполненияОрганизации();
	
	ПартииУказаны = ЗначениеЗаполнено(ИмяРеквизитаДокумент);
	СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(СкладКомпании, Организация,
		?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, ДокументОбъект.Дата));
	ПартияТоваровОтрицательныхОстатков = Константы.ПартияТоваровОтрицательныхОстатков.Получить();
	ВсеОк = Истина;
	Сторно = Ложь;
	Если (РезультатЗапросаПоТоварам = Неопределено) ИЛИ (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("РезультатЗапроса")
		И ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("ТаблицаЗначений")) Тогда
		// Если неопределен результат запроса по таблице товаров, значит она в документе.
		ВидДок = ДокументОбъект.Метаданные().Имя;
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДокТовары.НоменклатураПриход КАК НоменклатураПриход,
		|	ДокТовары.Номенклатура КАК Номенклатура,
		|	ДокТовары.КоличествоПриход*ДокТовары.КоэффициентПриход КАК КоличествоПриход,
		|	ДокТовары.Количество*ДокТовары.Коэффициент КАК Количество,
		|	ДокТовары.Сумма КАК Сумма,
		|	ДокТовары.ХарактеристикаНоменклатурыПриход КАК ХарактеристикаНоменклатурыПриход,
		|	ДокТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	" + ?(НЕ ЗначениеЗаполнено(ИмяРеквизитаДокумент), "", "ДокТовары." + ИмяРеквизитаДокумент + " КАК Партия,") + "
		|	ДокТовары.ГТД КАК ГТДРасход,
		|	ДокТовары.ГТДПриход КАК ГТД,
		|	ДокТовары.ПонижениеСортности КАК ПонижениеСортности
		|ИЗ
		|	Документ." + ВидДок + ".Товары КАК ДокТовары
		|ГДЕ
		|	ДокТовары.Ссылка=&Ссылка
		|");
		Запрос.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
		РезультатЗапросаПоТоварам = Запрос.Выполнить();
	КонецЕсли;
	// Если передали результат запроса, то выгрузим в таблицу значений
	Если ТипЗнч(РезультатЗапросаПоТоварам) = Тип("РезультатЗапроса") Тогда
		РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	КонецЕсли;
	
	// Валюты
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, ШапкаДокумента.Дата);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	// Получим таблицу партий
	ДеревоПартий = ПолучитьДеревоПартий(РезультатЗапросаПоТоварам,,Организация);
	// Упорядочим по нормальному
	РезультатЗапросаПоТоварам.Сортировать("Номенклатура Возр,ХарактеристикаНоменклатуры Убыв");
	// Получим таблицу номенклатуры с ручным списанием характеристик
	ТаблицаРучныхХарактеристик = ОбработкаТабличнойЧастиТовары.ПолучитьНоменклатуруСРучнымСписаниемХарактеристик(
		ШапкаДокумента.Ссылка
	);
	// Получим права пользователя
	ОтрицательныеОстаткиРазрешены = (ПраваИНастройкиПользователя.Значение(
		"РазрешитьОтрицательныеСкладскиеОстатки", ДокументОбъект) <> Перечисления.ВидыРазрешенныхОтрицательныхОстатков.Запрещены
	);
	
	ИмяКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах().Имя;
	ЦенаВключаетНДС = ШапкаДокумента.ТипЦен.ЦенаВключаетНДС;
	// Идем по товарам
	Для Каждого СтрокаТовар Из РезультатЗапросаПоТоварам Цикл
		// Полезные переменные
		НадоСписать = Окр(СтрокаТовар.Количество, 3);
		ОбщееКоличество = 0;
		ОбщаяСумма = 0;
		ОбщаяСуммаНДС = 0;
		ОбщаяСуммаБезНДС = 0;
		ОбщаяСуммаУпр = 0;
		ОбщаяСуммаНДСУпр = 0;
		ОбщаяСуммаБезНДСУпр = 0;
		ПоследнийСтатус = Перечисления.СтатусыПартий.ТоварКупленный;
		ЕстьПартииТоваров = Ложь; 
		СтрокаПартийНоменклатуры = ДеревоПартий.Строки.Найти(СтрокаТовар.Номенклатура, "Номенклатура");
		Если СтрокаПартийНоменклатуры <> Неопределено Тогда
			// Определяем фильтр
			СтруктураОтбора = Новый Структура("Номенклатура");
			СтруктураОтбора.Номенклатура = СтрокаТовар.Номенклатура; 
			Если ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) ИЛИ (ТаблицаРучныхХарактеристик <> Неопределено
				И ТаблицаРучныхХарактеристик.Найти(СтрокаТовар.Номенклатура, "Номенклатура") <> Неопределено) Тогда 
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТовар.ХарактеристикаНоменклатуры);
			КонецЕсли;
			Если ЗначениеЗаполнено(ИмяРеквизитаДокумент) И ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда 
				СтруктураОтбора.Вставить("Партия", СтрокаТовар.Партия);
			КонецЕсли;
			// Ищем партии
			МассивНайденныхПартий = СтрокаПартийНоменклатуры.Строки.НайтиСтроки(СтруктураОтбора);
			
			// Списываем партии
			Для Сч = 0 По МассивНайденныхПартий.ВГраница() Цикл
				СтрокаПартии = МассивНайденныхПартий[Сч];
				// Пропустим отрицательные остатки
				Если СтрокаПартии.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				// Если указаны партии, то пропустим все партии не наши
				Если ПартииУказаны И ЗначениеЗаполнено(СтрокаТовар.Партия) И СтрокаПартии.Партия <> СтрокаТовар.Партия Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьПартииТоваров = Истина; // Если есть партия с которой производим списание, значит и цены будем брать из списаний
				
				Если СтрокаПартии.Количество < 0 Тогда
					// Запомним удельные значения списания для отрицательной партии товаров
					ОбщееКоличество		= ОбщееКоличество + СтрокаПартии.Количество;
					ОбщаяСумма			= ОбщаяСумма + Окр(СтрокаПартии.Сумма, 2);
					ОбщаяСуммаНДС		= ОбщаяСуммаНДС + Окр(СтрокаПартии.СуммаНДС, 2);
					ОбщаяСуммаБезНДС	= ОбщаяСуммаБезНДС + Окр(СтрокаПартии.СуммаБезНДС, 2);
					ОбщаяСуммаУпр		= ОбщаяСуммаУпр + Окр(СтрокаПартии.СуммаУпр, 2);
					ОбщаяСуммаНДСУпр	= ОбщаяСуммаНДСУпр + Окр(СтрокаПартии.СуммаНДСУпр, 2);
					ОбщаяСуммаБезНДСУпр	= ОбщаяСуммаБезНДСУпр + Окр(СтрокаПартии.СуммаБезНДСУпр, 2);
					Продолжить;
				КонецЕсли;
				
				НоваяЗапись = Добавить();
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
				НоваяЗапись.Период = ШапкаДокумента.Дата;
				НоваяЗапись.Регистратор = ШапкаДокумента.Ссылка;
				Если СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя Тогда
					Партия = ПартияТоваровОтрицательныхОстатков;
				Иначе
					Партия = СтрокаПартии.Партия;
				КонецЕсли;	
				НоваяЗапись.Партия = Партия;
				НоваяЗапись.СтатусПартии = СтрокаПартии.СтатусПартии;
				ПоследнийСтатус = СтрокаПартии.СтатусПартии;
				НоваяЗапись.СкладКомпании = СкладКомпании;
				НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
					Организация,
					НоваяЗапись.СкладКомпании,
					НоваяЗапись.Период,
					СтрокаПартии.Организация
				);
				НоваяЗапись.Номенклатура = СтрокаПартии.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;
				НоваяЗапись.ХозОперация = ШапкаДокумента.ХозОперация;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШапкаДокумента, "Проект") Тогда
					НоваяЗапись.Проект = ШапкаДокумента.Проект;	
				КонецЕсли;
				
				// Показатели
				НоваяЗапись.Количество = Мин(НадоСписать, СтрокаПартии.Количество);
				НоваяЗапись.Сумма = Окр(?(СтрокаПартии.Количество < НадоСписать, СтрокаПартии.Сумма,
					СтрокаПартии.Сумма / СтрокаПартии.Количество * НадоСписать), 2);
				НоваяЗапись.СуммаНДС = Окр(?(СтрокаПартии.Количество < НадоСписать, СтрокаПартии.СуммаНДС,
					СтрокаПартии.СуммаНДС / СтрокаПартии.Количество * НадоСписать), 2);
				НоваяЗапись.СуммаБезНДС = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
				НоваяЗапись.СуммаУпр = Окр(?(СтрокаПартии.Количество < НадоСписать, СтрокаПартии.СуммаУпр,
					СтрокаПартии.СуммаУпр / СтрокаПартии.Количество * НадоСписать), 2);
				НоваяЗапись.СуммаНДСУпр = Окр(?(СтрокаПартии.Количество < НадоСписать, СтрокаПартии.СуммаНДСУпр,
					СтрокаПартии.СуммаНДСУпр / СтрокаПартии.Количество * НадоСписать), 2);
				НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
				
				ОбщееКоличество = ОбщееКоличество + НоваяЗапись.Количество;
				ОбщаяСумма = ОбщаяСумма + НоваяЗапись.Сумма;
				ОбщаяСуммаНДС = ОбщаяСуммаНДС + НоваяЗапись.СуммаНДС;
				ОбщаяСуммаБезНДС = ОбщаяСуммаБезНДС + НоваяЗапись.СуммаБезНДС;
				ОбщаяСуммаУпр = ОбщаяСуммаУпр + НоваяЗапись.СуммаУпр;
				ОбщаяСуммаНДСУпр = ОбщаяСуммаНДСУпр + НоваяЗапись.СуммаНДСУпр;
				ОбщаяСуммаБезНДСУпр = ОбщаяСуммаБезНДСУпр + НоваяЗапись.СуммаБезНДСУпр;
				
				// Если у нас понижение сортности, то движения идут "зеркально"
				Если СтрокаТовар.ПонижениеСортности Тогда
					Показатели = Новый Структура;
					Показатели.Вставить("КоличествоПриход",     НоваяЗапись.Количество);
					Показатели.Вставить("СуммаПриход",          НоваяЗапись.Сумма);
					Показатели.Вставить("СуммаУпрПриход",       НоваяЗапись.СуммаУпр);
					Показатели.Вставить("СуммаНДСПриход",       НоваяЗапись.СуммаНДС);
					Показатели.Вставить("СуммаНДСУпрПриход",    НоваяЗапись.СуммаНДСУпр);
					Показатели.Вставить("СуммаБезНДСПриход",    НоваяЗапись.СуммаБезНДС);
					Показатели.Вставить("СуммаБезНДСУпрПриход", НоваяЗапись.СуммаБезНДСУпр);
					ПересортицаПриход(СтрокаТовар, Партия, Показатели);
				КонецЕсли;
				
				// Вычтем из строки партий показатели
				СтрокаПартии.Количество = СтрокаПартии.Количество - НоваяЗапись.Количество;
				СтрокаПартийНоменклатуры.Количество = СтрокаПартийНоменклатуры.Количество - НоваяЗапись.Количество;
				Если СтрокаПартии.Количество <= 0 Тогда
					// Если списали все из партии, то такая строка нам больше не нужна
					СтрокаПартийНоменклатуры.Строки.Удалить(СтрокаПартии);
				Иначе
					// Разбираемся с остальными показателями
					СтрокаПартии.Сумма = СтрокаПартии.Сумма - НоваяЗапись.Сумма;
					СтрокаПартии.СуммаНДС = СтрокаПартии.СуммаНДС - НоваяЗапись.СуммаНДС;
					СтрокаПартии.СуммаБезНДС = СтрокаПартии.СуммаБезНДС - НоваяЗапись.СуммаБезНДС;
					СтрокаПартии.СуммаУпр = СтрокаПартии.СуммаУпр - НоваяЗапись.СуммаУпр;
					СтрокаПартии.СуммаНДСУпр = СтрокаПартии.СуммаНДСУпр - НоваяЗапись.СуммаНДСУпр;
					СтрокаПартии.СуммаБезНДСУпр = СтрокаПартии.СуммаБезНДСУпр - НоваяЗапись.СуммаБезНДСУпр;
				КонецЕсли;
				
				НадоСписать = НадоСписать - НоваяЗапись.Количество;
				Если НадоСписать <= 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// Если списали всю номенклатуру, то уберем лишнюю стоку дерева
			Если СтрокаПартийНоменклатуры.Количество <= 0 Тогда
				ДеревоПартий.Строки.Удалить(СтрокаПартийНоменклатуры);
			КонецЕсли;
		КонецЕсли;
		
		// Если остались товары, не распределенные по партия, то сообщаем об этом
		Если НадоСписать <> 0 И ОтрицательныеОстаткиРазрешены Тогда
			НоваяЗапись = Добавить();
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяЗапись.Период = ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор = ШапкаДокумента.Ссылка;
			// Если партия указана непосредственно, то на нее. Иначе служебная
			Если ПартииУказаны И ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
				НоваяЗапись.Партия = СтрокаТовар.Партия;
				НоваяЗапись.СтатусПартии = ПоследнийСтатус;
			Иначе
				НоваяЗапись.Партия = ПартияТоваровОтрицательныхОстатков;
				НоваяЗапись.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный;
			КонецЕсли;
			НоваяЗапись.СкладКомпании = СкладКомпании;
			НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
				Организация,
				НоваяЗапись.СкладКомпании,
				НоваяЗапись.Период
			);
			НоваяЗапись.Номенклатура = СтрокаТовар.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатуры;
			// Хоз. операция будет соответствовать статусу партии или текущей хоз. операции?
			НоваяЗапись.ХозОперация = ШапкаДокумента.ХозОперация;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШапкаДокумента, "Проект") Тогда
				НоваяЗапись.Проект = ШапкаДокумента.Проект;	
			КонецЕсли;
			
			НоваяЗапись.Количество = НадоСписать;
			
			Если ЕстьПартииТоваров Тогда
				Если ОбщееКоличество = 0 Тогда
					ЦенаПоследнейПартии = 0;
					УдельныйНДСПоследнейПартии = 0;
					ЦенаПоследнейПартииБезНДС = 0;
					ЦенаУпрПоследнейПартии = 0;
					УдельныйНДСУпрПоследнейПартии = 0;
					ЦенаПоследнейПартииБезНДСУпр = 0;
				Иначе
					ЦенаПоследнейПартии = ОбщаяСумма / ОбщееКоличество;
					УдельныйНДСПоследнейПартии = ОбщаяСуммаНДС / ОбщееКоличество;
					ЦенаПоследнейПартииБезНДС = ОбщаяСуммаБезНДС / ОбщееКоличество;
					ЦенаУпрПоследнейПартии = ОбщаяСуммаУпр / ОбщееКоличество;
					УдельныйНДСУпрПоследнейПартии = ОбщаяСуммаНДСУпр / ОбщееКоличество;
					ЦенаПоследнейПартииБезНДСУпр = ОбщаяСуммаБезНДСУпр / ОбщееКоличество;
				КонецЕсли; 
			Иначе
				ТипЦен = Справочники.ТипыЦен.НормативнаяЦена;
				// Получим цену в валюте управленческого учета компании
				ЦенаПоследнейПартии = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, СтрокаТовар.Номенклатура,
					ШапкаДокумента.МоментВремени, , Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), ,
					СтрокаТовар.ХарактеристикаНоменклатуры, , СкладКомпании.ПодразделениеКомпании);
				ЦенаУпрПоследнейПартии = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, СтрокаТовар.Номенклатура,
					ШапкаДокумента.МоментВремени, , Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ,
					СтрокаТовар.ХарактеристикаНоменклатуры, , СкладКомпании.ПодразделениеКомпании);
				// Для расчета НДС сначала определимся со ставкой
				СтавкаНДС = СтрокаТовар.Номенклатура.СтавкаНДС;
				УдельныйНДСПоследнейПартии = (ЦенаПоследнейПартии * СтавкаНДС.Ставка) / 100;
				УдельныйНДСУпрПоследнейПартии = (ЦенаУпрПоследнейПартии * СтавкаНДС.Ставка) / 100;
				ЦенаПоследнейПартииБезНДС = ЦенаПоследнейПартии - УдельныйНДСПоследнейПартии;
				ЦенаПоследнейПартииБезНДСУпр = ЦенаУпрПоследнейПартии - УдельныйНДСУпрПоследнейПартии;
			КонецЕсли;
			
			НоваяЗапись.Сумма = Окр(ЦенаПоследнейПартии * НадоСписать, 2);
			НоваяЗапись.СуммаНДС = Окр(УдельныйНДСПоследнейПартии * НадоСписать, 2);
			НоваяЗапись.СуммаБезНДС = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
			НоваяЗапись.СуммаУпр = Окр(ЦенаУпрПоследнейПартии * НадоСписать, 2);
			НоваяЗапись.СуммаНДСУпр = Окр(УдельныйНДСУпрПоследнейПартии * НадоСписать, 2);
			НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
			
			ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТовар.Номенклатура);
			
			// Сообщаем
			Если ПартииУказаны И ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
				// Не хватило товара по партии. Ошибка
				Если НЕ ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" не распределился по партии %3. Превышение %4, по организации ""%5""'"),
							ЗначениеКолонкиКода,
							СокрЛП(СтрокаТовар.Номенклатура),
							СокрЛП(СтрокаТовар.Партия),
							Формат(НадоСписать, "ЧДЦ=3; ЧН=0,00"),
							Организация
						),
						ДокументОбъект, , , Истина
					);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"" не распределился по партии %4. Превышение %5, по организации ""%6""'"),
							ЗначениеКолонкиКода,
							СокрЛП(СтрокаТовар.Номенклатура),
							СокрЛП(СтрокаТовар.ХарактеристикаНоменклатуры),
							СокрЛП(СтрокаТовар.Партия),
							Формат(НадоСписать, "ЧДЦ=3; ЧН=0,00"),
							Организация
						),
						ДокументОбъект, , , Истина);
				КонецЕсли; 
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '""[%1] Товар ""%2"" не распределился по партиям. Превышение %3, по организации ""%4""'"),
							ЗначениеКолонкиКода,
							СокрЛП(СтрокаТовар.Номенклатура),
							Формат(НадоСписать, "ЧДЦ=3; ЧН=0,00"),
							Организация
						), 
						ДокументОбъект, , , Истина
					);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"" не распределился по партиям. Превышение %4, по организации ""%5""'"),
							ЗначениеКолонкиКода,
							СокрЛП(СтрокаТовар.Номенклатура),
							СокрЛП(СтрокаТовар.ХарактеристикаНоменклатуры),
							Формат(НадоСписать, "ЧДЦ=3; ЧН=0,00"),
							Организация
						),
						ДокументОбъект, СтрокаТовар.Номенклатура
					);
				КонецЕсли; 
			КонецЕсли;

		ИначеЕсли НадоСписать > 0 Тогда
			
			ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТовар.Номенклатура);
			
			// Сообщаем
			Если ПартииУказаны И ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
				// Не хватило товара по партии. Ошибка
				Если НЕ ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" не распределился по партии %3. Превышение %4, по организации ""%5""'"),
							ЗначениеКолонкиКода,
							СокрЛП(СтрокаТовар.Номенклатура),
							СокрЛП(СтрокаТовар.Партия),
							Формат(НадоСписать, "ЧДЦ=3; ЧН=0,00"),
							Организация
						),
						ДокументОбъект, , , Истина
					);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"" не распределился по партии %4. Превышение %5, по организации ""%6""'"),
							ЗначениеКолонкиКода, 
							СокрЛП(СтрокаТовар.Номенклатура),
							СокрЛП(СтрокаТовар.ХарактеристикаНоменклатуры),
							СокрЛП(СтрокаТовар.Партия),
							Формат(НадоСписать, "ЧДЦ=3; ЧН=0,00"),
							Организация
						),
						ДокументОбъект, , , Истина
					);
				КонецЕсли; 
				ВсеОК = Ложь;
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" не распределился по партиям. Превышение %3, по организации ""%4""'"),
							ЗначениеКолонкиКода,
							СокрЛП(СтрокаТовар.Номенклатура),
							Формат(НадоСписать, "ЧДЦ=3; ЧН=0,00"),
							Организация
						), 
						ДокументОбъект, , ,Истина
					);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"" не распределился по партиям. Превышение %4, по организации ""%5""'"),
							ЗначениеКолонкиКода, 
							СокрЛП(СтрокаТовар.Номенклатура),
							СокрЛП(СтрокаТовар.ХарактеристикаНоменклатуры),
							Формат(НадоСписать, "ЧДЦ=3; ЧН=0,00"),
							Организация
						),
					ДокументОбъект, , , Истина
					);
				КонецЕсли; 
				ВсеОК = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Приходуем приходуемые товары =), если не понижение сортности (т.к. уже все оприходовали).
		Если НЕ СтрокаТовар.ПонижениеСортности Тогда
			СтавкаНДС		= СтрокаТовар.НоменклатураПриход.СтавкаНДС.Ставка;
			Если ЦенаВключаетНДС Тогда
				СуммаПриход		= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.Сумма, ШапкаДокумента.ВалютаДокумента,
					ШапкаДокумента.КурсДокумента, ВалютаРегл, КурсРегл, 2);
				СуммаУпрПриход	= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.Сумма, ШапкаДокумента.ВалютаДокумента,
					ШапкаДокумента.КурсДокумента, Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
					ШапкаДокумента.КурсВалютыУпр, 2);
				СуммаНДСПриход = Окр((СуммаПриход * СтавкаНДС) / (100 + СтавкаНДС), 2);
				СуммаНДСУпрПриход = Окр((СуммаУпрПриход * СтавкаНДС) / (100 + СтавкаНДС), 2);
				СуммаБезНДСПриход = СуммаПриход - СуммаНДСПриход;
				СуммаБезНДСУпрПриход = СуммаУпрПриход - СуммаНДСУпрПриход;
			Иначе
				СуммаБезНДСПриход = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.Сумма, ШапкаДокумента.ВалютаДокумента,
					ШапкаДокумента.КурсДокумента, ВалютаРегл, КурсРегл, 2);
				СуммаБезНДСУпрПриход = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.Сумма, ШапкаДокумента.ВалютаДокумента,
					ШапкаДокумента.КурсДокумента, Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
					ШапкаДокумента.КурсВалютыУпр, 2);
				СуммаНДСПриход = Окр((СуммаБезНДСПриход * СтавкаНДС) / 100, 2);
				СуммаНДСУпрПриход = Окр((СуммаБезНДСУпрПриход * СтавкаНДС) / 100, 2);
				СуммаПриход = СуммаБезНДСПриход + СуммаНДСПриход;
				СуммаУпрПриход = СуммаБезНДСУпрПриход + СуммаНДСУпрПриход;
			КонецЕсли;
			
			Показатели = Новый Структура;
			Показатели.Вставить("КоличествоПриход",     СтрокаТовар.КоличествоПриход);
			Показатели.Вставить("СуммаПриход",          СуммаПриход);
			Показатели.Вставить("СуммаУпрПриход",       СуммаУпрПриход);
			Показатели.Вставить("СуммаНДСПриход",       СуммаНДСПриход);
			Показатели.Вставить("СуммаНДСУпрПриход",    СуммаНДСУпрПриход);
			Показатели.Вставить("СуммаБезНДСПриход",    СуммаБезНДСПриход);
			Показатели.Вставить("СуммаБезНДСУпрПриход", СуммаБезНДСУпрПриход);
			ПересортицаПриход(СтрокаТовар, ?(СтратегияСписанияПартийТоваровПоДатам
				= Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя, ПартияТоваровОтрицательныхОстатков,
				  ШапкаДокумента.Ссылка), Показатели);
		КонецЕсли;
		
	КонецЦикла;
	
	ГТДПартийТоваровКомпанииНаборЗаписей = ДокументОбъект.Движения.ГТДПартийТоваровКомпании;
	ГТДПартийТоваровКомпанииНаборЗаписей.ДокументОбъект = ДокументОбъект;
	ГТДПартийТоваровКомпанииНаборЗаписей.ШапкаДокумента = ШапкаДокумента;
	ГТДПартийТоваровКомпанииНаборЗаписей.ГраницаРасчетаОстатков = ГраницаРасчетаОстатков;
	ГТДПартийТоваровКомпанииНаборЗаписей.ТаблицаПартий = Выгрузить();
	МассивНайденныхСтрок = ГТДПартийТоваровКомпанииНаборЗаписей.ТаблицаПартий.НайтиСтроки(
		Новый Структура("ВидДвижения", ВидДвиженияНакопления.Приход));
	Для Сч = 0 По МассивНайденныхСтрок.Количество() - 1 Цикл
		ГТДПартийТоваровКомпанииНаборЗаписей.ТаблицаПартий.Удалить(МассивНайденныхСтрок[Сч]);
	КонецЦикла;
	ГТДПартийТоваровКомпанииНаборЗаписей.ТаблицаТовары = РезультатЗапросаПоТоварам.Скопировать();
	ГТДПартийТоваровКомпанииНаборЗаписей.ТаблицаТовары.Колонки.Удалить("ГТД");
	ГТДПартийТоваровКомпанииНаборЗаписей.ТаблицаТовары.Колонки.ГТДРасход.Имя = "ГТД";
	ГТДПартийТоваровКомпанииНаборЗаписей.СкладКомпании = СкладКомпании;
	ГТДПартийТоваровКомпанииНаборЗаписей.МассивПартий = Выгрузить().ВыгрузитьКолонку("Партия");
	ГТДПартийТоваровКомпанииНаборЗаписей.РежимПроведения = РежимПроведения;
	ВсеОК = ГТДПартийТоваровКомпанииНаборЗаписей.Расход() И ВсеОК;
	
	ЗаписыватьДвижения = ?(ЗаписыватьДвижения = Неопределено, Ложь, ЗаписыватьДвижения);
	Если ВсеОК И ЗаписыватьДвижения Тогда
		Записать();
	КонецЕсли;
	
	// Обнуляем переменные
	РезультатЗапросаПоТоварам = Неопределено;
	ГраницаРасчетаОстатков = Неопределено;
	// Убиваем циклическую ссылку
	ДокументОбъект = Неопределено;
	ШапкаДокумента = Неопределено;
	
	Возврат ВсеОк;
КонецФункции

// Переоценка товаров принятых на комиссию
Функция Переоценка() Экспорт
	
	КонтрольЗаполненияОрганизации();
	
	Если (РезультатЗапросаПоТоварам = Неопределено) ИЛИ (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("РезультатЗапроса")) Тогда
		// Если неопределен результат запроса по таблице товаров, значит она в документе.
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ПереоценкаТовары.Номенклатура КАК Номенклатура,
		|	ПереоценкаТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПереоценкаТовары.ДокументПередачи КАК ДокументПередачи,
		|	ПереоценкаТовары.Количество*ПереоценкаТовары.Коэффициент КАК Количество,
		|	ПереоценкаТовары.Цена/ПереоценкаТовары.Коэффициент КАК ЦенаНовая
		|ИЗ
		|	Документ.Переоценка.Товары КАК ПереоценкаТовары
		|ГДЕ
		|	ПереоценкаТовары.Ссылка=&Ссылка
		|");
		Запрос.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
		РезультатЗапросаПоТоварам = Запрос.Выполнить();
	КонецЕсли;
	// Списываем партии
	РезультатЗапросаПоПартиямПринятым = ПолучитьТаблицуПартийПринятых();
	// Открываем выборки
	ВыборкаТовар = РезультатЗапросаПоТоварам.Выбрать();
	ВыборкаПартии = РезультатЗапросаПоПартиямПринятым.Выбрать();
	// Всякие валюты и структуры отбора
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	Если НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, ШапкаДокумента.Дата);
		КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		КурсУпр = ШапкаДокумента.КурсВалютыУпр;
	КонецЕсли;	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, ШапкаДокумента.Дата);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	СтруктураОтбора = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Партия");
	// Идем по выборкам
	Пока ВыборкаТовар.Следующий() Цикл
		// Определяем фильтр
		СтруктураОтбора.Номенклатура = ВыборкаТовар.Номенклатура;
		СтруктураОтбора.ХарактеристикаНоменклатуры = ВыборкаТовар.ХарактеристикаНоменклатуры;
		СтруктураОтбора.Партия = ВыборкаТовар.ДокументПередачи;
		НадоПереоценить = ВыборкаТовар.Количество;
		ВыборкаПартии.Сбросить();
		Пока ВыборкаПартии.НайтиСледующий(СтруктураОтбора) Цикл
			// Расчет суммы переоценки
			НадоПереоценить = ?(НадоПереоценить = 0, ВыборкаПартии.Количество, НадоПереоценить);
			СуммаПереоценки = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаТовар.ЦенаНовая,
				ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаРегл, КурсРегл)
				* Мин(НадоПереоценить, ВыборкаПартии.Количество);
			СуммаПереоценки = Окр(СуммаПереоценки - ?(ВыборкаПартии.Количество = 0, 0,
				(ВыборкаПартии.Сумма / ВыборкаПартии.Количество) * Мин(НадоПереоценить, ВыборкаПартии.Количество)), 2);
			СуммаПереоценкиУпр = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаТовар.ЦенаНовая,
				ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаУпр, КурсУпр)
				* Мин(НадоПереоценить, ВыборкаПартии.Количество);
			СуммаПереоценкиУпр = Окр(СуммаПереоценкиУпр - ?(ВыборкаПартии.Количество = 0, 0,
				(ВыборкаПартии.СуммаУпр / ВыборкаПартии.Количество) * Мин(НадоПереоценить, ВыборкаПартии.Количество)), 2);
			// Если нечего переоценивать, то выходим
			Если СуммаПереоценки = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись = Добавить();
			НоваяЗапись.ВидДвижения = ?(СуммаПереоценки > 0, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
			НоваяЗапись.Период = ШапкаДокумента.Дата;
			НоваяЗапись.СкладКомпании = ВыборкаПартии.СкладКомпании;
			НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
				Организация,
				НоваяЗапись.СкладКомпании,
				НоваяЗапись.Период,
				?(СуммаПереоценки > 0, Неопределено, ВыборкаПартии.Организация)
			);
			НоваяЗапись.Регистратор = ШапкаДокумента.Ссылка;
			НоваяЗапись.Партия = ВыборкаПартии.Партия;
			НоваяЗапись.СтатусПартии = Перечисления.СтатусыПартий.ТоварПринятыйКомиссия;
			НоваяЗапись.Номенклатура = ВыборкаПартии.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = ВыборкаПартии.ХарактеристикаНоменклатуры;
			// Определяемся с хоз. операцией
			НоваяЗапись.ХозОперация = ШапкаДокумента.ХозОперация;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШапкаДокумента, "Проект") Тогда
				НоваяЗапись.Проект = ШапкаДокумента.Проект;	
			КонецЕсли;
			
			НоваяЗапись.Количество = 0;
			// Суммы
			НоваяЗапись.Сумма = Окр(?(СуммаПереоценки > 0, СуммаПереоценки, -СуммаПереоценки), 2);
			НоваяЗапись.СуммаНДС = НоваяЗапись.Сумма / ВыборкаПартии.Сумма * ВыборкаПартии.СуммаНДС;
			НоваяЗапись.СуммаБезНДС = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
			НоваяЗапись.СуммаУпр = Окр(?(СуммаПереоценкиУпр > 0, СуммаПереоценкиУпр, -СуммаПереоценкиУпр), 2);
			НоваяЗапись.СуммаНДСУпр = НоваяЗапись.СуммаУпр / ВыборкаПартии.СуммаУпр * ВыборкаПартии.СуммаНДСУпр;
			НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;

			НадоПереоценить = НадоПереоценить - Мин(НадоПереоценить, ВыборкаПартии.Количество);
			Если НадоПереоценить = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗаписыватьДвижения = ?(ЗаписыватьДвижения = Неопределено, Ложь, ЗаписыватьДвижения);
	Если ЗаписыватьДвижения Тогда
		Записать();
	КонецЕсли;
	
	// Обнуляем переменные
	РезультатЗапросаПоТоварам = Неопределено;
	ГраницаРасчетаОстатков = Неопределено;
	// Убиваем циклическую ссылку
	ДокументОбъект = Неопределено;
	ШапкаДокумента = Неопределено;
	
	Возврат Истина;	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает результат запроса по таблице отданных партий для переоценки партий принятых.
Функция ПолучитьТаблицуПартийПринятых()
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТоваровКомпанииОстатки.СкладКомпании КАК СкладКомпании,
	|	ПартииТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПартииТоваровКомпанииОстатки.Партия КАК Партия,
	|	ПартииТоваровКомпанииОстатки.Организация КАК Организация,
	|	ПартииТоваровКомпанииОстатки.КоличествоОстаток КАК Количество,
	|	ПартииТоваровКомпанииОстатки.СуммаОстаток КАК Сумма,
	|	ПартииТоваровКомпанииОстатки.СуммаНДСОстаток КАК СуммаНДС,
	|	ПартииТоваровКомпанииОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	ПартииТоваровКомпанииОстатки.СуммаУпрОстаток КАК СуммаУпр,
	|	ПартииТоваровКомпанииОстатки.СуммаНДСУпрОстаток КАК СуммаНДСУпр,
	|	ПартииТоваровКомпанииОстатки.СуммаБезНДСУпрОстаток КАК СуммаБезНДСУпр
	|
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании.Остатки(
	|		&Момент,
	|		СкладКомпании = &СкладКомпании
	|			И (&БезФильтраПоОрганизации
	|				ИЛИ Организация = &Организация)
	|			И Номенклатура В (&Номенклатура)
	|			И Партия.Контрагент = &Контрагент
	|			И Партия.ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
	|			И Партия В (&ДокументПередачи)) КАК ПартииТоваровКомпанииОстатки
	|
	|УПОРЯДОЧИТЬ ПО ХарактеристикаНоменклатуры.Сортировка ВОЗР, Партия ВОЗР
	|";
	
	МоментСреза = ?(РежимПроведения=РежимПроведенияДокумента.Оперативный, Неопределено, ШапкаДокумента.МоментВремени);
	
	тзТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Момент", МоментСреза);
	Запрос.УстановитьПараметр("Номенклатура", тзТоваров.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Контрагент", ШапкаДокумента.Контрагент);
	Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
	Запрос.УстановитьПараметр("БезФильтраПоОрганизации", ЗапасыТоваров.ФильтрЗапросаПоОрганизации(МоментСреза));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ШапкаДокумента.ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("ДокументПередачи", тзТоваров.ВыгрузитьКолонку("ДокументПередачи"));
	Запрос.Текст=ТекстЗапроса;
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПартииТоваровКомпании");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, ШапкаДокумента.Дата)); 
	ЗначенияБлокировки.Вставить("СкладКомпании", СкладКомпании);
	Если ЗапасыТоваров.ОбособленныйУчетТоваровПоОрганизациям(МоментСреза)
		И Не ЗапасыТоваров.РежимКонтроляОстатковНаСкладахПоКомпании() Тогда
		ЗначенияБлокировки.Вставить("Организация", Организация);
	КонецЕсли;
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", тзТоваров);
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОписаниеИсточника.Вставить("Партия", "ДокументПередачи");
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	Возврат Запрос.Выполнить();
КонецФункции

// Вспомогательная процедура, оприходование товаров при пересортице
Процедура ПересортицаПриход(СтрокаТовар,Партия,Показатели)
	
	КонтрольЗаполненияОрганизации();
	
	НоваяЗапись=Добавить();
	НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
	НоваяЗапись.Период                     = ШапкаДокумента.Дата;
	НоваяЗапись.Регистратор                = ШапкаДокумента.Ссылка;
	НоваяЗапись.Партия                     = Партия;
	НоваяЗапись.СтатусПартии               = Перечисления.СтатусыПартий.ТоварКупленный;
	НоваяЗапись.СкладКомпании              = СкладКомпании;
	НоваяЗапись.Организация                = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
		Организация,
		НоваяЗапись.СкладКомпании,
		НоваяЗапись.Период
	);
	НоваяЗапись.Номенклатура               = СтрокаТовар.НоменклатураПриход;
	НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатурыПриход;
	НоваяЗапись.СтавкаНДС                  = СтрокаТовар.НоменклатураПриход.СтавкаНДС;
	НоваяЗапись.ХозОперация                = ШапкаДокумента.ХозОперация;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШапкаДокумента, "Проект") Тогда
		НоваяЗапись.Проект                 = ШапкаДокумента.Проект;	
	КонецЕсли;
	
	// Показатели
	НоваяЗапись.Количество     = Показатели.КоличествоПриход;
	НоваяЗапись.Сумма          = Показатели.СуммаПриход;
	НоваяЗапись.СуммаНДС       = Показатели.СуммаНДСПриход;
	НоваяЗапись.СуммаБезНДС    = Показатели.СуммаБезНДСПриход;
	НоваяЗапись.СуммаУпр       = Показатели.СуммаУпрПриход;
	НоваяЗапись.СуммаНДСУПр    = Показатели.СуммаНДСУпрПриход;
	НоваяЗапись.СуммаБезНДСУпр = Показатели.СуммаБезНДСУпрПриход;
	
	ГТДПартийТоваровКомпанииНаборЗаписей = ДокументОбъект.Движения.ГТДПартийТоваровКомпании;
	ГТДПартийТоваровКомпанииНаборЗаписей.ДобавитьЗапись(НоваяЗапись, СтрокаТовар.ГТД);
	
КонецПроцедуры

// Возвращает результат запроса по таблице товаров
Функция ПолучитьТаблицуТоваров(ВидДвижения)
	ПоБазовомуКоличеству = ?(ПоБазовомуКоличеству = Неопределено,Ложь,ПоБазовомуКоличеству);
	ВидДок = ДокументОбъект.Метаданные().Имя;
	ЕстьГТД = ДокументОбъект.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("ГТД") <> Неопределено;
	
	// Для поступления таблицу товаров получаем из документа, 
	// для расхода получаем таблицу из движений по остаткам + из документа получаем партии и ставки НДС.
	ТекстЗапроса="
	|ВЫБРАТЬ
	|	ДокТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,";
	Если ЕстьСтавкаНДС Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|	ДокТовары.СтавкаНДС КАК СтавкаНДС,";
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяРеквизитаДокумент) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ДокТовары." + ИмяРеквизитаДокумент + " КАК Партия,";
	КонецЕсли;
	Если ЕстьГТД Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ДокТовары.ГТД КАК ГТД,";
	КонецЕсли; 
	Если ВидДвижения <> ВидДвиженияНакопления.Расход Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	СУММА(ДокТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ДокТовары.Сумма) КАК Сумма,
		|	СУММА(ДокТовары.СуммаВсего) КАК СуммаВсего,";
		
		Если ЗначениеЗаполнено(РежимДопРасходы) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	СУММА(ДокТовары.Номенклатура.Вес * ДокТовары.Количество) КАК Вес,";		
		КонецЕсли;
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|	СУММА(ДокТовары.Количество" + ?(ПоБазовомуКоличеству,"Базовое","*ДокТовары.Коэффициент") + ") КАК Количество,
	|	ДокТовары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ." + ВидДок + ".Товары КАК ДокТовары
	|ГДЕ
	|	  ДокТовары.Ссылка=&Ссылка
	|	И ДокТовары.Номенклатура.ВидНоменклатуры<>&Услуга И ДокТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО Номенклатура, ХарактеристикаНоменклатуры" + ?(НЕ ЗначениеЗаполнено(ИмяРеквизитаДокумент),"",", " + ИмяРеквизитаДокумент) + ?(ЕстьГТД,",ГТД","") + ?(ЕстьСтавкаНДС,",СтавкаНДС","") + "
	|
	|";
	ЗапросТовары = Новый Запрос(ТекстЗапроса);
	ЗапросТовары.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
	ЗапросТовары.УстановитьПараметр("Услуга",Перечисления.ВидыНоменклатуры.Услуга);
	
	// Если имеем расход, то таблицу товаров надо брать из движений по регистру остатков.
	Если ВидДвижения = ВидДвиженияНакопления.Расход Тогда
		// Если допроведение, то надо таблицу остатков брать запросом, иначе просто выгрузить.
		Если ДокументОбъект.Ссылка <> ШапкаДокумента.Ссылка Тогда
			// допроведение
			ЗапросОстатки = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Номенклатура,
			|	ХарактеристикаНоменклатуры,
			|	СкладКомпании КАК СкладКомпании,
			|	СУММА(Количество) КАК Количество
			|ИЗ
			|	РегистрНакопления.ОстаткиТоваровКомпании
			|ГДЕ
			|	Регистратор = &Ссылка
			|	И ВидДвижения = &ВидДвиженияРасход
			|
			|СГРУППИРОВАТЬ ПО
			|	Номенклатура,
			|	ХарактеристикаНоменклатуры,
			|	СкладКомпании
			|");
			ЗапросОстатки.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
			ЗапросОстатки.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
			ЗапросОстатки.УстановитьПараметр("ПустаяСтавкаНДС", Справочники.СтавкиНДС.ПустаяСсылка());
			ТаблицаТоваров = ЗапросОстатки.Выполнить().Выгрузить();
		Иначе
			// обычное проведение
			ТаблицаТоваров = ДокументОбъект.Движения.ОстаткиТоваровКомпании.Выгрузить();
			// приведем таблицу в нормальный вид
			ТаблицаТоваров.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СкладКомпании,ВидДвижения","Количество");
			
			// удалим строки с видом движения "Приход"
			МассивНайденныхСтрок = ТаблицаТоваров.НайтиСтроки(Новый Структура("ВидДвижения",ВидДвиженияНакопления.Приход));
			Для Сч = 0 По МассивНайденныхСтрок.Количество()-1 Цикл
				ТаблицаТоваров.Удалить(МассивНайденныхСтрок[Сч]);
			КонецЦикла;
		КонецЕсли;
		
		// удалим строки с пустым количеством
		МассивНайденныхСтрок = ТаблицаТоваров.НайтиСтроки(Новый Структура("Количество", 0));
		Для Сч = 0 По МассивНайденныхСтрок.Количество()-1 Цикл
			ТаблицаТоваров.Удалить(МассивНайденныхСтрок[Сч]);
		КонецЦикла;
		
		// если в таблице документа есть СтавкаНДС или Партия, то дополним нашу таблицу
		Если ЗначениеЗаполнено(ИмяРеквизитаДокумент) Тогда
			ТаблицаТоваровДокумента = ЗапросТовары.Выполнить().Выгрузить();
			ТаблицаТоваровДокумента.Сортировать("Номенклатура Возр,ХарактеристикаНоменклатуры Убыв," + ИмяРеквизитаДокумент + " Убыв");
			Для Каждого СтрокаТовар Из ТаблицаТоваровДокумента Цикл
				СтруктураОтбора=Новый Структура("Номенклатура",СтрокаТовар.Номенклатура);
				Если ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) Тогда
					СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры",СтрокаТовар.ХарактеристикаНоменклатуры);
				КонецЕсли;
				МассивНайденныхСтрок=ТаблицаТоваров.НайтиСтроки(СтруктураОтбора);
				Для Сч = 0 По МассивНайденныхСтрок.ВГраница() Цикл
					ТекСтрока = МассивНайденныхСтрок[Сч];
					СтрокаТовар.ХарактеристикаНоменклатуры = ТекСтрока.ХарактеристикаНоменклатуры;
					ТекСтрока.Количество = ТекСтрока.Количество - Мин(ТекСтрока.Количество, СтрокаТовар.Количество);
					Если ТекСтрока.Количество = 0 Тогда
						ТаблицаТоваров.Удалить(ТекСтрока);
					КонецЕсли; 
				КонецЦикла;
			КонецЦикла;
			ТаблицаТоваров=ТаблицаТоваровДокумента;
		КонецЕсли;
		
	Иначе
		// для прихода все просто
		ТаблицаТоваров = ЗапросТовары.Выполнить().Выгрузить();
	КонецЕсли;
	
	Возврат ТаблицаТоваров;
КонецФункции

// Возвращает результат запроса, с таблицей незакрытых партий.
Функция ПолучитьДеревоПартий(ТаблицаТоваров, СведенияОПоставщике = Ложь, ОрганизацияДереваПартий)
	Сторно = ?(Сторно=Неопределено, Ложь, Сторно);
	ДатаСреза = Неопределено;
	Если ГраницаРасчетаОстатков = Неопределено Тогда 
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			ГраницаРасчетаОстатков = Неопределено;
		Иначе
			ГраницаРасчетаОстатков = ШапкаДокумента.МоментВремени;
			ДатаСреза = ГраницаРасчетаОстатков.Дата;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ГраницаРасчетаОстатков) = Тип("Граница") Тогда
		Если ТипЗнч(ГраницаРасчетаОстатков.Значение) = Тип("МоментВремени") Тогда
			ДатаСреза = ГраницаРасчетаОстатков.Значение.Дата;
		Иначе
			ДатаСреза = ГраницаРасчетаОстатков.Значение;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ГраницаРасчетаОстатков) = Тип("МоментВремени") Тогда
		ДатаСреза = ГраницаРасчетаОстатков.Дата;
	Иначе
		ДатаСреза = ГраницаРасчетаОстатков;
	КонецЕсли;
    // Получим значения настроек 
	Если РежимВозврата = Неопределено Тогда
		РежимВозврата = ПраваИНастройкиПользователя.Значение("РежимСписанияПриВозвратеПоставщику",ДокументОбъект);
	КонецЕсли;
	
	// Чтение значения для списания по датам
	СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(СкладКомпании, ОрганизацияДереваПартий, ДатаСреза);
	
	// Получим стратегию учета на складе получателе
	СтратегияСписанияПартийТоваровПоДатамКуда = ПолучитьСтратегиюСписанияПоДатам(СкладКомпанииКуда,
													?(СкладКомпанииКуда = Неопределено, Неопределено, СкладКомпанииКуда.Организация),
													ДатаСреза);
	
	// Чтение значения для списания по статусам
	СтратегияСписанияПартийТоваровПоСтатусам = УчетныеПолитикиСервер.Значение(
		"СтратегияСписанияПартийТоваровПоСтатусам",
		ДокументОбъект.Дата,
		ОрганизацияДереваПартий,
		Истина
	);
	Если СтратегияСписанияПартийТоваровПоСтатусам 
					= Перечисления.СтратегияСписанияПартийТоваровПоСтатусам.СначалаКупленныеПотомПринятые Тогда
		ПорядокСтатусов = "Убыв";
	ИначеЕсли СтратегияСписанияПартийТоваровПоСтатусам 
					= Перечисления.СтратегияСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомКупленные Тогда
		ПорядокСтатусов = "Возр";
	Иначе
		ПорядокСтатусов = "";
	КонецЕсли;
	Если СтратегияСписанияПартийТоваровПоДатам=Перечисления.СтратегияСписанияПартийТоваровПоДатам.ЛИФО Тогда
		ПорядокСписанияПартий = "Убыв"; 
	Иначе
		ПорядокСписанияПартий = "Возр";
	КонецЕсли;

	Запрос = Новый Запрос();
    ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТоваровКомпанииОстатки.СкладКомпании КАК СкладКомпании,
	|	ПартииТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПартииТоваровКомпанииОстатки.СтатусПартии КАК СтатусПартии,
	|	ПартииТоваровКомпанииОстатки.Организация КАК Организация,";
	// Если возврат то в случае разрешенных "расширенных" режимов возврата нам понадобится контрагент в выборке.
	Если (Сторно И РежимВозврата <> Перечисления.РежимыСписанияПриВозврате.ТолькоПоУказаннойПартии) ИЛИ СведенияОПоставщике Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ПартииТоваровКомпанииОстатки.Партия.Контрагент КАК Контрагент,";
		Если СведенияОПоставщике Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ПартииТоваровКомпанииОстатки.Партия.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,";
		КонецЕсли;
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|	ПартииТоваровКомпанииОстатки.Партия КАК Партия,";
	Если (НЕ ПустаяСтрока(ПорядокСтатусов)) И (НЕ Сторно) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА ПартииТоваровКомпанииОстатки.СтатусПартии=&Купленные ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК ПорядокСтатуса,";
		Запрос.УстановитьПараметр("Купленные", Перечисления.СтатусыПартий.ТоварКупленный);
	КонецЕсли;
	// Сформируем фильтр на виртуальную таблицу
	ФильтрНаВиртуальнуюТаблицу = "Номенклатура В (&Номенклатура)
								 |	И (&БезФильтраПоОрганизации
								 |		ИЛИ Организация = &Организация)";	
	Если ЗначениеЗаполнено(СкладКомпании) Тогда
		ФильтрНаВиртуальнуюТаблицу = ФильтрНаВиртуальнуюТаблицу+" И СкладКомпании=&СкладКомпании";
	КонецЕсли;
	Если МассивПартий<>Неопределено И ТипЗнч(МассивПартий) = Тип("Массив") И МассивПартий.Количество()>0 Тогда
		ФильтрНаВиртуальнуюТаблицу = ФильтрНаВиртуальнуюТаблицу + " И Партия В (&Партия)";
	КонецЕсли;
	Если ЗначениеЗаполнено(СтатусПартии) Тогда
		ФильтрНаВиртуальнуюТаблицу = ФильтрНаВиртуальнуюТаблицу + " И СтатусПартии=&СтатусПартии";
	КонецЕсли;
	//
	ТекстЗапроса=ТекстЗапроса+"
	|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.КоличествоОстаток,0) КАК Количество,
	|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.СуммаОстаток,0) КАК Сумма,
	|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.СуммаНДСОстаток,0) КАК СуммаНДС,
	|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.СуммаБезНДСОстаток,0) КАК СуммаБезНДС,
	|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.СуммаУпрОстаток,0) КАК СуммаУпр,
	|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.СуммаНДСУпрОстаток,0) КАК СуммаНДСУпр,
	|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.СуммаБезНДСУпрОстаток,0) КАК СуммаБезНДСУпр
	|	
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании.Остатки(&Момент," + ФильтрНаВиртуальнуюТаблицу+") КАК ПартииТоваровКомпанииОстатки
	|
	|УПОРЯДОЧИТЬ ПО " + ?(Сторно ИЛИ ПустаяСтрока(ПорядокСтатусов), "", "ПорядокСтатуса " + ПорядокСтатусов + ",") + " ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры.Сортировка ВОЗР ,ПартииТоваровКомпанииОстатки.Партия.Дата "+ПорядокСписанияПартий+", ПартииТоваровКомпанииОстатки.Партия "+ПорядокСписанияПартий+"
	|
	|ИТОГИ СУММА(Количество) КАК Количество,
	|	СУММА(Сумма) КАК Сумма,
	|	СУММА(СуммаНДС) КАК СуммаНДС,
	|	СУММА(СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(СуммаУпр) КАК СуммаУпр,
	|	СУММА(СуммаНДСУпр) КАК СуммаНДСУпр,
	|	СУММА(СуммаБезНДСУпр) КАК СуммаБезНДСУпр
	|ПО ПартииТоваровКомпанииОстатки.Номенклатура
	|";
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("Момент", ГраницаРасчетаОстатков);
	Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
	Запрос.УстановитьПараметр("БезФильтраПоОрганизации", ЗапасыТоваров.ФильтрЗапросаПоОрганизации(ГраницаРасчетаОстатков));
	Запрос.УстановитьПараметр("Организация", ОрганизацияДереваПартий);
	Запрос.УстановитьПараметр("Номенклатура", ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Партия", МассивПартий);
	Запрос.УстановитьПараметр("СтатусПартии", СтатусПартии);

	// Обнулим массив партий
	МассивПартий=Неопределено;
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПартииТоваровКомпании");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, ШапкаДокумента.Дата)); 
	ЗначенияБлокировки.Вставить("СкладКомпании", СкладКомпании);
	Если ЗапасыТоваров.ОбособленныйУчетТоваровПоОрганизациям(ГраницаРасчетаОстатков)
		И Не ЗапасыТоваров.РежимКонтроляОстатковНаСкладахПоКомпании() Тогда
		ЗначенияБлокировки.Вставить("Организация", ОрганизацияДереваПартий);
	КонецЕсли;
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", ТаблицаТоваров);
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
КонецФункции

// Формирует движения по сторнированию прихода/расхода
// ВидДвижения - ВидДвиженияРегистраНакопления. Если Приход, тогда у нас возврат от поставщика иначе - от покупателя
// Возвращает Истина - все хорошо, Ложь - чего-то не так.
Функция ВозвратТоваров(ВидДвижения)
	
	ВсеОК = Истина;
	
	КонтрольЗаполненияОрганизации();
	
	СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(СкладКомпании, Организация, ?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, ШапкаДокумента.МоментВремени.Дата));
	
	Если СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.ЛИФО Тогда
		ПорядокСписанияПартий = "Возр";
	Иначе
		ПорядокСписанияПартий = "Убыв";
	КонецЕсли;
	
	ПартияТоваровОтрицательныхОстатков = Константы.ПартияТоваровОтрицательныхОстатков.Получить();
	Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		// Возврат поставщику.
		
		// Получим режим возврата.
		Если РежимВозврата = Неопределено Тогда 
			РежимВозврата = ПраваИНастройкиПользователя.Значение("РежимСписанияПриВозвратеПоставщику", ДокументОбъект); 
		КонецЕсли;
		
		// Получим таблицу товаров
		Если ТипЗнч(РезультатЗапросаПоТоварам) = Тип("РезультатЗапроса") Тогда
			ТаблицаТовары = РезультатЗапросаПоТоварам.Выгрузить();
		Иначе
			ТаблицаТовары = РезультатЗапросаПоТоварам;
		КонецЕсли;
		
		// Получим хитрую таблицу партий.
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
		|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПартииТоваровКомпании.Партия КАК Партия,
		|	ПартииТоваровКомпании.Организация КАК Организация,
		|	ПартииТоваровКомпании.Период КАК ДатаПоступления,
		|	ПартииТоваровКомпании.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ
		|	ПартииТоваровКомпании
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
		|ГДЕ
		|	ПартииТоваровКомпании.ВидДвижения = &ВидДвиженияПриход
		|	И ПартииТоваровКомпании.СтатусПартии = &СтатусПартии
		|	И ПартииТоваровКомпании.Партия        = ПартииТоваровКомпании.Регистратор
		|	И ПартииТоваровКомпании.Номенклатура В (&Номенклатура)
		|	И ПартииТоваровКомпании.ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПартииТоваровКомпанииОстатки.Партия ССЫЛКА Документ.ПоступлениеТоваров И ВЫРАЗИТЬ(ПартииТоваровКомпанииОстатки.Партия КАК Документ.ПоступлениеТоваров) В (&Партии) ТОГДА
		|			0
		|		КОГДА ПартииТоваровКомпанииОстатки.Партия ССЫЛКА Документ.ПоступлениеТоваров И ВЫРАЗИТЬ(ПартииТоваровКомпанииОстатки.Партия КАК Документ.ПоступлениеТоваров).Контрагент=&Контрагент ТОГДА
		|			1
		|		КОГДА ПартииТоваровКомпанииОстатки.Партия ССЫЛКА Документ.ВводОстатковТоваров И ВЫРАЗИТЬ(ПартииТоваровКомпанииОстатки.Партия КАК Документ.ВводОстатковТоваров) В (&Партии) ТОГДА
		|			0
		|		КОГДА ПартииТоваровКомпанииОстатки.Партия ССЫЛКА Документ.ВводОстатковТоваров И ВЫРАЗИТЬ(ПартииТоваровКомпанииОстатки.Партия КАК Документ.ВводОстатковТоваров).Контрагент=&Контрагент ТОГДА
		|			1
		|		КОГДА ПартииТоваровКомпанииОстатки.Партия ССЫЛКА Документ.АвансовыйОтчет И ВЫРАЗИТЬ(ПартииТоваровКомпанииОстатки.Партия КАК Документ.АвансовыйОтчет) В (&Партии) ТОГДА
		|			0
		|		КОГДА ПартииТоваровКомпанииОстатки.Партия ССЫЛКА Документ.АвансовыйОтчет И ВЫРАЗИТЬ(ПартииТоваровКомпанииОстатки.Партия КАК Документ.АвансовыйОтчет).Контрагент=&Контрагент ТОГДА
		|			1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ПорядокСписанияПартий,
		|	ПартииТоваровКомпанииОстатки.Номенклатура,
		|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
		|	ПартииТоваровКомпанииОстатки.Партия КАК Партия,
		|	ПартииТоваровКомпанииОстатки.Организация КАК Организация,
		|	ПартииТоваровКомпанииОстатки.СтатусПартии КАК СтатусПартии,
		|	ПартииТоваровКомпании.СтавкаНДС КАК СтавкаНДС,
		|	ПартииТоваровКомпании.ДатаПоступления КАК ДатаПоступления,
		|	ПартииТоваровКомпанииОстатки.КоличествоОстаток КАК Количество,
		|	ПартииТоваровКомпанииОстатки.СуммаОстаток КАК Сумма,
		|	ПартииТоваровКомпанииОстатки.СуммаНДСОстаток КАК СуммаНДС,
		|	ПартииТоваровКомпанииОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	ПартииТоваровКомпанииОстатки.СуммаУпрОстаток КАК СуммаУпр,
		|	ПартииТоваровКомпанииОстатки.СуммаНДСУпрОстаток КАК СуммаНДСУпр,
		|	ПартииТоваровКомпанииОстатки.СуммаБезНДСУпрОстаток КАК СуммаБезНДСУпр
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании.Остатки(
		|		&Момент,
		|		СкладКомпании=&СкладКомпании
		|			И (&БезФильтраПоОрганизации
		|				ИЛИ Организация = &Организация)
		|			И Номенклатура В (&Номенклатура)
		|			И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)
		|			И СтатусПартии=&СтатусПартии) КАК ПартииТоваровКомпанииОстатки
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ПартииТоваровКомпании КАК ПартииТоваровКомпании
		|ПО
		|	ПартииТоваровКомпании.Номенклатура                = ПартииТоваровКомпанииОстатки.Номенклатура
		|	И ПартииТоваровКомпании.ХарактеристикаНоменклатуры  = ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры
		|	И ПартииТоваровКомпании.Партия                      = ПартииТоваровКомпанииОстатки.Партия
		|";
		
		Если РежимВозврата = Перечисления.РежимыСписанияПриВозврате.ТолькоПоУказаннойПартии Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	ВЫБОР
			|		КОГДА ПартииТоваровКомпанииОстатки.Партия ССЫЛКА Документ.ПоступлениеТоваров ТОГДА
			|			ВЫРАЗИТЬ(ПартииТоваровКомпанииОстатки.Партия КАК Документ.ПоступлениеТоваров) В (&Партии)
			|		КОГДА ПартииТоваровКомпанииОстатки.Партия ССЫЛКА Документ.АвансовыйОтчет ТОГДА
			|			ВЫРАЗИТЬ(ПартииТоваровКомпанииОстатки.Партия КАК Документ.АвансовыйОтчет) В (&Партии)
			|		КОГДА ПартииТоваровКомпанииОстатки.Партия ССЫЛКА Документ.ВводОстатковТоваров ТОГДА
			|			ВЫРАЗИТЬ(ПартииТоваровКомпанииОстатки.Партия КАК Документ.ВводОстатковТоваров) В (&Партии)
			|		ИНАЧЕ
			|			ЛОЖЬ
			|	КОНЕЦ";
		ИначеЕсли РежимВозврата = Перечисления.РежимыСписанияПриВозврате.ПоВсемПартиямКонтрагента Тогда
			ТекстЗапроса = ТекстЗапроса+"
			|ГДЕ
			|	ВЫБОР
			|		КОГДА ПартииТоваровКомпанииОстатки.Партия ССЫЛКА Документ.ПоступлениеТоваров ТОГДА
			|			ВЫРАЗИТЬ(ПартииТоваровКомпанииОстатки.Партия КАК Документ.ПоступлениеТоваров).Контрагент  = &Контрагент
			|		КОГДА ПартииТоваровКомпанииОстатки.Партия ССЫЛКА Документ.АвансовыйОтчет ТОГДА
			|			ВЫРАЗИТЬ(ПартииТоваровКомпанииОстатки.Партия КАК Документ.АвансовыйОтчет).Контрагент      = &Контрагент
			|		КОГДА ПартииТоваровКомпанииОстатки.Партия ССЫЛКА Документ.ВводОстатковТоваров ТОГДА
			|			ВЫРАЗИТЬ(ПартииТоваровКомпанииОстатки.Партия КАК Документ.ВводОстатковТоваров).Контрагент = &Контрагент
			|		ИНАЧЕ
			|			ЛОЖЬ
			|	КОНЕЦ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	ПартииТоваровКомпанииОстатки.Номенклатура,
		|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
		|	ПорядокСписанияПартий ВОЗР,
		|	ПартииТоваровКомпании.ДатаПоступления " + ПорядокСписанияПартий + ",
		|	ПартииТоваровКомпанииОстатки.Партия " + ПорядокСписанияПартий + "
		|";
		
		МоментСреза = ?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, ШапкаДокумента.МоментВремени);
		
		
		
		Запрос=Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Момент",                     МоментСреза);
		Запрос.УстановитьПараметр("СкладКомпании",              СкладКомпании);
		Запрос.УстановитьПараметр("БезФильтраПоОрганизации",	ЗапасыТоваров.ФильтрЗапросаПоОрганизации(МоментСреза));
		Запрос.УстановитьПараметр("Организация",				Организация);
		Запрос.УстановитьПараметр("Номенклатура",               ТаблицаТовары.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ТаблицаТовары.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
		Запрос.УстановитьПараметр("СтатусПартии",               СтатусПартии);
		Запрос.УстановитьПараметр("Партии",                     ТаблицаТовары.ВыгрузитьКолонку("Партия"));
		Запрос.УстановитьПараметр("Контрагент",                 ШапкаДокумента.Контрагент);
		Запрос.УстановитьПараметр("ВидДвиженияПриход",          ВидДвиженияНакопления.Приход);
		
		// Наложим блокировку на считываемые данные
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПартииТоваровКомпании");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, ШапкаДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("СкладКомпании", СкладКомпании);
		Если ЗапасыТоваров.ОбособленныйУчетТоваровПоОрганизациям(МоментСреза)
			И Не ЗапасыТоваров.РежимКонтроляОстатковНаСкладахПоКомпании() Тогда
			ЗначенияБлокировки.Вставить("Организация", Организация);
		КонецЕсли;
		ЗначенияБлокировки.Вставить("СтатусПартии",  СтатусПартии); 
		СтруктураПараметровБлокировки.Вставить("ИсточникДанных", ТаблицаТовары);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
		
		ТаблицаПартий = Запрос.Выполнить().Выгрузить();
		
		// Структура отбора
		СтруктураОтбора = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
		
		ИмяКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах().Имя;
		
		// Возвращаем
		Для Каждого СтрокаТовар Из ТаблицаТовары Цикл
			НадоВернуть=СтрокаТовар.Количество;
			// Ищем поступившие партии
			СтруктураОтбора.Номенклатура = СтрокаТовар.Номенклатура;
			СтруктураОтбора.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатуры;
			МассивНайденныхСтрок = ТаблицаПартий.НайтиСтроки(СтруктураОтбора);
			// Инициализируем переменные для расчета усредненной цены списанных партий
			ОбщееКоличество = 0;
			ОбщаяСумма = 0;
			ОбщаяСуммаНДС = 0;
			ОбщаяСуммаБезНДС = 0;
			ОбщаяСуммаУпр = 0;
			ОбщаяСуммаНДСУпр = 0;
			ОбщаяСуммаБезНДСУпр = 0;
			ЕстьПартииТоваров = Ложь; 
			Для Сч = 0 По МассивНайденныхСтрок.ВГраница() Цикл
				ТекСтрока = МассивНайденныхСтрок[Сч];
				Если ТекСтрока.Количество = 0 Тогда 
					Продолжить; 
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТовар.Партия) И СтрокаТовар.Партия <> ТекСтрока.Партия Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьПартииТоваров = Истина; // Если есть партия с которой производим списание, значит и цены будем брать из списаний
				
				Если ТекСтрока.Количество<0 Тогда
					// Запомним удельные значения списания для отрицательной партии товаров
					ОбщееКоличество		= ОбщееКоличество + ТекСтрока.Количество;
					ОбщаяСумма			= ОбщаяСумма + Окр(ТекСтрока.Сумма, 2);
					ОбщаяСуммаНДС		= ОбщаяСуммаНДС + Окр(ТекСтрока.СуммаНДС, 2);
					ОбщаяСуммаБезНДС	= ОбщаяСуммаБезНДС + Окр(ТекСтрока.СуммаБезНДС, 2);
					ОбщаяСуммаУпр		= ОбщаяСуммаУпр + Окр(ТекСтрока.СуммаУпр, 2);
					ОбщаяСуммаНДСУпр	= ОбщаяСуммаНДСУпр + Окр(ТекСтрока.СуммаНДСУпр, 2);
					ОбщаяСуммаБезНДСУпр	= ОбщаяСуммаБезНДСУпр + Окр(ТекСтрока.СуммаБезНДСУпр, 2);
					Продолжить;
				КонецЕсли;
				
				НоваяЗапись=Добавить();
				НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
				НоваяЗапись.Период                     = ШапкаДокумента.Дата;
				НоваяЗапись.Регистратор                = ШапкаДокумента.Ссылка;
				Если СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя Тогда
					Партия = ПартияТоваровОтрицательныхОстатков;
				Иначе
					Партия = ТекСтрока.Партия;
				КонецЕсли;
				НоваяЗапись.Партия                     = Партия;
				НоваяЗапись.СтатусПартии               = СтатусПартии;
				НоваяЗапись.СкладКомпании              = СкладКомпании;
				НоваяЗапись.Организация                = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
					Организация,
					НоваяЗапись.СкладКомпании,
					НоваяЗапись.Период,
					ТекСтрока.Организация
				);
				НоваяЗапись.Номенклатура               = ТекСтрока.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры = ТекСтрока.ХарактеристикаНоменклатуры;
				НоваяЗапись.ХозОперация                = ШапкаДокумента.ХозОперация;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШапкаДокумента, "Проект") Тогда
					НоваяЗапись.Проект                 = ШапкаДокумента.Проект;	
				КонецЕсли;
				
				НоваяЗапись.СтавкаНДС                  = ТекСтрока.СтавкаНДС;
				
				// Возвращаем
				Если ТекСтрока.Количество > 0 Тогда
					НоваяЗапись.Количество = -Мин(НадоВернуть, ТекСтрока.Количество);
					НоваяЗапись.Сумма = Окр(-?(ТекСтрока.Количество < НадоВернуть, ТекСтрока.Сумма, 
						ТекСтрока.Сумма / ТекСтрока.Количество * НадоВернуть), 2);
					НоваяЗапись.СуммаНДС = Окр(-?(ТекСтрока.Количество < НадоВернуть, ТекСтрока.СуммаНДС, 
						ТекСтрока.СуммаНДС / ТекСтрока.Количество * НадоВернуть), 2);
					НоваяЗапись.СуммаБезНДС = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
					НоваяЗапись.СуммаУпр = Окр(-?(ТекСтрока.Количество < НадоВернуть, ТекСтрока.СуммаУпр, 
						ТекСтрока.СуммаУпр / ТекСтрока.Количество * НадоВернуть), 2);
					НоваяЗапись.СуммаНДСУпр = Окр(-?(ТекСтрока.Количество < НадоВернуть, ТекСтрока.СуммаНДСУпр, 
						ТекСтрока.СуммаНДСУпр / ТекСтрока.Количество * НадоВернуть), 2);
					НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
					
					// Уменьшим сумму партии для расчета
					ТекСтрока.Сумма          = ТекСтрока.Сумма + НоваяЗапись.Сумма;
					ТекСтрока.СуммаНДС       = ТекСтрока.СуммаНДС + НоваяЗапись.СуммаНДС;
					ТекСтрока.СуммаБезНДС    = ТекСтрока.СуммаБезНДС + НоваяЗапись.СуммаБезНДС;
					ТекСтрока.СуммаУпр       = ТекСтрока.СуммаУпр + НоваяЗапись.СуммаУпр;
					ТекСтрока.СуммаНДСУпр    = ТекСтрока.СуммаНДСУпр + НоваяЗапись.СуммаНДСУпр;
					ТекСтрока.СуммаБезНДСУпр = ТекСтрока.СуммаБезНДСУпр + НоваяЗапись.СуммаБезНДСУпр;
				ИначеЕсли   ТекСтрока.Количество < 0 Тогда // В этом случае вернем все, что есть в партии
					НоваяЗапись.Количество = -ТекСтрока.Количество;
					НоваяЗапись.Сумма = Окр(-ТекСтрока.Сумма, 2);
					НоваяЗапись.СуммаНДС = Окр(-ТекСтрока.СуммаНДС, 2);
					НоваяЗапись.СуммаБезНДС = Окр(-ТекСтрока.СуммаБезНДС, 2);
					НоваяЗапись.СуммаУпр = Окр(-ТекСтрока.СуммаУпр, 2);
					НоваяЗапись.СуммаНДСУпр = Окр(-ТекСтрока.СуммаНДСУпр, 2);
					НоваяЗапись.СуммаБезНДСУпр = Окр(-ТекСтрока.СуммаБезНДСУпр, 2);
				КонецЕсли;
				
				// Запомним удельные значения списания для отрицательной партии товаров
				ОбщееКоличество = ОбщееКоличество + НоваяЗапись.Количество;
				ОбщаяСумма = ОбщаяСумма + НоваяЗапись.Сумма;
				ОбщаяСуммаНДС = ОбщаяСуммаНДС + НоваяЗапись.СуммаНДС;
				ОбщаяСуммаБезНДС = ОбщаяСуммаБезНДС + НоваяЗапись.СуммаБезНДС;
				ОбщаяСуммаУпр = ОбщаяСуммаУпр + НоваяЗапись.СуммаУпр;
				ОбщаяСуммаНДСУпр = ОбщаяСуммаНДСУпр + НоваяЗапись.СуммаНДСУпр;
				ОбщаяСуммаБезНДСУпр = ОбщаяСуммаБезНДСУпр + НоваяЗапись.СуммаБезНДСУпр;
				
				// Удалим ненужные строки
				ТекСтрока.Количество = ТекСтрока.Количество - (-НоваяЗапись.Количество);
				Если ТекСтрока.Количество = 0 Тогда
					ТаблицаПартий.Удалить(ТекСтрока);
				КонецЕсли; 
				
				// Уменьшаем количество которое надо списать
				НадоВернуть = НадоВернуть - (-НоваяЗапись.Количество);
				Если НадоВернуть <= 0 Тогда 
					Прервать; 
				КонецЕсли;
			КонецЦикла;
			
			// Проверим чего осталось
			Если НадоВернуть > 0 И ОтрицательныеОстаткиРазрешены  Тогда
				НоваяЗапись = Добавить();
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяЗапись.Период = ШапкаДокумента.Дата;
				НоваяЗапись.Регистратор = ШапкаДокумента.Ссылка;
				НоваяЗапись.Партия = ПартияТоваровОтрицательныхОстатков;
				НоваяЗапись.СтатусПартии = СтатусПартии;
				НоваяЗапись.СкладКомпании = СкладКомпании;
				НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
					Организация,
					НоваяЗапись.СкладКомпании,
					НоваяЗапись.Период
				);
				НоваяЗапись.Номенклатура = СтрокаТовар.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатуры;
				// Определяемся с хоз. операцией
				НоваяЗапись.ХозОперация = ШапкаДокумента.ХозОперация;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШапкаДокумента, "Проект") Тогда
					НоваяЗапись.Проект = ШапкаДокумента.Проект;	
				КонецЕсли;
				
				НоваяЗапись.Количество = -НадоВернуть;
				
				// Теперь попробуем определиться с суммой списания
				Если ЕстьПартииТоваров Тогда
					ЦенаПоследнейПартии = ОбщаяСумма / ОбщееКоличество;
					УдельныйНДСПоследнейПартии = ОбщаяСуммаНДС / ОбщееКоличество;
					ЦенаПоследнейПартииБезНДС = ОбщаяСуммаБезНДС / ОбщееКоличество;
					ЦенаУпрПоследнейПартии = ОбщаяСуммаУпр / ОбщееКоличество;
					УдельныйНДСУпрПоследнейПартии = ОбщаяСуммаНДСУпр / ОбщееКоличество;
					ЦенаПоследнейПартииБезНДСУпр = ОбщаяСуммаБезНДСУпр / ОбщееКоличество;
				Иначе // В этом случае пробуем достать оценку из регистра сведений Цены по типу цен Нормативная цена
					ТипЦен = Справочники.ТипыЦен.НормативнаяЦена;
					// Получим цену в валюте управленческого учета компании
					ЦенаПоследнейПартии    = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, СтрокаТовар.Номенклатура, ШапкаДокумента.МоментВремени,, Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(),, СтрокаТовар.ХарактеристикаНоменклатуры,, СкладКомпании.ПодразделениеКомпании);
					ЦенаУпрПоследнейПартии = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, СтрокаТовар.Номенклатура, ШапкаДокумента.МоментВремени,, Константы.ВалютаУправленческогоУчетаКомпании.Получить(),, СтрокаТовар.ХарактеристикаНоменклатуры,, СкладКомпании.ПодразделениеКомпании);
					// Розничную оценку берем по типу цен основной тип цен отгрузки
					ТипЦен = Справочники.ТипыЦен.ОсновнойТипЦенПродажи;
					ЦенаРозничнаяПоследнейПартии = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, СтрокаТовар.Номенклатура, ШапкаДокумента.МоментВремени,, Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(),, СтрокаТовар.ХарактеристикаНоменклатуры,, СкладКомпании.ПодразделениеКомпании);
					// Для расчета НДС сначала определимся со ставкойПодразделениеКомпании
					СтавкаНДС = СтрокаТовар.Номенклатура.СтавкаНДС;
					УдельныйНДСПоследнейПартии = (ЦенаПоследнейПартии * СтавкаНДС.Ставка) / 100;
					УдельныйНДСУпрПоследнейПартии = (ЦенаУпрПоследнейПартии * СтавкаНДС.Ставка) / 100;
					ЦенаПоследнейПартииБезНДС = ЦенаПоследнейПартии - УдельныйНДСПоследнейПартии;
					ЦенаПоследнейПартииБезНДСУпр = ЦенаУпрПоследнейПартии - УдельныйНДСУпрПоследнейПартии;
				КонецЕсли;
				
				НоваяЗапись.Сумма = Окр(ЦенаПоследнейПартии*НадоВернуть, 2);
				НоваяЗапись.СуммаНДС = Окр(УдельныйНДСПоследнейПартии*НадоВернуть, 2);
				НоваяЗапись.СуммаБезНДС = НоваяЗапись.Сумма-НоваяЗапись.СуммаНДС;
				НоваяЗапись.СуммаУпр = Окр(ЦенаУпрПоследнейПартии*НадоВернуть, 2);
				НоваяЗапись.СуммаНДСУпр = Окр(УдельныйНДСУпрПоследнейПартии*НадоВернуть, 2);
				НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр-НоваяЗапись.СуммаНДСУпр;
				
			ИначеЕсли НадоВернуть > 0 Тогда
				ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТовар.Номенклатура);
				// Не удалось вернуть товар
				Если НЕ ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" не удалось вернуть: %3'"),
							ЗначениеКолонкиКода,
							СокрЛП(СтрокаТовар.Номенклатура),
							Формат(НадоВернуть,"ЧДЦ=3; ЧН=0,00")
						),
						ДокументОбъект,,, Истина
					);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"" не удалось вернуть: %4'"),
							ЗначениеКолонкиКода,
							СокрЛП(СтрокаТовар.Номенклатура),
							СокрЛП(СтрокаТовар.ХарактеристикаНоменклатуры),
							Формат(НадоВернуть,"ЧДЦ=3; ЧН=0,00")
						),
						ДокументОбъект,,, Истина
					);
				КонецЕсли; 
				
				ВсеОК=Ложь;
				
			КонецЕсли;
		КонецЦикла;
		
		ГТДПартийТоваровКомпанииНаборЗаписей = ДокументОбъект.Движения.ГТДПартийТоваровКомпании;
		ГТДПартийТоваровКомпанииНаборЗаписей.ДокументОбъект = ДокументОбъект;
		ГТДПартийТоваровКомпанииНаборЗаписей.ШапкаДокумента = ШапкаДокумента;
		ГТДПартийТоваровКомпанииНаборЗаписей.ГраницаРасчетаОстатков = ГраницаРасчетаОстатков;
		ГТДПартийТоваровКомпанииНаборЗаписей.ТаблицаПартий = Выгрузить();
		ГТДПартийТоваровКомпанииНаборЗаписей.ТаблицаТовары = ТаблицаТовары;
		ГТДПартийТоваровКомпанииНаборЗаписей.СкладКомпании = СкладКомпании;
		ГТДПартийТоваровКомпанииНаборЗаписей.МассивПартий = Выгрузить().ВыгрузитьКолонку("Партия");
		ГТДПартийТоваровКомпанииНаборЗаписей.РежимПроведения = РежимПроведения;
		ВсеОК = ГТДПартийТоваровКомпанииНаборЗаписей.Расход() И ВсеОК;
		
	Иначе
		// ВОЗВРАТ ОТ ПОКУПАТЕЛЯ
		
		ПорядокСтатусов       = "";
		ФильтрНаТаблицу       = "";
		Если ЗначениеЗаполнено(СтатусПартии) Тогда
			ФильтрНаТаблицу  = "
			|	И ТаблицаТоваров.СтатусПартии = &СтатусПартии";
		Иначе
			СтратегияСписанияПартийТоваровПоСтатусам = УчетныеПолитикиСервер.Значение(
				"СтратегияСписанияПартийТоваровПоСтатусам",
				ДокументОбъект.Дата,
				ДокументОбъект.Организация,
				Истина
			);
			Если СтратегияСписанияПартийТоваровПоСтатусам=Перечисления.СтратегияСписанияПартийТоваровПоСтатусам.СначалаКупленныеПотомПринятые Тогда
				ПорядокСтатусов = "Возр";
			ИначеЕсли СтратегияСписанияПартийТоваровПоСтатусам=Перечисления.СтратегияСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомКупленные Тогда
				ПорядокСтатусов = "Убыв";
			Иначе
				ПорядокСтатусов = "";
			КонецЕсли;
		КонецЕсли;
		
		ДанныеДокумента = ?(ТипЗнч(ШапкаДокумента.Ссылка) = Тип("ДокументСсылка.ЗакрытиеСмены"), "ЗакрытиеСмены", "ВозвратОтПокупателя.Товары");
		
		Расход = 0;
		Расход = 0;
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВозвратОтПокупателяТовары." + ИмяРеквизитаДокумент + " КАК Регистратор
		|ПОМЕСТИТЬ
		|	ВозвратОтПокупателяТовары
		|ИЗ
		|	Документ." + ДанныеДокумента + " КАК ВозвратОтПокупателяТовары
		|ГДЕ
		|	ВозвратОтПокупателяТовары.Ссылка = &Ссылка
		|;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТаблицаТоваров.ДокументПродажи КАК ДокументПродажи,
		|	ТаблицаТоваров.Партия КАК Партия,
		|	ТаблицаТоваров.Партия.Дата КАК ПартияДата" + ?(ПустаяСтрока(ПорядокСтатусов), "", ",
		|	ВЫБОР
		|		КОГДА ТаблицаТоваров.СтатусПартии = &Купленные ТОГДА
		|			1
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ КАК ПорядокСтатуса") + ",
		|	ТаблицаТоваров.СтатусПартии КАК СтатусПартии,
		|	ТаблицаТоваров.ГТД КАК ГТД,
		|	СУММА(ТаблицаТоваров.Количество) КАК Количество,
		|	СУММА(ТаблицаТоваров.Себестоимость) КАК Сумма,
		|	СУММА(ТаблицаТоваров.СуммаНДСВходящий) КАК СуммаНДС,
		|	СУММА(ТаблицаТоваров.СебестоимостьБезНДС) КАК СуммаБезНДС,
		|	СУММА(ТаблицаТоваров.СебестоимостьУпр) КАК СуммаУпр,
		|	СУММА(ТаблицаТоваров.СуммаНДСВходящийУпр) КАК СуммаНДСУпр,
		|	СУММА(ТаблицаТоваров.СебестоимостьБезНДСУпр) КАК СуммаБезНДСУпр
		|ПОМЕСТИТЬ
		|	ИтоговаяТаблица
		|ИЗ
		|	РегистрНакопления.Продажи КАК ТаблицаТоваров
		|ГДЕ
		|	ТаблицаТоваров.Период <= &НаМомент " + ФильтрНаТаблицу + "
		|	И ТаблицаТоваров.Номенклатура В (&Номенклатура)
		|	И (НЕ ТаблицаТоваров.Регистратор = &Ссылка)
		|	И ТаблицаТоваров.ДокументПродажи В 
		|	(ВЫБРАТЬ
		|		ВозвратОтПокупателяТовары.Регистратор
		|	ИЗ
		|		ВозвратОтПокупателяТовары КАК ВозвратОтПокупателяТовары" + ?(ИмяРеквизитаДокумент = "Ссылка", "", "
		|	ГДЕ
		|			ТИПЗНАЧЕНИЯ(ВозвратОтПокупателяТовары.Регистратор) В (
		|				ТИП(Документ.РеализацияТоваров),
		|				ТИП(Документ.ЗакрытиеСмены),
		|				ТИП(Документ.Инвентаризация),
		|				ТИП(Документ.ЗаказНаряд))") + ")
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.ХарактеристикаНоменклатуры,
		|	ТаблицаТоваров.ДокументПродажи,
		|	ТаблицаТоваров.Партия,
		|	ТаблицаТоваров.СтатусПартии,
		|	ТаблицаТоваров.ГТД
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаТоваров.Количество) <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.ХарактеристикаНоменклатуры,
		|	ТаблицаТоваров.ДокументПередачи,
		|	ТаблицаТоваров.Партия,
		|	ТаблицаТоваров.Партия.Дата" + ?(ПустаяСтрока(ПорядокСтатусов), "", ",
		|	1") + ",
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный),
		|	ТаблицаТоваров.ГТД,
		|	СУММА(ВЫБОР
		|		КОГДА ТаблицаТоваров.ВидДвижения = &ВидДвижения ТОГДА
		|			-ТаблицаТоваров.Количество
		|		ИНАЧЕ
		|			ТаблицаТоваров.Количество
		|	КОНЕЦ),
		
		|	СУММА(ВЫБОР
		|		КОГДА ТаблицаТоваров.ВидДвижения = &ВидДвижения ТОГДА
		|			-ТаблицаТоваров.СуммаСебестоимостиРегл
		|		ИНАЧЕ
		|			ТаблицаТоваров.СуммаСебестоимостиРегл
		|	КОНЕЦ),
		
		|	СУММА(ВЫБОР
		|		КОГДА ТаблицаТоваров.ВидДвижения = &ВидДвижения ТОГДА
		|			-ТаблицаТоваров.СуммаСебестоимостиНДСРегл
		|		ИНАЧЕ
		|			ТаблицаТоваров.СуммаСебестоимостиНДСРегл
		|	КОНЕЦ),
		
		|	СУММА(ВЫБОР
		|		КОГДА ТаблицаТоваров.ВидДвижения = &ВидДвижения ТОГДА
		|			-ТаблицаТоваров.СуммаСебестоимостиБезНДСРегл
		|		ИНАЧЕ
		|			ТаблицаТоваров.СуммаСебестоимостиБезНДСРегл
		|	КОНЕЦ),
		
		|	СУММА(ВЫБОР
		|		КОГДА ТаблицаТоваров.ВидДвижения = &ВидДвижения ТОГДА
		|			-ТаблицаТоваров.СуммаСебестоимостиУпр
		|		ИНАЧЕ
		|			ТаблицаТоваров.СуммаСебестоимостиУпр
		|	КОНЕЦ),
		
		|	СУММА(ВЫБОР
		|		КОГДА ТаблицаТоваров.ВидДвижения = &ВидДвижения ТОГДА
		|			-ТаблицаТоваров.СуммаСебестоимостиНДСУпр
		|		ИНАЧЕ
		|			ТаблицаТоваров.СуммаСебестоимостиНДСУпр
		|	КОНЕЦ),
		
		|	СУММА(ВЫБОР
		|		КОГДА ТаблицаТоваров.ВидДвижения = &ВидДвижения ТОГДА
		|			-ТаблицаТоваров.СуммаСебестоимостиБезНДСУпр
		|		ИНАЧЕ
		|			ТаблицаТоваров.СуммаСебестоимостиБезНДСУпр
		|	КОНЕЦ)
		
		|ИЗ
		|	РегистрНакопления.ПартииТоваровОтданные КАК ТаблицаТоваров
		|ГДЕ
		|	ТаблицаТоваров.Период <= &НаМомент
		|	И ТаблицаТоваров.ВидДвижения <> &ВидДвижения " + ФильтрНаТаблицу + "
		|	И ТаблицаТоваров.Номенклатура В (&Номенклатура)
		|	И (НЕ ТаблицаТоваров.Регистратор = &Ссылка)
		|	И ТаблицаТоваров.ДокументПередачи В 
		|	(ВЫБРАТЬ
		|		ВозвратОтПокупателяТовары.Регистратор
		|	ИЗ
		|		ВозвратОтПокупателяТовары КАК ВозвратОтПокупателяТовары)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.ХарактеристикаНоменклатуры,
		|	ТаблицаТоваров.ДокументПередачи,
		|	ТаблицаТоваров.Партия,
		|	ТаблицаТоваров.ГТД
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|		КОГДА ТаблицаТоваров.ВидДвижения = &ВидДвижения ТОГДА
		|			-ТаблицаТоваров.Количество
		|		ИНАЧЕ
		|			ТаблицаТоваров.Количество
		|	КОНЕЦ) <> 0
		|" + ?(Не (ДанныеДокумента = "ВозвратОтПокупателя.Товары" И ИмяРеквизитаДокумент = "ДокументПродажи"), "", "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.ХарактеристикаНоменклатуры,
		|	ТаблицаТоваров.ЗаказНаряд,
		|	ТаблицаТоваров.Партия,
		|	ТаблицаТоваров.Партия.Дата" + ?(ПустаяСтрока(ПорядокСтатусов), "", ",
		|	ВЫБОР
		|		КОГДА ТаблицаТоваров.СтатусПартии = &Купленные ТОГДА
		|			1
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ") + ",
		|	ТаблицаТоваров.СтатусПартии,
		|	ТаблицаТоваров.ГТД,
		|	СУММА(ТаблицаТоваров.Количество),
		|	СУММА(ТаблицаТоваров.Сумма),
		|	СУММА(ТаблицаТоваров.СуммаНДС),
		|	СУММА(ТаблицаТоваров.СуммаБезНДС),
		|	СУММА(ТаблицаТоваров.СуммаУпр),
		|	СУММА(ТаблицаТоваров.СуммаНДСУпр),
		|	СУММА(ТаблицаТоваров.СуммаБезНДСУпр)
		|ИЗ
		|	РегистрНакопления.ТоварыВПроизводстве КАК ТаблицаТоваров
		|ГДЕ
		|	ТаблицаТоваров.Период <= &НаМомент " + ФильтрНаТаблицу + "
		|	И ТаблицаТоваров.Номенклатура В (&Номенклатура)
		|	И ТаблицаТоваров.Регистратор В 
		|	(ВЫБРАТЬ
		|		ВозвратОтПокупателяТовары.Регистратор
		|	ИЗ
		|		ВозвратОтПокупателяТовары КАК ВозвратОтПокупателяТовары
		|	ГДЕ
		|			ТИПЗНАЧЕНИЯ(ВозвратОтПокупателяТовары.Регистратор) = ТИП(Документ.ЗаказНаряд)
		|			И ВЫРАЗИТЬ(ВозвратОтПокупателяТовары.Регистратор КАК Документ.ЗаказНаряд).ВидРемонта.ТипРемонта <> ЗНАЧЕНИЕ(Перечисление.ТипыРемонта.Платный))
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.ХарактеристикаНоменклатуры,
		|	ТаблицаТоваров.ЗаказНаряд,
		|	ТаблицаТоваров.Партия,
		|	ТаблицаТоваров.СтатусПартии,
		|	ТаблицаТоваров.ГТД
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаТоваров.Количество) <> 0") + "
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТаблицаТоваров.Партия КАК Партия,
		|	ТаблицаТоваров.Организация КАК Организация
		|ПОМЕСТИТЬ
		|	ПартииТоваровКомпании
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании КАК ТаблицаТоваров
		|ГДЕ
		|	ТаблицаТоваров.Период <= &НаМомент " + ФильтрНаТаблицу + "
		|	И ТаблицаТоваров.Номенклатура В (&Номенклатура)
		|	И (НЕ ТаблицаТоваров.Регистратор = &Ссылка)
		|	И ТаблицаТоваров.Регистратор В 
		|	(ВЫБРАТЬ
		|		ВозвратОтПокупателяТовары.Регистратор
		|	ИЗ
		|		ВозвратОтПокупателяТовары КАК ВозвратОтПокупателяТовары" + ?(ИмяРеквизитаДокумент = "Ссылка", "", "
		|	ГДЕ
		|			ТИПЗНАЧЕНИЯ(ВозвратОтПокупателяТовары.Регистратор) В (
		|				ТИП(Документ.РеализацияТоваров),
		|				ТИП(Документ.ЗакрытиеСмены),
		|				ТИП(Документ.Инвентаризация),
		|				ТИП(Документ.ЗаказНаряд))") + ")
		|;
		|
		|ВЫБРАТЬ
		|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
		|	ИтоговаяТаблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ИтоговаяТаблица.ДокументПродажи КАК ДокументПродажи,
		|	ИтоговаяТаблица.Партия КАК Партия,
		|	ИтоговаяТаблица.ПартияДата КАК ПартияДата" + ?(ПустаяСтрока(ПорядокСтатусов), "", ",
		|	ИтоговаяТаблица.ПорядокСтатуса КАК ПорядокСтатуса") + ",
		|	ИтоговаяТаблица.СтатусПартии КАК СтатусПартии,
		|	ИтоговаяТаблица.ГТД КАК ГТД,
		|	ИтоговаяТаблица.Количество КАК Количество,
		|	ИтоговаяТаблица.Сумма КАК Сумма,
		|	ИтоговаяТаблица.СуммаНДС КАК СуммаНДС,
		|	ИтоговаяТаблица.СуммаБезНДС КАК СуммаБезНДС,
		|	ИтоговаяТаблица.СуммаУпр КАК СуммаУпр,
		|	ИтоговаяТаблица.СуммаНДСУпр КАК СуммаНДСУпр,
		|	ИтоговаяТаблица.СуммаБезНДСУпр КАК СуммаБезНДСУпр,
		|	isnull(ПартииТоваровКомпании.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация
		|ИЗ
		|	ИтоговаяТаблица КАК ИтоговаяТаблица
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ПартииТоваровКомпании КАК ПартииТоваровКомпании
		|ПО
		|	ИтоговаяТаблица.Номенклатура = ПартииТоваровКомпании.Номенклатура
		|	И ИтоговаяТаблица.ХарактеристикаНоменклатуры = ПартииТоваровКомпании.ХарактеристикаНоменклатуры
		|	И ИтоговаяТаблица.Партия = ПартииТоваровКомпании.Партия
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры " + ?(ПустаяСтрока(ПорядокСтатусов), "", ",
		|	ПорядокСтатуса " + ПорядокСтатусов) + ",
		|	ПартияДата " + ПорядокСписанияПартий + ",
		|	Партия " + ПорядокСписанияПартий + "
		|");
		
		Запрос.УстановитьПараметр("Номенклатура", РезультатЗапросаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("Ссылка",       ШапкаДокумента.Ссылка);
		Запрос.УстановитьПараметр("ВидДвижения",  ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("НаМомент",     ШапкаДокумента.Дата);
		Запрос.УстановитьПараметр("Купленные",    Перечисления.СтатусыПартий.ТоварКупленный);
		
		// Наложим блокировку на считываемые данные
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПартииТоваровКомпании");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, ШапкаДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("СкладКомпании", СкладКомпании); 
		ЗначенияБлокировки.Вставить("СтатусПартии", Перечисления.СтатусыПартий.ТоварПринятыйКомиссия);
		СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
		// Блокировка товаров отданных на комиссию (вводом остатков товаров)
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПартииТоваровОтданные");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, ШапкаДокумента.Дата)); 
		СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
		// Блокировка товаров в производстве
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ТоварыВПроизводстве");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, ШапкаДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("СтатусПартии", Перечисления.СтатусыПартий.ТоварПринятыйКомиссия); 
		СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
		// РеализованныеТовары
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "РеализованныеТовары");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, ШапкаДокумента.Дата)); 
		СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
		
		РезультатЗапросаВозвратОтПокупателя = Запрос.Выполнить();
		ТаблицаОтгрузки = РезультатЗапросаВозвратОтПокупателя.Выгрузить();
		
		// Пройдемся по таблице товаров и отсторнируем отгрузку
		Если ТипЗнч(РезультатЗапросаПоТоварам) = Тип("РезультатЗапроса") Тогда
			ТаблицаТовары = РезультатЗапросаПоТоварам.Выгрузить();
		Иначе
			ТаблицаТовары = РезультатЗапросаПоТоварам;
		КонецЕсли;
		
		Если ДокументОбъект.ЭтоНовый() ИЛИ ДокументОбъект.Ссылка <> ШапкаДокумента.Ссылка Тогда
			// проведение отложенное надо таблицу получать запросом
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОстаткиТоваровКомпании.ХарактеристикаНоменклатуры,
			|	СУММА(ОстаткиТоваровКомпании.Количество) КАК Количество
			|ИЗ
			|	РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
			|ГДЕ
			|	ОстаткиТоваровКомпании.Регистратор=&Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиТоваровКомпании.ХарактеристикаНоменклатуры
			|");
			Запрос.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
			ТаблицаСписанияОстатков = Запрос.Выполнить().Выгрузить();
		Иначе
			// Проведение НЕ отложенное
			ТаблицаСписанияОстатков = ДокументОбъект.Движения.ОстаткиТоваровКомпании.Выгрузить();
			ТаблицаСписанияОстатков.Свернуть("ХарактеристикаНоменклатуры","Количество");
		КонецЕсли;
		
		ВалютаРегл     = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл,ШапкаДокумента.Дата);
		КурсРегл       = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		ВалютаУпр      = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,ШапкаДокумента.Дата);
		КурсУпр        =  СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		
		ТипЦенСклада = Неопределено;
		Если ШапкаДокумента.СкладКомпании.Розничный Тогда
			ТипЦенСклада = ШапкаДокумента.СкладКомпании.ТипЦенРозничнойТорговли;
		КонецЕсли;
		
		// Получим таблицу номенклатуры с ручным списанием характеристик
		ТаблицаРучныхХарактеристик=ОбработкаТабличнойЧастиТовары.ПолучитьНоменклатуруСРучнымСписаниемХарактеристик(ШапкаДокумента.Ссылка);
		
		ТипЦенНормативнаяЦена = Справочники.ТипыЦен.НормативнаяЦена;
		ЕстьСтавкаНДС     = (ТаблицаТовары.Колонки.Найти("СтавкаНДС")<>Неопределено);
		ЕстьГТД           = (ТаблицаТовары.Колонки.Найти("ГТД")<>Неопределено);
		ЕстьСебестоимость = (ТаблицаТовары.Колонки.Найти("Себестоимость")<>Неопределено);
		
		ГТДПартийТоваровКомпанииНаборЗаписей=ДокументОбъект.Движения.ГТДПартийТоваровКомпании;
		
		Для Каждого СтрокаТовар Из ТаблицаТовары Цикл
			// Получим остатки по текущей номенклатуре
			СтруктураОтбора = Новый Структура("Номенклатура, ДокументПродажи",СтрокаТовар.Номенклатура, СтрокаТовар.ДокументПродажи);
			Если ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) ИЛИ (ТаблицаРучныхХарактеристик<>Неопределено И ТаблицаРучныхХарактеристик.Найти(СтрокаТовар.Номенклатура,"Номенклатура")<>Неопределено) Тогда 
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТовар.ХарактеристикаНоменклатуры);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
				СтруктураОтбора.Вставить("Партия", СтрокаТовар.Партия);
			КонецЕсли;
			
			Если ЕстьГТД И ЗначениеЗаполнено(СтрокаТовар.ГТД) Тогда
				СтруктураОтбора.Вставить("ГТД", СтрокаТовар.ГТД);
			КонецЕсли;
			
			// Поищем строки удовлетворяющие условию
			МассивНайденныхСтрок    = ТаблицаОтгрузки.НайтиСтроки(СтруктураОтбора);
			// Пройдемся по найденным строкам и вернем товар
			НадоВернуть             = СтрокаТовар.Количество;
			ЦенаПоследнейПартииРегл = Неопределено;
			ЦенаПоследнейПартииУпр  = Неопределено;
			Для Сч=0 По МассивНайденныхСтрок.ВГраница() Цикл
				ТекСтрока  = МассивНайденныхСтрок[Сч];
				Возвращаем = Мин(НадоВернуть, ТекСтрока.Количество);
				
				// Проверим, а не разойдемся ли мы с остатками
				СтрокаОстатков = ТаблицаСписанияОстатков.Найти(ТекСтрока.ХарактеристикаНоменклатуры, "ХарактеристикаНоменклатуры");
				Если СтрокаОстатков = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Возвращаем = Мин(Возвращаем,СтрокаОстатков.Количество);
				СтрокаОстатков.Количество = СтрокаОстатков.Количество-Возвращаем;
				Если СтрокаОстатков.Количество<=0 Тогда
					ТаблицаСписанияОстатков.Удалить(СтрокаОстатков);
				КонецЕсли;
				
				НоваяЗапись = Добавить();
				НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Расход;
				НоваяЗапись.Период                     = ШапкаДокумента.Дата;
				НоваяЗапись.Регистратор                = ШапкаДокумента.Ссылка;
				НоваяЗапись.СтатусПартии               = ТекСтрока.СтатусПартии;
				
				Если СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя Тогда
					Партия = ПартияТоваровОтрицательныхОстатков;
				Иначе
					Партия = ТекСтрока.Партия;
				КонецЕсли;
				НоваяЗапись.Партия                     = Партия;
				НоваяЗапись.СкладКомпании              = СкладКомпании;
				НоваяЗапись.Организация                = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
					Организация,
					НоваяЗапись.СкладКомпании,
					НоваяЗапись.Период,
					ТекСтрока.Организация
				);
				НоваяЗапись.Номенклатура               = ТекСтрока.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры = ТекСтрока.ХарактеристикаНоменклатуры;
				НоваяЗапись.ДокументПродажи            = ТекСтрока.ДокументПродажи;
				НоваяЗапись.ХозОперация                = ШапкаДокумента.ХозОперация;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШапкаДокумента, "Проект") Тогда
					НоваяЗапись.Проект                 = ШапкаДокумента.Проект;	
				КонецЕсли;
				
				Если ЕстьСтавкаНДС Тогда
					НоваяЗапись.СтавкаНДС              = СтрокаТовар.СтавкаНДС;
				КонецЕсли;
				НоваяЗапись.Количество                 = -Возвращаем;
				НоваяЗапись.Сумма                      = Окр(-?(ТекСтрока.Количество <= Возвращаем, 
					ТекСтрока.Сумма, ТекСтрока.Сумма / ТекСтрока.Количество * Возвращаем), 2);
				НоваяЗапись.СуммаНДС                   = Окр(-?(ТекСтрока.Количество <= Возвращаем, 
					ТекСтрока.СуммаНДС, ТекСтрока.СуммаНДС / ТекСтрока.Количество * Возвращаем), 2);
				НоваяЗапись.СуммаБезНДС				   = НоваяЗапись.Сумма-НоваяЗапись.СуммаНДС;
				НоваяЗапись.СуммаУпр                   = Окр(-?(ТекСтрока.Количество <= Возвращаем, 
					ТекСтрока.СуммаУпр, ТекСтрока.СуммаУпр / ТекСтрока.Количество * Возвращаем), 2);
				НоваяЗапись.СуммаНДСУпр                = Окр(-?(ТекСтрока.Количество <= Возвращаем, 
					ТекСтрока.СуммаНДСУпр, ТекСтрока.СуммаНДСУпр / ТекСтрока.Количество * Возвращаем), 2);
				НоваяЗапись.СуммаБезНДСУпр			   = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
				Расход = Расход + (-НоваяЗапись.СуммаУпр);
				ЦенаПоследнейПартииРегл = НоваяЗапись.Сумма / НоваяЗапись.Количество;
				ЦенаПоследнейПартииУпр  = НоваяЗапись.СуммаУпр / НоваяЗапись.Количество;
				
				ТекСтрока.Количество                   = ТекСтрока.Количество - (-НоваяЗапись.Количество);
				ТекСтрока.Сумма                        = ТекСтрока.Сумма - (-НоваяЗапись.Сумма);
				ТекСтрока.СуммаНДС                     = ТекСтрока.СуммаНДС - (-НоваяЗапись.СуммаНДС);
				ТекСтрока.СуммаБезНДС                  = ТекСтрока.СуммаБезНДС - (-НоваяЗапись.СуммаБезНДС);
				ТекСтрока.СуммаУпр                     = ТекСтрока.СуммаУпр - (-НоваяЗапись.СуммаУпр);
				ТекСтрока.СуммаНДСУпр                  = ТекСтрока.СуммаНДСУпр - (-НоваяЗапись.СуммаНДСУпр);
				ТекСтрока.СуммаБезНДСУпр               = ТекСтрока.СуммаБезНДСУпр - (-НоваяЗапись.СуммаБезНДСУпр);
				
				Если ЕстьГТД Тогда
					ГТДПартийТоваровКомпанииНаборЗаписей.ДобавитьЗапись(НоваяЗапись, ТекСтрока.ГТД);
				КонецЕсли;
				
				// Уменьшаем количество которое надо списать
				НадоВернуть = НадоВернуть - (-НоваяЗапись.Количество);
				
				// Если списали все с этой характеристикой, то удалим данную строку.
				// Если нет, то уменьшим количество остатка.
				Если ТекСтрока.Количество > 0 Тогда
					// Продолжаем списывать данную партию - там еще осталось
					Сч = Сч - 1;
				Иначе
					// Удалим ненужную строку
					ТаблицаОтгрузки.Удалить(ТекСтрока);
				КонецЕсли;
				Если НадоВернуть <= 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			// Если после всяких возвратов у нас еще остался товар, который вернуть не удалось, то
			// оприходуем этот товар на документ возврата.
			Если НадоВернуть > 0 Тогда
				НоваяЗапись = Добавить();
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
				НоваяЗапись.Период      = ШапкаДокумента.Дата;
				НоваяЗапись.Регистратор = ШапкаДокумента.Ссылка;
				Если СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя Тогда
					Партия = ПартияТоваровОтрицательныхОстатков;
				ИначеЕсли ТипЗнч(ШапкаДокумента.Ссылка) = Тип("ДокументСсылка.ЗакрытиеСмены") Тогда
					Партия = СтрокаТовар.Партия;
				Иначе
					Партия = ШапкаДокумента.Ссылка;
				КонецЕсли;
				НоваяЗапись.Партия                     = Партия;
				НоваяЗапись.СтатусПартии               = Перечисления.СтатусыПартий.ТоварКупленный;
				НоваяЗапись.СкладКомпании              = СкладКомпании;
				НоваяЗапись.Организация                = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
					Организация,
					НоваяЗапись.СкладКомпании,
					НоваяЗапись.Период
				);
				НоваяЗапись.Номенклатура               = СтрокаТовар.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатуры;
				// Определяемся с хоз. операцией
				НоваяЗапись.ХозОперация                = ШапкаДокумента.ХозОперация;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШапкаДокумента, "Проект") Тогда
					НоваяЗапись.Проект                 = ШапкаДокумента.Проект;	
				КонецЕсли;
		
				Если ЕстьСтавкаНДС Тогда
					НоваяЗапись.СтавкаНДС              = СтрокаТовар.СтавкаНДС;
				КонецЕсли; 
				НоваяЗапись.Количество                 = -НадоВернуть;
				
				Если ЕстьРеквизит(СтрокаТовар, "ДокументПродажи") Тогда
					НоваяЗапись.ДокументПродажи        = СтрокаТовар.ДокументПродажи;	
				КонецЕсли;
				
				Если ЦенаПоследнейПартииРегл=Неопределено ИЛИ ЦенаПоследнейПартииУпр=Неопределено Тогда
					ПолучитьЦенуЗакупки = Истина;
					Если ЕстьРеквизит(СтрокаТовар, "Сумма") И ЕстьРеквизит(СтрокаТовар, "СуммаУпр") И ЕстьРеквизит(СтрокаТовар, "СуммаНДС") Тогда
						НоваяЗапись.Сумма    = -СтрокаТовар.Сумма;
						НоваяЗапись.СуммаУпр = -СтрокаТовар.СуммаУпр;
						НоваяЗапись.СуммаНДС = -СтрокаТовар.СуммаНДС;
						ПолучитьЦенуЗакупки = Ложь;	
					КонецЕсли;
					Если ПолучитьЦенуЗакупки Тогда
						ЦенаЗакупки = Неопределено;
						Если НЕ ЗначениеЗаполнено(СтрокаТовар.ДокументПродажи) Тогда
							Если ЕстьСебестоимость Тогда
								ЦенаЗакупки = СтрокаТовар.Себестоимость;
							КонецЕсли;
						КонецЕсли;
						Если ЦенаЗакупки = Неопределено Тогда
							// Получим последние нормативные цены
							ЦенаЗакупки = ЦенообразованиеСервер.ПолучитьЦену(ТипЦенНормативнаяЦена, СтрокаТовар.Номенклатура, ШапкаДокумента.Ссылка,, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, СтрокаТовар.ХарактеристикаНоменклатуры,, СкладКомпании.ПодразделениеКомпании);
							Если НЕ ТипЦенНормативнаяЦена.ЦенаВключаетНДС И ЗначениеЗаполнено(СтрокаТовар.Номенклатура.СтавкаНДС) Тогда
								ЦенаЗакупки = ЦенаЗакупки + (ЦенаЗакупки * СтрокаТовар.Номенклатура.СтавкаНДС.Ставка / 100);
							КонецЕсли;
						КонецЕсли; 
						СуммаВсего = ЦенаЗакупки * НадоВернуть;
						Если НЕ ЗначениеЗаполнено(СтрокаТовар.Номенклатура.СтавкаНДС) Тогда
							СуммаНДС = 0;
						Иначе
							СуммаБезНДС = (100 * СуммаВсего) / (100 + СтрокаТовар.Номенклатура.СтавкаНДС.Ставка);
							СуммаНДС    = СуммаВсего - СуммаБезНДС;
						КонецЕсли;
						НоваяЗапись.Сумма    = -Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаВсего, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаРегл, КурсРегл), 2);
						НоваяЗапись.СуммаУпр = -Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаВсего, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаУпр, КурсУпр), 2);
					КонецЕсли;
				Иначе
					НоваяЗапись.Сумма    = -(ЦенаПоследнейПартииРегл * НадоВернуть);
					НоваяЗапись.СуммаУпр = -(ЦенаПоследнейПартииУпр * НадоВернуть);
				КонецЕсли; 
				НоваяЗапись.СуммаБезНДС = Окр(НоваяЗапись.Сумма / ((100 + НоваяЗапись.СтавкаНДС.Ставка) / 100), 2);
				НоваяЗапись.СуммаБезНДСУпр = Окр(НоваяЗапись.СуммаУпр / ((100 + НоваяЗапись.СтавкаНДС.Ставка) / 100), 2);
				НоваяЗапись.СуммаНДС = НоваяЗапись.Сумма - НоваяЗапись.СуммаБезНДС;
				НоваяЗапись.СуммаНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаБезНДСУпр;
				Расход      = Расход + (-НоваяЗапись.СуммаУпр);
				
				Если ЕстьГТД Тогда
					ГТДПартийТоваровКомпанииНаборЗаписей.ДобавитьЗапись(НоваяЗапись, СтрокаТовар.ГТД);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Запись движений
	ЗаписыватьДвижения = ?(ЗаписыватьДвижения=Неопределено,Ложь,ЗаписыватьДвижения);
	Если ВсеОК И ЗаписыватьДвижения Тогда
		Записать();
	КонецЕсли;
	
	// Убиваем циклическую ссылку
	РезультатЗапросаПоТоварам = Неопределено;
	СкладКомпанииКуда         = Неопределено;
	Сторно                    = Неопределено;
	СтатусПартии              = Неопределено;
	РежимВозврата             = Неопределено;
	ДокументОбъект            = Неопределено;
	ШапкаДокумента            = Неопределено;
	
	Возврат ВсеОК;
КонецФункции

// Функция рассчитывает дополнительные расходы при проведении по регистру "Партии товаров компании".
//
// Параметры:
//	ТаблицаТоваровДокумента	- ТабличнаяЧасть - Табличная часть документа
//	Ссылка					- ДокументСсылка - Документ.
//
//	Возвращаемое значение:
//	Число	- сумма доп. расходов на себестоимость товаров.
//
Функция РасчетДополнительныхРасходов(ТаблицаТоваровДокумента, Ссылка, МассивОшибок=Неопределено, Режим=1)
	
	Если МассивОшибок = Неопределено Тогда
		МассивОшибок = Новый Массив;	
	КонецЕсли;
	
	ВсегоДопРасходы = 0;
	
	// Скопируем таблицу товаров
	ВремТаблица = ТаблицаТоваровДокумента.Скопировать();
	// если необходимо очистим
	Если Режим = 2 Тогда
		ВремТаблица.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ВЫБОР КОГДА ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов=&ПоСумме ТОГДА ДокументТовары.СуммаВсего ИНАЧЕ 0 КОНЕЦ,0)) КАК ПоСумме,
	|	СУММА(ЕСТЬNULL(ВЫБОР КОГДА ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов=&ПоСумме ТОГДА ДокументТовары.СуммаНДС ИНАЧЕ 0 КОНЕЦ,0)) КАК ПоСуммеНДС,
	|	СУММА(ЕСТЬNULL(ВЫБОР КОГДА ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов=&ПоКоличеству ТОГДА ДокументТовары.СуммаНДС ИНАЧЕ 0 КОНЕЦ,0)) КАК ПоКоличествуНДС,
	|	СУММА(ЕСТЬNULL(ВЫБОР КОГДА ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов=&ПоКоличеству ТОГДА ДокументТовары.СуммаВсего ИНАЧЕ 0 КОНЕЦ,0)) КАК ПоКоличеству,
	|	СУММА(ЕСТЬNULL(ВЫБОР КОГДА ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов=&ПоВесу ТОГДА ДокументТовары.СуммаНДС ИНАЧЕ 0 КОНЕЦ,0)) КАК ПоВесуНДС,
	|	СУММА(ЕСТЬNULL(ВЫБОР КОГДА ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов=&ПоВесу ТОГДА ДокументТовары.СуммаВсего ИНАЧЕ 0 КОНЕЦ,0)) КАК ПоВесу,
	|	ДокументТовары.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ." + Ссылка.Метаданные().Имя + ".Товары КАК ДокументТовары
	|ГДЕ
	|	  ДокументТовары.Ссылка=&Ссылка
	|	И ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов<>ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияДопРасходов.НаДоходыИРасходы)
	|	И ДокументТовары.Номенклатура.ВидНоменклатуры=ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга) 
	|	" + ?(Ссылка.Метаданные() = Метаданные.Документы.ПоступлениеДопРасходов, "И ДокументТовары.СпособРаспределения = 0", "") + " 
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.СтавкаНДС
	|");
	Запрос.УстановитьПараметр("Ссылка",       Ссылка);
	Запрос.УстановитьПараметр("ПоСумме",      Перечисления.СпособыРаспределенияДопРасходов.ПоСумме);
	Запрос.УстановитьПараметр("ПоКоличеству", Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству);
	Запрос.УстановитьПараметр("ПоВесу",       Перечисления.СпособыРаспределенияДопРасходов.ПоВесу);
	РезультатДопРасходы = Запрос.Выполнить();
	
	Если РезультатДопРасходы.Пустой() Тогда
		ТаблицаТоваровДокумента = ВремТаблица;
		Возврат ВсегоДопРасходы;
	КонецЕсли;
	
	ВыборкаДопРасходы = РезультатДопРасходы.Выбрать();
	
	// Вычислим общую сумму
	ИтогДокументКоличество = ТаблицаТоваровДокумента.Итог("Количество");
	ИтогДокументСумма      = ТаблицаТоваровДокумента.Итог("СуммаВсего"); 
	ИтогДокументВес        = ТаблицаТоваровДокумента.Итог("Вес");
	
	Пока ВыборкаДопРасходы.Следующий() Цикл
		ДопРасходыПоКоличеству =  ?(ВыборкаДопРасходы.ПоКоличеству=NULL,0,ВыборкаДопРасходы.ПоКоличеству);
		ДопРасходыПоСумме      =  ?(ВыборкаДопРасходы.ПоСумме=NULL,0,ВыборкаДопРасходы.ПоСумме);
		ДопРасходыПоВесу       =  ?(ВыборкаДопРасходы.ПоВесу=NULL,0,ВыборкаДопРасходы.ПоВесу);
		
		ВсегоДопРасходы = ДопРасходыПоКоличеству + ДопРасходыПоСумме + ДопРасходыПоВесу;
		Если ВсегоДопРасходы = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИтогДопРасходы    = ВсегоДопРасходы;
		ИтогДопРасходыНДС = ?(ВыборкаДопРасходы.ПоКоличествуНДС=NULL, 0, ВыборкаДопРасходы.ПоКоличествуНДС) + ?(ВыборкаДопРасходы.ПоСуммеНДС = NULL, 0, ВыборкаДопРасходы.ПоСуммеНДС) + ?(ВыборкаДопРасходы.ПоВесуНДС = NULL, 0, ВыборкаДопРасходы.ПоВесуНДС);
		
		// Вычислим ситуацию, когда
		Если (ИтогДокументКоличество = 0) И (ДопРасходыПоКоличеству <> 0) Тогда
			МассивОшибок.Добавить("Количество прихода равно нулю. Распределение суммы дополнительных расходов на себестоимость прихода невозможно.");
		КонецЕсли;
		
		Если (ИтогДокументСумма = 0) И (ДопРасходыПоСумме <> 0) Тогда
			МассивОшибок.Добавить("Себестоимость прихода равна нулю. Распределение суммы дополнительных расходов на себестоимость прихода невозможно.");	
		КонецЕсли;	
		
		Если (ИтогДокументВес = 0) И (ДопРасходыПоВесу <> 0) Тогда
			МассивОшибок.Добавить("Вес прихода равен нулю. Распределение суммы дополнительных расходов на себестоимость прихода невозможно.");
		КонецЕсли;	
		
		Если МассивОшибок.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// распределяем по товарам
		Для Каждого СтрокаТоварИсх Из ТаблицаТоваровДокумента Цикл
			СтрокаТовар = ВремТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовар,СтрокаТоварИсх); // все-таки падало при отсутствии колонок
			
			// Обнулим значения
			СтрокаТовар.Количество = 0;
			СтрокаТовар.Сумма      = 0;
			СтрокаТовар.СуммаВсего = 0;
			СтрокаТовар.СуммаНДС   = 0;
			
			СтрокаТовар.СтавкаНДС = ВыборкаДопРасходы.СтавкаНДС;
			СуммаДопРасходов = 0; 
			СуммаНДСДопРасходов = 0;
			
			КоэфРаспределения    = ?(ИтогДокументКоличество = 0, 0, СтрокаТоварИсх.Количество / ИтогДокументКоличество);
			СуммаДопРасходовК    = Окр(ВыборкаДопРасходы.ПоКоличеству    * КоэфРаспределения, 2);
			СуммаНДСДопРасходовК = Окр(ВыборкаДопРасходы.ПоКоличествуНДС * КоэфРаспределения, 2);
			
			КоэфРаспределения    = ?(ИтогДокументСумма = 0, 0, СтрокаТоварИсх.СуммаВсего / ИтогДокументСумма);
			СуммаДопРасходовС    = Окр(ВыборкаДопРасходы.ПоСумме    * КоэфРаспределения, 2);
			СуммаНДСДопРасходовС = Окр(ВыборкаДопРасходы.ПоСуммеНДС * КоэфРаспределения, 2);
			
			КоэфРаспределения    = ?(ИтогДокументВес = 0, 0, СтрокаТоварИсх.Вес / ИтогДокументВес);
			СуммаДопРасходовВ    = Окр(ВыборкаДопРасходы.ПоВесу    * КоэфРаспределения, 2);
			СуммаНДСДопРасходовВ = Окр(ВыборкаДопРасходы.ПоВесуНДС * КоэфРаспределения, 2);
			
			СтрокаТовар.СуммаВсего = СуммаДопРасходовК + СуммаДопРасходовС + СуммаДопРасходовВ;
			СтрокаТовар.СуммаНДС   = СуммаНДСДопРасходовК + СуммаНДСДопРасходовС + СуммаНДСДопРасходовВ;
			
			ИтогДопРасходы    = ИтогДопРасходы - (СтрокаТовар.СуммаВсего);
			ИтогДопРасходыНДС = ИтогДопРасходыНДС - (СтрокаТовар.СуммаНДС);
		КонецЦикла;
		
		// если осталась сумма от округления то закинем ее на последний
		Если ИтогДопРасходы <> 0 ИЛИ ИтогДопРасходыНДС <> 0 Тогда
			Если ЕстьРеквизит(СтрокаТовар, "СуммаВсего") И ЕстьРеквизит(СтрокаТовар, "СуммаНДС") Тогда
				СтрокаТовар.СуммаВсего = СтрокаТовар.СуммаВсего + ИтогДопРасходы;
				СтрокаТовар.СуммаНДС   = СтрокаТовар.СуммаНДС + ИтогДопРасходыНДС;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//
	ТаблицаТоваровДокумента = ВремТаблица;
	Возврат ВсегоДопРасходы;
	
КонецФункции // РасчетДополнительныхРасходов()

Функция ЕстьПревышениеЦеныПрихода(ТаблицаТоваровДокумента, Ссылка)

	МассивОшибок = Новый Массив;	

	Если ТаблицаТоваровДокумента = Неопределено
		Или ТаблицаТоваровДокумента.Количество() = 0 Тогда
	
		Возврат МассивОшибок;	
	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.СуммаВсего КАК СуммаВсего, 
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаТоваровРазвернутая
	|ИЗ
	|	&ТаблицаТоваровДокумента КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровРазвернутая.Номенклатура КАК Номенклатура,
	|	СУММА(ТаблицаТоваровРазвернутая.Количество) КАК Количество,
	|	СУММА(ТаблицаТоваровРазвернутая.СуммаВсего) КАК СуммаВсего, 
	|	СУММА(ТаблицаТоваровРазвернутая.СуммаНДС) КАК СуммаНДС,
	|	ТаблицаТоваровРазвернутая.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровРазвернутая КАК ТаблицаТоваровРазвернутая
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваровРазвернутая.Номенклатура,
	|	ТаблицаТоваровРазвернутая.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииТипыЦенДляПроверки.ТипЦен КАК ТипЦен,
	|	ОрганизацииТипыЦенДляПроверки.ТипЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОрганизацииТипыЦенДляПроверки.ТипЦен.ВалютаЦены КАК ВалютаЦены   
	|ПОМЕСТИТЬ ТаблицаТипыЦен
	|ИЗ
	|	Справочник.Организации.ТипыЦенДляПроверки КАК ОрганизацииТипыЦенДляПроверки
	|ГДЕ
	|	ОрганизацииТипыЦенДляПроверки.ТипЦен.Рассчитывается = ЛОЖЬ
	|	И ОрганизацииТипыЦенДляПроверки.ТипЦен.ДляТоваров = ИСТИНА
	|	И ОрганизацииТипыЦенДляПроверки.Ссылка = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныСрезПоследних.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЦеныСрезПоследних.Номенклатура.Артикул КАК Артикул,
	|	ТаблицаТипыЦен.ТипЦен КАК ТипЦен,
	|	ВЫБОР
	|		КОГДА ТаблицаТипыЦен.ЦенаВключаетНДС
	|			ТОГДА ЦеныСрезПоследних.Цена * 100 / (100 + ЦеныСрезПоследних.Номенклатура.СтавкаНДС.Ставка)
	|		ИНАЧЕ ЦеныСрезПоследних.Цена
	|	КОНЕЦ КАК ЦенаПродажиБезНДС,
	|	(ТаблицаТоваров.СуммаВсего - ТаблицаТоваров.СуммаНДС) / ТаблицаТоваров.Количество КАК ЦенаДокументаБезНДС,
	|	ТаблицаТипыЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ТаблицаТипыЦен.ВалютаЦены КАК ВалютаЦены,
	|	ЦеныСрезПоследних.Номенклатура.СтавкаНДС КАК НоменклатураСтавкаНДС
	|ПОМЕСТИТЬ ИтоговаяТаблицаБезФильтра
	|ИЗ
	|	РегистрСведений.Цены.СрезПоследних(&МоментВремени, ПодразделениеКомпании = &Подразделение) КАК ЦеныСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
	|		ПО (ЦеныСрезПоследних.Номенклатура = ТаблицаТоваров.Номенклатура)
	|			И (ЦеныСрезПоследних.ХарактеристикаНоменклатуры = ТаблицаТоваров.ХарактеристикаНоменклатуры)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТипыЦен КАК ТаблицаТипыЦен
	|		ПО (ТаблицаТипыЦен.ТипЦен = ЦеныСрезПоследних.ТипЦен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблицаБезФильтра.Номенклатура КАК Номенклатура,
	|	ИтоговаяТаблицаБезФильтра.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ИтоговаяТаблицаБезФильтра.Артикул КАК Артикул,
	|	ИтоговаяТаблицаБезФильтра.ТипЦен КАК ТипЦен,
	|	ИтоговаяТаблицаБезФильтра.ЦенаПродажиБезНДС КАК ЦенаПродажиБезНДС,
	|	ИтоговаяТаблицаБезФильтра.ЦенаДокументаБезНДС КАК ЦенаДокументаБезНДС,
	|	ИтоговаяТаблицаБезФильтра.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ИтоговаяТаблицаБезФильтра.ВалютаЦены КАК ВалютаЦены,
	|	ИтоговаяТаблицаБезФильтра.НоменклатураСтавкаНДС КАК НоменклатураСтавкаНДС
	|ИЗ
	|	ИтоговаяТаблицаБезФильтра КАК ИтоговаяТаблицаБезФильтра
	|ГДЕ
	|	ИтоговаяТаблицаБезФильтра.ЦенаПродажиБезНДС < ИтоговаяТаблицаБезФильтра.ЦенаДокументаБезНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	Артикул,
	|	ТипЦен";
	
	Запрос.УстановитьПараметр("МоментВремени", ДокументОбъект.МоментВремени());
	Запрос.УстановитьПараметр("Подразделение", ДокументОбъект.ПодразделениеКомпании);  
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация); 
	Запрос.УстановитьПараметр("ТаблицаТоваровДокумента", ТаблицаТоваровДокумента);
	Выборка = Запрос.Выполнить().Выбрать();  
	// ищем ошибки по хранимым ценам
	Пока Выборка.Следующий() Цикл  
		МассивОшибок.Добавить(СтрШаблон(НСтр("ru='Товар: %1, артикул: %2 - цена прихода (без НДС): %3 превышает установленную цену продажи (без НДС): %4 для типа цен %5'"),
		Выборка.Номенклатура, 
		Выборка.Артикул,  
		Формат(Выборка.ЦенаДокументаБезНДС, "ЧЦ=15; ЧДЦ=2"), 
		Формат(Выборка.ЦенаПродажиБезНДС, "ЧЦ=15; ЧДЦ=2"), 
		Выборка.ТипЦен));
	КонецЦикла;       
	Если МассивОшибок.Количество() > 0 Тогда
	    // Если есть ошибки в установленных ценах, то это смысла смотреть
		// расчетные нет - они зависят от установленных.
		Возврат МассивОшибок;	
	
	КонецЕсли;
	
	// ищем ошибки по расчетным ценам, неоптимально. 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.СуммаВсего КАК СуммаВсего,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаТоваровРазвернутая
	|ИЗ
	|	&ТаблицаТоваровДокумента КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровРазвернутая.Номенклатура КАК Номенклатура,
	|	СУММА(ТаблицаТоваровРазвернутая.Количество) КАК Количество,
	|	СУММА(ТаблицаТоваровРазвернутая.СуммаВсего) КАК СуммаВсего, 
	|	СУММА(ТаблицаТоваровРазвернутая.СуммаНДС) КАК СуммаНДС,
	|	ТаблицаТоваровРазвернутая.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровРазвернутая КАК ТаблицаТоваровРазвернутая
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваровРазвернутая.Номенклатура,
	|	ТаблицаТоваровРазвернутая.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииТипыЦенДляПроверки.ТипЦен КАК ТипЦен,
	|	ОрганизацииТипыЦенДляПроверки.ТипЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОрганизацииТипыЦенДляПроверки.ТипЦен.ВалютаЦены КАК ВалютаЦены
	|ПОМЕСТИТЬ ТаблицаТипыЦен
	|ИЗ
	|	Справочник.Организации.ТипыЦенДляПроверки КАК ОрганизацииТипыЦенДляПроверки
	|ГДЕ
	|	ОрганизацииТипыЦенДляПроверки.ТипЦен.Рассчитывается = ИСТИНА
	|	И ОрганизацииТипыЦенДляПроверки.ТипЦен.ДляТоваров = ИСТИНА
	|	И ОрганизацииТипыЦенДляПроверки.Ссылка = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Номенклатура.Артикул КАК Артикул,
	|	ТаблицаТоваров.Номенклатура.СтавкаНДС.Ставка КАК СтавкаНДС,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	(ТаблицаТоваров.СуммаВсего - ТаблицаТоваров.СуммаНДС) / ТаблицаТоваров.Количество КАК ЦенаДокументаБезНДС,
	|	ЕСТЬNULL(ТаблицаТипыЦен.ЦенаВключаетНДС, ЛОЖЬ) КАК ЦенаВключаетНДС,
	|	ТаблицаТипыЦен.ВалютаЦены КАК ВалютаЦены,
	|	ТаблицаТипыЦен.ТипЦен КАК ТипЦен
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаТипыЦен КАК ТаблицаТипыЦен
	|		ПО (ИСТИНА)";

	Запрос.УстановитьПараметр("ТаблицаТоваровДокумента", ТаблицаТоваровДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЦенаПродажиТовара = ЦенообразованиеСервер.ПолучитьЦену(
			Выборка.ТипЦен,
			Выборка.Номенклатура,
			ДокументОбъект.МоментВремени(),
			,
			,
			,
			Выборка.ХарактеристикаНоменклатуры,
			,
			ДокументОбъект.ПодразделениеКомпании
		);
		
		Если ЦенаПродажиТовара = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЦенаПродажиТовараБезНДС = ?(Выборка.ЦенаВключаетНДС, ЦенаПродажиТовара*100/(100 + Выборка.СтавкаНДС), ЦенаПродажиТовара);
		
		Если ЦенаПродажиТовараБезНДС = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Выборка.ЦенаДокументаБезНДС > ЦенаПродажиТовараБезНДС Тогда
		
			МассивОшибок.Добавить(
				СтрШаблон(
					НСтр("ru='Товар: %1, артикул: %2 - цена прихода (без НДС): %3 превышает расчетную цену продажи (без НДС): %4 для типа цен %5'"),
					Выборка.Номенклатура,
					Выборка.Артикул,
					Формат(Выборка.ЦенаДокументаБезНДС, "ЧЦ=15; ЧДЦ=2"),
					Формат(ЦенаПродажиТовараБезНДС, "ЧЦ=15; ЧДЦ=2"),
					Выборка.ТипЦен
				)
			);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивОшибок;
	
КонецФункции

Функция КонтрольЗаполненияОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ВызватьИсключение(НСтр("ru = 'Не указана организация для формирования движений по регистру <Партии товаров компании>'"));
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область Инициализация

ХозОперация = Неопределено;
РежимДопРасходы = 0;
ПоБазовомуКоличеству = Ложь;
ТаблицаВозвратов = Неопределено;
РасчетыСКонтрагентами = Неопределено;

#КонецОбласти

#КонецЕсли