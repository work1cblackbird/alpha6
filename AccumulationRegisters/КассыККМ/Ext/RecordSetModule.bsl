// Модуль набора записей регистра "Кассы ККМ"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ОписаниеПеременных

Перем РежимПроведения Экспорт;                  // Режим проведения документа оперативный/неоперативный
Перем ДокументОбъект Экспорт;                   // Документ, осуществляющий движение по регистру
Перем КассаККМ Экспорт;                         // Ссылка на кассу
Перем ТипОплаты Экспорт;                    	// Тип оплаты
Перем Сумма Экспорт;                            // Сумма
Перем РасчетОстатковНа Экспорт;                 // Дата расчета остатков
Перем СуммаДоходаРасходаКурсовыхРазниц Экспорт; // Сумма дохода расхода курсовых разниц

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует движения по приходу (поступление денежных средств в кассу ККМ)
// Возвращаемое значение: Булево. Истина - все нормально, Ложь - чего-то не так.
Функция Приход() Экспорт
	КассаККМ=?(КассаККМ=Неопределено,ДокументОбъект.КассаККМ,КассаККМ);
	
	Результат=Истина;
	Если ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата 
		ИЛИ ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата 
		ИЛИ ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление Тогда
		Возврат Результат;
	КонецЕсли;
	
	СуммаВВалютеКассы=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма,ДокументОбъект.ВалютаДокумента,ДокументОбъект.КурсДокумента,КассаККМ.ВалютаДенежныхСредств,ДокументОбъект.Дата);
	
	Если ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
		// При приходе проверка осуществляется только по наличной оплате
		Если СуммаВВалютеКассы<0 Тогда
			// И если сумма прихода отрицательная, т.е. производиться сторнирование (возвратный чек).
			Если (НЕ ПраваИНастройкиПользователя.Значение("РазрешитьОтрицательныеОстаткиПоКассе")) Тогда
				// Проверка осуществляется при запрете отрицательных остатков по кассе и при оперативном проведении.
				СуммаОстатка=ПолучитьОстатокНаличных(ТипОплаты);
				Если СуммаОстатка<(-СуммаВВалютеКассы) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'Нет прав на отрицательные суммовые остатки по <%1>'"),СокрЛП(КассаККМ)),
						ДокументОбъект
					);
					Результат=Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат Тогда
		НоваяЗапись=Добавить();
		НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
		НоваяЗапись.Период=ДокументОбъект.Дата;
		НоваяЗапись.Регистратор=ДокументОбъект.Ссылка;
		НоваяЗапись.КассаККМ=КассаККМ;
		НоваяЗапись.ТипОплаты=ТипОплаты;
		НоваяЗапись.Сумма=Окр(СуммаВВалютеКассы,2);
		НоваяЗапись.СуммаУпр=Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Сумма,
				ДокументОбъект.ВалютаДокумента,
				ДокументОбъект.КурсДокумента,
				Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
				?(НЕ ЗначениеЗаполнено(ДокументОбъект.КурсВалютыУпр),ДокументОбъект.Дата, ДокументОбъект.КурсВалютыУпр)),2);
		НоваяЗапись.ХозОперация=ДокументОбъект.ХозОперация;
	КонецЕсли;
	
	// убиваем циклическую ссылку
	ДокументОбъект=Неопределено;
	
	Возврат Результат;
КонецФункции

// Формирует движения по расходу (расход денежных средств из кассы ККМ)
// Возвращаемое значение: Булево. Истина - все нормально, Ложь - чего-то не так.
Функция Расход() Экспорт
	КассаККМ=?(КассаККМ=Неопределено,ДокументОбъект.КассаККМ,КассаККМ);
	
	Результат=Истина;
	Если ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата 
		ИЛИ ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата 
		ИЛИ ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление Тогда
		Возврат Результат;
	КонецЕсли;
	
	СуммаВВалютеКассы=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		Сумма,
		ДокументОбъект.ВалютаДокумента,
		ДокументОбъект.КурсДокумента,
		КассаККМ.ВалютаДенежныхСредств,
		ДокументОбъект.Дата
	);
	
	Если ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
		
		Если СуммаВВалютеКассы>0 Тогда
			
			РазрешитьОтрицательныеОстаткиПоКассе = Ложь;
			Если ДополнительныеСвойства.Свойство("РазрешитьОтрицательныеОстаткиПоКассе") Тогда
				РазрешитьОтрицательныеОстаткиПоКассе = ДополнительныеСвойства.РазрешитьОтрицательныеОстаткиПоКассе;
			КонецЕсли;

			// При расходе проверка изъятия денежных средств только при положительной сумме расхода.
			Если (НЕ ПраваИНастройкиПользователя.Значение("РазрешитьОтрицательныеОстаткиПоКассе")) И  Не РазрешитьОтрицательныеОстаткиПоКассе Тогда
				// Проверка осуществляется при запрете отрицательных остатков по кассе и при оперативном проведении.
				СуммаОстатка=ПолучитьОстатокНаличных(ТипОплаты);
				Если СуммаОстатка<СуммаВВалютеКассы Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Нет прав на отрицательные суммовые остатки по <%1>'"),СокрЛП(КассаККМ)),
						ДокументОбъект
						);
					Результат=Ложь;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли; 
		
	ИначеЕсли ТипОплаты <> Перечисления.ТипыОплатыККТ.Наличные Тогда
		
		// Проверка при расходе по безналичной оплате
		Если СуммаВВалютеКассы>0 Тогда
			// Если сумма больше нуля происходит проверка изъятия безналичных платежей
			Если (НЕ ПраваИНастройкиПользователя.Значение("РазрешитьОтрицательныеОстаткиПоКассе")) Тогда
				// Проверка осуществляется при запрете отрицательных остатков по кассе и при оперативном проведении.
				СуммаОстатка=ПолучитьОстатокБезналичных(Истина,ТипОплаты );
				
				Если СуммаОстатка<СуммаВВалютеКассы Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Нет прав на отрицательные суммовые остатки по <%1>'"), СокрЛП(КассаККМ)),
						ДокументОбъект
					);
					Результат=Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СуммаВВалютеКассы<0 Тогда
			// Если сумма меньше нуля происходит проверка изъятия безналичных платежей на возврат.
			Если (НЕ ПраваИНастройкиПользователя.Значение("РазрешитьОтрицательныеОстаткиПоКассе")) Тогда
				// Проверка осуществляется при запрете отрицательных остатков по кассе и при оперативном проведении.
				СуммаОстатка=ПолучитьОстатокБезналичных(Ложь, ТипОплаты);
				Если (-СуммаОстатка)<(-СуммаВВалютеКассы) Тогда
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Нет прав на отрицательные суммовые остатки по <%1>'"), СокрЛП(КассаККМ)),
						ДокументОбъект
					);
					Результат=Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат Тогда
		// расходуем денежные средства
		НоваяЗапись=Добавить();
		НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Расход;
		НоваяЗапись.Период=ДокументОбъект.Дата;
		НоваяЗапись.Регистратор=ДокументОбъект.Ссылка;
		НоваяЗапись.КассаККМ=КассаККМ;
		НоваяЗапись.ТипОплаты=ТипОплаты;
		НоваяЗапись.Сумма=Окр(СуммаВВалютеКассы,2);
		НоваяЗапись.СуммаУпр=Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Сумма,
				ДокументОбъект.ВалютаДокумента,
				ДокументОбъект.КурсДокумента,
				Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
				?(НЕ ЗначениеЗаполнено(ДокументОбъект.КурсВалютыУпр), ДокументОбъект.Дата, ДокументОбъект.КурсВалютыУпр)),2);
		НоваяЗапись.ХозОперация=ДокументОбъект.ХозОперация;
	КонецЕсли;
	
	// убиваем циклическую ссылку
	ДокументОбъект=Неопределено;
	
	Возврат Результат;
КонецФункции

// списывает курсовые разницы
Функция СписаниеКурсовыхРазниц() Экспорт
	// вспомогательные переменные
	СуммаДоходаРасходаКурсовыхРазниц=0;
	ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.КурсВалютыУпр) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,ДокументОбъект.Дата);
		КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		КурсУпр = ДокументОбъект.КурсВалютыУпр;
	КонецЕсли;	
	
	СтрокаФильтра = "";
	Если ДополнительныеСвойства.Свойство("ФильтрПоПодразделению") Тогда
		СтрокаФильтра = ", КассаККМ.ПодразделениеКомпании=&ПодразделениеКомпании";	
	ИначеЕсли ДополнительныеСвойства.Свойство("ФильтрПоОрганизации") Тогда
		СтрокаФильтра = ", КассаККМ.Организация=&Организация";
	КонецЕсли;

	// получаем выборку
	Запрос=Новый Запрос("
	|ВЫБРАТЬ
	|   КассыККМОстатки.КассаККМ КАК КассаККМ,
	|   КассыККМОстатки.КассаККМ.ВалютаДенежныхСредств КАК Валюта,
	|   КассыККМОстатки.ТипОплаты КАК ТипОплаты,
	|	ВЫБОР КОГДА КассыККМОстатки.СуммаОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ КассыККМОстатки.СуммаОстаток КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА КассыККМОстатки.СуммаУпрОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ КассыККМОстатки.СуммаУпрОстаток КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность,0)=0 ТОГДА
	|			КурсыВалютСрезПоследних.Курс
	|		ИНАЧЕ
	|			КурсыВалютСрезПоследних.Курс/КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК Курс
	|ИЗ
	|	РегистрНакопления.КассыККМ.Остатки(&Момент" + СтрокаФильтра + ") КАК КассыККМОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Момент) КАК КурсыВалютСрезПоследних
	|	ПО КассыККМОстатки.КассаККМ.ВалютаДенежныхСредств=КурсыВалютСрезПоследних.Валюта");
	Запрос.УстановитьПараметр("Момент",?(РежимПроведения=РежимПроведенияДокумента.Оперативный,Неопределено,ДокументОбъект.МоментВремени()));
	
	// Если нужно добавим фильтр.
	Если ДополнительныеСвойства.Свойство("ФильтрПоПодразделению") Тогда
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ДополнительныеСвойства.ФильтрПоПодразделению);
	ИначеЕсли ДополнительныеСвойства.Свойство("ФильтрПоОрганизации") Тогда
		Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.ФильтрПоОрганизации);	
	КонецЕсли;
	
	РезультатЗапросаКурсовые = Запрос.Выполнить();
	
	// Если необходимо, заполним вспомогательную таблицу движений, которую 
	// можно использовать во "внешнем" коде.
	Если ДополнительныеСвойства.Свойство("ТаблицаДвижений") Тогда
		ЗаполнитьТаблицуДвижений = Истина;
	Иначе
		ЗаполнитьТаблицуДвижений = Ложь;
	КонецЕсли;

	// идем по выборке
	Выборка=РезультатЗапросаКурсовые.Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаПереоценки=Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.Сумма,Выборка.Валюта,Выборка.Курс,ВалютаУпр,КурсУпр)-Выборка.СуммаУпр,2);
		Если СуммаПереоценки=0 Тогда Продолжить; КонецЕсли; // переоценивать нечего
		// переоцениваем
		НоваяЗапись=Добавить();
		НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
		НоваяЗапись.Период=ДокументОбъект.Дата;
		НоваяЗапись.Регистратор=ДокументОбъект.Ссылка;
		НоваяЗапись.КассаККМ=Выборка.КассаККМ;
		НоваяЗапись.ТипОплаты=Выборка.ТипОплаты;
		НоваяЗапись.Сумма=0;
		НоваяЗапись.СуммаУпр=Окр(СуммаПереоценки,2);
		НоваяЗапись.ХозОперация=ДокументОбъект.ХозОперация;
		// доходы/расходы
		СуммаДоходаРасходаКурсовыхРазниц=СуммаДоходаРасходаКурсовыхРазниц+НоваяЗапись.СуммаУпр;
		
		// Заполняем вспомогательную таблицу движений.
		Если ЗаполнитьТаблицуДвижений Тогда
			НоваяСтрока = ДополнительныеСвойства.ТаблицаДвижений.Добавить();
			НоваяСтрока.Подразделение      = Выборка.КассаККМ.ПодразделениеКомпании;
			НоваяСтрока.КурсоваяРазницаУпр = НоваяЗапись.СуммаУпр;
		КонецЕсли;
	КонецЦикла;
	
	// убиваем циклическую ссылку
	ДокументОбъект=Неопределено;
	
	// все ОК
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает остаток наличных
Функция ПолучитьОстатокНаличных(ТипОплаты = Неопределено)
	Запрос = Новый Запрос;  
	МоментВремениВыбор = ?(РежимПроведения = РежимПроведенияДокумента.Оперативный, 
											Неопределено, ДокументОбъект.МоментВремени());
	Запрос.Текст = "ВЫБРАТЬ
	|	КассыККМОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.КассыККМ.Остатки(&НаМомент, КассаККМ = &КассаККМ И ТипОплаты = &ТипОплаты) КАК КассыККМОстатки";
	Запрос.УстановитьПараметр("НаМомент", ?(РасчетОстатковНа = Неопределено ,МоментВремениВыбор, РасчетОстатковНа));
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаОстатка = ?(Выборка.Сумма=NULL, 0, Выборка.Сумма);
	Иначе
		СуммаОстатка = 0;
	КонецЕсли;
	Возврат СуммаОстатка;
КонецФункции // ПолучитьОстатокНаличных()

// Функция возвращает остаток безразличных
Функция ПолучитьОстатокБезналичных(Поступление, ТипОплаты = Неопределено )
	Если РасчетОстатковНа = Неопределено Тогда
		ДатаРасчета = ДокументОбъект.МоментВремени().Дата;
	Иначе
		Если ТипЗнч(РасчетОстатковНа) = Тип("Дата") Тогда
			ДатаРасчета = РасчетОстатковНа;
		ИначеЕсли ТипЗнч(РасчетОстатковНа) = Тип("МоментВремени") Тогда
			ДатаРасчета = РасчетОстатковНа.Дата;
		Иначе
			ДатаРасчета = ДокументОбъект.МоментВремени().Дата;
		КонецЕсли; 
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(КассыККМ.Сумма) КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.КассыККМ КАК КассыККМ
	               |ГДЕ
	               |	КассыККМ.Период <= &НаМомент
	               |	И КассыККМ.КассаККМ = &КассаККМ
	               |	И КассыККМ.ТипОплаты = &ТипОплаты
	               |	И КассыККМ.ВидДвижения = &ВидДвижения
	               |	И (КассыККМ.Сумма " + ?(Поступление, ">", "<") + " 0)";
	Запрос.УстановитьПараметр("НаМомент", ДатаРасчета);
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаПрихода = ?(Выборка.Сумма = NULL, 0, Выборка.Сумма);
	Иначе
		СуммаПрихода = 0;
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(КассыККМ.Сумма) КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.КассыККМ КАК КассыККМ
	               |ГДЕ
	               |	КассыККМ.Период <= &НаМомент
	               |	И КассыККМ.КассаККМ = &КассаККМ
	               |	И КассыККМ.ТипОплаты = &ТипОплаты
	               |	И КассыККМ.ВидДвижения = &ВидДвижения
	               |	И (КассыККМ.Сумма " + ?(Поступление, ">", "<") + " 0)";
	Запрос.УстановитьПараметр("НаМомент", ДатаРасчета);
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаРасхода = ?(Выборка.Сумма = NULL, 0, Выборка.Сумма);
	Иначе
		СуммаРасхода = 0;
	КонецЕсли;
	Возврат СуммаПрихода - СуммаРасхода;
КонецФункции // ПолучитьОстатокБезналичныхПоступление()

#КонецОбласти

#Область Инициализация

РежимПроведения=РежимПроведенияДокумента.Оперативный;
ДокументОбъект=Неопределено; // Обязательный к заполнению перед началом проведения
КассаККМ=Неопределено;
ТипОплаты=Неопределено; // Обязательный к заполнению перед началом проведения
Сумма=0; // Обязательный к заполнению перед началом проведения
РасчетОстатковНа=Неопределено;
СуммаДоходаРасходаКурсовыхРазниц=0;

#КонецОбласти

#КонецЕсли