// Модуль набора записей регистра накоплений "Заказы покупателей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем РежимПроведения Экспорт;				// Режим проведения документа оперативный/неоперативный

Перем ДокументОбъект Экспорт;				// Документ, осуществляющий движение по регистру
Перем РезультатЗапросаПоТоварам Экспорт;	// Выборка табличной части или таблица значений табличной части товаров
Перем Контрагент Экспорт;					// Ссылка на Контрагент или ПодразделениеПолучатель. Если значение неопределено Контрагент находится в табличной части товаров
Перем Заказ Экспорт;						// Ссылка на документ ЗаказПокупателя или ЗаказВнутренний. Если значение неопределено заказ находится в табличной части товаров
Перем СкладКомпании Экспорт;				// Ссылка на склад компании, на котором необходимо производить резервирование. Если значение неопределено склад находится в табличной части товаров

// В соответствии с этими флагами используются соответствующие колонки таблицы товаров
// и осуществляют движения по соответствующим регистрам заказов и резервов.
Перем Заказывать Экспорт;					// Булево. Истина - надо заказывать товары для покупателя
Перем Резервировать Экспорт;				// Булево. Истина - надо резервировать товар на складе
Перем ПоБазовомуКоличеству Экспорт;			// Булево. Ложь - количество товаров будет рассчитываться как "Количество*Коэффициент", Истина - количество будет браться из реквизита "КоличествоБазовое"
Перем ЗакрытиеЗаказаПоДокументуОснованию Экспорт; //Возможность закрытия заказа покупателя не по контрагенту, а по общему документу основания
Перем ИнтерактивноеПроведение Экспорт; 		// Булево. признак того, что документ проводится интерактивно из формы документа.
Перем ВидОперации Экспорт;					// Вид операции заказа по умолчанию
Перем ОснованиеЗаказовПокупателя Экспорт;	// Документ, на основании которого введены заказы покупателю.
Перем ПеремещениеТоваров Экспорт;			// Признак того, что перемещаем со склада на склад товар

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияВЗаказах")
		И НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ОтменаПроведения", Ложь) Тогда
		ЗаказыСервер.УстановитьСостояниеЗаказа(ЭтотОбъект);
	КонецЕсли;
	
	Если Константы.ИспользоватьНапоминанияПоЗаказамОРезервировании.Получить() Тогда
		ЗаказыСервер.НапоминаниеЗаказыПокупателейРезервирование(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует движения по регистру приход (регистрируем заказ)
// Возвращаемое значение: Булево. Истина - все ОК, Ложь - чего-то не так.
Функция Приход() Экспорт
	ВсеОК=Истина;

	УстановитьПривилегированныйРежим(Истина);
	
	// Получим таблицу товарного состава
	Если (РезультатЗапросаПоТоварам = Неопределено)
		ИЛИ (ТипЗнч(РезультатЗапросаПоТоварам)<>Тип("РезультатЗапроса"))
		И (ТипЗнч(РезультатЗапросаПоТоварам)<>Тип("ТаблицаЗначений")) Тогда
		РезультатЗапросаПоТоварам = ПолучитьТаблицуТоваров();
	КонецЕсли;
	
	Если ТипЗнч(РезультатЗапросаПоТоварам) = Тип("РезультатЗапроса") Тогда
		РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	КонецЕсли;
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	РезервированиеСвободногоОстатка = Истина;
	Если Резервировать <> Истина Тогда
		РезервированиеСвободногоОстатка = Ложь;
	ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваров")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров")) Тогда
		РезервированиеСвободногоОстатка = Ложь;
	КонецЕсли;
	
	КонтрольОстаткаПоРезервам = Неопределено;
	Если Резервировать <> Истина Тогда
		КонтрольОстаткаПоРезервам = Ложь;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаказов.ПеремещениеРезерва Тогда
		РезервированиеСвободногоОстатка = Истина;
		КонтрольОстаткаПоРезервам = Ложь;
	ИначеЕсли КонтрольОстаткаПоРезервам = Неопределено Тогда
		КонтрольОстаткаПоРезервам = Истина;
	КонецЕсли;
	
	// Получение остатков по заказам покупателей
	Если КонтрольОстаткаПоРезервам ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаказов.ПеремещениеРезерва Тогда
		ВыборкаОстатковТоваров = ПолучитьОстаткиТоваров().Выбрать();
	КонецЕсли;
	
	Если Заказ = Неопределено Тогда
		ВалютаДоговора = Справочники.Валюты.ПустаяСсылка();
	Иначе
		Если ЕстьРеквизит(Заказ,"ДоговорВзаиморасчетов") Тогда
			ВалютаДоговора = Заказ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
		Иначе
			ВалютаДоговора = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли;
	
	СтруктураОтбораОстатковТоваров = Новый Структура("Заказ, Номенклатура, ХарактеристикаНоменклатуры");
	
	Замена         = Ложь;
	Если Заказывать И (НЕ ВидОперации = Неопределено) Тогда
		ВидОперацииЗаказ = ВидОперации;
		Если ВидОперации = Перечисления.ВидыОперацийЗаказов.Замена Тогда
			Замена = Истина;
		КонецЕсли;
	Иначе
		ВидОперацииЗаказ = Перечисления.ВидыОперацийЗаказов.Заказ;
	КонецЕсли;
	Если ВидОперации = Неопределено Тогда
		ВидОперацииРезервирование = Перечисления.ВидыОперацийЗаказов.Резервирование;
	Иначе
		ВидОперацииРезервирование = ВидОперации;
	КонецЕсли;
	
	// Перебираем строки товаров
	Для Каждого СтрокаТоваров Из РезультатЗапросаПоТоварам Цикл
		КонтрагентЗаказа = ?(Контрагент = Неопределено, СтрокаТоваров.Контрагент, Контрагент);
		Если Заказ = Неопределено Тогда
			ЗаказЗаказа = СтрокаТоваров.Заказ;
			Если ЕстьРеквизит(ЗаказЗаказа,"ДоговорВзаиморасчетов") Тогда
				ВалютаДоговора = ЗаказЗаказа.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
			КонецЕсли;
		Иначе
			ЗаказЗаказа = Заказ;
		КонецЕсли;
		СкладЗаказа = ?(СкладКомпании = Неопределено, СтрокаТоваров.СкладКомпании, СкладКомпании);
		
		Если ТипЗнч(СкладЗаказа) = Тип("СправочникСсылка.СкладыКомпании") Тогда
			Если Резервировать Тогда
				Резерв = СтрокаТоваров.Резерв;
			Иначе
				Резерв = 0;
			КонецЕсли;
		Иначе
			Резерв = 0;
		КонецЕсли;
		
		Если Заказывать Тогда
			
			Количество  = СтрокаТоваров.Количество;
			
			Если ВалютаДоговора.Пустая() Тогда
				Сумма  = 0;
			Иначе
				Сумма  = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СтрокаТоваров.Сумма,
					ДокументОбъект.ВалютаДокумента,
					ДокументОбъект.КурсДокумента,
					ВалютаДоговора,ДокументОбъект.Дата
				);
			КонецЕсли;
			СуммаУпр   = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаТоваров.Сумма,
				ДокументОбъект.ВалютаДокумента,
				ДокументОбъект.КурсДокумента,
				Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
				?(НЕ ЗначениеЗаполнено(ДокументОбъект.КурсВалютыУпр),
				ДокументОбъект.Дата,
				ДокументОбъект.КурсВалютыУпр)
			);
		Иначе
			Количество = 0;
			Сумма      = 0;
			СуммаУпр   = 0;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийЗаказов.ПеремещениеРезерва Тогда
			РезервСвободный = 0;
		ИначеЕсли РезервированиеСвободногоОстатка Тогда
			РезервСвободный = Резерв;
		Иначе
			РезервСвободный = 0;
		КонецЕсли;
		Если КонтрольОстаткаПоРезервам ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаказов.ПеремещениеРезерва Тогда
			ВыборкаОстатковТоваров.Сбросить();
			СтруктураОтбораОстатковТоваров.Заказ=ЗаказЗаказа;
			СтруктураОтбораОстатковТоваров.Номенклатура=СтрокаТоваров.Номенклатура;
			СтруктураОтбораОстатковТоваров.ХарактеристикаНоменклатуры=СтрокаТоваров.ХарактеристикаНоменклатуры;
			
			Если ВыборкаОстатковТоваров.НайтиСледующий(СтруктураОтбораОстатковТоваров) Тогда
				КоличествоОстаток = ВыборкаОстатковТоваров.Количество-ВыборкаОстатковТоваров.Резерв;
				Если ВидОперации = Перечисления.ВидыОперацийЗаказов.ПеремещениеРезерва Тогда
					РезервСвободный = Мин(ВыборкаОстатковТоваров.РезервСвободный, Резерв);
				КонецЕсли;
			Иначе
				КоличествоОстаток = 0;
			КонецЕсли;
			
			Если КонтрольОстаткаПоРезервам Тогда
				Если Резерв>(КоличествоОстаток+Количество) Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда
						
						ОбщегоНазначения.СообщитьПользователю(
							СокрЛП(?(Заказ=Неопределено,СтрокаТоваров.Заказ,Заказ))+": ["
								+УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТоваров.Номенклатура)+"] "+"Товар" + " """
								+СокрЛП(СтрокаТоваров.Номенклатура)+""". " + "Резервируется" + " "+Формат(Резерв,"ЧДЦ=3; ЧН=0,00")
								+" "+СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения)+". " + НСтр("ru = 'Остаток по заказу'") + " "
								+Формат(КоличествоОстаток+Количество,"ЧДЦ=3; ЧН=0,00")+" "
								+СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения)+". " + "Превышение" + " "
								+Формат(Резерв-(КоличествоОстаток+Количество),"ЧДЦ=3; ЧН=0,00")+" "
								+СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения),
							ДокументОбъект,
							,
							,
							Истина
						);
						
					Иначе
						
						ОбщегоНазначения.СообщитьПользователю(
							СокрЛП(?(Заказ=Неопределено,СтрокаТоваров.Заказ,Заказ))+": ["
								+УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТоваров.Номенклатура)
								+"] " +"Товар" + " """+СокрЛП(СтрокаТоваров.Номенклатура)+""" " + НСтр("ru = 'с характеристикой'") + " """
								+СокрЛП(СтрокаТоваров.ХарактеристикаНоменклатуры)+""". " + "Резервируется" + " "
								+Формат(Резерв,"ЧДЦ=3; ЧН=0,00")+" "+СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения)
								+". " + НСтр("ru = 'Остаток по заказу'") + " "+Формат(КоличествоОстаток+Количество,"ЧДЦ=3; ЧН=0,00")+" "
								+СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения)+". " + "Превышение" + " "
								+Формат(Резерв-(КоличествоОстаток+Количество),"ЧДЦ=3; ЧН=0,00")+" "
								+СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения),
							ДокументОбъект,
							,
							,
							Истина
						);
					КонецЕсли;
					
					ВсеОК=Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВсеОК И (Количество<>0 ИЛИ Резерв<>0) Тогда
			// Создаем запись регистра заказов покупателей
			НоваяЗапись=Добавить();
			НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период                     = ДокументОбъект.Дата;
			НоваяЗапись.Регистратор                = ДокументСсылка;
			НоваяЗапись.Контрагент                 = КонтрагентЗаказа;
			НоваяЗапись.Заказ                      = ЗаказЗаказа;
			НоваяЗапись.Номенклатура               = СтрокаТоваров.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры;
			НоваяЗапись.СкладКомпании              = СкладЗаказа;
			// Определяемся с хоз. операцией
			НоваяЗапись.ХозОперация                = ДокументОбъект.ХозОперация;
			// Количество
			Если Количество>0 Тогда
				НоваяЗапись.Заказано    = Количество;
				НоваяЗапись.Сумма       = Сумма;
				НоваяЗапись.СуммаУпр    = СуммаУпр;
				НоваяЗапись.ВидОперации = ВидОперацииЗаказ;
				Если Замена Тогда
					НоваяЗапись.ИдентификаторЗамены = СтрокаТоваров.ИдентификаторСтроки;
				КонецЕсли;
			Иначе
				НоваяЗапись.ВидОперации = ВидОперацииРезервирование;
			КонецЕсли;
			// Резерв
			Если Резерв>0 Тогда
				НоваяЗапись.Резерв           = Резерв;
				НоваяЗапись.РезервСвободный  = РезервСвободный;
				Если НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийЗаказов.Заказ Тогда
					НоваяЗапись.ВидОперации  = Перечисления.ВидыОперацийЗаказов.ЗаказСРезервированием;
				КонецЕсли;
				// Для перемещения переносим и заказано
				ПеренестиЗаказаноИСуммаДляПеремещения(НоваяЗапись, СтрокаТоваров);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	Если ВсеОК Тогда 
		ВсеОК = КонтрольОстатковОперативно();
	КонецЕсли;
	
	// Убиваем циклическую ссылку
	ДокументОбъект = Неопределено;
	ВидОперации    = Неопределено;
	
	Возврат ВсеОК;
КонецФункции

// Формирует движения по регистру расход (регистрируем списание заказа)
// Возвращаемое значение: Булево. Истина - все ОК, Ложь - чего-то не так.
Функция Расход() Экспорт
	
	ВсеОК = Истина;
	// Получим таблицу товарного состава
	Если (РезультатЗапросаПоТоварам = Неопределено)
		ИЛИ (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("РезультатЗапроса"))
		И (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("ТаблицаЗначений")) Тогда
		РезультатЗапросаПоТоварам = ПолучитьТаблицуТоваров();
	КонецЕсли;
	
	Если ТипЗнч(РезультатЗапросаПоТоварам) = Тип("РезультатЗапроса") Тогда
		РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	КонецЕсли;
	
	// Выберем остатки заказов покупателя
	РезультатЗапроса = ЗапросОстатковЗаказовПокупателей();
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыПокупателей");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
	ЗначенияБлокировки.Вставить("СкладКомпании", СкладКомпании);
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
	ОписаниеИсточника = Новый Соответствие;
	Если Заказ=Неопределено Тогда
		ОписаниеИсточника.Вставить("Заказ", "Заказ");
	Иначе
		ЗначенияБлокировки.Вставить("Заказ",Заказ);
	КонецЕсли; 
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	ВыборкаОстаткиЗаказа = РезультатЗапроса.Выбрать();
	
	ИмяКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах().Имя;
	ВидОперации = Перечисления.ВидыОперацийЗаказов.ПеремещениеРезерва;
	СтруктураОтбораОстаткиЗаказа = Новый Структура("ЗаказПокупателя, Номенклатура, ХарактеристикаНоменклатуры");
	Для Каждого СтрокаТоваров Из РезультатЗапросаПоТоварам Цикл
		// Запомним количество, которое необходимо списать с заказов
		Количество = СтрокаТоваров.Количество;
		Если Заказ = Неопределено Тогда
			ЗаказЗаказа = СтрокаТоваров.Заказ;
		Иначе
			ЗаказЗаказа = Заказ;
		КонецЕсли; 
		
		ВыборкаОстаткиЗаказа.Сбросить();
		СтруктураОтбораОстаткиЗаказа.ЗаказПокупателя            = ЗаказЗаказа;
		СтруктураОтбораОстаткиЗаказа.Номенклатура               = СтрокаТоваров.Номенклатура;
		СтруктураОтбораОстаткиЗаказа.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры;
		Если ВыборкаОстаткиЗаказа.НайтиСледующий(СтруктураОтбораОстаткиЗаказа) Тогда
			ОстатокРезерваЗаказа  = ВыборкаОстаткиЗаказа.Резерв;
			ОстатокЗаказано = ВыборкаОстаткиЗаказа.Заказано;
			
			Если Количество > ОстатокРезерваЗаказа Тогда
				
				ЗаказПараметр = СокрЛП(?(Заказ=Неопределено,СтрокаТоваров.Заказ,Заказ));
				ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(ВыборкаОстаткиЗаказа.Номенклатура);
				
				Если НЕ ЗначениеЗаполнено(ВыборкаОстаткиЗаказа.ХарактеристикаНоменклатуры) Тогда
					
					ТекстСообщения = ""+ЗаказПараметр+": ["+ЗначениеКолонкиКода+"] " + "Товар" + " """
						+СокрЛП(ВыборкаОстаткиЗаказа.Номенклатура)+""". " + "Зарезервировано" + " "
						+Формат(ОстатокРезерваЗаказа,"ЧДЦ=3; ЧН=0,00")+" "
						+СокрЛП(ВыборкаОстаткиЗаказа.Номенклатура.БазоваяЕдиницаИзмерения)+" " + НСтр("ru = 'по заказу'")+ " "
						+СокрЛП(ЗаказЗаказа)+" " + НСтр("ru = 'на складе'") +" "+СокрЛП(СкладКомпании)+". " + "Списывается" + " "
						+Формат(Количество,"ЧДЦ=3; ЧН=0,00")+" "+СокрЛП(ВыборкаОстаткиЗаказа.Номенклатура.БазоваяЕдиницаИзмерения)
						+". " + "Превышение" + " "+Формат(Количество-ОстатокРезерваЗаказа,"ЧДЦ=3; ЧН=0,00")+" "
						+СокрЛП(ВыборкаОстаткиЗаказа.Номенклатура.БазоваяЕдиницаИзмерения);
						
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = '%1'"), ТекстСообщения),
						ДокументОбъект,
						,,
						Истина
					);
				Иначе
					
					ТекстСообщения = НСтр("ru = '"+ЗаказПараметр+": ["+ЗначениеКолонкиКода+"] " + "Товар" + " """
						+СокрЛП(ВыборкаОстаткиЗаказа.Номенклатура)+""" " + НСтр("ru = 'с характеристикой'") + " """
						+СокрЛП(ВыборкаОстаткиЗаказа.ХарактеристикаНоменклатуры)+""". " + "Зарезервировано" + " "
						+Формат(ОстатокРезерваЗаказа,"ЧДЦ=3; ЧН=0,00")+" "
						+СокрЛП(ВыборкаОстаткиЗаказа.Номенклатура.БазоваяЕдиницаИзмерения)+ " " + НСтр("ru = 'по заказу'")  + " """
						+СокрЛП(ЗаказЗаказа)+""" " + НСтр("ru = 'на складе'")+ " """+СокрЛП(СкладКомпании)+"""." +"Списывается" + " "
						+Формат(Количество,"ЧДЦ=3; ЧН=0,00")+" "+СокрЛП(ВыборкаОстаткиЗаказа.Номенклатура.БазоваяЕдиницаИзмерения)
						+". " + "Превышение" + " "
						+Формат(Количество-ОстатокРезерваЗаказа,"ЧДЦ=3; ЧН=0,00")+" "
						+СокрЛП(ВыборкаОстаткиЗаказа.Номенклатура.БазоваяЕдиницаИзмерения));
						
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = '%1'"), ТекстСообщения),
						ДокументОбъект,
						,,
						Истина
					);
					
				КонецЕсли;
				
				ВсеОК = Ложь;
				
			КонецЕсли;
			
			// Создаем запись регистра заказов покупателей.
			НоваяЗапись=Добавить();
			НоваяЗапись.ВидДвижения   = ВидДвиженияНакопления.Расход;
			НоваяЗапись.Период        = ДокументОбъект.Дата;
			НоваяЗапись.Регистратор   = ДокументОбъект.Ссылка;
			НоваяЗапись.Контрагент    = ?(Контрагент=Неопределено,СтрокаТоваров.Контрагент,Контрагент);
			НоваяЗапись.Заказ         = ЗаказЗаказа;
			НоваяЗапись.СкладКомпании = СкладКомпании;
			НоваяЗапись.Номенклатура  = ВыборкаОстаткиЗаказа.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = ВыборкаОстаткиЗаказа.ХарактеристикаНоменклатуры;
			
			// Определяемся с хоз. операцией
			НоваяЗапись.ХозОперация   = ДокументОбъект.ХозОперация;
			НоваяЗапись.ВидОперации   = ВидОперации;
			// Количество
			НоваяЗапись.Резерв          = Мин(Количество,ОстатокРезерваЗаказа);
			НоваяЗапись.РезервСвободный = Мин(Количество, ВыборкаОстаткиЗаказа.РезервСвободный);
			СтрокаТоваров.Резерв = СтрокаТоваров.Резерв + НоваяЗапись.Резерв;
			// Спишем найденное количество
			Если ПеремещениеТоваров Тогда
				НоваяЗапись.Заказано = Мин(ОстатокЗаказано, НоваяЗапись.Резерв);
			Иначе
				НоваяЗапись.Заказано = НоваяЗапись.Резерв;
			КонецЕсли;
			
			Если ВыборкаОстаткиЗаказа.Заказано > НоваяЗапись.Заказано И НоваяЗапись.Заказано <> 0 Тогда
				НоваяЗапись.Сумма    = (ВыборкаОстаткиЗаказа.Сумма / ВыборкаОстаткиЗаказа.Заказано) * НоваяЗапись.Заказано;
				НоваяЗапись.СуммаУпр = (ВыборкаОстаткиЗаказа.СуммаУпр / ВыборкаОстаткиЗаказа.Заказано) * НоваяЗапись.Заказано;
			Иначе
				НоваяЗапись.Сумма    = ВыборкаОстаткиЗаказа.Сумма;
				НоваяЗапись.СуммаУпр = ВыборкаОстаткиЗаказа.СуммаУпр;
			КонецЕсли;
			
		Иначе
			ЗаказПараметр = СокрЛП(?(Заказ=Неопределено,СтрокаТоваров.Заказ,Заказ));
			ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТоваров.Номенклатура);
			
			Если НЕ ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = '%1: [%2] Товар ""%3"" по заказу ""%4"". Не зарезервирован на складе ""%5""'"),
						ЗаказПараметр,
						ЗначениеКолонкиКода,
						СокрЛП(ВыборкаОстаткиЗаказа.Номенклатура),
						СокрЛП(ЗаказЗаказа),
						СокрЛП(СкладКомпании)
					),
					ДокументОбъект,
					,,
					Истина
				);
				
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = '%1: [%2] Товар ""%3"" с характеристикой ""%4"" по заказу ""%5"". Не зарезервирован на складе ""%6""'"),
						ЗаказПараметр,
						ЗначениеКолонкиКода,
						СокрЛП(ВыборкаОстаткиЗаказа.Номенклатура),
						СокрЛП(СтрокаТоваров.ХарактеристикаНоменклатуры),
						СокрЛП(ЗаказЗаказа),
						СокрЛП(СкладКомпании)
					),
					ДокументОбъект,
					,, 
					Истина
				);
			КонецЕсли;
			ВсеОК = Ложь;
		КонецЕсли;
	КонецЦикла;

	Если ВсеОК Тогда 
		ВсеОК = КонтрольОстатковОперативно();
	КонецЕсли;
	
	// Убиваем циклическую ссылку
	ДокументОбъект = Неопределено;
	ВидОперации    = Неопределено;

	Возврат ВсеОК;
	
КонецФункции

// Формирует движения по регистру расход (закрываем заказы по FIFO).
//
// Параметры:
//	ОстаткиЗаказов - ТаблицаЗначений - коллекция остатков товаров в заказах доступных для списания, с колонками:
//		* Контрагент
//		* ЗаказПокупателя
//		* Номенклатура
//		* ХарактеристикаНоменклатуры
//		* Заказано
//		* Сумма
//		* СуммаУпр
//		* Количество
//		* Резерв
//		* РезервСвободный
//		* СкладЗаказа
//		* СкладКомпании
//		* Приоритет
//		* ЗаказПокупателяДата
//
// Возвращаемое значение:
//	Булево - признак успешности операции
//
Функция ЗакрытиеЗаказовПокупателя(ОстаткиЗаказов = Неопределено) Экспорт
	
	ВсеОК = Истина;
	
	Если ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("ТаблицаЗначений") Тогда
		
		Если ТипЗнч(РезультатЗапросаПоТоварам) = Тип("РезультатЗапроса") Тогда
			
			РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
			
		Иначе
			
			РезультатЗапросаПоТоварам = ПолучитьТаблицуТоваров();
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатЗапросаПоТоварам.Сортировать("Номенклатура Возр,ХарактеристикаНоменклатуры Убыв");
	
	Если ОстаткиЗаказов = Неопределено Тогда
	
		ОстаткиЗаказов = ОстаткиЗаказов(РезультатЗапросаПоТоварам);
		
	КонецЕсли;
	
	ЗакрытиеЗаказаПоДокументуОснованию = Неопределено;
	ВидОперации = Перечисления.ВидыОперацийЗаказов.ЗакрытиеЗаказа;
	
	Для Каждого СтрокаТоваров Из РезультатЗапросаПоТоварам Цикл
		// Запомним количество, которое необходимо списать с заказов
		Количество = СтрокаТоваров.Количество;
		Для Каждого СтрокаЗаказа Из ОстаткиЗаказов Цикл
			Если Количество=0 Тогда
				Прервать;
			КонецЕсли;
			Пока Количество>0 Цикл
				// Пока есть что списывать
				Если СтрокаЗаказа.Номенклатура=СтрокаТоваров.Номенклатура
					И (СтрокаЗаказа.ХарактеристикаНоменклатуры=СтрокаТоваров.ХарактеристикаНоменклатуры
						ИЛИ СтрокаЗаказа.ХарактеристикаНоменклатуры.Пустая()
						ИЛИ СтрокаТоваров.ХарактеристикаНоменклатуры.Пустая())
					И (СтрокаЗаказа.Количество<>0 ИЛИ СтрокаЗаказа.Резерв<>0) Тогда
					Если Заказывать Тогда
						ОстатокКоличестваЗаказа = СтрокаЗаказа.Количество;
					Иначе
						ОстатокКоличестваЗаказа = СтрокаЗаказа.Резерв;
					КонецЕсли;
					ОстатокРезерваЗаказа = СтрокаЗаказа.Резерв;
					КоличествоСписания = Мин(Количество,ОстатокКоличестваЗаказа);
					КоличествоСписанияРезерва = Мин(КоличествоСписания,ОстатокРезерваЗаказа);
					Если КоличествоСписания<>0 ИЛИ КоличествоСписанияРезерва<>0 Тогда
						// Создаем запись регистра заказов покупателей
						НоваяЗапись=Добавить();
						НоваяЗапись.ВидДвижения   = ВидДвиженияНакопления.Расход;
						НоваяЗапись.Период        = ДокументОбъект.Дата;
						НоваяЗапись.Регистратор   = ДокументОбъект.Ссылка;
						НоваяЗапись.Контрагент    = СтрокаЗаказа.Контрагент;
						НоваяЗапись.Заказ         = СтрокаЗаказа.ЗаказПокупателя;
						НоваяЗапись.Номенклатура  = СтрокаЗаказа.Номенклатура;
						НоваяЗапись.ХарактеристикаНоменклатуры=СтрокаЗаказа.ХарактеристикаНоменклатуры;
						НоваяЗапись.СкладКомпании = СтрокаЗаказа.СкладКомпании;
						// определяемся с хоз. операцией
						НоваяЗапись.ХозОперация     = ДокументОбъект.ХозОперация;
						НоваяЗапись.ВидОперации     = ВидОперации;
						// количество
						НоваяЗапись.Резерв          = КоличествоСписанияРезерва;
						
						РезервСвободный = Мин(СтрокаЗаказа.РезервСвободный, КоличествоСписанияРезерва);
						
						НоваяЗапись.РезервСвободный = РезервСвободный;
						
						Если (НЕ СтрокаЗаказа.СкладКомпании = СтрокаЗаказа.СкладЗаказа) И КоличествоСписания>0 Тогда
							// Создаем запись регистра заказов покупателей
							НоваяЗапись=Добавить();
							НоваяЗапись.ВидДвижения   = ВидДвиженияНакопления.Расход;
							НоваяЗапись.Период        = ДокументОбъект.Дата;
							НоваяЗапись.Регистратор   = ДокументОбъект.Ссылка;
							НоваяЗапись.Контрагент    = СтрокаЗаказа.Контрагент;
							НоваяЗапись.Заказ         = СтрокаЗаказа.ЗаказПокупателя;
							НоваяЗапись.Номенклатура  = СтрокаЗаказа.Номенклатура;
							НоваяЗапись.ХарактеристикаНоменклатуры=СтрокаЗаказа.ХарактеристикаНоменклатуры;
							НоваяЗапись.СкладКомпании = СтрокаЗаказа.СкладЗаказа;
							// определяемся с хоз. операцией
							НоваяЗапись.ХозОперация   = ДокументОбъект.ХозОперация;
							НоваяЗапись.ВидОперации   = ВидОперации;
						КонецЕсли;
						// Количество
						НоваяЗапись.Заказано          = КоличествоСписания;
						// Сумма заказа
						Если СтрокаЗаказа.Заказано > КоличествоСписания И СтрокаЗаказа.Заказано <> 0 Тогда
							НоваяЗапись.Сумма    = (СтрокаЗаказа.Сумма/СтрокаЗаказа.Заказано)*КоличествоСписания;
							НоваяЗапись.СуммаУпр = (СтрокаЗаказа.СуммаУпр/СтрокаЗаказа.Заказано)*КоличествоСписания;
						Иначе
							НоваяЗапись.Сумма    = СтрокаЗаказа.Сумма;
							НоваяЗапись.СуммаУпр = СтрокаЗаказа.СуммаУпр;
						КонецЕсли;
						
						Количество = Количество - КоличествоСписания;
						ПараметрыОтбора = Новый Структура(
							"Номенклатура, ХарактеристикаНоменклатуры, ЗаказПокупателя, Контрагент, СкладКомпании"
						);
						ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаЗаказа);
						НайденныеСтроки = ОстаткиЗаказов.НайтиСтроки(ПараметрыОтбора);
						СтрокаТоваров.Резерв         = СтрокаТоваров.Резерв  + КоличествоСписанияРезерва;
						СтрокаЗаказа.Количество      = СтрокаЗаказа.Количество - КоличествоСписания;
						СтрокаЗаказа.Резерв          = СтрокаЗаказа.Резерв   - КоличествоСписанияРезерва;
						СтрокаЗаказа.РезервСвободный = СтрокаЗаказа.РезервСвободный - РезервСвободный;
						Для Каждого СтрокаЗаказа Из НайденныеСтроки Цикл
							СтрокаЗаказа.Заказано        = СтрокаЗаказа.Заказано - КоличествоСписания;
							СтрокаЗаказа.Сумма           = СтрокаЗаказа.Сумма    - НоваяЗапись.Сумма;
							СтрокаЗаказа.СуммаУпр        = СтрокаЗаказа.СуммаУпр - НоваяЗапись.СуммаУпр;
						КонецЦикла;
						Если КоличествоСписания = 0 Тогда
							Прервать;
						КонецЕсли;
					Иначе
						Прервать;
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Если ВсеОК Тогда 
		ВсеОК = КонтрольОстатковОперативно();
	КонецЕсли;
	
	// убиваем циклическую ссылку
	ДокументОбъект = Неопределено;
	ВидОперации    = Неопределено;
	
	Возврат ВсеОК;
КонецФункции

// Формирует движения по регистру приход (корректируем заказ покупателя)
// Возвращаемое значение: Булево. Истина - все ОК, Ложь - чего-то не так.
Функция КорректировкаЗаказаПокупателя() Экспорт
	ВсеОК = Истина;
	
	// Получим таблицу товарного состава
	Если (РезультатЗапросаПоТоварам = Неопределено) ИЛИ (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("РезультатЗапроса")) 
			И (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("ТаблицаЗначений")) Тогда
		РезультатЗапросаПоТоварам = ПолучитьТаблицуТоваров();
	КонецЕсли;
	
	// Получение остатков по заказам покупателей
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РезультатЗапросаПоТоварам", РезультатЗапросаПоТоварам);
	
	Если ТипЗнч(РезультатЗапросаПоТоварам) = Тип("РезультатЗапроса") Тогда
		РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	КонецЕсли;
	
	// Отбор по контрагенту
	ТекстПараметров = "";
	ТекстПараметровВТаблице = "";
	Если Контрагент=Неопределено Тогда
		ТекстПараметровВТаблице = "Контрагент, ";
	Иначе
		ТекстПараметров = "Контрагент=&Контрагент И ";
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	КонецЕсли;
	// Отбор по заказу
	Если Заказ=Неопределено Тогда
		ТекстПараметровВТаблице = ТекстПараметровВТаблице + "Заказ, ";
	Иначе
		ТекстПараметров = ТекстПараметров + "Заказ=&Заказ И ";
		Запрос.УстановитьПараметр("Заказ", Заказ);
	КонецЕсли;
	// Текст параметров
	ТекстПараметров = ТекстПараметров + "(" + ТекстПараметровВТаблице + " Номенклатура, ХарактеристикаНоменклатуры) В 
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ " + ТекстПараметровВТаблице + " Номенклатура, ХарактеристикаНоменклатуры ИЗ РезультатЗапросаПоТоварам)";
	КонтрагентТекст = ?(РезультатЗапросаПоТоварам.Колонки.Найти("Контрагент") = Неопределено, 
									"", "	РезультатЗапросаПоТоварам.Контрагент КАК Контрагент,");          	
	ВалютаТекст = ?(ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя"), "&ВалютаДоговора", 
									"ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)");
	Запрос.Текст = "ВЫБРАТЬ
	|	" + ?(Контрагент = Неопределено, КонтрагентТекст, "	&Контрагент КАК Контрагент,") + "
	|	" + ?(Заказ = Неопределено, "РезультатЗапросаПоТоварам.Заказ", "&Заказ") + " КАК Заказ,
	|	РезультатЗапросаПоТоварам.Номенклатура КАК Номенклатура,
	|	РезультатЗапросаПоТоварам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РезультатЗапросаПоТоварам.Количество КАК Количество,
	|	РезультатЗапросаПоТоварам.Сумма КАК Сумма
	|ПОМЕСТИТЬ РезультатЗапросаПоТоварам
	|ИЗ
	|	&РезультатЗапросаПоТоварам КАК РезультатЗапросаПоТоварам
	|;
	|
	|ВЫБРАТЬ
	|	" + ?(Контрагент = Неопределено И РезультатЗапросаПоТоварам.Колонки.Найти("Контрагент") = Неопределено, "	ВЫБОР
	|	КОГДА РезультатЗапросаПоТоварам.Заказ ССЫЛКА Документ.ЗаказПокупателя ТОГДА 
	|		ВЫРАЗИТЬ(РезультатЗапросаПоТоварам.Заказ КАК Документ.ЗаказПокупателя).Контрагент
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ(РезультатЗапросаПоТоварам.Заказ КАК Документ.ЗаказВнутренний).ПодразделениеПолучатель
	|	КОНЕЦ","	РезультатЗапросаПоТоварам.Контрагент")+" КАК Контрагент,
	|	РезультатЗапросаПоТоварам.Заказ КАК Заказ,
	|	РезультатЗапросаПоТоварам.Заказ.СкладКомпании КАК СкладЗаказа,
	|	" + ?(Заказ = Неопределено,"ВЫБОР
	|	КОГДА РезультатЗапросаПоТоварам.Заказ ССЫЛКА Документ.ЗаказПокупателя ТОГДА 
	|		ВЫРАЗИТЬ(РезультатЗапросаПоТоварам.Заказ КАК Документ.ЗаказПокупателя).ДоговорВзаиморасчетов.ВалютаВзаиморасчетов
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	КОНЕЦ", ВалютаТекст) + " КАК ВалютаДоговора,
	|	РезультатЗапросаПоТоварам.Номенклатура КАК Номенклатура,
	|	РезультатЗапросаПоТоварам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РезультатЗапросаПоТоварам.Количество КАК Количество,
	|	РезультатЗапросаПоТоварам.Сумма КАК Сумма
	|ПОМЕСТИТЬ
	|	ЗапросПоТоварам
	|ИЗ
	|	РезультатЗапросаПоТоварам КАК РезультатЗапросаПоТоварам
	|ИНДЕКСИРОВАТЬ ПО
	|	" + ?(Контрагент = Неопределено, "Контрагент,", "") + "
	|	" + ?(Заказ = Неопределено, "Заказ,", "") + "
	|	Номенклатура
	|;
	|
	|ВЫБРАТЬ
	|	ЗапросПоТоварам.Контрагент КАК Контрагент,
	|	ЗапросПоТоварам.Заказ КАК Заказ,
	|	ЗапросПоТоварам.ВалютаДоговора КАК ВалютаДоговора,
	|	ЗапросПоТоварам.СкладЗаказа КАК СкладЗаказа,
	|	ЗапросПоТоварам.Номенклатура КАК Номенклатура,
	|	ЗапросПоТоварам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗапросПоТоварам.Количество КАК ЗаказаноПоДокументу,
	|	ЗапросПоТоварам.Сумма КАК СуммаПоДокументу,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) КАК Заказано,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК МинимальныйОстаток,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаОстаток,0) КАК Сумма,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаУпрОстаток,0) КАК СуммаУпр
	|ИЗ
	|	ЗапросПоТоварам КАК ЗапросПоТоварам
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&Момент, " + ТекстПараметров + ") КАК ЗаказыПокупателейОстатки
	|ПО
	|	ЗапросПоТоварам.Заказ                      = ЗаказыПокупателейОстатки.Заказ
	|	И ЗапросПоТоварам.Номенклатура               = ЗаказыПокупателейОстатки.Номенклатура
	|	И ЗапросПоТоварам.ХарактеристикаНоменклатуры = ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры
	|";
	
	Запрос.УстановитьПараметр("Момент", ?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, ДокументОбъект.МоментВремени()));
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Запрос.УстановитьПараметр("ВалютаДоговора", Заказ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов);
	КонецЕсли;
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыПокупателей");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
	ОписаниеИсточника = Новый Соответствие;
	Если Контрагент = Неопределено Тогда
		ОписаниеИсточника.Вставить("Контрагент", "Контрагент");
	Иначе
		ЗначенияБлокировки.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	Если Заказ = Неопределено Тогда
		ОписаниеИсточника.Вставить("Заказ", "Заказ");
	Иначе
		ЗначенияБлокировки.Вставить("Заказ", Заказ);
	КонецЕсли;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	ВыборкаТоваров=Запрос.Выполнить().Выбрать();
	// Реквизиты документа
	ВалютаУпр		= Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаДокумента	= ДокументОбъект.ВалютаДокумента;
	КурсДокумента	= ДокументОбъект.КурсДокумента;
	ДатаДокумента	= ДокументОбъект.Дата;
	КурсВалютыУпрДокумента = ДокументОбъект.КурсВалютыУпр;
	ПоКурсуВалютыКон = ?(НЕ ЗначениеЗаполнено(КурсВалютыУпрДокумента), ДатаДокумента, КурсВалютыУпрДокумента);
	
	ИмяКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах().Имя;
	ВидОперации    = Перечисления.ВидыОперацийЗаказов.КорректировкаЗаказа;
	Пока ВыборкаТоваров.Следующий() Цикл
		
		Заказано = ВыборкаТоваров.Заказано;
		МинОст   = ВыборкаТоваров.МинимальныйОстаток;
		Сумма    = ВыборкаТоваров.Сумма;
		СуммаУпр = ВыборкаТоваров.СуммаУпр;
		
		ЗаказаноПоДокументу = ВыборкаТоваров.ЗаказаноПоДокументу;
		// Проверим остатки
		ЗначениеКорректировки = ЗаказаноПоДокументу - Заказано;
		
		Если ЗначениеЗаполнено(ВыборкаТоваров.ВалютаДоговора) Тогда
			СуммаПоДокументу = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаТоваров.СуммаПоДокументу, ВалютаДокумента, КурсДокумента, ВыборкаТоваров.ВалютаДоговора, ДатаДокумента);
		Иначе
			СуммаПоДокументу = 0;
		КонецЕсли;
		
		СуммаПоДокументуУпр = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаТоваров.СуммаПоДокументу, ВалютаДокумента, КурсДокумента, ВалютаУпр, ПоКурсуВалютыКон), 2);
		
		// Не было изменения заказа
		Если ЗначениеКорректировки = 0 И (СуммаПоДокументу - Сумма) = 0 И (СуммаПоДокументуУпр - СуммаУпр) = 0 Тогда
			Продолжить;
		ИначеЕсли ЗаказаноПоДокументу < МинОст Тогда
			// Попытка снятия с заказа большего количества, чем заказано с учета резерва.
			НаименованиеЕдиницы = СокрЛП(ВыборкаТоваров.Номенклатура.БазоваяЕдиницаИзмерения);
			ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(ВыборкаТоваров.Номенклатура);
			Если НЕ ЗначениеЗаполнено(ВыборкаТоваров.ХарактеристикаНоменклатуры) Тогда
				ТекстСообщения = "" + СокрЛП(ВыборкаТоваров.Заказ) + ": [" + ЗначениеКолонкиКода + "] " + "Товар" + " """
					+ СокрЛП(ВыборкаТоваров.Номенклатура) + """. " + НСтр("ru = 'Снимается с заказа'") + " "
					+ Формат(-ЗначениеКорректировки,"ЧДЦ=3; ЧН=0,00") + " " + НаименованиеЕдиницы + ". " + "Заказано" + " "
					+ Формат(Заказано,"ЧДЦ=3; ЧН=0,00") + " " + НаименованиеЕдиницы + ". " + НСтр("ru = 'Запрещено корректировать'") + " "
					+ Формат(МинОст,"ЧДЦ=3; ЧН=0,00") + " " + НаименованиеЕдиницы + ". " + "Превышение" + " "
					+ Формат(МинОст-ЗаказаноПоДокументу, "ЧДЦ=3; ЧН=0,00") + " " + НаименованиеЕдиницы;
					
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = '%1'"),ТекстСообщения),ДокументОбъект,,, Истина);
			Иначе
				ТекстСообщения = "" + СокрЛП(ВыборкаТоваров.Заказ) + ": [" + ЗначениеКолонкиКода + "] " + "Товар" + " """
					+ СокрЛП(ВыборкаТоваров.Номенклатура) + """ " + НСтр("ru = 'с характеристикой'") + " """
					+ СокрЛП(ВыборкаТоваров.ХарактеристикаНоменклатуры) + """. " + НСтр("ru = 'Снимается с заказа'") + " "
					+ Формат(-ЗначениеКорректировки, "ЧДЦ=3; ЧН=0,00") + " " + НаименованиеЕдиницы + ". " + "Заказано" + " "
					+ Формат(Заказано,"ЧДЦ=3; ЧН=0,00") + " " + НаименованиеЕдиницы + ". " + НСтр("ru = 'Запрещено корректировать'") + " "
					+ Формат(МинОст,"ЧДЦ=3; ЧН=0,00") + " " + НаименованиеЕдиницы + ". " + "Превышение" + " "
					+ Формат(МинОст - ЗаказаноПоДокументу, "ЧДЦ=3; ЧН=0,00") + " " + НаименованиеЕдиницы;
					
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = '%1'"), ТекстСообщения), ДокументОбъект,,, Истина);
			КонецЕсли;
			ВсеОК = Ложь;
		КонецЕсли;
		
		Если ВсеОК Тогда
			
			НоваяЗапись = Добавить();
			НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период                     = ДокументОбъект.Дата;
			НоваяЗапись.Регистратор                = ДокументОбъект.Ссылка;
			НоваяЗапись.Контрагент                 = ВыборкаТоваров.Контрагент;
			НоваяЗапись.Заказ                      = ВыборкаТоваров.Заказ;
			НоваяЗапись.Номенклатура               = ВыборкаТоваров.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = ВыборкаТоваров.ХарактеристикаНоменклатуры;
			НоваяЗапись.СкладКомпании              = ВыборкаТоваров.СкладЗаказа;
			НоваяЗапись.ХозОперация                = ДокументОбъект.ХозОперация;
			НоваяЗапись.Заказано                   = ЗначениеКорректировки;
			НоваяЗапись.ВидОперации                = ВидОперации;
			Если ЗаказаноПоДокументу = 0 Тогда
				НоваяЗапись.Сумма                  = -Сумма;
				НоваяЗапись.СуммаУпр               = -СуммаУпр;
			Иначе
				// если это не внутренний заказ, то вычислим сумму по договору.
				Если ЗначениеЗаполнено(ВыборкаТоваров.ВалютаДоговора) Тогда
					НоваяЗапись.Сумма              = СуммаПоДокументу - Сумма;
				КонецЕсли;
				НоваяЗапись.СуммаУпр               = СуммаПоДокументуУпр - СуммаУпр;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	Если ВсеОК Тогда 
		ВсеОК = КонтрольОстатковОперативно();
	КонецЕсли;
	
	// Убиваем циклическую ссылку
	ДокументОбъект = Неопределено;
	ВидОперации    = Неопределено;
	
	Возврат ВсеОК;
КонецФункции

// Формирует движения по регистру приход (резервируем)
// Возвращаемое значение: Булево. Истина - все ОК, Ложь - чего-то не так.
Функция ЗакрытиеНераспределенныхЗаказов() Экспорт
	ВсеОК=Истина;
	
	ДокументОбъектПодразделениеКомпании = ДокументОбъект.ПодразделениеКомпании;
	ЗакрытиеЗаказовПоПодразделению = УчетныеПолитикиСервер.Значение("ЗакрытиеЗаказовПоПодразделению", ДокументОбъект.Дата, ДокументОбъектПодразделениеКомпании);

	Запрос = Новый Запрос;
	
	ТекстОтбора = "";
	ТекстОтбораРаспределение = "";
	Если ЗакрытиеЗаказовПоПодразделению Тогда
		ТекстОтбора = "Заказ.ПодразделениеКомпании В ИЕРАРХИИ(&ПодразделениеКомпании)
		|	И ";
		ТекстОтбораРаспределение = "ЗаказПокупателя.ПодразделениеКомпании В ИЕРАРХИИ(&ПодразделениеКомпании)
		|	И ";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.СкладКомпании.Организация);
	ТекстОтбора = ТекстОтбора + "Заказ.Организация = &Организация
	|	И ";
	ТекстОтбораРаспределение = ТекстОтбораРаспределение + "ЗаказПокупателя.Организация = &Организация
	|	И ";

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаЗаказов.Заказ,
			|	ТаблицаЗаказов.Номенклатура,
			|	ТаблицаЗаказов.ХарактеристикаНоменклатуры,
			|	ЕСТЬNULL(ТаблицаЗаказов.ЗаказаноОстаток, 0)-ЕСТЬNULL(ТаблицаЗаказов.РезервОстаток, 0)-ЕСТЬNULL(ТаблицаРаспределений.КоличествоОстаток, 0) КАК Количество
			|ИЗ
			|	РегистрНакопления.ЗаказыПокупателей.Остатки(
			|		&НаМомент,
			|		" + ТекстОтбора + "Номенклатура В (&Номенклатура)) КАК ТаблицаЗаказов
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ЗаказыРаспределение.Остатки(
			|		&НаМомент,
			|		" + ТекстОтбораРаспределение + "Номенклатура В (&Номенклатура)) КАК ТаблицаРаспределений
			|ПО
			|	ТаблицаЗаказов.Заказ                      = ТаблицаРаспределений.ЗаказПокупателя
			|	И ТаблицаЗаказов.Номенклатура               = ТаблицаРаспределений.Номенклатура
			|	И ТаблицаЗаказов.ХарактеристикаНоменклатуры = ТаблицаРаспределений.ХарактеристикаНоменклатуры
			|ГДЕ
			|	(ЕСТЬNULL(ТаблицаЗаказов.ЗаказаноОстаток, 0)-ЕСТЬNULL(ТаблицаЗаказов.РезервОстаток, 0)-ЕСТЬNULL(ТаблицаРаспределений.КоличествоОстаток, 0)) > 0
			|УПОРЯДОЧИТЬ ПО 
			|	ТаблицаЗаказов.Заказ.МоментВремени 
			|";
	Запрос.УстановитьПараметр("НаМомент",?(РежимПроведения=РежимПроведенияДокумента.Оперативный,Неопределено,ДокументОбъект.МоментВремени()));
	Запрос.УстановитьПараметр("ПодразделениеКомпании", ДокументОбъектПодразделениеКомпании);
	Запрос.УстановитьПараметр("Номенклатура",РезультатЗапросаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыПокупателей");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	СтруктураПараметровБлокировки.ИмяТаблицы = "ЗаказыРаспределение";
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	ТипЗаказПокупателя = Тип("ДокументСсылка.ЗаказПокупателя");
	ТипЗаказВнутренний = Тип("ДокументСсылка.ЗаказВнутренний");
	
	МассивЗаказов = Новый Массив;
	
	ТипЗаказПокупателя = Тип("ДокументСсылка.ЗаказПокупателя");
	Для Каждого СтрокаЗаказа Из ТаблицаЗаказов Цикл
		Если ТипЗнч(СтрокаЗаказа.Заказ) = ТипЗаказПокупателя И МассивЗаказов.Найти(СтрокаЗаказа.Заказ) = Неопределено Тогда
			МассивЗаказов.Добавить(СтрокаЗаказа.Заказ);
		КонецЕсли;
	КонецЦикла;
	
	// Получим таблицу номенклатуры с ручным списанием характеристик
	ЗапросСписокРучныхХарактеристик = Новый Запрос;
	ЗапросСписокРучныхХарактеристик.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|	И Номенклатура.ТипНоменклатуры.АвтоСписаниеХарактеристик В 
	|		(ЗНАЧЕНИЕ(Перечисление.РежимыАвтоСписанияХарактеристик.РучноеСписание),
	|		ЗНАЧЕНИЕ(Перечисление.РежимыАвтоСписанияХарактеристик.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.Ссылка";
	ЗапросСписокРучныхХарактеристик.УстановитьПараметр("СписокНоменклатуры", ТаблицаЗаказов.ВыгрузитьКолонку("Номенклатура"));
	СписокРучныхХарактеристик = ЗапросСписокРучныхХарактеристик.Выполнить().Выгрузить();
	
	// Уберем из нераспределенных заказов, заказы по которым не выплачены предоплаты.
	ТаблицаДолгов = ЗаказыСервер.ДолгиПоПредоплате(ДокументОбъект, МассивЗаказов);
	СтруктураОтбора = Новый Структура("Заказ");
	Если ТаблицаДолгов.Количество() > 0 Тогда
		Для Каждого ТекСтрока Из ТаблицаДолгов Цикл
			СтруктураОтбора.Заказ = ТекСтрока.Заказ;
			СтрокиУдаления = ТаблицаЗаказов.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаУдаления Из СтрокиУдаления Цикл
				ТаблицаЗаказов.Удалить(СтрокаУдаления);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Перебираем строки товаров
	ВидОперации = Перечисления.ВидыОперацийЗаказов.Резервирование;
	Для Каждого СтрокаТоваров Из РезультатЗапросаПоТоварам Цикл
		ОсталосьЗарезервировать = СтрокаТоваров.Количество - СтрокаТоваров.Резерв;
		СтруктураОтбора = Новый Структура("Номенклатура");
		СтруктураОтбора.Номенклатура = СтрокаТоваров.Номенклатура;
		Если ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) 
			ИЛИ СписокРучныхХарактеристик.Найти(СтрокаТоваров.Номенклатура) <> Неопределено Тогда 
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры",СтрокаТоваров.ХарактеристикаНоменклатуры);
		КонецЕсли;
		ЗаказыНоменклатуры = ТаблицаЗаказов.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаЗаказов Из ЗаказыНоменклатуры Цикл
			Если ОсталосьЗарезервировать <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			ОсталосьПоЗаказу = СтрокаЗаказов.Количество;
			Если ОсталосьПоЗаказу <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезервируемПоЗаказу = Мин(ОсталосьЗарезервировать, ОсталосьПоЗаказу);
			Если РезервируемПоЗаказу <> 0 Тогда
				Если ТипЗнч(СтрокаЗаказов.Заказ) = ТипЗаказПокупателя Тогда
					НоваяЗаписьКонтрагент = СтрокаЗаказов.Заказ.Контрагент;
				ИначеЕсли ТипЗнч(СтрокаЗаказов.Заказ) = ТипЗаказВнутренний Тогда
					НоваяЗаписьКонтрагент = СтрокаЗаказов.Заказ.ПодразделениеПолучатель;
				КонецЕсли;
				
				// Создаем запись регистра заказов покупателей
				НоваяЗапись=Добавить();
				НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
				НоваяЗапись.Период                     = ДокументОбъект.Дата;
				НоваяЗапись.Регистратор                = ДокументОбъект.Ссылка;
				НоваяЗапись.Контрагент                 = НоваяЗаписьКонтрагент;
				НоваяЗапись.Заказ                      = СтрокаЗаказов.Заказ;
				НоваяЗапись.Номенклатура               = СтрокаТоваров.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры;
				НоваяЗапись.ХозОперация                = ДокументОбъект.ХозОперация;
				НоваяЗапись.СкладКомпании              = СкладКомпании;
				НоваяЗапись.Резерв                     = РезервируемПоЗаказу;
				НоваяЗапись.РезервСвободный            = 0;
				НоваяЗапись.ВидОперации                = ВидОперации;
				
				СтрокаТоваров.Резерв    = СтрокаТоваров.Резерв + РезервируемПоЗаказу;
				ОсталосьЗарезервировать = ОсталосьЗарезервировать - РезервируемПоЗаказу;
				
				Если СтрокаЗаказов.Количество > РезервируемПоЗаказу Тогда
					СтрокаЗаказов.Количество = СтрокаЗаказов.Количество - РезервируемПоЗаказу;
				Иначе
					ТаблицаЗаказов.Удалить(СтрокаЗаказов);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ОсталосьЗарезервировать > 0 И ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) 
			И СписокРучныхХарактеристик.Найти(СтрокаТоваров.Номенклатура) <> Неопределено Тогда 
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			
			ЗаказыНоменклатуры = ТаблицаЗаказов.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаЗаказов Из ЗаказыНоменклатуры Цикл
				
				Если ОсталосьЗарезервировать <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				ОсталосьПоЗаказу = СтрокаЗаказов.Количество;
				Если ОсталосьПоЗаказу <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				РезервируемПоЗаказу = Мин(ОсталосьЗарезервировать, ОсталосьПоЗаказу);
				Если РезервируемПоЗаказу <> 0 Тогда
					
					Если ТипЗнч(СтрокаЗаказов.Заказ) = ТипЗаказПокупателя Тогда
						НоваяЗаписьКонтрагент = СтрокаЗаказов.Заказ.Контрагент;
					ИначеЕсли ТипЗнч(СтрокаЗаказов.Заказ) = ТипЗаказВнутренний Тогда
						НоваяЗаписьКонтрагент = СтрокаЗаказов.Заказ.ПодразделениеПолучатель;
					КонецЕсли;
					
					// Создаем запись регистра заказов покупателей
					НоваяЗапись = Добавить();
					НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
					НоваяЗапись.Период                     = ДокументОбъект.Дата;
					НоваяЗапись.Регистратор                = ДокументОбъект.Ссылка;
					НоваяЗапись.Контрагент                 = НоваяЗаписьКонтрагент;
					НоваяЗапись.Заказ                      = СтрокаЗаказов.Заказ;
					НоваяЗапись.Номенклатура               = СтрокаТоваров.Номенклатура;
					НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры;
					НоваяЗапись.ХозОперация                = ДокументОбъект.ХозОперация;
					НоваяЗапись.СкладКомпании              = СкладКомпании;
					НоваяЗапись.Резерв                     = РезервируемПоЗаказу;
					НоваяЗапись.РезервСвободный            = 0;
					НоваяЗапись.ВидОперации                = ВидОперации;
					
					СтрокаТоваров.Резерв    = СтрокаТоваров.Резерв + РезервируемПоЗаказу;
					ОсталосьЗарезервировать = ОсталосьЗарезервировать - РезервируемПоЗаказу;
					
					Если СтрокаЗаказов.Количество > РезервируемПоЗаказу Тогда
						СтрокаЗаказов.Количество = СтрокаЗаказов.Количество - РезервируемПоЗаказу;
					Иначе
						ТаблицаЗаказов.Удалить(СтрокаЗаказов);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Если ВсеОК Тогда 
		ВсеОК = КонтрольОстатковОперативно();
	КонецЕсли;
	
	// Убиваем циклическую ссылку
	ДокументОбъект = Неопределено;
	ВидОперации    = Неопределено;
	
	Возврат ВсеОК;
	
КонецФункции

// Формирует движения по регистру расход (снятие резервов заказов покупателей)
// Возвращаемое значение: Булево. Истина - все ОК, Ложь - чего-то не так.
Функция СнятиеРезервовЗаказовПокупателей() Экспорт
	
	ВсеОК = Истина;
	
	Если ТипЗнч(РезультатЗапросаПоТоварам)=Тип("РезультатЗапроса") Тогда
		РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	КонецЕсли;
	
	ОтборПоЗаказу = (НЕ РезультатЗапросаПоТоварам.Колонки.Найти("Заказ") = Неопределено);
	
	// Получение остатков по заказам покупателей
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыПокупателейОстатки.Контрагент,
		|	ЗаказыПокупателейОстатки.Заказ КАК Заказ,
		|	ЗаказыПокупателейОстатки.СкладКомпании КАК СкладКомпании,
		|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказыПокупателейОстатки.РезервОстаток КАК Резерв,
		|	ЗаказыПокупателейОстатки.РезервСвободныйОстаток КАК РезервСвободный
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(
		|		&Момент,
		|		" + ?(ОтборПоЗаказу, "Заказ В (&Заказ) И ", "") + "
		|		" + ?(СкладКомпании = Неопределено, "СкладКомпании В (&СкладКомпании)", "СкладКомпании = &СкладКомпании") + "
		|		И Номенклатура В (&Номенклатура)
		|		И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ЗаказыПокупателейОстатки
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказыПокупателейОстатки.Заказ.Дата");
		
	Запрос.УстановитьПараметр("Момент",?(РежимПроведения=РежимПроведенияДокумента.Оперативный,Неопределено,ДокументОбъект.МоментВремени()));
	Если ОтборПоЗаказу Тогда
		Запрос.УстановитьПараметр("Заказ", РезультатЗапросаПоТоварам.ВыгрузитьКолонку("Заказ"));
	КонецЕсли;
	
	Если СкладКомпании = Неопределено Тогда
		Запрос.УстановитьПараметр("СкладКомпании", РезультатЗапросаПоТоварам.ВыгрузитьКолонку("СкладКомпании"));
	Иначе
		Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
	КонецЕсли;
	Запрос.УстановитьПараметр("Номенклатура",РезультатЗапросаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",РезультатЗапросаПоТоварам.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыПокупателей");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
	
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
	ОписаниеИсточника = Новый Соответствие;
	
	Если ОтборПоЗаказу Тогда
		ОписаниеИсточника.Вставить("Заказ", "Заказ");
	КонецЕсли;
	
	Если СкладКомпании = Неопределено Тогда
		Если (НЕ Заказывать = Истина) Тогда
			ОписаниеИсточника.Вставить("СкладКомпании", "СкладКомпании");
		КонецЕсли;
	Иначе
		ЗначенияБлокировки.Вставить("СкладКомпании", СкладКомпании);
	КонецЕсли;
	
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОписаниеИсточника.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	ТаблицаРезервов = Запрос.Выполнить().Выгрузить();
	ТаблицаРезервов.Индексы.Добавить("Номенклатура");
	
	СтруктураОтбораОстатковРезервов = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры");
	
	Если ОтборПоЗаказу Тогда
		ТаблицаРезервов.Индексы.Добавить("Заказ");
		СтруктураОтбораОстатковРезервов.Вставить("Заказ");
	КонецЕсли;
	
	Если СкладКомпании = Неопределено Тогда
		ТаблицаРезервов.Индексы.Добавить("СкладКомпании");
		СтруктураОтбораОстатковРезервов.Вставить("СкладКомпании");
	КонецЕсли;
	
	ВидОперации    = Перечисления.ВидыОперацийЗаказов.Разрезервирование;
	
	ЗапрещеноСписывать = Ложь;
	ЧастичноеСписание  = Ложь;
	РазрешениеСнятияРезервов = ПраваИНастройкиПользователя.Значение("РазрешениеСнятияРезервов", ДокументОбъект);
	Если РазрешениеСнятияРезервов = Перечисления.РезервыСпособыСписания.Запрещено Тогда
		ЗапрещеноСписывать = Истина;
	ИначеЕсли РазрешениеСнятияРезервов = Перечисления.РезервыСпособыСписания.РазрешеноРезервыИзСвободногоЗапаса Тогда
		ЧастичноеСписание  = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТоваров Из РезультатЗапросаПоТоварам Цикл
		
		Резерв = СтрокаТоваров.Резерв;
		Если Резерв = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбораОстатковРезервов.Номенклатура               = СтрокаТоваров.Номенклатура;
		СтруктураОтбораОстатковРезервов.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры;
		Если ОтборПоЗаказу Тогда
			СтруктураОтбораОстатковРезервов.Заказ = СтрокаТоваров.Заказ;
		КонецЕсли;
		Если СкладКомпании = Неопределено Тогда
			СтруктураОтбораОстатковРезервов.СкладКомпании = СтрокаТоваров.СкладКомпании;
		КонецЕсли;
		
		ТоварныеСтроки = ТаблицаРезервов.НайтиСтроки(СтруктураОтбораОстатковРезервов);
		ЗаказанныйРезерв = 0;
		Для Каждого ТекТоварнаяСтрока Из ТоварныеСтроки Цикл
			
			Если ЧастичноеСписание Тогда
				ЗаказанныйРезерв = ЗаказанныйРезерв + (ТекТоварнаяСтрока.Резерв - ТекТоварнаяСтрока.РезервСвободный);
				ОстатокРезерва = ТекТоварнаяСтрока.РезервСвободный;
			Иначе
				ОстатокРезерва = ТекТоварнаяСтрока.Резерв;
			КонецЕсли;
			
			// Создаем запись регистра заказов покупателей
			НоваяЗапись=Добавить();
			НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Расход;
			НоваяЗапись.Период                     = ДокументОбъект.Дата;
			НоваяЗапись.Регистратор                = ДокументОбъект.Ссылка;
			НоваяЗапись.Контрагент                 = ТекТоварнаяСтрока.Контрагент;
			НоваяЗапись.Заказ                      = ТекТоварнаяСтрока.Заказ;
			НоваяЗапись.Номенклатура               = СтрокаТоваров.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры;
			НоваяЗапись.ХозОперация                = ДокументОбъект.ХозОперация;
			НоваяЗапись.СкладКомпании              = ТекТоварнаяСтрока.СкладКомпании;
			НоваяЗапись.Резерв                     = Мин(Резерв, ОстатокРезерва);
			НоваяЗапись.РезервСвободный            = Мин(НоваяЗапись.Резерв, ТекТоварнаяСтрока.РезервСвободный);
			НоваяЗапись.ВидОперации                = ВидОперации;
			
			Если ЗапрещеноСписывать Тогда
				НаименованиеЕдиницы = СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения);
				ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТоваров.Номенклатура);
				Если НЕ ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"". Запрещено снятие резерва %3 %4.'"),
							ЗначениеКолонкиКода,
							СокрЛП(СтрокаТоваров.Номенклатура),
							Формат(НоваяЗапись.Резерв,"ЧДЦ=3; ЧН=0,00"),
							НаименованиеЕдиницы
						),
						ДокументОбъект,
						,, Истина
					);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"". Запрещено снятие резерва %4 %5.'"),
							ЗначениеКолонкиКода,
							СокрЛП(СтрокаТоваров.Номенклатура),
							СокрЛП(СтрокаТоваров.ХарактеристикаНоменклатуры),
							Формат(НоваяЗапись.Резерв,"ЧДЦ=3; ЧН=0,00"),
							НаименованиеЕдиницы
						),
						ДокументОбъект,
						,, Истина
					);
				КонецЕсли;
				
				ВсеОК = Ложь;
				
			КонецЕсли;
			
			Резерв = Резерв - НоваяЗапись.Резерв;
			
			Если Резерв = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Резерв<>0 Тогда
			
			НаименованиеЕдиницы = СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения);
			ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТоваров.Номенклатура);
			
			Если ЧастичноеСписание И ЗаказанныйРезерв > 0 Тогда
				// Попытка снятия резерва по заказу большего количества, чем зарезервировано на данном складе.
				Если НЕ ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда
					
				ТекстСообщения = "["+ЗначениеКолонкиКода+"] " + "Товар" + " """+СокрЛП(СтрокаТоваров.Номенклатура)
					+""". " + НСтр("ru = 'Списывается с резерва'") + " "+Формат(СтрокаТоваров.Резерв,"ЧДЦ=3; ЧН=0,00")+" "
					+НаименованиеЕдиницы + ", " + НСтр("ru = 'в свободном резерве'") + " "
					+Формат(СтрокаТоваров.Резерв - Резерв,"ЧДЦ=3; ЧН=0,00")+" "+НаименованиеЕдиницы + ", "
					+ НСтр("ru = 'запрещено списывать'") +" " +Формат(ЗаказанныйРезерв, "ЧДЦ=3; ЧН=0,00")+" "+НаименованиеЕдиницы
					+ ". " + НСтр("ru = 'Превышение количества снимаемого с резерва по заказам'") + " "
					+Формат(Резерв,"ЧДЦ=3; ЧН=0,00")+" "+НаименованиеЕдиницы+".";
					
				ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = '%1'"), ТекстСообщения),
						ДокументОбъект,
						,,
						Истина
				);

				Иначе
				НаименованиеЕдиницы = СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения);
				ТекстСообщения = "["+УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТоваров.Номенклатура)
					+"] " + "Товар" + " """+СокрЛП(СтрокаТоваров.Номенклатура)+""" " + НСтр("ru = 'с характеристикой'") + " """
					+СокрЛП(СтрокаТоваров.ХарактеристикаНоменклатуры)+""". " + НСтр("ru = 'Списывается с резерва'") + " "
					+Формат(СтрокаТоваров.Резерв,"ЧДЦ=3; ЧН=0,00")+" "+НаименованиеЕдиницы + ", " + НСтр("ru = 'в свободном резерве'")
					+" "+Формат(СтрокаТоваров.Резерв - Резерв,"ЧДЦ=3; ЧН=0,00")+" "+НаименованиеЕдиницы + ", " 
					+ НСтр("ru = 'запрещено списывать'") + " " +Формат(ЗаказанныйРезерв, "ЧДЦ=3; ЧН=0,00")+" "+НаименованиеЕдиницы 
					+ ". " + НСтр("ru = 'Превышение количества снимаемого с резерва по заказам'") +" "
					+Формат(Резерв,"ЧДЦ=3; ЧН=0,00")+" "+НаименованиеЕдиницы+".";
					
				ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = '%1'"), ТекстСообщения),
						ДокументОбъект,
						,,
						Истина
				);

				КонецЕсли;
			Иначе
				// Попытка снятия резерва по заказу большего количества, чем зарезервировано на данном складе.
				Если НЕ ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"". Списывается с резерва %3 %4, в резерве %5 %6. Превышение количества снимаемого с резерва по заказам %7 %8.'"),
							ЗначениеКолонкиКода,
							СокрЛП(СтрокаТоваров.Номенклатура),
							Формат(СтрокаТоваров.Резерв,"ЧДЦ=3; ЧН=0,00"),
							НаименованиеЕдиницы,
							Формат(СтрокаТоваров.Резерв - Резерв,"ЧДЦ=3; ЧН=0,00"),
							НаименованиеЕдиницы,
							Формат(Резерв,"ЧДЦ=3; ЧН=0,00"),
							НаименованиеЕдиницы
						),
						ДокументОбъект,
						,,Истина
					);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"". Списывается с резерва %4 %5, в резерве %6 %7. Превышение количества снимаемого с резерва по заказам %8 %9.'"),
							ЗначениеКолонкиКода,
							СокрЛП(СтрокаТоваров.Номенклатура),
							СокрЛП(СтрокаТоваров.ХарактеристикаНоменклатуры),
							Формат(СтрокаТоваров.Резерв,"ЧДЦ=3; ЧН=0,00"),
							НаименованиеЕдиницы, 
							Формат(СтрокаТоваров.Резерв - Резерв,"ЧДЦ=3; ЧН=0,00"),
							НаименованиеЕдиницы,
							Формат(Резерв,"ЧДЦ=3; ЧН=0,00"),
							НаименованиеЕдиницы
						),
						ДокументОбъект,
						,, Истина
					);
				КонецЕсли;
				
			КонецЕсли;
			
			ВсеОК=Ложь;
			
		КонецЕсли;
		
	КонецЦикла;

	Если ВсеОК Тогда 
		ВсеОК = КонтрольОстатковОперативно();
	КонецЕсли;
	
	// Убиваем циклическую ссылку
	ДокументОбъект = Неопределено;
	ВидОперации    = Неопределено;
	
	Возврат ВсеОК;
КонецФункции // СнятиеРезервовЗаказовПокупателей()

// Корректирует списанием заказ покупателя
Функция КорректировкаСписаниемЗаказаПокупателя() Экспорт
	
	ВсеОК = Истина;
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказов.Замена Тогда
		Замена = Истина;
	Иначе
		Замена = Ложь;
		ВидОперации = Перечисления.ВидыОперацийЗаказов.КорректировкаЗаказа;
	КонецЕсли;
	
	Если ТипЗнч(РезультатЗапросаПоТоварам) = Тип("РезультатЗапроса") Тогда
		РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Момент",
		?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, ДокументОбъект.МоментВремени())
	);
	
	Если Заказ = Неопределено Тогда
		Запрос.УстановитьПараметр("Заказ", РезультатЗапросаПоТоварам.ВыгрузитьКолонку("Заказ"));
	Иначе
		Запрос.УстановитьПараметр("Заказ", Заказ);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", РезультатЗапросаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",
		РезультатЗапросаПоТоварам.ВыгрузитьКолонку("ХарактеристикаНоменклатуры")
	);
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыПокупателей");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
	ОписаниеИсточника = Новый Соответствие;
	Если Заказ = Неопределено Тогда
		ОписаниеИсточника.Вставить("Заказ", "Заказ");
	Иначе
		ЗначенияБлокировки.Вставить("Заказ", Заказ);
	КонецЕсли;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(
		СтруктураПараметровБлокировки,
		ЗначенияБлокировки,
		ОписаниеИсточника
	);
	Запрос.Текст = ТекстЗапросаТаблицыЗаказов(Заказ, Замена);
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗаказов.Индексы.Добавить("Номенклатура");
	Если Заказ = Неопределено Тогда
		ТаблицаЗаказов.Индексы.Добавить("Заказ");
	КонецЕсли;
	
	СтруктураОтбораОстатковРезервов = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры");
	Если Заказ = Неопределено Тогда
		СтруктураОтбораОстатковРезервов.Вставить("Заказ", Заказ);
	КонецЕсли;
	
	ИмяКолонкиКода       = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах().Имя;
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Для Каждого СтрокаТоваров Из РезультатЗапросаПоТоварам Цикл
		
		Заказано = СтрокаТоваров.Количество;
		Если Заказано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбораОстатковРезервов.Номенклатура               = СтрокаТоваров.Номенклатура;
		СтруктураОтбораОстатковРезервов.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры;
		Если Заказ = Неопределено Тогда
			СтруктураОтбораОстатковРезервов.Заказ = СтрокаТоваров.Заказ;
		КонецЕсли;
		
		ТоварныеСтроки = ТаблицаЗаказов.НайтиСтроки(СтруктураОтбораОстатковРезервов);
		Доступно = 0;
		Для Каждого ТекТоварнаяСтрока Из ТоварныеСтроки Цикл
			// Создаем запись регистра заказов покупателей
			НоваяЗапись = Добавить();
			НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период                     = ДокументОбъект.Дата;
			НоваяЗапись.Регистратор                = ДокументОбъект.Ссылка;
			НоваяЗапись.Контрагент                 = ТекТоварнаяСтрока.Контрагент;
			НоваяЗапись.Заказ                      = ТекТоварнаяСтрока.Заказ;
			НоваяЗапись.Номенклатура               = СтрокаТоваров.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры;
			НоваяЗапись.ХозОперация                = ДокументОбъект.ХозОперация;
			НоваяЗапись.СкладКомпании              = ТекТоварнаяСтрока.СкладЗаказа;
			
			Доступно = Доступно + ТекТоварнаяСтрока.Доступно;
			ЗаказаноКСписанию = Мин(Заказано, ТекТоварнаяСтрока.Доступно);
			Если ТекТоварнаяСтрока.Заказано > ЗаказаноКСписанию И ТекТоварнаяСтрока.Заказано <> 0 Тогда
				НоваяЗапись.Заказано = - ЗаказаноКСписанию;
				НоваяЗапись.Сумма    = - (ТекТоварнаяСтрока.Сумма / ТекТоварнаяСтрока.Заказано) * ЗаказаноКСписанию;
				НоваяЗапись.СуммаУпр = - (ТекТоварнаяСтрока.СуммаУпр / ТекТоварнаяСтрока.Заказано) * ЗаказаноКСписанию;
			Иначе
				НоваяЗапись.Заказано = - ТекТоварнаяСтрока.Заказано;
				НоваяЗапись.Сумма    = - ТекТоварнаяСтрока.Сумма;
				НоваяЗапись.СуммаУпр = - ТекТоварнаяСтрока.СуммаУпр;
			КонецЕсли;
			
			НоваяЗапись.ВидОперации  = ВидОперации;
			Если Замена Тогда
				НоваяЗапись.ИдентификаторЗамены = СтрокаТоваров.ИдентификаторСтроки;
			КонецЕсли;
			
			Заказано = Заказано - (-НоваяЗапись.Заказано);
			Если Заказано = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Был заказ по автоматическому распределению характеристик, а снятие резерва по конкретной характеристике.
		Если Заказано > 0 И (НЕ СтрокаТоваров.ХарактеристикаНоменклатуры = ПустаяХарактеристика) Тогда
			// заменим характеристику структуры поиска на пустую
			СтруктураОтбораОстатковРезервов.ХарактеристикаНоменклатуры = ПустаяХарактеристика;
			
			ТоварныеСтроки = ТаблицаЗаказов.НайтиСтроки(СтруктураОтбораОстатковРезервов);
			
			Для Каждого ТекТоварнаяСтрока Из ТоварныеСтроки Цикл
				// Создаем запись регистра заказов покупателей
				НоваяЗапись = Добавить();
				НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
				НоваяЗапись.Период                     = ДокументОбъект.Дата;
				НоваяЗапись.Регистратор                = ДокументОбъект.Ссылка;
				НоваяЗапись.Контрагент                 = ТекТоварнаяСтрока.Контрагент;
				НоваяЗапись.Заказ                      = ТекТоварнаяСтрока.Заказ;
				НоваяЗапись.Номенклатура               = СтрокаТоваров.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры = ПустаяХарактеристика;
				НоваяЗапись.ХозОперация                = ДокументОбъект.ХозОперация;
				НоваяЗапись.СкладКомпании              = ТекТоварнаяСтрока.СкладЗаказа;
				
				Доступно = Доступно + ТекТоварнаяСтрока.Доступно;
				ЗаказаноКСписанию = Мин(Заказано, ТекТоварнаяСтрока.Доступно);
				Если ТекТоварнаяСтрока.Заказано > ЗаказаноКСписанию И ТекТоварнаяСтрока.Заказано <> 0 Тогда
					НоваяЗапись.Заказано = - ЗаказаноКСписанию;
					НоваяЗапись.Сумма    = - (ТекТоварнаяСтрока.Сумма / ТекТоварнаяСтрока.Заказано) * ЗаказаноКСписанию;
					НоваяЗапись.СуммаУпр = - (ТекТоварнаяСтрока.СуммаУпр / ТекТоварнаяСтрока.Заказано) * ЗаказаноКСписанию;
				Иначе
					НоваяЗапись.Заказано = - ТекТоварнаяСтрока.Заказано;
					НоваяЗапись.Сумма    = ТекТоварнаяСтрока.Сумма;
					НоваяЗапись.СуммаУпр = ТекТоварнаяСтрока.СуммаУпр;
				КонецЕсли;
				
				НоваяЗапись.ВидОперации  = ВидОперации;
				
				Если Замена Тогда
					НоваяЗапись.ИдентификаторЗамены = СтрокаТоваров.ИдентификаторСтроки;
				КонецЕсли;
				
				Заказано = Заказано - (-НоваяЗапись.Заказано);
				Если Заказано = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Заказано > 0 Тогда
			НаименованиеЕдиницы = СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения);
			ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТоваров.Номенклатура);
			Если ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда
				ТекстХарактеристика = Символы.НПП
					+ СтрШаблон(НСтр("ru = 'с характеристикой ""%1""'"), СокрЛП(СтрокаТоваров.ХарактеристикаНоменклатуры));
			Иначе
				ТекстХарактеристика = "";
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1: [%2] Товар ""%3""%4. Снимается с заказа %5 %6. Доступно списать %7 %6. Превышение %8 %6'"),
				СокрЛП(СтрокаТоваров.Заказ),
				ЗначениеКолонкиКода,
				СокрЛП(СтрокаТоваров.Номенклатура),
				ТекстХарактеристика,
				Формат(СтрокаТоваров.Количество, "ЧДЦ=3; ЧН=0,00"),
				НаименованиеЕдиницы,
				Формат(Доступно, "ЧДЦ=3; ЧН=0,00"),
				Формат(СтрокаТоваров.Количество - Доступно, "ЧДЦ=3; ЧН=0,00")
			);
			
			ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = '%1'"), ТекстСообщения),
						ДокументОбъект,
						,,
						Истина
			);

			ВсеОК = Ложь;
		КонецЕсли;
		
	КонецЦикла;

	Если ВсеОК Тогда 
		ВсеОК = КонтрольОстатковОперативно();
	КонецЕсли;
	
	// Убиваем циклическую ссылку
	ДокументОбъект = Неопределено;
	ВидОперации    = Неопределено;
	
	Возврат ВсеОК;
	
КонецФункции // КорректировкаСписаниемЗаказаПокупателя()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает результат запроса по таблице товаров
Функция ПолучитьТаблицуТоваров()
	// получим результат запроса по товарной таблице
	ВидДок = ДокументОбъект.Метаданные().Имя;
	ПоБазовомуКоличеству = ?(ПоБазовомуКоличеству = Неопределено, Ложь, ПоБазовомуКоличеству);
	Запрос = Новый Запрос();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Сумма(ДокументТовары.СуммаВсего) КАК Сумма,
	|	"+?(Контрагент = Неопределено, "ДокументТовары.Контрагент", "&Контрагент")+" КАК Контрагент,
	|	"+?(Заказ = Неопределено, "ДокументТовары.Заказ", "&Заказ")+" КАК Заказ,
	|	"+?(СкладКомпании = Неопределено, "ДокументТовары.МестоРазмещения", "&СкладКомпании")+" КАК СкладКомпании";
	
	Если Заказывать Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|	СУММА(ДокументТовары.Количество"+?(ПоБазовомуКоличеству,"Базовое","*ДокументТовары.Коэффициент")+") КАК Количество";
	Иначе
		ТекстЗапроса = ТекстЗапроса + ",
		|	0 КАК Количество";
	КонецЕсли;
	
	Если Резервировать Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|	СУММА(ДокументТовары.Резерв*ДокументТовары.Коэффициент) КАК Резерв";
	Иначе
		ТекстЗапроса = ТекстЗапроса + ",
		|	0 КАК Резерв";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Документ."+ВидДок+".Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка = &Ссылка
	|	И ДокументТовары.Номенклатура.ВидНоменклатуры <> &Услуга
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры" + ?(Контрагент = Неопределено, ",
	|	ДокументТовары.Контрагент", "") + ?(Заказ = Неопределено, ",
	|	ДокументТовары.Заказ", "") + ?(СкладКомпании = Неопределено, ",
	|	ДокументТовары.МестоРазмещения", "") + "
	|";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка",        ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Контрагент",    Контрагент);
	Запрос.УстановитьПараметр("Заказ",         Заказ);
	Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
	Запрос.УстановитьПараметр("Услуга",        Перечисления.ВидыНоменклатуры.Услуга);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Возвращает результат запроса по остаткам заказов покупателей
Функция ПолучитьОстаткиТоваров()
	Попытка
		ДокументОснование=ДокументОбъект.ДокументОснование;
	Исключение
		ДокументОснование=Неопределено;
	КонецПопытки; 
	Запрос=Новый Запрос();
	ТекстЗапроса="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Заказ КАК Заказ,
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК Количество,
	|	ЗаказыПокупателейОстатки.СуммаОстаток КАК Сумма,
	|	ЗаказыПокупателейОстатки.СуммаУпрОстаток КАК СуммаУпр,
	|	ЗаказыПокупателейОстатки.РезервОстаток КАК Резерв,
	|	ЗаказыПокупателейОстатки.РезервСвободныйОстаток КАК РезервСвободный
	|ИЗ 
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&Момент,"+?(Заказ=Неопределено,"","Заказ=&Заказ И ")+" (Номенклатура В (&Номенклатура)) И (ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры))) КАК ЗаказыПокупателейОстатки
	|"+?(НЕ ЗначениеЗаполнено(ДокументОснование),"","УПОРЯДОЧИТЬ ПО ВЫБОР КОГДА ЗаказыПокупателейОстатки.Заказ=&ДокументОснование ТОГДА 0 ИНАЧЕ 1 КОНЕЦ ВОЗР")+"
	|";
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("Момент",?(РежимПроведения=РежимПроведенияДокумента.Оперативный,Неопределено,ДокументОбъект.МоментВремени()));
	Запрос.УстановитьПараметр("Заказ",Заказ);
	Запрос.УстановитьПараметр("Номенклатура",РезультатЗапросаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",РезультатЗапросаПоТоварам.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыПокупателей");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
	ОписаниеИсточника = Новый Соответствие;
	Если Заказ = Неопределено Тогда
		ОписаниеИсточника.Вставить("Заказ", "Заказ");
	Иначе
		ЗначенияБлокировки.Вставить("Заказ", Заказ);
	КонецЕсли;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	Возврат Запрос.Выполнить();
КонецФункции

// Формирует таблицу остатков заказов для списания при закрытии заказов.
//
// Возвращаемое значение:
//	ТаблицаЗначений - коллекция остатков товаров в заказах доступных для списания, с колонками:
//		* Контрагент
//		* ЗаказПокупателя
//		* Номенклатура
//		* ХарактеристикаНоменклатуры
//		* Заказано
//		* Сумма
//		* СуммаУпр
//		* Количество
//		* Резерв
//		* РезервСвободный
//		* СкладЗаказа
//		* СкладКомпании
//		* Приоритет
//		* ЗаказПокупателяДата
//
Функция ОстаткиЗаказов(Товары)
	
	ДокументОбъектПодразделениеКомпании = ДокументОбъект.ПодразделениеКомпании;
	ЗакрытиеЗаказовПоПодразделению = ПолучитьЗначениеУчетнойПолитики("ЗакрытиеЗаказовПоПодразделению",
		ДокументОбъектПодразделениеКомпании, ДокументОбъект.Дата);
	
	Запрос = Новый Запрос;
	ТекстОтбора  = "";
	ТекстПорядка = "";
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") И ЗначениеЗаполнено(Заказ) Тогда
		
		ТекстОтбора = "Заказ=&ВыбЗаказПокупателя ИЛИ ";
		Запрос.УстановитьПараметр("ВыбЗаказПокупателя", Заказ);
		ТекстПорядка = "
		|	ВЫБОР 
		|		КОГДА ЗаказПокупателя=&ВыбЗаказПокупателя ТОГДА 0 ";
		
	КонецЕсли;
	
	Если ЗакрытиеЗаказаПоДокументуОснованию = Неопределено Тогда
		
		ТекстОтбора = "(" + ТекстОтбора + "Контрагент=&Контрагент)";
		ДокументОснование = Неопределено;
		
		Если ЕстьРеквизит(ДокументОбъект, "ДокументОснование") Тогда
			
			ДокументОснование = ДокументОбъект.ДокументОснование;
			
		КонецЕсли;
		
		Если
			ЗначениеЗаполнено(ДокументОснование)
			И (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
				ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказВнутренний"))
		Тогда
			
			ТекстПорядка = ТекстПорядка + ?(ТекстПорядка="","	ВЫБОР","")+"
			|		КОГДА ЗаказПокупателя = &ДокументОснование ТОГДА 1 ";
			Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
			
		КонецЕсли;
		
	Иначе
		
		Если
			ОснованиеЗаказовПокупателя <> Неопределено
			И ЗакрытиеЗаказаПоДокументуОснованию
		Тогда
		
			ТекстОтбора = ТекстОтбора + "Заказ В (&ОснованиеЗаказовПокупателя) ИЛИ ";
			Запрос.УстановитьПараметр("ОснованиеЗаказовПокупателя", ОснованиеЗаказовПокупателя);
			ТекстПорядка=ТекстПорядка+?(ТекстПорядка="","	ВЫБОР","")+"
			|		КОГДА ЗаказПокупателя В(&ОснованиеЗаказовПокупателя) ТОГДА 1 ";
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
			
			ТекстОтбора = "(" + ТекстОтбора + "Контрагент=&Контрагент)";
			
		ИначеЕсли ЗакрытиеЗаказаПоДокументуОснованию Тогда
			
			ТекстОтбора="("+ТекстОтбора+"Заказ.ДокументОснование=&ДокументОснование)";
			Запрос.УстановитьПараметр("ДокументОснование", ДокументОбъект.ДокументОснование);
			ТекстПорядка=ТекстПорядка+?(ТекстПорядка="","	ВЫБОР","")+"
			|		КОГДА ЗаказПокупателя=&ДокументОснование ТОГДА 1 ";
			
		Иначе
			
			ТекстОтбора="("+ТекстОтбора+"Контрагент=&Контрагент ИЛИ Заказ.ДокументОснование=&ДокументОснование)";
			Запрос.УстановитьПараметр("ДокументОснование",ДокументОбъект.ДокументОснование);
			ТекстПорядка=ТекстПорядка+?(ТекстПорядка="","	ВЫБОР","")+"
			|		КОГДА ЗаказПокупателя=&ДокументОснование ТОГДА 1 ";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не (ТекстПорядка="") Тогда
		
		ТекстПорядка = ТекстПорядка + "
		|	ИНАЧЕ 2 КОНЕЦ ВОЗР,";
		
	КонецЕсли;
	
	ТекстОтбора = ТекстОтбора + ?(ЗакрытиеЗаказовПоПодразделению,
		" И (Заказ.ПодразделениеКомпании В ИЕРАРХИИ(&ДокументОбъектПодразделениеКомпании))",
		""
	);
		
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Контрагент КАК Контрагент,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.Заказано КАК Заказано,
	|	ЗаказыПокупателейОстатки.Сумма    КАК Сумма,
	|	ЗаказыПокупателейОстатки.СуммаУпр КАК СуммаУпр,
	|	ЗаказыПокупателейОстатки.Количество КАК Количество,
	|	ЗаказыПокупателейОстатки.Резерв КАК Резерв,
	|	ЗаказыПокупателейОстатки.РезервСвободный КАК РезервСвободный,
	|	ЗаказыПокупателейОстатки.СкладЗаказа КАК СкладЗаказа,
	|	ЗаказыПокупателейОстатки.СкладКомпании КАК СкладКомпании,
	|	ЗаказыПокупателейОстатки.Приоритет КАК Приоритет,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата КАК ЗаказПокупателяДата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Контрагент КАК Контрагент,
	|		ЗаказыПокупателейОстатки.Заказ КАК ЗаказПокупателя,
	|		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(ЗаказыПокупателейОстатки.ЗаказаноОстаток) КАК Заказано,
	|		СУММА(ЗаказыПокупателейОстатки.СуммаОстаток)    КАК Сумма,
	|		СУММА(ЗаказыПокупателейОстатки.СуммаУпрОстаток) КАК СуммаУпр,
	|		СУММА(ВЫБОР
	|			КОГДА ЗаказыПокупателейОстатки.СкладКомпании = &СкладКомпании ТОГДА
	|				ЗаказыПокупателейОстатки.РезервОстаток
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ) КАК Количество,
	|		СУММА(ВЫБОР
	|			КОГДА ЗаказыПокупателейОстатки.СкладКомпании = &СкладКомпании ТОГДА
	|				ЗаказыПокупателейОстатки.РезервОстаток
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ) КАК Резерв,
	|		СУММА(ВЫБОР
	|			КОГДА ЗаказыПокупателейОстатки.СкладКомпании = &СкладКомпании ТОГДА
	|				ЗаказыПокупателейОстатки.РезервСвободныйОстаток
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ) КАК РезервСвободный,
	|		ЗаказыПокупателейОстатки.Заказ.СкладКомпании КАК СкладЗаказа,
	|		&СкладКомпании КАК СкладКомпании,
	|		1 КАК Приоритет
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(&Момент,
	|			("+ТекстОтбора+")
	|			И Номенклатура В (&Номенклатура) И (ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры) ИЛИ ХарактеристикаНоменклатуры=&ПустаяХарактеристика)
	|		) КАК ЗаказыПокупателейОстатки
	|	ГДЕ
	|		((ЗаказыПокупателейОстатки.СкладКомпании = &СкладКомпании
	|		И ЗаказыПокупателейОстатки.РезервОстаток > 0)
	|		ИЛИ ЗаказыПокупателейОстатки.Заказ.СкладКомпании = ЗаказыПокупателейОстатки.СкладКомпании)
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыПокупателейОстатки.Контрагент,
	|		ЗаказыПокупателейОстатки.Заказ,
	|		ЗаказыПокупателейОстатки.Номенклатура,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Контрагент,
	|		ЗаказыПокупателейОстатки.Заказ,
	|		ЗаказыПокупателейОстатки.Номенклатура,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток,
	|		ЗаказыПокупателейОстатки.СуммаОстаток,
	|		ЗаказыПокупателейОстатки.СуммаУпрОстаток,
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток,
	|		0,
	|		0,
	|		ЗаказыПокупателейОстатки.Заказ.СкладКомпании,
	|		ЗаказыПокупателейОстатки.Заказ.СкладКомпании,
	|		0
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(&Момент,
	|			("+ТекстОтбора+")
	|			И Номенклатура В (&Номенклатура) И (ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры) ИЛИ ХарактеристикаНоменклатуры=&ПустаяХарактеристика)
	|		) КАК ЗаказыПокупателейОстатки
	|	ГДЕ
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток > 0
	|
	|) КАК ЗаказыПокупателейОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	"+ТекстПорядка+"
	|	Приоритет УБЫВ,
	|	ЗаказПокупателяДата
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Момент", ?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, ДокументОбъект.МоментВремени()));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДокументОбъектПодразделениеКомпании", ДокументОбъектПодразделениеКомпании);
	Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
	Запрос.УстановитьПараметр("Номенклатура", Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Товары.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыПокупателей");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
	
	Если ЗакрытиеЗаказаПоДокументуОснованию = Неопределено Тогда
		
		ЗначенияБлокировки.Вставить("Контрагент", Контрагент);
		
	КонецЕсли;
	
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", Товары);
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает текст запроса для получения таблицы заказов
//
Функция ТекстЗапросаТаблицыЗаказов(Заказ, Замена)
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Контрагент,
	|	ЗаказыПокупателейОстатки.Заказ КАК Заказ,
	|	ЗаказыПокупателейОстатки.СкладКомпании КАК СкладЗаказа,
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК Заказано," + ?(Замена, "
	|	(ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0))", "
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток") + " КАК Доступно,
	|	ЗаказыПокупателейОстатки.СуммаОстаток КАК Сумма,
	|	ЗаказыПокупателейОстатки.СуммаУпрОстаток КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|		&Момент,
	|		" + ?(Заказ = Неопределено, "Заказ В (&Заказ)", "Заказ = &Заказ") + "
	|		И Номенклатура В (&Номенклатура)
	|		И (ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры) ИЛИ ХарактеристикаНоменклатуры=ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) КАК ЗаказыПокупателейОстатки
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказыПокупателейОстатки.Заказ.Дата,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры УБЫВ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПеренестиЗаказаноИСуммаДляПеремещения(НоваяЗапись, СтрокаТоваров)
	
	Если НоваяЗапись.ВидОперации <> Перечисления.ВидыОперацийЗаказов.ПеремещениеРезерва Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НоваяЗапись.Заказано) Тогда
		
		Если ЕстьРеквизит(СтрокаТоваров, "КоличествоРасход") И СтрокаТоваров.КоличествоРасход >= 0 Тогда
			
			НоваяЗапись.Заказано = СтрокаТоваров.КоличествоРасход;
			
		Иначе
			
			// Будем переносить именно количество, так как резерв можент отличаться.
			НоваяЗапись.Заказано = СтрокаТоваров.Количество;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьРеквизит(СтрокаТоваров, "РезервСвободный") Тогда
		
		НоваяЗапись.РезервСвободный = СтрокаТоваров.РезервСвободный;
		
	КонецЕсли;
	
	Если ЕстьРеквизит(СтрокаТоваров, "СуммаЗаказа") Тогда
		
		НоваяЗапись.Сумма = СтрокаТоваров.СуммаЗаказа;
		
	КонецЕсли;
	
	Если ЕстьРеквизит(СтрокаТоваров, "СуммаУпр") Тогда
		
		НоваяЗапись.СуммаУпр = СтрокаТоваров.СуммаУпр;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросОстатковЗаказовПокупателей()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Заказ КАК ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры   КАК ХарактеристикаНоменклатуры,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0)   КАК Резерв,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) КАК Заказано,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервСвободныйОстаток, 0) КАК РезервСвободный,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаОстаток, 0) КАК Сумма,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаУпрОстаток, 0) КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&Момент,
	|	"+?(Заказ = Неопределено,"(Заказ В (&Заказ))","(Заказ = &Заказ)")+"
	|		И Номенклатура В (&Номенклатура) И (ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)
	|		ИЛИ ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	И СкладКомпании = &СкладКомпании
	|	) КАК ЗаказыПокупателейОстатки
	|");
	Запрос.УстановитьПараметр("Момент",
		?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, ДокументОбъект.МоментВремени()));
	Запрос.УстановитьПараметр("Заказ",
		?(Заказ = Неопределено, РезультатЗапросаПоТоварам.ВыгрузитьКолонку("Заказ"), Заказ));
	Запрос.УстановитьПараметр("Номенклатура", РезультатЗапросаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",
		РезультатЗапросаПоТоварам.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Выполняет проверку отрицательных остатков после проведения документа по регистру на оперативную отметку времени.
Функция КонтрольОстатковОперативно()

	ВсеОК = Истина;
	
	КонтрольОстатковТоваровОперативно = ПравоПользователя("КонтрольОстатковЗаказовОперативно", ДокументОбъект);
	Если КонтрольОстатковТоваровОперативно = Перечисления.ВидыКонтроля.НеКонтролировать Тогда
		// Оперативный контроль остатков отключен.
		Возврат ВсеОК;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	// Сначала получим движения документа до проведения.
	ТаблицаСтарыхДвижений = ДокументОбъект.ДополнительныеСвойства.ДвиженияПередПроведением.ЗаказыПокупателей;
	ТаблицаСтарыхДвижений.Свернуть("Контрагент,Заказ,Номенклатура,ХарактеристикаНоменклатуры,СкладКомпании", "Заказано,Резерв,РезервСвободный");
	
	// Получим новые движения документа.
	ТаблицаНовыхДвижений = ДокументОбъект.Движения.ЗаказыПокупателей.Выгрузить();
	ТаблицаНовыхДвижений.Свернуть("Контрагент,Заказ,Номенклатура,ХарактеристикаНоменклатуры,СкладКомпании", "Заказано,Резерв,РезервСвободный");
	
	// Уберем строки старых движений, которые контролировать не будем.
	// Проверка остатков будет выполнена на втором этапе.
	Для Каждого СтрокаНовыхДвижений Из ТаблицаНовыхДвижений Цикл 
		
		СтруктураПоиска = Новый Структура("Контрагент,Заказ,Номенклатура,ХарактеристикаНоменклатуры,СкладКомпании",
			СтрокаНовыхДвижений.Контрагент, СтрокаНовыхДвижений.Заказ, СтрокаНовыхДвижений.Номенклатура, СтрокаНовыхДвижений.ХарактеристикаНоменклатуры, СтрокаНовыхДвижений.СкладКомпании);
		СтрокиСтарыхДвижений = ТаблицаСтарыхДвижений.НайтиСтроки(СтруктураПоиска);

		// Если подобное движение есть и в новых движениях, исключим его из проверки.
		Если СтрокиСтарыхДвижений.Количество() > 0 Тогда
			ТаблицаСтарыхДвижений.Удалить(СтрокиСтарыхДвижений[0]);
		КонецЕсли;
		
	КонецЦикла;

	// Запишем новые движения.
	Записать();
	
	Если ТаблицаСтарыхДвижений.Количество() > 0 Тогда 

		// Получим остатки товаров по движениям, которых нет в "новом" документе.
		ТекстЗапроса ="ВЫБРАТЬ
		              |	ЗаказыПокупателейОстатки.Контрагент КАК Контрагент,
		              |	ЕСТЬNULL(ЗаказыПокупателейОстатки.Заказ, ЗаказыРаспределениеОстатки.ЗаказПокупателя) КАК Заказ,
		              |	ЕСТЬNULL(ЗаказыПокупателейОстатки.Номенклатура, ЗаказыРаспределениеОстатки.Номенклатура) КАК Номенклатура,
		              |	ЕСТЬNULL(ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры, ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
		              |	ЗаказыПокупателейОстатки.СкладКомпании КАК СкладКомпании,
		              |	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) КАК Заказано,
		              |	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК Резерв,
		              |	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервСвободныйОстаток, 0) КАК РезервСвободный,
		              |	ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) КАК Распределено
		              |ИЗ
		              |	РегистрНакопления.ЗаказыПокупателей.Остатки(
		              |			,
		              |			Контрагент В (&Контрагент)
		              |				И Заказ В (&Заказ)
		              |				И Номенклатура В (&Номенклатура)
		              |				И СкладКомпании В (&СкладКомпании)
		              |				И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ЗаказыПокупателейОстатки
		              |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(
		              |				,
		              |				ЗаказПокупателя В (&Заказ)
		              |					И Номенклатура В (&Номенклатура)
		              |					И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ЗаказыРаспределениеОстатки
		              |		ПО ЗаказыПокупателейОстатки.Заказ = ЗаказыРаспределениеОстатки.ЗаказПокупателя
		              |			И ЗаказыПокупателейОстатки.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура
		              |			И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры";
		ЗапросОстатков = Новый Запрос(ТекстЗапроса);
		ЗапросОстатков.УстановитьПараметр("Контрагент", ТаблицаСтарыхДвижений.ВыгрузитьКолонку("Контрагент"));
		ЗапросОстатков.УстановитьПараметр("Заказ", ТаблицаСтарыхДвижений.ВыгрузитьКолонку("Заказ"));
		ЗапросОстатков.УстановитьПараметр("Номенклатура", ТаблицаСтарыхДвижений.ВыгрузитьКолонку("Номенклатура"));
		ЗапросОстатков.УстановитьПараметр("СкладКомпании", ТаблицаСтарыхДвижений.ВыгрузитьКолонку("СкладКомпании"));
		ЗапросОстатков.УстановитьПараметр("ХарактеристикаНоменклатуры", ТаблицаСтарыхДвижений.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
		ОстаткиЗаказов = ЗапросОстатков.Выполнить().Выгрузить();

		ЗаголовокКонтроляОстатковСтарыхДвижений = "Контроль остатков заказов предыдущего проведения документа:";

		// Проверим отрицательные остатки прошлых движений.
		Для Каждого СтрокаОстатков Из ОстаткиЗаказов Цикл

			ВывестиСообщениеПользователю = Ложь;
			ОтрицательныйОстатокЗаказано = "";
			ОтрицательныйОстатокРезерв = "";
			ОтрицательныйОстатокЗаказаноРезерв = "";
			ОтрицательныйОстатокРезервСвободный = "";
			ОтрицательныйОстатокРаспределено = "";
			БазоваяЕдиницаИзмерения = СокрЛП(СтрокаОстатков.Номенклатура.БазоваяЕдиницаИзмерения);

			Если СтрокаОстатков.Заказано < 0 Тогда
				ВывестиСообщениеПользователю = Истина;
				ОтрицательныйОстатокЗаказано =
					СтрШаблон(НСтр("ru = '
						|	Остаток по заказу"+?(Заказ=Неопределено,"","" ""+Заказ+"""")+" %1 %2.'"),
						Формат(СтрокаОстатков.Заказано, "ЧДЦ=3; ЧН=0,00"),
						БазоваяЕдиницаИзмерения);
			КонецЕсли;

			Если СтрокаОстатков.Резерв < 0 Тогда 
				ВывестиСообщениеПользователю = Истина;
				ОтрицательныйОстатокРезерв =
					СтрШаблон(НСтр("ru = '
						|	Резерв по заказу"+?(Заказ=Неопределено,"","" ""+Заказ+"""")+" %1 %2.'"),
						Формат(СтрокаОстатков.Резерв, "ЧДЦ=3; ЧН=0,00"),
						БазоваяЕдиницаИзмерения);
			КонецЕсли;

			Если СтрокаОстатков.Резерв <> 0 И СтрокаОстатков.Заказано - СтрокаОстатков.Резерв < 0 Тогда 
				ВывестиСообщениеПользователю = Истина;
				ОтрицательныйОстатокЗаказаноРезерв =
					СтрШаблон(НСтр("ru = '
						|	Остаток по заказу"+?(Заказ=Неопределено,"","" ""+Заказ+"""")+" с учетом резерва %1 %2.'"),
						Формат(СтрокаОстатков.Заказано - СтрокаОстатков.Резерв, "ЧДЦ=3; ЧН=0,00"),
						БазоваяЕдиницаИзмерения);
			КонецЕсли;

			Если СтрокаОстатков.РезервСвободный < 0 Тогда 
				ВывестиСообщениеПользователю = Истина;
				ОтрицательныйОстатокРезервСвободный =
					СтрШаблон(НСтр("ru = '
						|	Свободный резерв по заказу"+?(Заказ=Неопределено,"","" ""+Заказ+"""")+" %1 %2.'"),
						Формат(СтрокаОстатков.РезервСвободный, "ЧДЦ=3; ЧН=0,00"),
						БазоваяЕдиницаИзмерения);
			КонецЕсли;

			Если СтрокаОстатков.Заказано - СтрокаОстатков.Резерв - СтрокаОстатков.Распределено < 0 Тогда
				ВывестиСообщениеПользователю = Истина;
				ОтрицательныйОстатокРаспределено =
					СтрШаблон(НСтр("ru = '
						|	Распределено по заказу"+?(Заказ=Неопределено,"","" ""+Заказ+"""")+" %1 %2. Остаток по заказу %3 %4.'"),
						Формат(СтрокаОстатков.Распределено, "ЧДЦ=3; ЧН=0,00"),
						Формат(СтрокаОстатков.Заказано - СтрокаОстатков.Резерв, "ЧДЦ=3; ЧН=0,00"),
						БазоваяЕдиницаИзмерения);
			КонецЕсли;
			
			Если ВывестиСообщениеПользователю Тогда 

				// По старым движениям документа есть отрицательные остатки.
				Если НЕ ПустаяСтрока(ЗаголовокКонтроляОстатковСтарыхДвижений) Тогда 
					ОбщегоНазначения.СообщитьПользователю(ЗаголовокКонтроляОстатковСтарыхДвижений);
					ЗаголовокКонтроляОстатковСтарыхДвижений = "";
				КонецЕсли;
				
				ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаОстатков.Номенклатура);

				Если НЕ ЗначениеЗаполнено(СтрокаОстатков.ХарактеристикаНоменклатуры) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"".Обнаружены отрицательные остатки по заказам покупателей:%3%4%5%6%7'"),
							ЗначениеКолонкиКода, 
							СокрЛП(СтрокаОстатков.Номенклатура),
							ОтрицательныйОстатокЗаказано,
							ОтрицательныйОстатокРезерв,
							ОтрицательныйОстатокЗаказаноРезерв,
							ОтрицательныйОстатокРезервСвободный,
							ОтрицательныйОстатокРаспределено),
						ДокументОбъект, , , Истина
					);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"". Обнаружены отрицательные остатки по заказам покупателей:%4%5%6%7%8'"),
							ЗначениеКолонкиКода, 
							СокрЛП(СтрокаОстатков.Номенклатура),
							СокрЛП(СтрокаОстатков.ХарактеристикаНоменклатуры),
							ОтрицательныйОстатокЗаказано,
							ОтрицательныйОстатокРезерв,
							ОтрицательныйОстатокЗаказаноРезерв,
							ОтрицательныйОстатокРезервСвободный,
							ОтрицательныйОстатокРаспределено),
						ДокументОбъект, , , Истина
					);
				КонецЕсли;
	
				ВсеОК = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	// Вторым этапом проверки - отрицательные остатки по новым движениям
	ТекстЗапроса ="ВЫБРАТЬ
	              |	ЗаказыПокупателейОстатки.Контрагент КАК Контрагент,
	              |	ЕСТЬNULL(ЗаказыПокупателейОстатки.Заказ, ЗаказыРаспределениеОстатки.ЗаказПокупателя) КАК Заказ,
	              |	ЕСТЬNULL(ЗаказыПокупателейОстатки.Номенклатура, ЗаказыРаспределениеОстатки.Номенклатура) КАК Номенклатура,
	              |	ЕСТЬNULL(ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры, ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
	              |	ЗаказыПокупателейОстатки.СкладКомпании КАК СкладКомпании,
	              |	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) КАК Заказано,
	              |	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК Резерв,
	              |	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервСвободныйОстаток, 0) КАК РезервСвободный,
	              |	ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) КАК Распределено
	              |ИЗ
	              |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	              |			,
	              |			Контрагент В (&Контрагент)
	              |				И Заказ В (&Заказ)
	              |				И Номенклатура В (&Номенклатура)
	              |				И СкладКомпании В (&СкладКомпании)
	              |				И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ЗаказыПокупателейОстатки
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(
	              |				,
	              |				ЗаказПокупателя В (&Заказ)
	              |					И Номенклатура В (&Номенклатура)
	              |					И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ЗаказыРаспределениеОстатки
	              |		ПО ЗаказыПокупателейОстатки.Заказ = ЗаказыРаспределениеОстатки.ЗаказПокупателя
	              |			И ЗаказыПокупателейОстатки.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура
	              |			И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры";
	ЗапросОстатков = Новый Запрос(ТекстЗапроса);
	ЗапросОстатков.УстановитьПараметр("Контрагент", ТаблицаНовыхДвижений.ВыгрузитьКолонку("Контрагент"));
	ЗапросОстатков.УстановитьПараметр("Заказ", ТаблицаНовыхДвижений.ВыгрузитьКолонку("Заказ"));
	ЗапросОстатков.УстановитьПараметр("Номенклатура", ТаблицаНовыхДвижений.ВыгрузитьКолонку("Номенклатура"));
	ЗапросОстатков.УстановитьПараметр("СкладКомпании", ТаблицаНовыхДвижений.ВыгрузитьКолонку("СкладКомпании"));
	ЗапросОстатков.УстановитьПараметр("ХарактеристикаНоменклатуры", ТаблицаНовыхДвижений.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	ОстаткиТоваров = ЗапросОстатков.Выполнить().Выгрузить();

	ЗаголовокКонтроляОстатковНовыхДвижений = "Контроль остатков заказов оперативного проведения документа:";
	
	Для Каждого СтрокаОстатков Из ОстаткиТоваров Цикл

		ВывестиСообщениеПользователю = Ложь;
		ОтрицательныйОстатокЗаказано = "";
		ОтрицательныйОстатокРезерв = "";
		ОтрицательныйОстатокЗаказаноРезерв = "";
		ОтрицательныйОстатокРезервСвободный = "";
		БазоваяЕдиницаИзмерения = СокрЛП(СтрокаОстатков.Номенклатура.БазоваяЕдиницаИзмерения);

		Если СтрокаОстатков.Заказано < 0 Тогда
			ВывестиСообщениеПользователю = Истина;
			ОтрицательныйОстатокЗаказано =
				СтрШаблон(НСтр("ru = '
					|	Остаток по заказу"+?(Заказ=Неопределено,"","" ""+Заказ+"""")+" %1 %2.'"),
					Формат(СтрокаОстатков.Заказано, "ЧДЦ=3; ЧН=0,00"),
					БазоваяЕдиницаИзмерения);
		КонецЕсли;

		Если СтрокаОстатков.Резерв < 0 Тогда 
			ВывестиСообщениеПользователю = Истина;
			ОтрицательныйОстатокРезерв =
				СтрШаблон(НСтр("ru = '
					|	Резерв по заказу"+?(Заказ=Неопределено,"","" ""+Заказ+"""")+" %1 %2.'"),
					Формат(СтрокаОстатков.Резерв, "ЧДЦ=3; ЧН=0,00"),
					БазоваяЕдиницаИзмерения);
		КонецЕсли;

		Если СтрокаОстатков.Резерв <> 0 И СтрокаОстатков.Заказано - СтрокаОстатков.Резерв < 0 Тогда 
			ВывестиСообщениеПользователю = Истина;
			ОтрицательныйОстатокЗаказаноРезерв =
				СтрШаблон(НСтр("ru = '
					|	Остаток по заказу"+?(Заказ=Неопределено,"","" ""+Заказ+"""")+" с учетом резерва %1 %2.'"),
					Формат(СтрокаОстатков.Заказано - СтрокаОстатков.Резерв, "ЧДЦ=3; ЧН=0,00"),
					БазоваяЕдиницаИзмерения);
		КонецЕсли;

		Если СтрокаОстатков.РезервСвободный < 0 Тогда 
			ВывестиСообщениеПользователю = Истина;
			ОтрицательныйОстатокРезервСвободный =
				СтрШаблон(НСтр("ru = '
					|	Свободный резерв по заказу"+?(Заказ=Неопределено,"","" ""+Заказ+"""")+" %1 %2.'"),
					Формат(СтрокаОстатков.РезервСвободный, "ЧДЦ=3; ЧН=0,00"),
					БазоваяЕдиницаИзмерения);
		КонецЕсли;

		Если СтрокаОстатков.Заказано - СтрокаОстатков.Резерв - СтрокаОстатков.Распределено < 0 Тогда
			ВывестиСообщениеПользователю = Истина;
			ОтрицательныйОстатокРаспределено =
				СтрШаблон(НСтр("ru = '
					|	Распределено по заказу"+?(Заказ=Неопределено,"","" ""+Заказ+"""")+" %1 %2. Остаток по заказу %3 %4.'"),
					Формат(СтрокаОстатков.Распределено, "ЧДЦ=3; ЧН=0,00"),
					Формат(СтрокаОстатков.Заказано - СтрокаОстатков.Резерв, "ЧДЦ=3; ЧН=0,00"),
					БазоваяЕдиницаИзмерения);
		КонецЕсли;
		
		Если ВывестиСообщениеПользователю Тогда 

			// По новым движениям документа есть отрицательные остатки.
			Если НЕ ПустаяСтрока(ЗаголовокКонтроляОстатковНовыхДвижений) Тогда 
				ОбщегоНазначения.СообщитьПользователю(ЗаголовокКонтроляОстатковНовыхДвижений);
				ЗаголовокКонтроляОстатковНовыхДвижений = "";
			КонецЕсли;

			ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаОстатков.Номенклатура);

			Если НЕ ЗначениеЗаполнено(СтрокаОстатков.ХарактеристикаНоменклатуры) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = '[%1] Товар ""%2"".Обнаружены отрицательные остатки по заказам покупателей:%3%4%5%6'"),
						ЗначениеКолонкиКода, 
						СокрЛП(СтрокаОстатков.Номенклатура),
						ОтрицательныйОстатокЗаказано,
						ОтрицательныйОстатокРезерв,
						ОтрицательныйОстатокЗаказаноРезерв,
						ОтрицательныйОстатокРезервСвободный),
					ДокументОбъект, , , Истина
				);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"". Обнаружены отрицательные остатки остатки по заказам покупателей:%4%5%6%7'"),
						ЗначениеКолонкиКода, 
						СокрЛП(СтрокаОстатков.Номенклатура),
						СокрЛП(СтрокаОстатков.ХарактеристикаНоменклатуры),
						ОтрицательныйОстатокЗаказано,
						ОтрицательныйОстатокРезерв,
						ОтрицательныйОстатокЗаказаноРезерв,
						ОтрицательныйОстатокРезервСвободный),
					ДокументОбъект, , , Истина
				);
			КонецЕсли;

			ВсеОК = Ложь;

		КонецЕсли;
		
	КонецЦикла;

	Если ВсеОК = Ложь Тогда
		// Проверка на отрицательные остатки не пройден. Ограничимся предупреждением.
		Если КонтрольОстатковТоваровОперативно = Перечисления.ВидыКонтроля.Предупреждать Тогда 
			ВсеОК = Истина;
		КонецЕсли;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	Возврат ВсеОК;
	
КонецФункции

#КонецОбласти

#Область Инициализация

////////////////////////////////////////////////////////////////////////
// Инициализация переменных модуля набора записей
РежимПроведения = РежимПроведенияДокумента.Оперативный;

ДокументОбъект = Неопределено; // Обязательный к заполнению перед началом проведения
РезультатЗапросаПоТоварам = Неопределено;
Контрагент = Неопределено;
Заказ = Неопределено;
СкладКомпании = Неопределено;
ВидОперации = Неопределено;

Заказывать = Истина;
Резервировать = Ложь;
ПоБазовомуКоличеству = Ложь;
ИнтерактивноеПроведение = Ложь;
ПеремещениеТоваров = Ложь;

#КонецОбласти

#КонецЕсли