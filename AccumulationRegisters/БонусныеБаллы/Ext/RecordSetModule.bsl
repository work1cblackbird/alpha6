// Модуль набора записей регистра накопления "Бонусные баллы"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем Карта Экспорт;  // Карта
Перем БонуснаяПрограмма Экспорт; // Бонусная программа
Перем ХозОперация Экспорт;  // Хозяйственная операция
Перем КоличествоБаллов Экспорт; // Количество баллов
Перем ДокДата Экспорт;    // Дата документа
Перем Регистратор Экспорт;  //  Регистратор
Перем Сторно Экспорт;      //    Сторно
Перем РезультатЗапросаПоБаллам Экспорт; //  Результат запроса по баллам
Перем ПериодДвижения Экспорт; // Период движения для списания баллов.

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// приход баллов
Функция Приход() Экспорт
	
	ВсеОК = Истина;
	
	Если НЕ ЗначениеЗаполнено(Карта) Тогда
		Возврат ВсеОК;
	КонецЕсли;
	
	Если БонуснаяПрограмма.ОтсрочкаНачисленияБонусныхБаллов <> 0 Тогда
		Дата = НачалоДня(ДокДата + 24 * 60 * 60 * БонуснаяПрограмма.ОтсрочкаНачисленияБонусныхБаллов);
		АктивностьБонусов = Ложь;
	Иначе
		Дата = ?(БонуснаяПрограмма.СрокСгоранияБонусов <> 0,
			НачалоДня(ДокДата + 24 * 60 * 60 * БонуснаяПрограмма.СрокСгоранияБонусов), Дата("39990101"));
		АктивностьБонусов = Истина;
	КонецЕсли;
	
	Запись                     = Добавить();
	Запись.Период              = ДокДата;
	Запись.Регистратор         = Регистратор;
	Запись.БонуснаяКарта       = Карта;
	Запись.ДатаСписанияБонусов = Дата;
	Запись.АктивностьБонусов   = АктивностьБонусов;
	Запись.ВидДвижения         = ВидДвиженияНакопления.Приход;
	Запись.Количество          = КоличествоБаллов;
	Запись.ХозОперация         = ХозОперация;
	Запись.БонуснаяПрограмма   = БонуснаяПрограмма;
	
	Возврат ВсеОК;
	
КонецФункции

// расход баллов
Функция Расход() Экспорт
	
	ВсеОК = Истина;
	
	Сторно = ?(Сторно = Неопределено, Ложь, Сторно);
	
	Если Сторно Тогда
		Возврат ВозвратБаллов();
	КонецЕсли;
	
	// получим остатки по бонусным баллам
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БонусныеБаллыОстатки.ДатаСписанияБонусов КАК ДатаСписанияБонусов,
	|	БонусныеБаллыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы.Остатки(&МоментВремени, БонуснаяКарта = &БонуснаяКарта И АктивностьБонусов) КАК БонусныеБаллыОстатки
	|ГДЕ
	|	БонусныеБаллыОстатки.КоличествоОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСписанияБонусов
	|ИТОГИ
	|	СУММА(КоличествоОстаток)
	|ПО
	|	ОБЩИЕ";
	Запрос.УстановитьПараметр("МоментВремени", ?(ПериодДвижения = Неопределено,
		Регистратор.МоментВремени(), ПериодДвижения));
	Запрос.УстановитьПараметр("БонуснаяКарта", Карта);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Не хватает бонусных баллов в количестве %1'"),
				КоличествоБаллов),
			Регистратор
		);
		ВсеОК = Ложь;
	Иначе
		ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаИтоги.Следующий() Тогда
			Если КоличествоБаллов > ВыборкаИтоги.КоличествоОстаток Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Не хватает бонусных баллов в количестве %1'"),
						Строка(КоличествоБаллов - ВыборкаИтоги.КоличествоОстаток)
					),
					Регистратор
				);
				ВсеОК = Ложь;
			КонецЕсли;
			
			Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			НадоСписать = КоличествоБаллов;
			Пока Выборка.Следующий() Цикл
				Если НадоСписать = 0 Тогда
					Прервать;
				КонецЕсли;
				Списываем = Мин(НадоСписать, Выборка.КоличествоОстаток);
				
				Запись = Добавить();
				Запись.Период              =
					?(ПериодДвижения = Неопределено ИЛИ ТипЗнч(ПериодДвижения) = Тип("Граница"), ДокДата, ПериодДвижения);
				Запись.Регистратор         = Регистратор;
				Запись.БонуснаяКарта       = Карта;
				Запись.АктивностьБонусов   = Истина;
				Запись.ДатаСписанияБонусов = Выборка.ДатаСписанияБонусов;
				Запись.ВидДвижения         = ВидДвиженияНакопления.Расход;
				Запись.Количество          = Списываем;
				Запись.ХозОперация         = ХозОперация;
				Запись.БонуснаяПрограмма   = БонуснаяПрограмма;
				
				НадоСписать = НадоСписать - Списываем;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВсеОК;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВозвратБаллов()
	
	ВсеОК = Истина;
	
	// получим список документов продажи
	Если РезультатЗапросаПоБаллам = Неопределено Тогда
		РезультатЗапросаПоБаллам = ПолучитьДанныеДляПроведения();
	ИначеЕсли ТипЗнч(РезультатЗапросаПоБаллам) = Тип("РезультатЗапроса") Тогда
		РезультатЗапросаПоБаллам = РезультатЗапросаПоБаллам.Выгрузить();
	КонецЕсли;
	
	// установить блокировку
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "БонусныеБаллы");
	
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокДата));
	
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоБаллам);
	
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("БонуснаяКарта", "БонуснаяКарта");
	
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки,
		ЗначенияБлокировки, ОписаниеИсточника);
	
	// получим остатки
	Остатки = ПолучитьОстаткиБаллов(РезультатЗапросаПоБаллам.ВыгрузитьКолонку("БонуснаяКарта"));
	
	// обход таблицы
	Для Каждого СтрокаВозврат Из РезультатЗапросаПоБаллам Цикл
		
		БонуснаяПрограмма = СтрокаВозврат.БонуснаяКарта.БонуснаяПрограмма;
		
		// приходуем списанные баллы
		Если СтрокаВозврат.КоличествоБонусовНачислить <> 0 Тогда
			Запись                     = Добавить();
			Запись.Период              = ДокДата;
			Запись.Регистратор         = Регистратор;
			Запись.БонуснаяКарта       = СтрокаВозврат.БонуснаяКарта;
			Запись.ДатаСписанияБонусов = ?(БонуснаяПрограмма.СрокСгоранияБонусов <> 0,
				НачалоДня(ДокДата + 24 * 60 * 60 * БонуснаяПрограмма.СрокСгоранияБонусов), Дата("39990101"));;
			Запись.АктивностьБонусов   = Истина;
			Запись.ВидДвижения         = ВидДвиженияНакопления.Расход;
			Запись.Количество          = -СтрокаВозврат.КоличествоБонусовНачислить;
			Запись.ХозОперация         = ХозОперация;
			Запись.БонуснаяПрограмма   = БонуснаяПрограмма;
		КонецЕсли;
		
		ГруппаОстатков = Остатки.Строки.НайтиСтроки(Новый Структура("БонуснаяКарта", СтрокаВозврат.БонуснаяКарта), Ложь);
		
		Если ГруппаОстатков.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НеобходимоСписать = Мин(СтрокаВозврат.КоличествоБонусовСписать, ГруппаОстатков[0].КоличествоОстаток);
		
		ГруппаОстатковНеАктивныхБонусов = ГруппаОстатков[0].Строки.НайтиСтроки(
			Новый Структура("АктивностьБонусов", Ложь), Ложь);
		
		Для Каждого СтрокаОстатков Из ГруппаОстатковНеАктивныхБонусов Цикл
			
			Если НеобходимоСписать = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Списываем = Мин(НеобходимоСписать, СтрокаОстатков.КоличествоОстаток);
			
			Если Списываем = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// приходуем списанные баллы
			Запись                       = Добавить();
			Запись.Период                = ДокДата;
			Запись.Регистратор           = Регистратор;
			Запись.БонуснаяКарта         = СтрокаВозврат.БонуснаяКарта;
			Запись.ДатаСписанияБонусов   = СтрокаОстатков.ДатаСписанияБонусов;
			Запись.АктивностьБонусов     = Ложь;
			Запись.ВидДвижения           = ВидДвиженияНакопления.Приход;
			Запись.Количество            = -Списываем;
			Запись.ХозОперация           = ХозОперация;
			Запись.БонуснаяПрограмма     = БонуснаяПрограмма;
			
			НеобходимоСписать = НеобходимоСписать - Списываем;
		КонецЦикла;
		
		Если НеобходимоСписать <> 0 Тогда
			
			ГруппаОстатковАктивныхБонусов = ГруппаОстатков[0].Строки.НайтиСтроки(
				Новый Структура("АктивностьБонусов", Истина), Ложь);
			
			Для Каждого СтрокаОстатков Из ГруппаОстатковАктивныхБонусов Цикл
				
				Если НеобходимоСписать = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Списываем = Мин(НеобходимоСписать, СтрокаОстатков.КоличествоОстаток);
				
				Если Списываем = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// приходуем списанные баллы
				Запись                       = Добавить();
				Запись.Период                = ДокДата;
				Запись.Регистратор           = Регистратор;
				Запись.БонуснаяКарта         = СтрокаВозврат.БонуснаяКарта;
				Запись.ДатаСписанияБонусов   = СтрокаОстатков.ДатаСписанияБонусов;
				Запись.АктивностьБонусов     = Истина;
				Запись.ВидДвижения           = ВидДвиженияНакопления.Приход;
				Запись.Количество            = -Списываем;
				Запись.ХозОперация           = ХозОперация;
				Запись.БонуснаяПрограмма     = БонуснаяПрограмма;
				
				НеобходимоСписать = НеобходимоСписать - Списываем;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВсеОК;
	
КонецФункции

// стандартная процедура для возврата
Функция ПолучитьДанныеДляПроведения()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратОтПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ВозвратОтПокупателяТовары.ДокументПродажи КАК ДокументПродажи
	|ПОМЕСТИТЬ ТаблицаВозвратов
	|ИЗ
	|	Документ.ВозвратОтПокупателя.Товары КАК ВозвратОтПокупателяТовары
	|ГДЕ
	|	ВозвратОтПокупателяТовары.Ссылка = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БонусныеБаллы.БонуснаяКарта КАК БонуснаяКарта,
	|	СУММА(ВЫБОР
	|			КОГДА БонусныеБаллы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА БонусныеБаллы.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоБонусов,
	|	СУММА(ВЫБОР
	|			КОГДА БонусныеБаллы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА БонусныеБаллы.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СписаноБонусов,
	|	БонусныеБаллы.Регистратор КАК ДокументДвижения
	|ПОМЕСТИТЬ ОбщиеБонусы
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.Регистратор В
	|			(ВЫБРАТЬ
	|				ТаблицаВозвратов.ДокументПродажи
	|			ИЗ
	|				ТаблицаВозвратов КАК ТаблицаВозвратов)
	|
	|СГРУППИРОВАТЬ ПО
	|	БонусныеБаллы.Регистратор,
	|	БонусныеБаллы.БонуснаяКарта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаВозвратов.ДокументПродажи КАК ДокументПродажи,
	|	ЕСТЬNULL(ПродажиОбороты.СуммаОборот, 1) КАК Сумма
	|ПОМЕСТИТЬ ОбщаяСуммаПродаж
	|ИЗ
	|	ТаблицаВозвратов КАК ТаблицаВозвратов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ДокументПродажи В
	|					(ВЫБРАТЬ
	|						ТаблицаВозвратов.ДокументПродажи
	|					ИЗ
	|						ТаблицаВозвратов КАК ТаблицаВозвратов)) КАК ПродажиОбороты
	|		ПО ТаблицаВозвратов.ДокументПродажи = ПродажиОбороты.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПродажиОбороты.ДокументПродажи КАК ДокументПродажи,
	|	ПродажиОбороты.Номенклатура КАК Номенклатура,
	|	ПродажиОбороты.СуммаОборот КАК Сумма
	|ПОМЕСТИТЬ СуммаПродажПоНоменклатуре
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты КАК ПродажиОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбщиеБонусы.БонуснаяКарта КАК БонуснаяКарта,
	|	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(ОбщиеБонусы.НачисленоБонусов, 0) * (ЕСТЬNULL(СуммаПродажПоНоменклатуре.Сумма, 0) / ЕСТЬNULL(ОбщаяСуммаПродаж.Сумма, 1)) КАК ЧИСЛО(15, 0))) КАК КоличествоБонусовСписать,
	|	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(ОбщиеБонусы.СписаноБонусов, 0) * (ЕСТЬNULL(СуммаПродажПоНоменклатуре.Сумма, 0) / ЕСТЬNULL(ОбщаяСуммаПродаж.Сумма, 1)) КАК ЧИСЛО(15, 0))) КАК КоличествоБонусовНачислить
	|ИЗ
	|	ТаблицаВозвратов КАК ТаблицаВозвратов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбщиеБонусы КАК ОбщиеБонусы
	|		ПО ТаблицаВозвратов.ДокументПродажи = ОбщиеБонусы.ДокументДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммаПродажПоНоменклатуре КАК СуммаПродажПоНоменклатуре
	|		ПО ТаблицаВозвратов.ДокументПродажи = СуммаПродажПоНоменклатуре.ДокументПродажи
	|			И ТаблицаВозвратов.Номенклатура = СуммаПродажПоНоменклатуре.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбщаяСуммаПродаж КАК ОбщаяСуммаПродаж
	|		ПО ТаблицаВозвратов.ДокументПродажи = ОбщаяСуммаПродаж.ДокументПродажи
	|ГДЕ
	|	НЕ((ВЫРАЗИТЬ(ЕСТЬNULL(ОбщиеБонусы.НачисленоБонусов, 0) * (ЕСТЬNULL(СуммаПродажПоНоменклатуре.Сумма, 0) / ЕСТЬNULL(ОбщаяСуммаПродаж.Сумма, 1)) КАК ЧИСЛО(15, 0))) = 0
	|					И (ВЫРАЗИТЬ(ЕСТЬNULL(ОбщиеБонусы.СписаноБонусов, 0) * (ЕСТЬNULL(СуммаПродажПоНоменклатуре.Сумма, 0) / ЕСТЬNULL(ОбщаяСуммаПродаж.Сумма, 1)) КАК ЧИСЛО(15, 0))) = 0
	|				ИЛИ ОбщиеБонусы.БонуснаяКарта = ЗНАЧЕНИЕ(Справочник.Карточки.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбщиеБонусы.БонуснаяКарта";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьОстаткиБаллов(Карты)
	
	// получим остатки по бонусным баллам
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БонусныеБаллыОстатки.БонуснаяКарта КАК БонуснаяКарта,
	|	БонусныеБаллыОстатки.ДатаСписанияБонусов КАК ДатаСписанияБонусов,
	|	БонусныеБаллыОстатки.АктивностьБонусов КАК АктивностьБонусов,
	|	БонусныеБаллыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы.Остатки(&МоментВремени, БонуснаяКарта В (&БонуснаяКарта)) КАК БонусныеБаллыОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	АктивностьБонусов,
	|	ДатаСписанияБонусов
	|ИТОГИ
	|	СУММА(КоличествоОстаток)
	|ПО
	|	БонуснаяКарта";
	Запрос.УстановитьПараметр("МоментВремени", Регистратор.МоментВремени());
	Запрос.УстановитьПараметр("БонуснаяКарта", Карты);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

#КонецОбласти

#Область Инициализация

ПериодДвижения = Неопределено;

#КонецОбласти

#КонецЕсли