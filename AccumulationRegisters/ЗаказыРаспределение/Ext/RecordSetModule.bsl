// Модуль набора записей регистра накоплений "Заказы распределение"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем РежимПроведения Экспорт;				// Режим проведения документа оперативный/неоперативный
Перем ДокументОбъект Экспорт;				// Документ, осуществляющий движение по регистру
Перем РезультатЗапросаПоТоварам Экспорт;	// Выборка табличной части или таблица значений табличной части товаров
Перем ЗаказПокупателя Экспорт;				// Ссылка на документ ЗаказПокупателя или ЗаказВнутренний. Если значение неопределено заказ находится в табличной части товаров
Перем ЗаказПоставщика Экспорт;				// Ссылка на документ ЗаказПоставщику. Если значение неопределено заказ находится в табличной части товаров
Перем Контрагент Экспорт;					// Ссылка на элемент справочника контрагентов
Перем СкладКомпании Экспорт;				// Ссылка на склад. Если указан склад, то закрывать распределения по внутренним заказам нужно согласно его резервам на складе.
Перем ТаблицаЗакрытияРаспределений Экспорт; // Таблица закрытия распределений
Перем ПоБазовомуКоличеству Экспорт;			// Булево. Ложь - количество товаров будет рассчитываться как "Количество*Коэффициент", Истина - количество будет браться из реквизита "КоличествоБазовое"
Перем ДвиженияПоРознице Экспорт;			// Булево. Истина - в документе есть розничная цена.
Перем ИмяРеквизитаЦенаРозничная Экспорт;	// Строка. Имя реквизита, в котором храниться розничная цена
Перем ПорядокЗакрытияЗаказовПоставщику Экспорт;	// Строка. Сортировка порядка закрытия распределений заказов поставщику

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияВЗаказах")
		И НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ОтменаПроведения", Ложь) Тогда
		ЗаказыСервер.УстановитьСостояниеЗаказа(ЭтотОбъект);
		ЗаказыСервер.УстановитьСостояниеЗаказаПоставщика(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует движения по регистру приход (распределяем заказ поставщика)
// Возвращаемое значение: Булево. Истина - все ОК, Ложь - чего-то не так.
Функция Приход() Экспорт
	ВсеОК=Истина;

	// получим таблицу товарного состава
	Если (РезультатЗапросаПоТоварам = Неопределено) ИЛИ (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("РезультатЗапроса")) И (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("ТаблицаЗначений")) Тогда
		РезультатЗапросаПоТоварам = ПолучитьТаблицуТоваров();
	КонецЕсли;
	Если ТипЗнч(РезультатЗапросаПоТоварам) = Тип("РезультатЗапроса") Тогда
		РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	КонецЕсли;
	
	// Получение остатков по заказу покупателя.
	ВыборкаОстатковПокупателя=ПолучитьОстаткиПокупателя().Выбрать();
	СтруктураОтбораОстатковПокупателя=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЗаказПокупателя");
	// Получение остатков по заказу поставщику
	ВыборкаОстатковПоставщика=ПолучитьОстаткиПоставщика().Выбрать();
	СтруктураОтбораОстатковПоставщика=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЗаказПоставщика");
	
	// Запишем распределяемый товар в регистр заказов распределений
	Для Каждого СтрокаТоваров Из РезультатЗапросаПоТоварам Цикл
		ЗПокупателя=?(ЗаказПокупателя=Неопределено,СтрокаТоваров.ЗаказПокупателя,ЗаказПокупателя);
		ЗПоставщика=?(ЗаказПоставщика=Неопределено,СтрокаТоваров.ЗаказПоставщика,ЗаказПоставщика);
		Количество=СтрокаТоваров.Количество;
		
		// Получим остатки по текущей номенклатуре.
		ВыборкаОстатковПокупателя.Сбросить();
		СтруктураОтбораОстатковПокупателя.Номенклатура=СтрокаТоваров.Номенклатура;
		СтруктураОтбораОстатковПокупателя.ХарактеристикаНоменклатуры=СтрокаТоваров.ХарактеристикаНоменклатуры;
		СтруктураОтбораОстатковПокупателя.ЗаказПокупателя=ЗПокупателя;
		Если ВыборкаОстатковПокупателя.НайтиСледующий(СтруктураОтбораОстатковПокупателя) Тогда
			КоличествоОстатокПокупателя=ВыборкаОстатковПокупателя.Количество-ВыборкаОстатковПокупателя.Резерв-ВыборкаОстатковПокупателя.Распределение;
		Иначе
			КоличествоОстатокПокупателя=0;
		КонецЕсли;
		ВыборкаОстатковПоставщика.Сбросить();
		СтруктураОтбораОстатковПоставщика.Номенклатура=СтрокаТоваров.Номенклатура;
		СтруктураОтбораОстатковПоставщика.ХарактеристикаНоменклатуры=СтрокаТоваров.ХарактеристикаНоменклатуры;
		СтруктураОтбораОстатковПоставщика.ЗаказПоставщика=ЗПоставщика;
		Если ВыборкаОстатковПоставщика.НайтиСледующий(СтруктураОтбораОстатковПоставщика) Тогда
			КоличествоОстатокПоставщика=ВыборкаОстатковПоставщика.Количество-ВыборкаОстатковПоставщика.Распределение;
		Иначе
			КоличествоОстатокПоставщика=0;
		КонецЕсли;
		Если Количество>КоличествоОстатокПокупателя Тогда
			ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТоваров.Номенклатура);
			// Попытка распределения большего количества, чем осталось нераспределенным и не заказанным по заказу покупателя.
			Если НЕ ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = '%1: [%2] Товар ""%3"". Осталось нераспределено %4 %5. Распределяется %6 %7. Превышение %8 %9'"),
						СокрЛП(ЗПокупателя),
						ЗначениеКолонкиКода,
						СокрЛП(СтрокаТоваров.Номенклатура), 
						Формат(КоличествоОстатокПокупателя),
						СокрЛП(СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения),
						Формат(Количество,"ЧДЦ=3; ЧН=0,00"),
						СокрЛП(СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения),
						Формат(Количество-КоличествоОстатокПокупателя,"ЧДЦ=3; ЧН=0,00"),
						СокрЛП(СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения)
					),
					ДокументОбъект,
					,, Истина
				);
			Иначе
				ТекстСообщения = ""+СокрЛП(ЗПокупателя)+": ["+ЗначениеКолонкиКода+"] " + "Товар" + " """
					+ СокрЛП(СтрокаТоваров.Номенклатура)+""" " + НСтр("ru = 'с характеристикой'") + " """
					+ СокрЛП(СтрокаТоваров.ХарактеристикаНоменклатуры)+""". " + НСтр("ru = 'Осталось нераспределено'") +" "
					+ Формат(КоличествоОстатокПокупателя,"ЧДЦ=3; ЧН=0,00")+" "
					+ СокрЛП(СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения)+". " + "Распределяется" + " "
					+ Формат(Количество,"ЧДЦ=3; ЧН=0,00")+" "+СокрЛП(СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения)
					+ ". " + "Превышение" + " "+Формат(Количество-КоличествоОстатокПокупателя,"ЧДЦ=3; ЧН=0,00")+" "
					+ СокрЛП(СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения);
					
				ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = '%1'"), ТекстСообщения),
						ДокументОбъект,
						,,
						Истина
				);

			КонецЕсли; 
			ВсеОК=Ложь;
		КонецЕсли; 
		Если Количество>КоличествоОстатокПоставщика Тогда
			ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТоваров.Номенклатура);
			// Попытка распределения большего количества, чем осталось нераспределенным в заказе поставщику.
			Если НЕ ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = '%1: [%2] Товар ""%3"". Осталось нераспределено в заказе поставщику %4 %5. Распределяется %6 %7. Превышение %8 %9'"),
						СокрЛП(ЗПоставщика),
						ЗначениеКолонкиКода,
						СокрЛП(СтрокаТоваров.Номенклатура),
						Формат(КоличествоОстатокПоставщика,"ЧДЦ=3; ЧН=0,00"), 
						СокрЛП(СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения),
						Формат(Количество,"ЧДЦ=3; ЧН=0,00"),
						СокрЛП(СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения),
						Формат(Количество-КоличествоОстатокПоставщика,"ЧДЦ=3; ЧН=0,00"),
						СокрЛП(СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения)
					), 
					ДокументОбъект,
					,, Истина
				);
			Иначе
				
				ТекстСообщения = ""+СокрЛП(ЗПоставщика)+": ["+ЗначениеКолонкиКода+"] " + "Товар" + " """
					+ СокрЛП(СтрокаТоваров.Номенклатура)+""" " + НСтр("ru = 'с характеристикой'") + " """
					+ СокрЛП(СтрокаТоваров.ХарактеристикаНоменклатуры)+""". " 
					+ НСтр("ru = 'Осталось нераспределено в заказе поставщику'") + " "
					+ Формат(КоличествоОстатокПоставщика,"ЧДЦ=3; ЧН=0,00")+" "
					+ СокрЛП(СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения)+". " + "Распределяется" + " "
					+ Формат(Количество,"ЧДЦ=3; ЧН=0,00")+" "+СокрЛП(СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения)
					+ ". " + "Превышение" + " "+Формат(Количество-КоличествоОстатокПоставщика,"ЧДЦ=3; ЧН=0,00")+" "
					+ СокрЛП(СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения);
					
				ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = '%1'"), ТекстСообщения),
						ДокументОбъект,
						,,
						Истина
				);

			КонецЕсли; 
			ВсеОК=Ложь;
		КонецЕсли; 
		
		Если ВсеОК Тогда
			// Создаем запись регистра распределения заказов
			НоваяЗапись=Добавить();
			НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период=ДокументОбъект.Дата;
			НоваяЗапись.Регистратор=ДокументОбъект.Ссылка;
			НоваяЗапись.ЗаказПокупателя=ЗПокупателя;
			НоваяЗапись.ЗаказПоставщика=ЗПоставщика;
			НоваяЗапись.Номенклатура=СтрокаТоваров.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры=СтрокаТоваров.ХарактеристикаНоменклатуры;
			// Определяемся с хоз. операцией
			НоваяЗапись.ХозОперация=ДокументОбъект.ХозОперация;
			// Количество
			НоваяЗапись.Количество=Количество;
		КонецЕсли; 
	КонецЦикла;

	Если ВсеОК Тогда 
		ВсеОК = КонтрольРаспределенияОперативно();
	КонецЕсли;
	
	// убиваем циклическую ссылку
	ДокументОбъект=Неопределено;
	
	Возврат ВсеОК;
КонецФункции

// Формирует движения по регистру приход (корректировка распределения)
// Возвращаемое значение: Булево. Истина - все ОК, Ложь - Ошибка.
Функция КорректировкаРаспределения() Экспорт
	ВсеОК = Истина;
	
	// получим таблицу товарного состава
	Если (РезультатЗапросаПоТоварам = Неопределено) ИЛИ (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("РезультатЗапроса")) И (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("ТаблицаЗначений")) Тогда
		РезультатЗапросаПоТоварам = ПолучитьТаблицуТоваров();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получим таблицу остатка по заказу
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров", РезультатЗапросаПоТоварам);
	Запрос.УстановитьПараметр("Момент", ?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, ДокументОбъект.МоментВремени()));
	
	ЕстьЗаказПокупателя = ЗаказПокупателя <> Неопределено;
	ОдинЗаказПокупателя = ТипЗнч(ЗаказПокупателя) <> Тип("Строка");
	ЕстьЗаказПоставщика = ЗаказПоставщика <> Неопределено;
	ОдинЗаказПоставщика = ТипЗнч(ЗаказПоставщика) <> Тип("Строка");
	
	ОдинЗаказПокупателяТекст = ?(ОдинЗаказПокупателя, "&ЗаказПокупателя", "ТаблицаТоваров." + ЗаказПокупателя);	
	ОдинЗаказПоставщикаТекст = ?(ОдинЗаказПоставщика, "&ЗаказПоставщика", "ТаблицаТоваров." + ЗаказПоставщика);
	ТекстЗапроса = "ВЫБРАТЬ
	|	" + ?(ЕстьЗаказПокупателя, ОдинЗаказПокупателяТекст + " КАК ЗаказПокупателя,", "") + "
	|	" + ?(ЕстьЗаказПоставщика, ОдинЗаказПоставщикаТекст + " КАК ЗаказПоставщика,", "") + "
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаТоваров.Количество КАК Количество
	|ПОМЕСТИТЬ
	|	ПромежуточнаяТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Количество<0
	|;
	|
	|ВЫБРАТЬ
	|	" + ?(ЕстьЗаказПокупателя, "ТаблицаТоваров.ЗаказПокупателя КАК ЗаказПокупателя,", "") + "
	|	" + ?(ЕстьЗаказПоставщика, "ТаблицаТоваров.ЗаказПоставщика КАК ЗаказПоставщика,", "") + "
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество
	|ПОМЕСТИТЬ
	|	ТаблицаТоваров
	|ИЗ
	|	ПромежуточнаяТаблицаТоваров КАК ТаблицаТоваров
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры" + ?(ЕстьЗаказПокупателя, ",
	|	ТаблицаТоваров.ЗаказПокупателя", "") + ?(ЕстьЗаказПоставщика,",
	|	ТаблицаТоваров.ЗаказПоставщика", "") + "
	|ИНДЕКСИРОВАТЬ ПО
	|	" + ?(ЕстьЗаказПокупателя,"ЗаказПокупателя,", "") + "
	|	" + ?(ЕстьЗаказПоставщика,"ЗаказПоставщика,", "") + "
	|	Номенклатура
	|;
	|
	|УНИЧТОЖИТЬ
	|	ПромежуточнаяТаблицаТоваров
	|;
	|
	|ВЫБРАТЬ
	|	" + ?(ЕстьЗаказПокупателя, "ТаблицаТоваров.ЗаказПокупателя КАК ЗаказПокупателя,", "") + "
	|	" + ?(ЕстьЗаказПоставщика, "ТаблицаТоваров.ЗаказПоставщика КАК ЗаказПоставщика,", "") + "
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры," + ?(ЕстьЗаказПокупателя," 
	|	(ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток)", "
	|	ЗаказыВнутренниеОстатки.ЗаказаноОстаток") + "+ТаблицаТоваров.Количество КАК Количество
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров" + ?(ЕстьЗаказПоставщика,"
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&Момент,
	|	Заказ ССЫЛКА Документ.ЗаказВнутренний
	|	И Заказ В (ВЫБРАТЬ ТаблицаТоваров.ЗаказПоставщика ИЗ ТаблицаТоваров КАК ТаблицаТоваров)) КАК ЗаказыВнутренниеОстатки
	|ПО
	|	ТаблицаТоваров.ЗаказПоставщика            = ЗаказыВнутренниеОстатки.Заказ
	|	И ТаблицаТоваров.Номенклатура               = ЗаказыВнутренниеОстатки.Номенклатура
	|	И ТаблицаТоваров.ХарактеристикаНоменклатуры = ЗаказыВнутренниеОстатки.ХарактеристикаНоменклатуры","")+?(ЕстьЗаказПокупателя,"
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&Момент,
	|	Заказ В (ВЫБРАТЬ ТаблицаТоваров.ЗаказПокупателя ИЗ ТаблицаТоваров КАК ТаблицаТоваров)) КАК ЗаказыПокупателейОстатки
	|ПО
	|	ТаблицаТоваров.ЗаказПокупателя            = ЗаказыПокупателейОстатки.Заказ
	|	И ТаблицаТоваров.Номенклатура               = ЗаказыПокупателейОстатки.Номенклатура
	|	И ТаблицаТоваров.ХарактеристикаНоменклатуры = ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры","") + "
	|ГДЕ
	|	(" + ?(ЕстьЗаказПокупателя," 
	|	(ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток)", "
	|	ЗаказыВнутренниеОстатки.ЗаказаноОстаток")+"+ТаблицаТоваров.Количество)>=0
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.УстановитьПараметр("ЗаказПоставщика", ЗаказПоставщика);
	
	// Таблица товаров с количеством, которое не должно быть распределено
	РезультатЗапросаПоТоварам=Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыРаспределениеОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК ЗаказПоставщика,
	|	ЗаказыРаспределениеОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыРаспределениеОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыРаспределение.Остатки(&Момент,
	|	" + ?(ЕстьЗаказПокупателя, "ЗаказПокупателя", "ЗаказПоставщика") + " В 
	|	(ВЫБРАТЬ " + ?(ЕстьЗаказПокупателя,"ТаблицаТоваров.ЗаказПокупателя", "ТаблицаТоваров.ЗаказПоставщика") + " ИЗ ТаблицаТоваров КАК ТаблицаТоваров)
	|	) КАК ЗаказыРаспределениеОстатки
	|ПО 
	|	ТаблицаТоваров.Номенклатура               = ЗаказыРаспределениеОстатки.Номенклатура
	|	И ТаблицаТоваров.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры" + ?(ЕстьЗаказПокупателя, "
	|	И ТаблицаТоваров.ЗаказПокупателя            = ЗаказыРаспределениеОстатки.ЗаказПокупателя", "") + ?(ЕстьЗаказПоставщика, "
	|	И ТаблицаТоваров.ЗаказПоставщика            = ЗаказыРаспределениеОстатки.ЗаказПоставщика", "") + "
	|	
	|ГДЕ
	|	ЗаказыРаспределениеОстатки.КоличествоОстаток>0
	|УПОРЯДОЧИТЬ ПО
	|	" + ?(ПорядокЗакрытияЗаказовПоставщику = Неопределено,"ЗаказыРаспределениеОстатки.ЗаказПокупателя.Дата УБЫВ", ПорядокЗакрытияЗаказовПоставщику) + "
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	" + ?(ЕстьЗаказПокупателя, "ЗаказыРаспределениеОстатки.ЗаказПокупателя", "ЗаказыРаспределениеОстатки.ЗаказПоставщика") + ",
	|	ЗаказыРаспределениеОстатки.Номенклатура,
	|	ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|";
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыРаспределение");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОписаниеИсточника.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	
	Если ЕстьЗаказПокупателя Тогда
		Если ОдинЗаказПокупателя Тогда
			ЗначенияБлокировки.Вставить("ЗаказПокупателя", ЗаказПокупателя);
		Иначе
			ОписаниеИсточника.Вставить("ЗаказПокупателя", "ЗаказПокупателя");
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьЗаказПоставщика Тогда
		Если ОдинЗаказПоставщика Тогда
			ЗначенияБлокировки.Вставить("ЗаказПоставщика", ЗаказПоставщика);
		Иначе
			ОписаниеИсточника.Вставить("ЗаказПоставщика", "ЗаказПоставщика");
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	СтруктураПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры");
	Если ЕстьЗаказПокупателя Тогда
		СтруктураПоиска.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	Если ЕстьЗаказПоставщика Тогда
		СтруктураПоиска.Вставить("ЗаказПоставщика");
	КонецЕсли;
	
	ЗапретКорректировкиРаспределения = ПраваИНастройкиПользователя.Значение("ЗапретКорректировкиРаспределения", ДокументОбъект);
	
	// Будем снимать распределение по FIFO - последние строки таблицы пропускаем
	// до нужного условия, а затем для всех остальных(первых) снимаем распределение.
	ВыборкаЗаказов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказов.Следующий() Цикл
		ВыборкаНоменклатура = ВыборкаЗаказов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ВыборкаХарактеристикаНоменклатуры = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристикаНоменклатуры.Следующий() Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаХарактеристикаНоменклатуры);
				НайденныеСтроки = РезультатЗапросаПоТоварам.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
					Если НайденнаяСтрока.Количество < ВыборкаХарактеристикаНоменклатуры.Количество Тогда
						СнимаемоеРаспределение = -(НайденнаяСтрока.Количество - ВыборкаХарактеристикаНоменклатуры.Количество);
						РезультатЗапросаПоТоварам.Удалить(НайденнаяСтрока);
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					СнимаемоеРаспределение = ВыборкаХарактеристикаНоменклатуры.Количество;
				КонецЕсли;
				
				Выборка = ВыборкаХарактеристикаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					
					Если СнимаемоеРаспределение = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если ЗапретКорректировкиРаспределения Тогда
						ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(Выборка.Номенклатура);
						
						Если НЕ ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
							
							ОбщегоНазначения.СообщитьПользователю(
								СтрШаблон(
									НСтр("ru = '%1: [%2] Товар ""%3"". Распределено %4 %5 по заказу: %6. Запрещена корректировка распределения.'"),
									СокрЛП(Выборка.ЗаказПокупателя),
									ЗначениеКолонкиКода,
									СокрЛП(Выборка.Номенклатура),
									Формат(СнимаемоеРаспределение, "ЧДЦ=3; ЧН=0,00"),
									СокрЛП(Выборка.Номенклатура.БазоваяЕдиницаИзмерения),
									СокрЛП(Выборка.ЗаказПоставщика)
								),
								ДокументОбъект,
								,, Истина
							);
						Иначе
							
							ОбщегоНазначения.СообщитьПользователю(
								СтрШаблон(
									НСтр("ru = '%1: [%2] Товар ""%3"" с характеристикой %4. Распределено %5 %6 по заказу: %7. Запрещена корректировка распределения.'"),
									СокрЛП(Выборка.ЗаказПокупателя), 
									ЗначениеКолонкиКода,
									СокрЛП(Выборка.Номенклатура),
									СокрЛП(Выборка.ХарактеристикаНоменклатуры), 
									Формат(СнимаемоеРаспределение, "ЧДЦ=3; ЧН=0,00"),
									СокрЛП(Выборка.Номенклатура.БазоваяЕдиницаИзмерения),
									СокрЛП(Выборка.ЗаказПоставщика)
								),
								ДокументОбъект,
								,,Истина
							);
						КонецЕсли;
						
						ВсеОК = Ложь;
						
						Продолжить;
					КонецЕсли;
					
					ТекРаспределение = Мин(Выборка.Количество, СнимаемоеРаспределение);
					
					// Создаем запись регистра заказов покупателей
					НоваяЗапись = Добавить();
					НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
					НоваяЗапись.Период                     = ДокументОбъект.Дата;
					НоваяЗапись.Регистратор                = ДокументОбъект.Ссылка;
					НоваяЗапись.ЗаказПокупателя            = Выборка.ЗаказПокупателя;
					НоваяЗапись.ЗаказПоставщика            = Выборка.ЗаказПоставщика;
					НоваяЗапись.Номенклатура               = Выборка.Номенклатура;
					НоваяЗапись.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
					// Определяемся с хоз. операцией
					НоваяЗапись.ХозОперация                = ДокументОбъект.ХозОперация;
					// Количество
					НоваяЗапись.Количество                 = -ТекРаспределение;
					
					СнимаемоеРаспределение = СнимаемоеРаспределение - ТекРаспределение;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Если ВсеОК Тогда 
		ВсеОК = КонтрольРаспределенияОперативно();
	КонецЕсли;
	
	// Убиваем циклическую ссылку
	ДокументОбъект = Неопределено;
	
	Возврат ВсеОК;
	
КонецФункции

// Формирует движения по регистру приход (корректировка распределения)
// Возвращаемое значение: Булево. Истина - все ОК, Ложь - Ошибка.
Функция СнятиеРаспределения() Экспорт
	
	ВсеОК = Истина;
	
	// получим таблицу товарного состава
	Если (РезультатЗапросаПоТоварам = Неопределено) ИЛИ (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("РезультатЗапроса")) И (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("ТаблицаЗначений")) Тогда
		МетаданныеОбъекта = ДокументОбъект.Метаданные();
		ВидДок = МетаданныеОбъекта.Имя;
		// Формирование запроса по табличной части товаров
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДокументТовары.ЗаказПоставщика КАК ЗаказПоставщика,
		|	ДокументТовары.ЗаказПокупателя КАК ЗаказПокупателя,
		|	СУММА(ДокументТовары.Количество*ДокументТовары.Коэффициент) КАК Количество
		|ИЗ
		|	Документ."+ВидДок+".Товары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Ссылка=&Ссылка
		|	И ДокументТовары.Количество>0
		|	И ДокументТовары.Номенклатура.ВидНоменклатуры<>&Услуга
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.ХарактеристикаНоменклатуры,
		|	ДокументТовары.ЗаказПоставщика,
		|	ДокументТовары.ЗаказПокупателя
		|");
		Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
		Запрос.УстановитьПараметр("Услуга", Перечисления.ВидыНоменклатуры.Услуга);
		РезультатЗапросаПоТоварам = Запрос.Выполнить();
	КонецЕсли;
	
	Если ТипЗнч(РезультатЗапросаПоТоварам) = Тип("РезультатЗапроса") Тогда
		РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	КонецЕсли;
	
	// Получим таблицу остатка по заказу
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Момент",?(РежимПроведения=РежимПроведенияДокумента.Оперативный,Неопределено,ДокументОбъект.МоментВремени()));
	ЗаказыПокупателей = РезультатЗапросаПоТоварам.Скопировать(,"ЗаказПокупателя");
	ЗаказыПокупателей.Свернуть("ЗаказПокупателя");
	ЗаказыПоставщиков = РезультатЗапросаПоТоварам.Скопировать(,"ЗаказПоставщика");
	ЗаказыПоставщиков.Свернуть("ЗаказПоставщика");
	Запрос.УстановитьПараметр("ЗаказыПокупателей", ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя"));
	Запрос.УстановитьПараметр("ЗаказыПоставщиков", ЗаказыПоставщиков.ВыгрузитьКолонку("ЗаказПоставщика"));
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыРаспределениеОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК ЗаказПоставщика,
	|	ЗаказыРаспределениеОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыРаспределениеОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыРаспределение.Остатки(&Момент,
	|		ЗаказПокупателя В (&ЗаказыПокупателей)
	|		И ЗаказПоставщика В (&ЗаказыПоставщиков)) КАК ЗаказыРаспределениеОстатки
	|ГДЕ
	|	ЗаказыРаспределениеОстатки.КоличествоОстаток>0
	|УПОРЯДОЧИТЬ ПО
	|	"+?(ПорядокЗакрытияЗаказовПоставщику=Неопределено,"ЗаказыРаспределениеОстатки.ЗаказПокупателя.Дата УБЫВ", ПорядокЗакрытияЗаказовПоставщику)+"
	|";
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыРаспределение");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОписаниеИсточника.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	ОписаниеИсточника.Вставить("ЗаказПокупателя", "ЗаказПокупателя");
	ОписаниеИсточника.Вставить("ЗаказПоставщика", "ЗаказПоставщика");
	
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	ТаблицаРаспределения = Запрос.Выполнить().Выгрузить();
	СтруктураПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЗаказПокупателя, ЗаказПоставщика");
	
	ЗапретКорректировкиРаспределения = ПраваИНастройкиПользователя.Значение("ЗапретКорректировкиРаспределения", ДокументОбъект);
	
	// Будем снимать распределение по FIFO - последние строки таблицы пропускаем
	// до нужного условия, а затем для всех остальных(первых) снимаем распределение.
	Для Каждого ТоварнаяСтрока Из РезультатЗапросаПоТоварам Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТоварнаяСтрока);
		НайденныеСтроки = ТаблицаРаспределения.НайтиСтроки(СтруктураПоиска);
		
		Распределено = 0;
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			Распределено = НайденнаяСтрока.Количество;
			ТаблицаРаспределения.Удалить(НайденнаяСтрока);
		КонецЕсли;
	
		Если ЗапретКорректировкиРаспределения Тогда
			БазоваяЕдиницаИзмерения = ТоварнаяСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
			ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(ТоварнаяСтрока.Номенклатура);
			Если НЕ ЗначениеЗаполнено(ТоварнаяСтрока.ХарактеристикаНоменклатуры) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = '%1: [%2] Товар ""%3"". Распределено %4 %5 по заказу: %6. Запрещено списание распределения.'"),
						СокрЛП(ТоварнаяСтрока.ЗаказПокупателя),
						ЗначениеКолонкиКода,
						СокрЛП(ТоварнаяСтрока.Номенклатура),
						Формат(Распределено, "ЧДЦ=3; ЧН=0,00"),
						СокрЛП(БазоваяЕдиницаИзмерения), 
						СокрЛП(ТоварнаяСтрока.ЗаказПоставщика)
					),
					ДокументОбъект,
					,,Истина
				);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = '%1: [%2] Товар ""%3"" с характеристикой ""%4"". Распределено %5 %6 по заказу: %7. Запрещено списание распределения.'"),
						СокрЛП(ТоварнаяСтрока.ЗаказПокупателя),
						ЗначениеКолонкиКода,
						СокрЛП(ТоварнаяСтрока.Номенклатура),
						СокрЛП(ТоварнаяСтрока.ХарактеристикаНоменклатуры),
						Формат(Распределено, "ЧДЦ=3; ЧН=0,00"),
						СокрЛП(БазоваяЕдиницаИзмерения),
						СокрЛП(ТоварнаяСтрока.ЗаказПоставщика)
					),
					ДокументОбъект,
					,,
					Истина
				);
			КонецЕсли;
			ВсеОК = Ложь;
			Продолжить;
		ИначеЕсли Распределено < ТоварнаяСтрока.Количество Тогда
			
			БазоваяЕдиницаИзмерения = ТоварнаяСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
			ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(ТоварнаяСтрока.Номенклатура);
			
			Если НЕ ЗначениеЗаполнено(ТоварнаяСтрока.ХарактеристикаНоменклатуры) Тогда
				
				ТекстСообщения = ""+СокрЛП(ТоварнаяСтрока.ЗаказПокупателя)+": ["+ЗначениеКолонкиКода+"] " + "Товар" + " """
					+ СокрЛП(ТоварнаяСтрока.Номенклатура)+""". " + "Распределено" + " "+Формат(Распределено, "ЧДЦ=3; ЧН=0,00")+" "
					+ СокрЛП(БазоваяЕдиницаИзмерения) + " " + НСтр("ru = 'по заказу:'") + " " + СокрЛП(ТоварнаяСтрока.ЗаказПоставщика)
					+ ". " + "Списывается" + " "+Формат(ТоварнаяСтрока.Количество, "ЧДЦ=3; ЧН=0,00")+" "
					+ СокрЛП(БазоваяЕдиницаИзмерения)+". " + "Превышение" + " "
					+ Формат(ТоварнаяСтрока.Количество-Распределено,"ЧДЦ=3; ЧН=0,00")+" "+СокрЛП(БазоваяЕдиницаИзмерения);
					
				ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = '%1'"), ТекстСообщения),
						ДокументОбъект,
						,,
						Истина
				);
			Иначе
				ТекстСообщения = ""+СокрЛП(ТоварнаяСтрока.ЗаказПокупателя)+": ["+ЗначениеКолонкиКода+"] " + "Товар" + " """
					+ СокрЛП(ТоварнаяСтрока.Номенклатура)+""" " + НСтр("ru = 'с характеристикой'") + " """
					+ СокрЛП(ТоварнаяСтрока.ХарактеристикаНоменклатуры)+""". " + "Распределено" + " "
					+ Формат(Распределено, "ЧДЦ=3; ЧН=0,00")+" "+СокрЛП(БазоваяЕдиницаИзмерения) + " " + НСтр("ru = 'по заказу:'") 
					+ " " + СокрЛП(ТоварнаяСтрока.ЗаказПоставщика) + ". " + "Списывается" + " "
					+ Формат(ТоварнаяСтрока.Количество, "ЧДЦ=3; ЧН=0,00")+" "+СокрЛП(БазоваяЕдиницаИзмерения)+". " + "Превышение" 
					+ " "+Формат(ТоварнаяСтрока.Количество-Распределено,"ЧДЦ=3; ЧН=0,00")+" "+СокрЛП(БазоваяЕдиницаИзмерения);
					
				ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = '%1'"), ТекстСообщения),
						ДокументОбъект,
						,,
						Истина
				);
				
			КонецЕсли;
			
			ВсеОК = Ложь;
			
			Продолжить;
			
		КонецЕсли;
		
		// Создаем запись регистра заказов покупателей
		НоваяЗапись = Добавить();
		НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Расход;
		НоваяЗапись.Период                     = ДокументОбъект.Дата;
		НоваяЗапись.Регистратор                = ДокументОбъект.Ссылка;
		НоваяЗапись.ЗаказПокупателя            = ТоварнаяСтрока.ЗаказПокупателя;
		НоваяЗапись.ЗаказПоставщика            = ТоварнаяСтрока.ЗаказПоставщика;
		НоваяЗапись.Номенклатура               = ТоварнаяСтрока.Номенклатура;
		НоваяЗапись.ХарактеристикаНоменклатуры = ТоварнаяСтрока.ХарактеристикаНоменклатуры;
		// Определяемся с хоз. операцией
		НоваяЗапись.ХозОперация                = ДокументОбъект.ХозОперация;
		// Количество
		НоваяЗапись.Количество                 = ТоварнаяСтрока.Количество;
	КонецЦикла;

	Если ВсеОК Тогда 
		ВсеОК = КонтрольРаспределенияОперативно();
	КонецЕсли;
	
	// Убиваем циклическую ссылку
	ДокументОбъект=Неопределено;
	
	Возврат ВсеОК;
	
КонецФункции

// Формирует движения по регистру приход (корректировка распределения)
// Возвращаемое значение: Булево. Истина - все ОК, Ложь - Ошибка.
Функция КорректировкаРаспределенияЗаказаПоставщику() Экспорт
	ВсеОК = Истина;
	
	// получим таблицу товарного состава
	Если (РезультатЗапросаПоТоварам = Неопределено) ИЛИ (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("РезультатЗапроса")) И (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("ТаблицаЗначений")) Тогда
		РезультатЗапросаПоТоварам = ПолучитьТаблицуТоваров();
	КонецЕсли;
	
	// Получим таблицу остатка по заказу
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров", РезультатЗапросаПоТоварам);
	Запрос.УстановитьПараметр("Момент",?(РежимПроведения=РежимПроведенияДокумента.Оперативный,Неопределено,ДокументОбъект.МоментВремени()));
	
	ОдинЗаказПоставщика = ТипЗнч(ЗаказПоставщика)<>Тип("Строка");
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	"+?(ОдинЗаказПоставщика,"&ЗаказПоставщика","ТаблицаТоваров."+ЗаказПоставщика)+" КАК ЗаказПоставщика,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаТоваров.Количество КАК Количество
	|ПОМЕСТИТЬ
	|	ПромежуточнаяТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Количество<0
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.ЗаказПоставщика КАК ЗаказПоставщика,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество
	|ПОМЕСТИТЬ
	|	ТаблицаТоваров
	|ИЗ
	|	ПромежуточнаяТаблицаТоваров КАК ТаблицаТоваров
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры,
	|	ТаблицаТоваров.ЗаказПоставщика
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказПоставщика,
	|	Номенклатура
	|;
	|
	|УНИЧТОЖИТЬ
	|	ПромежуточнаяТаблицаТоваров
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.ЗаказПоставщика КАК ЗаказПоставщика,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаТоваров.Количество КАК Количество
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗаказПоставщика", ЗаказПоставщика);
	
	РезультатЗапросаПоТоварам=Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаказыРаспределениеОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК ЗаказПоставщика,
	|	ЗаказыРаспределениеОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыРаспределениеОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыРаспределение.Остатки(&Момент,
	|	ЗаказПоставщика В 
	|	(ВЫБРАТЬ ТаблицаТоваров.ЗаказПоставщика ИЗ ТаблицаТоваров КАК ТаблицаТоваров)
	|	) КАК ЗаказыРаспределениеОстатки
	|ПО 
	|	ТаблицаТоваров.Номенклатура               = ЗаказыРаспределениеОстатки.Номенклатура
	|	И ТаблицаТоваров.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|	И ТаблицаТоваров.ЗаказПоставщика            = ЗаказыРаспределениеОстатки.ЗаказПоставщика
	|	
	|ГДЕ
	|	ЗаказыРаспределениеОстатки.КоличествоОстаток>0
	|УПОРЯДОЧИТЬ ПО
	|	"+?(ПорядокЗакрытияЗаказовПоставщику=Неопределено,"ЗаказыРаспределениеОстатки.ЗаказПокупателя.Дата УБЫВ", ПорядокЗакрытияЗаказовПоставщику)+"
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	ЗаказыРаспределениеОстатки.ЗаказПоставщика,
	|	ЗаказыРаспределениеОстатки.Номенклатура,
	|	ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|";
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыРаспределение");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОписаниеИсточника.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	
	Если ОдинЗаказПоставщика Тогда
		ЗначенияБлокировки.Вставить("ЗаказПоставщика", ЗаказПоставщика);
	Иначе
		ОписаниеИсточника.Вставить("ЗаказПоставщика", "ЗаказПоставщика");
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	СтруктураПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЗаказПоставщика");
	
	ЗапретКорректировкиРаспределения = ПраваИНастройкиПользователя.Значение("ЗапретКорректировкиРаспределения", ДокументОбъект);
	
	// Будем снимать распределение по FIFO - последние строки таблицы пропускаем
	// до нужного условия, а затем для всех остальных(первых) снимаем распределение.
	ВыборкаЗаказов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказов.Следующий() Цикл
		ВыборкаНоменклатура = ВыборкаЗаказов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ВыборкаХарактеристикаНоменклатуры = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристикаНоменклатуры.Следующий() Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаХарактеристикаНоменклатуры);
				НайденныеСтроки = РезультатЗапросаПоТоварам.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
					Если НЕ НайденнаяСтрока.Количество = 0 Тогда
						СписываемоеКоличество = - НайденнаяСтрока.Количество;
						Если СписываемоеКоличество < ВыборкаХарактеристикаНоменклатуры.Количество Тогда
							СнимаемоеРаспределение = СписываемоеКоличество;
						Иначе
							СнимаемоеРаспределение = ВыборкаХарактеристикаНоменклатуры.Количество;
						КонецЕсли;
						РезультатЗапросаПоТоварам.Удалить(НайденнаяСтрока);
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					СнимаемоеРаспределение = 0;
				КонецЕсли;
				
				Выборка = ВыборкаХарактеристикаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					
					Если СнимаемоеРаспределение = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если ЗапретКорректировкиРаспределения Тогда
						ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(Выборка.Номенклатура);
						Если НЕ ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
							ОбщегоНазначения.СообщитьПользователю(
								СтрШаблон(
									НСтр("ru = '%1: [%2] Товар ""%3"". Распределено %4 %5 по заказу: %6. Запрещена корректировка распределения.'"),
									СокрЛП(Выборка.ЗаказПокупателя), 
									ЗначениеКолонкиКода, 
									СокрЛП(Выборка.Номенклатура),
									Формат(СнимаемоеРаспределение, "ЧДЦ=3; ЧН=0,00"),
									СокрЛП(Выборка.Номенклатура.БазоваяЕдиницаИзмерения),
									СокрЛП(Выборка.ЗаказПоставщика)
								),
								ДокументОбъект,
								,, Истина
							);
						Иначе
							ОбщегоНазначения.СообщитьПользователю(
								СтрШаблон(
									НСтр("ru = '%1: [%2] Товар ""%3"" с характеристикой %4. Распределено %5 %6 по заказу: %7. Запрещена корректировка распределения.'"),
									СокрЛП(Выборка.ЗаказПокупателя),
									ЗначениеКолонкиКода,
									СокрЛП(Выборка.Номенклатура),
									СокрЛП(Выборка.ХарактеристикаНоменклатуры),
									Формат(СнимаемоеРаспределение, "ЧДЦ=3; ЧН=0,00"),
									СокрЛП(Выборка.Номенклатура.БазоваяЕдиницаИзмерения),
									СокрЛП(Выборка.ЗаказПоставщика)
								),
								ДокументОбъект,
								,, Истина
							);
						КонецЕсли;
						
						ВсеОК = Ложь;
						Продолжить;
					КонецЕсли;
					
					ТекРаспределение = Мин(Выборка.Количество, СнимаемоеРаспределение);
					
					// Создаем запись регистра заказов покупателей
					НоваяЗапись = Добавить();
					НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
					НоваяЗапись.Период                     = ДокументОбъект.Дата;
					НоваяЗапись.Регистратор                = ДокументОбъект.Ссылка;
					НоваяЗапись.ЗаказПокупателя            = Выборка.ЗаказПокупателя;
					НоваяЗапись.ЗаказПоставщика            = Выборка.ЗаказПоставщика;
					НоваяЗапись.Номенклатура               = Выборка.Номенклатура;
					НоваяЗапись.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
					// Определяемся с хоз. операцией
					НоваяЗапись.ХозОперация                = ДокументОбъект.ХозОперация;
					// Количество
					НоваяЗапись.Количество                 = -ТекРаспределение;
					
					СнимаемоеРаспределение = СнимаемоеРаспределение - ТекРаспределение;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Если ВсеОК Тогда 
		ВсеОК = КонтрольРаспределенияОперативно();
	КонецЕсли;
	
	// Убиваем циклическую ссылку
	ДокументОбъект=Неопределено;
	
	Возврат ВсеОК;
	
КонецФункции

// Формирует движения по регистру расход (закрытие распределений поставщика)
// Возвращаемое значение: Булево. Истина - все ОК, Ложь - чего-то не так.
Функция ЗакрытиеРаспределенийЗаказовПоставщику() Экспорт
	
	ВсеОК=Истина;
	ТаблицаЗакрытияРаспределений.Очистить();
	
	// Получим таблицу товарного состава
	Если (РезультатЗапросаПоТоварам = Неопределено) ИЛИ (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("РезультатЗапроса")) И (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("ТаблицаЗначений")) Тогда
		РезультатЗапросаПоТоварам = ПолучитьТаблицуТоваров();
	КонецЕсли;
	Если ТипЗнч(РезультатЗапросаПоТоварам) = Тип("РезультатЗапроса") Тогда
		РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	КонецЕсли;
	
	ДокументОбъектПодразделениеКомпании = ДокументОбъект.ПодразделениеКомпании;
	ЗакрытиеЗаказовПоПодразделению = УчетныеПолитикиСервер.Значение("ЗакрытиеЗаказовПоПодразделению", ДокументОбъект.Дата, ДокументОбъектПодразделениеКомпании);
	
	// Получим выборочное распределение заказов из документа
	ВидДок = ДокументОбъект.Метаданные().Имя;
	
	Запрос = Новый Запрос();
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		Организация = ДокументОбъект.СкладПолучатель.Организация;
	Иначе
		Организация = ДокументОбъект.СкладКомпании.Организация;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ЕстьРеквизит(ДокументОбъект, , "РаспределениеТовара") Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДокументТовары.ЗаказПоставщика КАК ЗаказПоставщика,
		|	ДокументТовары.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ДокументТовары.Количество КАК Количество
		|ИЗ
		|	Документ."+ВидДок+".РаспределениеТовара КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Ссылка=&Ссылка
		|	И (НЕ ДокументТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга))
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	ЗаказПоставщика,
		|	ЗаказПокупателя УБЫВ
		|	
		|";
		Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
		Запрос.УстановитьПараметр("Услуга", Перечисления.ВидыНоменклатуры.Услуга);
		РучноеРаспределение = Запрос.Выполнить().Выгрузить();
		РучноеРаспределение.Индексы.Добавить("Номенклатура");
		РучноеРаспределение.Индексы.Добавить("ХарактеристикаНоменклатуры");
	Иначе
		РучноеРаспределение = Неопределено;
	КонецЕсли;
	ЗакрываемВнутреннееРаспределение = (ТипЗнч(Контрагент)=Тип("СправочникСсылка.ПодразделенияКомпании"));
	
	ТекстОтбора = "";
	Если ЗакрытиеЗаказовПоПодразделению Тогда
		Если ЗакрываемВнутреннееРаспределение Тогда
			Если ДокументОбъект.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала Тогда
				// Получим Заказы внутренние для закрытия, которые были сделаны на подразделении обеспечения.
				ТекстОтбора = "
				|	И (ВЫРАЗИТЬ(ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК Документ.ЗаказВнутренний).ПодразделениеПолучатель В ИЕРАРХИИ(&ДокументОбъектПодразделениеКомпании))";
			Иначе
				ТекстОтбора = "
				|	И (ВЫРАЗИТЬ(ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК Документ.ЗаказВнутренний).ПодразделениеКомпании В ИЕРАРХИИ(&ДокументОбъектПодразделениеКомпании))";
			КонецЕсли;
		Иначе
			ТекстОтбора = "
			|	И (ВЫРАЗИТЬ(ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК Документ.ЗаказПоставщику).ПодразделениеКомпании В ИЕРАРХИИ(&ДокументОбъектПодразделениеКомпании))";
		КонецЕсли;
		
		ТекстОтбора = ТекстОтбора + "
		|	И (ЗаказыРаспределениеОстатки.ЗаказПокупателя.ПодразделениеКомпании В ИЕРАРХИИ(&ДокументОбъектПодразделениеКомпании))";
	КонецЕсли;
	ТекстОтбора = ТекстОтбора + "
	|	И ЗаказыРаспределениеОстатки.ЗаказПокупателя.Организация = &Организация";
	
	// Получим распределение заказов покупателей данному поставщику
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыРаспределениеОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК ЗаказПоставщика,
	|	ЗаказыРаспределениеОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЗаказыРаспределениеОстатки.ЗаказПокупателя ССЫЛКА Документ.ЗаказВнутренний ТОГДА
	|			ВЫРАЗИТЬ(ЗаказыРаспределениеОстатки.ЗаказПокупателя КАК Документ.ЗаказВнутренний).ПодразделениеПолучатель
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(ЗаказыРаспределениеОстатки.ЗаказПокупателя КАК Документ.ЗаказПокупателя).Контрагент
	|	КОНЕЦ КАК Контрагент" + ?(ЗакрываемВнутреннееРаспределение, ",
	|	ВЫРАЗИТЬ(ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК Документ.ЗаказВнутренний).Дата", ",
	|	ВЫРАЗИТЬ(ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК Документ.ЗаказПоставщику).Дата") + " КАК ЗаказПоставщикаДата,
	|	ВЫБОР
	|		КОГДА ЗаказыРаспределениеОстатки.ЗаказПоставщика = &ДокументОснование ТОГДА
	|			0
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ КАК СортировкаПоОснованию,
	|	ЗаказыРаспределениеОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыРаспределение.Остатки(&Момент, Номенклатура В (&Номенклатура) И (ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры) ИЛИ ХарактеристикаНоменклатуры=&ПустаяХарактеристика)) КАК ЗаказыРаспределениеОстатки
	|ГДЕ" + ?(ЗакрываемВнутреннееРаспределение, "
	|	ВЫРАЗИТЬ(ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК Документ.ЗаказВнутренний).ПодразделениеПолучатель = &Контрагент", "
	|	ВЫРАЗИТЬ(ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК Документ.ЗаказПоставщику).Контрагент = &Контрагент") + ?(ЗаказПокупателя<>Неопределено, "
	|	И ЗаказыРаспределениеОстатки.ЗаказПокупателя = &ЗаказПокупателя", "") + ТекстОтбора + "
	|УПОРЯДОЧИТЬ ПО
	|	СортировкаПоОснованию,
	|	ЗаказПоставщикаДата,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры УБЫВ
	|";
	Запрос.УстановитьПараметр("Момент",                              ?(РежимПроведения=РежимПроведенияДокумента.Оперативный,Неопределено, ДокументОбъект.МоментВремени()));
	Запрос.УстановитьПараметр("Контрагент",                          Контрагент);
	Запрос.УстановитьПараметр("ЗаказПокупателя",                     ЗаказПокупателя);
	Запрос.УстановитьПараметр("ДокументОснование",                   ДокументОбъект.ДокументОснование);
	Запрос.УстановитьПараметр("Номенклатура",                        РезультатЗапросаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",          РезультатЗапросаПоТоварам.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	Запрос.УстановитьПараметр("ПустаяХарактеристика",                Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДокументОбъектПодразделениеКомпании", ДокументОбъектПодразделениеКомпании);
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыРаспределение");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
	Если ЗаказПокупателя<>Неопределено Тогда
		ЗначенияБлокировки.Вставить("ЗаказПокупателя", ЗаказПокупателя);
	КонецЕсли;
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОписаниеИсточника.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	ТаблицаРаспределения = Запрос.Выполнить().Выгрузить();
	
	// Получим резервы внутренних заказов
	ЗакрыватьПоРезервам = (НЕ СкладКомпании = Неопределено);
	Если ЗакрыватьПоРезервам Тогда
		Запрос.Текст = ("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыПокупателейОстатки.Заказ КАК Заказ,
		|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказыПокупателейОстатки.РезервОстаток КАК Резерв
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(&Момент, СкладКомпании = &СкладКомпании И Заказ ССЫЛКА Документ.ЗаказВнутренний И Контрагент = &Контрагент И Номенклатура В (&Номенклатура) И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ЗаказыПокупателейОстатки
		|ГДЕ
		|	ЗаказыПокупателейОстатки.РезервОстаток > 0
		|");
		Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
		
		// Наложим блокировку на считываемые данные
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыПокупателей");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
		ЗначенияБлокировки.Вставить("СкладКомпании", СкладКомпании);
		ЗначенияБлокировки.Вставить("Контрагент", Контрагент);
		СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
		
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
		ОписаниеИсточника.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
		
		ТаблицаРезервов = Запрос.Выполнить().Выгрузить();
		ТаблицаРезервов.Индексы.Добавить("Номенклатура");
		ТаблицаРезервов.Индексы.Добавить("ХарактеристикаНоменклатуры");
		
		Если ТаблицаРезервов.Количество()=0 Тогда
			// убиваем циклическую ссылку
			ДокументОбъект=Неопределено;
			Возврат ВсеОК;
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим таблицу номенклатуры с ручным списанием характеристик
	ЗапросСписокРучныхХарактеристик = Новый Запрос;
	ЗапросСписокРучныхХарактеристик.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|	И Номенклатура.ТипНоменклатуры.АвтоСписаниеХарактеристик В 
	|		(ЗНАЧЕНИЕ(Перечисление.РежимыАвтоСписанияХарактеристик.РучноеСписание),
	|		ЗНАЧЕНИЕ(Перечисление.РежимыАвтоСписанияХарактеристик.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.Ссылка";
	ЗапросСписокРучныхХарактеристик.УстановитьПараметр("СписокНоменклатуры", ТаблицаРаспределения.ВыгрузитьКолонку("Номенклатура"));
	СписокРучныхХарактеристик = ЗапросСписокРучныхХарактеристик.Выполнить().Выгрузить();
	
	СтруктураОтбора              = Новый Структура("Номенклатура");
	СтруктураОтбораРаспределения = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры");
	
	// Перебор таблицы товаров
	Для Каждого СтрокаТоваров Из РезультатЗапросаПоТоварам Цикл
		
		// Запомним количество, которое необходимо снять с распределения
		АвтоСписаниеХарактеристик = (СписокРучныхХарактеристик.Найти(СтрокаТоваров.Номенклатура)=Неопределено);
		ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		
		Количество = СтрокаТоваров.Количество;
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТоваров.СпособРаспределенияЗаказов <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Автоматическое")
			И ЗначениеЗаполнено(РучноеРаспределение) Тогда
			СтруктураОтбораРаспределения.Номенклатура               = СтрокаТоваров.Номенклатура;
			СтруктураОтбораРаспределения.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры;
			СтрокиРучногоРаспределения = РучноеРаспределение.НайтиСтроки(СтруктураОтбораРаспределения);
			Для Каждого ТекСтрока Из СтрокиРучногоРаспределения Цикл
				
				// Пока есть что снимать с распределения
				Если Количество <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				ДоступноеКоличество = Мин(ТекСтрока.Количество, Количество);
				
				Если ЗакрыватьПоРезервам Тогда
					ОтборРезервов = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Заказ", СтрокаТоваров.Номенклатура, СтрокаТоваров.ХарактеристикаНоменклатуры, ТекСтрока.ЗаказПоставщика);
					СтрокиРезерва = ТаблицаРезервов.НайтиСтроки(ОтборРезервов);
					Если СтрокиРезерва.Количество() = 0 Тогда
						ДоступноеКоличество = 0;
					Иначе
						СтрокаРезерва = СтрокиРезерва[0];
						Если СтрокаРезерва.Резерв <= ДоступноеКоличество Тогда
							ДоступноеКоличество = СтрокаРезерва.Резерв;
							ТаблицаРезервов.Удалить(СтрокаРезерва);
						Иначе
							СтрокаРезерва.Резерв = СтрокаРезерва.Резерв - ДоступноеКоличество;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ДоступноеКоличество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураОтбораПоЗаказам = Новый Структура("Номенклатура, ЗаказПоставщика", ТекСтрока.Номенклатура, ТекСтрока.ЗаказПоставщика);
				Если ЗначениеЗаполнено(ТекСтрока.ЗаказПокупателя) Тогда
					СтруктураОтбораПоЗаказам.Вставить("ЗаказПокупателя", ТекСтрока.ЗаказПокупателя);
				КонецЕсли;
				
				СколькоРаспределили = 0;
				ТоварныеСтроки = ТаблицаРаспределения.НайтиСтроки(СтруктураОтбораПоЗаказам);
				Для Каждого СтрокаРаспределения Из ТоварныеСтроки Цикл
					
					Если ДоступноеКоличество <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					// Остаток по распределению больше нуля?
					Если СтрокаРаспределения.Количество <=0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаРаспределения.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры
						ИЛИ (СтрокаРаспределения.ХарактеристикаНоменклатуры = ПустаяХарактеристика И АвтоСписаниеХарактеристик) Тогда
						
						// Эта номенклатура есть в таблице товаров
						КоличествоСписания = Мин(ДоступноеКоличество, СтрокаРаспределения.Количество);
						Если КоличествоСписания<>0 Тогда
							// Создаем запись регистра заказов покупателей
							НоваяЗапись=Добавить();
							НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Расход;
							НоваяЗапись.Период                     = ДокументОбъект.Дата;
							НоваяЗапись.Регистратор                = ДокументОбъект.Ссылка;
							НоваяЗапись.ЗаказПокупателя            = СтрокаРаспределения.ЗаказПокупателя;
							НоваяЗапись.ЗаказПоставщика            = СтрокаРаспределения.ЗаказПоставщика;
							НоваяЗапись.Номенклатура               = СтрокаРаспределения.Номенклатура;
							НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаРаспределения.ХарактеристикаНоменклатуры;
							НоваяЗапись.ХозОперация                = ДокументОбъект.ХозОперация;
							НоваяЗапись.Количество                 = КоличествоСписания;
							// Запомним движения для резервирования снятых распределений по заказам покупателей.
							НовоеЗакрытиеРаспределения = ТаблицаЗакрытияРаспределений.Добавить();
							НовоеЗакрытиеРаспределения.Номенклатура               = НоваяЗапись.Номенклатура;
							НовоеЗакрытиеРаспределения.ХарактеристикаНоменклатуры = НоваяЗапись.ХарактеристикаНоменклатуры;
							НовоеЗакрытиеРаспределения.Контрагент                 = СтрокаРаспределения.Контрагент;
							НовоеЗакрытиеРаспределения.Заказ                      = НоваяЗапись.ЗаказПокупателя;
							НовоеЗакрытиеРаспределения.Резерв                     = КоличествоСписания;
							
							СтрокаТоваров.Резерв = СтрокаТоваров.Резерв + КоличествоСписания;
							СтрокаРаспределения.Количество = СтрокаРаспределения.Количество - КоличествоСписания;
							ТекСтрока.Количество           = ТекСтрока.Количество - КоличествоСписания;
							
							Если СтрокаРаспределения.Количество = 0 Тогда
								ТаблицаРаспределения.Удалить(СтрокаРаспределения);
							КонецЕсли;
							
							Если ТекСтрока.Количество = 0 Тогда
								РучноеРаспределение.Удалить(ТекСтрока);
							КонецЕсли;
							
							СколькоРаспределили = СколькоРаспределили + КоличествоСписания;
							ДоступноеКоличество = ДоступноеКоличество - КоличествоСписания;
							Количество = Количество - КоличествоСписания;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если Количество > 0 И СтрокаТоваров.СпособРаспределенияЗаказов <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Выборочное") Тогда
			
			СтруктураОтбора.Номенклатура = СтрокаТоваров.Номенклатура;
			ТоварныеСтроки = ТаблицаРаспределения.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого СтрокаРаспределения Из ТоварныеСтроки Цикл
				// Пока есть что снимать с распределения
				Если Количество <= 0 Тогда
					Прервать;
				КонецЕсли;
				// Остаток по распределению больше нуля?
				Если СтрокаРаспределения.Количество <=0 Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаРаспределения.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры
					ИЛИ (СтрокаРаспределения.ХарактеристикаНоменклатуры = ПустаяХарактеристика И АвтоСписаниеХарактеристик) Тогда
					// Эта номенклатура есть в таблице товаров
					КоличествоСписания = ?(Количество>СтрокаРаспределения.Количество,СтрокаРаспределения.Количество,Количество);
					
					Если ЗакрыватьПоРезервам Тогда
						ОтборРезервов = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Заказ", СтрокаТоваров.Номенклатура, СтрокаТоваров.ХарактеристикаНоменклатуры, СтрокаРаспределения.ЗаказПоставщика);
						СтрокиРезерва = ТаблицаРезервов.НайтиСтроки(ОтборРезервов);
						Если СтрокиРезерва.Количество() = 0 Тогда
							КоличествоСписания = 0;
						Иначе
							СтрокаРезерва = СтрокиРезерва[0];
							Если СтрокаРезерва.Резерв <= КоличествоСписания Тогда
								КоличествоСписания = СтрокаРезерва.Резерв;
								ТаблицаРезервов.Удалить(СтрокаРезерва);
							Иначе
								СтрокаРезерва.Резерв = СтрокаРезерва.Резерв - КоличествоСписания;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если КоличествоСписания<>0 Тогда
						// Создаем запись регистра заказов покупателей
						НоваяЗапись=Добавить();
						НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Расход;
						НоваяЗапись.Период=ДокументОбъект.Дата;
						НоваяЗапись.Регистратор=ДокументОбъект.Ссылка;
						НоваяЗапись.ЗаказПокупателя=СтрокаРаспределения.ЗаказПокупателя;
						НоваяЗапись.ЗаказПоставщика=СтрокаРаспределения.ЗаказПоставщика;
						НоваяЗапись.Номенклатура=СтрокаРаспределения.Номенклатура;
						НоваяЗапись.ХарактеристикаНоменклатуры=СтрокаРаспределения.ХарактеристикаНоменклатуры;
						НоваяЗапись.ХозОперация=ДокументОбъект.ХозОперация;
						НоваяЗапись.Количество=КоличествоСписания;
						// Запомним движения для резервирования снятых распределений по заказам покупателей.
						НовоеЗакрытиеРаспределения=ТаблицаЗакрытияРаспределений.Добавить();
						НовоеЗакрытиеРаспределения.Номенклатура=НоваяЗапись.Номенклатура;
						НовоеЗакрытиеРаспределения.ХарактеристикаНоменклатуры=НоваяЗапись.ХарактеристикаНоменклатуры;
						НовоеЗакрытиеРаспределения.Контрагент=СтрокаРаспределения.Контрагент;
						НовоеЗакрытиеРаспределения.Заказ=НоваяЗапись.ЗаказПокупателя;
						НовоеЗакрытиеРаспределения.Резерв=НоваяЗапись.Количество;
						СтрокаТоваров.Резерв=СтрокаТоваров.Резерв+НоваяЗапись.Количество;
						СтрокаРаспределения.Количество = СтрокаРаспределения.Количество - КоличествоСписания;
						Количество = Количество - КоличествоСписания;
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Если ВсеОК Тогда 
		ВсеОК = КонтрольРаспределенияОперативно();
	КонецЕсли;
	
	// Убиваем циклическую ссылку
	ДокументОбъект=Неопределено;
	
	Возврат ВсеОК;
КонецФункции

// Формирует движения по регистру расход (снятие распределения по заказам)
// Возвращаемое значение: Булево. Истина - все ОК, Ложь - Ошибка.
Функция ЗакрытиеЗаказовПокупателя() Экспорт
	ВсеОК = Истина;
	
	// получим таблицу товарного состава
	Если (РезультатЗапросаПоТоварам = Неопределено) ИЛИ (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("РезультатЗапроса")) И (ТипЗнч(РезультатЗапросаПоТоварам) <> Тип("ТаблицаЗначений")) Тогда
		РезультатЗапросаПоТоварам = ПолучитьТаблицуТоваров();
	КонецЕсли;
	Если ТипЗнч(РезультатЗапросаПоТоварам) = Тип("РезультатЗапроса") Тогда
		РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыРаспределениеОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК ЗаказПоставщика,
		|	ЗаказыРаспределениеОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказыРаспределениеОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыРаспределение.Остатки(&Момент,ЗаказПокупателя.Контрагент=&Контрагент ИЛИ ЗаказПокупателя.ПодразделениеПолучатель=&Контрагент) КАК ЗаказыРаспределениеОстатки
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказыРаспределениеОстатки.ЗаказПокупателя.Дата
		|");
	Запрос.УстановитьПараметр("Момент",?(РежимПроведения=РежимПроведенияДокумента.Оперативный,Неопределено,ДокументОбъект.МоментВремени()));
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	
	// Наложим блокировку на считываемые данные
	// Получим таблицу источника данных для блокировки.
	ЭтоПодразделение = (ТипЗнч(Контрагент)=Тип("СправочникСсылка.ПодразделенияКомпании"));
	ЗапросИсточник = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка КАК ЗаказПокупателя
	|ИЗ
	|	Документ."+?(ЭтоПодразделение,"ЗаказВнутренний","ЗаказПокупателя")+"
	|ГДЕ
	|	"+?(ЭтоПодразделение,"ПодразделениеПолучатель","Контрагент")+"=&Контрагент
	|");
	ЗапросИсточник.УстановитьПараметр("Контрагент",Контрагент);
	ТаблицаИсточника = ЗапросИсточник.Выполнить().Выгрузить();
	Если ТаблицаИсточника.Количество()>0 Тогда
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыРаспределение");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
		СтруктураПараметровБлокировки.Вставить("ИсточникДанных", ТаблицаИсточника);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("ЗаказПокупателя", "ЗаказПокупателя");
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	КонецЕсли;
		
	ТаблицаРаспределения = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТоваров Из РезультатЗапросаПоТоварам Цикл
		// Запомним количество, которое необходимо снять с распределения
		Количество=СтрокаТоваров.Количество-СтрокаТоваров.Резерв;
		Для каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
			Если Количество<=0 Тогда Прервать; КонецЕсли;
			Если СтрокаРаспределения.Количество<=0 Тогда Продолжить; КонецЕсли; 
			Если  СтрокаРаспределения.Номенклатура=СтрокаТоваров.Номенклатура 
				И СтрокаРаспределения.ХарактеристикаНоменклатуры=СтрокаТоваров.ХарактеристикаНоменклатуры Тогда
				КоличествоСписания = Мин(Количество,СтрокаРаспределения.Количество);
				Если КоличествоСписания<>0 Тогда
					// Создаем запись регистра заказов покупателей
					НоваяЗапись=Добавить();
					НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Расход;
					НоваяЗапись.Период=ДокументОбъект.Дата;
					НоваяЗапись.Регистратор=ДокументОбъект.Ссылка;
					НоваяЗапись.ЗаказПокупателя=СтрокаРаспределения.ЗаказПокупателя;
					НоваяЗапись.ЗаказПоставщика=СтрокаРаспределения.ЗаказПоставщика;
					НоваяЗапись.Номенклатура=СтрокаРаспределения.Номенклатура;
					НоваяЗапись.ХарактеристикаНоменклатуры=СтрокаРаспределения.ХарактеристикаНоменклатуры;
					// Определяемся с хоз. операцией
					НоваяЗапись.ХозОперация=ДокументОбъект.ХозОперация;
					// Количество
					НоваяЗапись.Количество=КоличествоСписания;
					СтрокаРаспределения.Количество = СтрокаРаспределения.Количество - КоличествоСписания;
					Количество = Количество - КоличествоСписания;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;

	Если ВсеОК Тогда 
		ВсеОК = КонтрольРаспределенияОперативно();
	КонецЕсли;
	
	// Убиваем циклическую ссылку
	ДокументОбъект=Неопределено;
	
	Возврат ВсеОК;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает результат запроса по таблице товаров поставщика
Функция ПолучитьТаблицуТоваров()
	ДвиженияПоРознице=?(ДвиженияПоРознице=Неопределено,Ложь,ДвиженияПоРознице);
	ИмяРеквизитаЦенаРозничная=?(ИмяРеквизитаЦенаРозничная=Неопределено,"ЦенаРозничная",ИмяРеквизитаЦенаРозничная);
	// получим результат запроса по товарной таблице
	МетаданныеОбъекта = ДокументОбъект.Метаданные();
	ВидДок = МетаданныеОбъекта.Имя;
	ЕстьСпособРаспределения = (НЕ МетаданныеОбъекта.ТабличныеЧасти.Товары.Реквизиты.Найти("СпособРаспределенияЗаказов") = Неопределено);
	ПоБазовомуКоличеству=?(ПоБазовомуКоличеству=Неопределено,Ложь,ПоБазовомуКоличеству);
	ВыражениеКоличества="ДокументТовары.Количество"+?(ПоБазовомуКоличеству,"Базовое","*ДокументТовары.Коэффициент");
	
	Запрос=Новый Запрос();
	ТекстЗапроса="
	|ВЫБРАТЬ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	"+?(ДвиженияПоРознице,"ДокументТовары."+ИмяРеквизитаЦенаРозничная, "0") +" КАК ЦенаРозничная,
	|	"+ВыражениеКоличества+" КАК КоличествоБазовое,
	|	"+?(ЕстьСпособРаспределения, "
	|	ВЫБОР
	|		КОГДА ДокументТовары.СпособРаспределенияЗаказов = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗаказов.ВыборочноеИАвтоматическое)
	|			ТОГДА 1
	|		КОГДА ДокументТовары.СпособРаспределенияЗаказов = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗаказов.Выборочное)
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ", "0") + " КАК СпособРаспределенияЗаказовЧисло
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ."+ВидДок+".Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка = &Ссылка
	|	И ДокументТовары.Номенклатура.ВидНоменклатуры <> &Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ТаблицаТоваров.ЦенаРозничная * ТаблицаТоваров.КоличествоБазовое) / СУММА(ТаблицаТоваров.КоличествоБазовое) КАК ЦенаРозничная,
	|	СУММА(ТаблицаТоваров.КоличествоБазовое) КАК Количество,
	|	СУММА(0) КАК Резерв,
	|	МАКСИМУМ(ТаблицаТоваров.СпособРаспределенияЗаказовЧисло) КАК СпособРаспределенияЗаказовЧисло
	|ПОМЕСТИТЬ ТаблицаТоваровСвернутая
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровСвернутая.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровСвернутая.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаТоваровСвернутая.ЦенаРозничная КАК ЦенаРозничная,
	|	ТаблицаТоваровСвернутая.Количество КАК Количество,
	|	ТаблицаТоваровСвернутая.Резерв КАК Резерв,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваровСвернутая.СпособРаспределенияЗаказовЧисло = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗаказов.ВыборочноеИАвтоматическое)
	|		КОГДА ТаблицаТоваровСвернутая.СпособРаспределенияЗаказовЧисло = 2
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗаказов.Выборочное)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗаказов.Автоматическое)
	|	КОНЕЦ КАК СпособРаспределенияЗаказов
	|ИЗ
	|	ТаблицаТоваровСвернутая КАК ТаблицаТоваровСвернутая";
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Услуга",Перечисления.ВидыНоменклатуры.Услуга);
	Возврат Запрос.Выполнить();
КонецФункции

// Возвращает результат запроса по остаткам заказа покупателя
Функция ПолучитьОстаткиПокупателя()
	Запрос=Новый Запрос();
	ТекстЗапроса="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	"+?(ЗаказПокупателя=Неопределено,"ЗаказыПокупателейОстатки.Заказ","&ЗаказПокупателя")+" КАК ЗаказПокупателя,
	|	ВЫБОР 
	|		КОГДА ЗаказыПокупателейОстатки.ЗаказаноОстаток ЕСТЬ NULL
	|		ТОГДА 0
	|		ИНАЧЕ ЗаказыПокупателейОстатки.ЗаказаноОстаток
	|		КОНЕЦ
	|	КАК Количество,
	|	ВЫБОР 
	|		КОГДА ЗаказыПокупателейОстатки.РезервОстаток ЕСТЬ NULL
	|		ТОГДА 0
	|		ИНАЧЕ ЗаказыПокупателейОстатки.РезервОстаток
	|		КОНЕЦ
	|	КАК Резерв,
	|	ВЫБОР 
	|		КОГДА ЗаказыРаспределениеОстатки.КоличествоОстаток ЕСТЬ NULL
	|		ТОГДА 0
	|		ИНАЧЕ ЗаказыРаспределениеОстатки.КоличествоОстаток
	|		КОНЕЦ
	|	КАК Распределение
	|ИЗ 
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&Момент,(Номенклатура В (&Номенклатура)) И (ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры))"+?(ЗаказПокупателя<>Неопределено," И Заказ=&ЗаказПокупателя","")+") КАК ЗаказыПокупателейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(&Момент,(Номенклатура В (&Номенклатура)) И (ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры))"+?(ЗаказПокупателя<>Неопределено," И ЗаказПокупателя=&ЗаказПокупателя","")+") КАК ЗаказыРаспределениеОстатки
	|		ПО ЗаказыПокупателейОстатки.Номенклатура=ЗаказыРаспределениеОстатки.Номенклатура И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры=ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|		"+?(ЗаказПокупателя=Неопределено,"И ЗаказыПокупателейОстатки.Заказ=ЗаказыРаспределениеОстатки.ЗаказПокупателя","")+"
	|";
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("Момент",?(РежимПроведения=РежимПроведенияДокумента.Оперативный,Неопределено,ДокументОбъект.МоментВремени()));
	Запрос.УстановитьПараметр("Номенклатура",РезультатЗапросаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",РезультатЗапросаПоТоварам.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	Запрос.УстановитьПараметр("ЗаказПокупателя",ЗаказПокупателя);
	
	// Наложим блокировку на считываемые данные
	Если РезультатЗапросаПоТоварам<>Неопределено И РезультатЗапросаПоТоварам.Количество()>0 Тогда
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыПокупателей");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
		Если ЗаказПокупателя <> Неопределено Тогда
			ЗначенияБлокировки.Вставить("Заказ", ЗаказПокупателя);
		КонецЕсли;
		СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
		ОписаниеИсточника.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
		СтруктураПараметровБлокировки.ИмяТаблицы = "ЗаказыРаспределение";
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
		Если ЗаказПокупателя <> Неопределено Тогда
			ЗначенияБлокировки.Вставить("ЗаказПокупателя", ЗаказПокупателя);
		КонецЕсли;
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
КонецФункции

// Возвращает результат запроса по остаткам распределения поставщика
Функция ПолучитьОстаткиПоставщика()
	Запрос=Новый Запрос();
	ТекстЗапроса="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикаОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикаОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	"+?(ЗаказПоставщика=Неопределено,"ЗаказыПоставщикаОстатки.Заказ","&ЗаказПоставщика")+" КАК ЗаказПоставщика,
	|	ВЫБОР 
	|		КОГДА ЗаказыПоставщикаОстатки.ЗаказаноОстаток ЕСТЬ NULL
	|		ТОГДА 0
	|		ИНАЧЕ ЗаказыПоставщикаОстатки.ЗаказаноОстаток
	|		КОНЕЦ
	|	КАК Количество,
	|	ВЫБОР 
	|		КОГДА ЗаказыРаспределениеОстатки.КоличествоОстаток ЕСТЬ NULL
	|		ТОГДА 0
	|		ИНАЧЕ ЗаказыРаспределениеОстатки.КоличествоОстаток
	|		КОНЕЦ
	|	КАК Распределение
	|ИЗ 
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&Момент,(Номенклатура В (&Номенклатура)) И (ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры))"+?(ЗаказПоставщика<>Неопределено," И Заказ=&ЗаказПоставщика","")+") КАК ЗаказыПоставщикаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(&МоментИсключая,(Номенклатура В (&Номенклатура)) И (ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры))"+?(ЗаказПоставщика<>Неопределено," И ЗаказПоставщика=&ЗаказПоставщика","")+") КАК ЗаказыРаспределениеОстатки
	|		ПО ЗаказыПоставщикаОстатки.Номенклатура=ЗаказыРаспределениеОстатки.Номенклатура И ЗаказыПоставщикаОстатки.ХарактеристикаНоменклатуры=ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|		"+?(ЗаказПоставщика=Неопределено,"И ЗаказыПоставщикаОстатки.Заказ=ЗаказыРаспределениеОстатки.ЗаказПоставщика","")+"
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	"+?(ЗаказПоставщика=Неопределено,"ЗаказыПоставщикамОстатки.ЗаказПоставщику","&ЗаказПоставщика")+" КАК ЗаказПоставщика,
	|	ВЫБОР 
	|		КОГДА ЗаказыПоставщикамОстатки.ЗаказаноОстаток ЕСТЬ NULL
	|		ТОГДА 0
	|		ИНАЧЕ ЗаказыПоставщикамОстатки.ЗаказаноОстаток
	|		КОНЕЦ
	|	КАК Количество,
	|	ВЫБОР 
	|		КОГДА ЗаказыРаспределениеОстатки.КоличествоОстаток ЕСТЬ NULL
	|		ТОГДА 0
	|		ИНАЧЕ ЗаказыРаспределениеОстатки.КоличествоОстаток
	|		КОНЕЦ
	|	КАК Распределение
	|ИЗ 
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&Момент,(Номенклатура В (&Номенклатура)) И (ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры))"+?(ЗаказПоставщика<>Неопределено," И ЗаказПоставщику=&ЗаказПоставщика","")+") КАК ЗаказыПоставщикамОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(&МоментИсключая,(Номенклатура В (&Номенклатура)) И (ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры))"+?(ЗаказПоставщика<>Неопределено," И ЗаказПоставщика=&ЗаказПоставщика","")+") КАК ЗаказыРаспределениеОстатки
	|		ПО ЗаказыПоставщикамОстатки.Номенклатура=ЗаказыРаспределениеОстатки.Номенклатура И ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры=ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|		"+?(ЗаказПоставщика=Неопределено,"И ЗаказыПоставщикамОстатки.ЗаказПоставщику=ЗаказыРаспределениеОстатки.ЗаказПоставщика","")+"
	|";
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("Момент",Новый Граница(ДокументОбъект.МоментВремени(),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МоментИсключая",Новый Граница(ДокументОбъект.МоментВремени(),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Номенклатура",РезультатЗапросаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",РезультатЗапросаПоТоварам.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	Запрос.УстановитьПараметр("ЗаказПоставщика",ЗаказПоставщика);
	
	// Наложим блокировку на считываемые данные
	Если РезультатЗапросаПоТоварам<>Неопределено И РезультатЗапросаПоТоварам.Количество()>0 Тогда
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
		Если ЗаказПоставщика<>Неопределено Тогда
			ЗначенияБлокировки.Вставить("ЗаказПоставщика", ЗаказПоставщика);
		КонецЕсли;
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "");
		СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапросаПоТоварам);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
		ОписаниеИсточника.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
		// Блокировка ЗаказыРаспределение
		СтруктураПараметровБлокировки.ИмяТаблицы = "ЗаказыРаспределение";
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
		// Блокировка ЗаказыПоставщикам
		ЗначенияБлокировки.Удалить("ЗаказПоставщика");
		Если ЗаказПоставщика<>Неопределено И ТипЗнч(ЗаказПоставщика)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ЗначенияБлокировки.Вставить("ЗаказПоставщику", ЗаказПоставщика);
		КонецЕсли;
		СтруктураПараметровБлокировки.ИмяТаблицы = "ЗаказыПоставщикам";
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
		// Блокировка ЗаказыПокупателей
		ЗначенияБлокировки.Удалить("ЗаказПоставщику");
		СтруктураПараметровБлокировки.ИмяТаблицы = "ЗаказыПокупателей";
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
КонецФункции

// Выполняет проверку отрицательных остатков после проведения документа по регистру на оперативную отметку времени.
Функция КонтрольРаспределенияОперативно()

	ВсеОК = Истина;
	
	КонтрольРаспределенияЗаказовОперативно = ПравоПользователя("КонтрольОстатковЗаказовОперативно", ДокументОбъект);
	Если КонтрольРаспределенияЗаказовОперативно = Перечисления.ВидыКонтроля.НеКонтролировать Тогда
		// Оперативный контроль остатков отключен.
		Возврат Истина;
	КонецЕсли;
	
    УстановитьПривилегированныйРежим(Истина);

	// Сначала получим движения документа до проведения.
	ТаблицаСтарыхДвижений = ДокументОбъект.ДополнительныеСвойства.ДвиженияПередПроведением.ЗаказыРаспределение;
	ТаблицаСтарыхДвижений.Свернуть("ЗаказПокупателя,ЗаказПоставщика,Номенклатура,ХарактеристикаНоменклатуры", "Количество");
	
	// Получим новые движения документа.
	ТаблицаНовыхДвижений = ДокументОбъект.Движения.ЗаказыРаспределение.Выгрузить();
	ТаблицаНовыхДвижений.Свернуть("ЗаказПокупателя,ЗаказПоставщика,Номенклатура,ХарактеристикаНоменклатуры", "Количество");

	// Уберем строки старых движений, которые контролировать не будем.
	// Проверка остатков будет выполнена на втором этапе.
	Для Каждого СтрокаНовыхДвижений Из ТаблицаНовыхДвижений Цикл 
		
		СтруктураПоиска = Новый Структура("ЗаказПокупателя,ЗаказПоставщика,Номенклатура,ХарактеристикаНоменклатуры",
			СтрокаНовыхДвижений.ЗаказПокупателя, СтрокаНовыхДвижений.ЗаказПоставщика, СтрокаНовыхДвижений.Номенклатура, СтрокаНовыхДвижений.ХарактеристикаНоменклатуры);
		СтрокиСтарыхДвижений = ТаблицаСтарыхДвижений.НайтиСтроки(СтруктураПоиска);

		// Если подобное движение есть и в новых движениях, исключим его из проверки.
		Если СтрокиСтарыхДвижений.Количество() > 0 Тогда
			ТаблицаСтарыхДвижений.Удалить(СтрокиСтарыхДвижений[0]);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сначала запишем выполненные движения.
	Записать();

	Если ТаблицаСтарыхДвижений.Количество() > 0 Тогда 

		// Получим остатки товаров по движениям, которых нет в "новом" документе.
		ТекстЗапроса ="ВЫБРАТЬ
		              |	ЗаказыРаспределениеОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		              |	ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК ЗаказПоставщика,
		              |	ЗаказыРаспределениеОстатки.Номенклатура КАК Номенклатура,
		              |	ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		              |	ЗаказыРаспределениеОстатки.КоличествоОстаток КАК Количество
		              |ИЗ
		              |	РегистрНакопления.ЗаказыРаспределение.Остатки(
		              |			,
		              |			ЗаказПокупателя В (&ЗаказПокупателя)
		              |				И ЗаказПоставщика В (&ЗаказПоставщика)
		              |				И Номенклатура В (&Номенклатура)
		              |				И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ЗаказыРаспределениеОстатки";
		ЗапросОстатков = Новый Запрос(ТекстЗапроса);
		ЗапросОстатков.УстановитьПараметр("ЗаказПокупателя", ТаблицаСтарыхДвижений.ВыгрузитьКолонку("ЗаказПокупателя"));
		ЗапросОстатков.УстановитьПараметр("ЗаказПоставщика", ТаблицаСтарыхДвижений.ВыгрузитьКолонку("ЗаказПоставщика"));
		ЗапросОстатков.УстановитьПараметр("Номенклатура", ТаблицаСтарыхДвижений.ВыгрузитьКолонку("Номенклатура"));
		ЗапросОстатков.УстановитьПараметр("ХарактеристикаНоменклатуры", ТаблицаСтарыхДвижений.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
		ОстаткиЗаказов = ЗапросОстатков.Выполнить().Выгрузить();

		ЗаголовокКонтроляОстатковСтарыхДвижений = "Контроль остатков распределения заказов предыдущего проведения документа:";

		// Проверим отрицательные остатки прошлых движений.
		Для Каждого СтрокаОстатков Из ОстаткиЗаказов Цикл

			ВывестиСообщениеПользователю = Ложь;
			ОтрицательныйОстатокКоличество = "";
			БазоваяЕдиницаИзмерения = СокрЛП(СтрокаОстатков.Номенклатура.БазоваяЕдиницаИзмерения);

			Если СтрокаОстатков.Количество < 0 Тогда
				ВывестиСообщениеПользователю = Истина;
				ОтрицательныйОстатокКоличество =
					СтрШаблон(НСтр("ru = '
						|	Остаток распределения заказа %1 в заказе %2 %3 %4.'"),
						СтрокаОстатков.ЗаказПокупателя,
						СтрокаОстатков.ЗаказПоставщика,
						Формат(СтрокаОстатков.Количество, "ЧДЦ=3; ЧН=0,00"),
						БазоваяЕдиницаИзмерения);
			КонецЕсли;

			Если ВывестиСообщениеПользователю Тогда 

				// По старым движениям документа есть отрицательные остатки.
				Если НЕ ПустаяСтрока(ЗаголовокКонтроляОстатковСтарыхДвижений) Тогда 
					ОбщегоНазначения.СообщитьПользователю(ЗаголовокКонтроляОстатковСтарыхДвижений);
					ЗаголовокКонтроляОстатковСтарыхДвижений = "";
				КонецЕсли;
				
				ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаОстатков.Номенклатура);

				Если НЕ ЗначениеЗаполнено(СтрокаОстатков.ХарактеристикаНоменклатуры) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"".Обнаружены отрицательные остатки распределения заказов покупателей:%3'"),
							ЗначениеКолонкиКода, 
							СокрЛП(СтрокаОстатков.Номенклатура),
							ОтрицательныйОстатокКоличество),
						ДокументОбъект, , , Истина
					);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"". Обнаружены отрицательные остатки распределения заказов покупателей:%4'"),
							ЗначениеКолонкиКода, 
							СокрЛП(СтрокаОстатков.Номенклатура),
							СокрЛП(СтрокаОстатков.ХарактеристикаНоменклатуры),
							ОтрицательныйОстатокКоличество),
						ДокументОбъект, , , Истина
					);
				КонецЕсли;
	
				ВсеОК = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;

	// Вторым этапом проверки - отрицательные остатки по новым движениям
	ТекстЗапроса ="ВЫБРАТЬ
	              |	ЗаказыРаспределениеОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	              |	ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК ЗаказПоставщика,
	              |	ЗаказыРаспределениеОстатки.Номенклатура КАК Номенклатура,
	              |	ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	              |	ЗаказыРаспределениеОстатки.КоличествоОстаток КАК Количество
	              |ИЗ
	              |	РегистрНакопления.ЗаказыРаспределение.Остатки(
	              |			,
	              |			ЗаказПокупателя В (&ЗаказПокупателя)
	              |				И ЗаказПоставщика В (&ЗаказПоставщика)
	              |				И Номенклатура В (&Номенклатура)
	              |				И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ЗаказыРаспределениеОстатки";
	ЗапросОстатков = Новый Запрос(ТекстЗапроса);
	ЗапросОстатков.УстановитьПараметр("ЗаказПокупателя", ТаблицаНовыхДвижений.ВыгрузитьКолонку("ЗаказПокупателя"));
	ЗапросОстатков.УстановитьПараметр("ЗаказПоставщика", ТаблицаНовыхДвижений.ВыгрузитьКолонку("ЗаказПоставщика"));
	ЗапросОстатков.УстановитьПараметр("Номенклатура", ТаблицаНовыхДвижений.ВыгрузитьКолонку("Номенклатура"));
	ЗапросОстатков.УстановитьПараметр("ХарактеристикаНоменклатуры", ТаблицаНовыхДвижений.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	ОстаткиТоваров = ЗапросОстатков.Выполнить().Выгрузить();

	ЗаголовокКонтроляОстатковНовыхДвижений = "Контроль остатков распределения заказов оперативного проведения документа:";
	
	Для Каждого СтрокаОстатков Из ОстаткиТоваров Цикл

		ВывестиСообщениеПользователю = Ложь;
		ОтрицательныйОстатокКоличество = "";
		БазоваяЕдиницаИзмерения = СокрЛП(СтрокаОстатков.Номенклатура.БазоваяЕдиницаИзмерения);

		Если СтрокаОстатков.Количество < 0 Тогда
			ВывестиСообщениеПользователю = Истина;
			ОтрицательныйОстатокКоличество =
				СтрШаблон(НСтр("ru = '
					|	Остаток распределения заказа %1 в заказе %2 %3 %4.'"),
					СтрокаОстатков.ЗаказПокупателя,
					СтрокаОстатков.ЗаказПоставщика,
					Формат(СтрокаОстатков.Количество, "ЧДЦ=3; ЧН=0,00"),
					БазоваяЕдиницаИзмерения);
		КонецЕсли;

		Если ВывестиСообщениеПользователю Тогда 

			// По новым движениям документа есть отрицательные остатки.
			Если НЕ ПустаяСтрока(ЗаголовокКонтроляОстатковНовыхДвижений) Тогда 
				ОбщегоНазначения.СообщитьПользователю(ЗаголовокКонтроляОстатковНовыхДвижений);
				ЗаголовокКонтроляОстатковНовыхДвижений = "";
			КонецЕсли;

			ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаОстатков.Номенклатура);

			Если НЕ ЗначениеЗаполнено(СтрокаОстатков.ХарактеристикаНоменклатуры) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = '[%1] Товар ""%2"".Обнаружены отрицательные остатки распределения заказов покупателей:%3'"),
						ЗначениеКолонкиКода, 
						СокрЛП(СтрокаОстатков.Номенклатура),
						ОтрицательныйОстатокКоличество),
					ДокументОбъект, , , Истина
				);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"". Обнаружены отрицательные остатки распределения заказов покупателей:%4'"),
						ЗначениеКолонкиКода, 
						СокрЛП(СтрокаОстатков.Номенклатура),
						СокрЛП(СтрокаОстатков.ХарактеристикаНоменклатуры),
						ОтрицательныйОстатокКоличество),
					ДокументОбъект, , , Истина
				);
			КонецЕсли;

			ВсеОК = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если ВсеОК = Ложь Тогда
		// Проверка на отрицательные остатки не пройден. Ограничимся предупреждением.
		Если КонтрольРаспределенияЗаказовОперативно = Перечисления.ВидыКонтроля.Предупреждать Тогда 
			ВсеОК = Истина;
		КонецЕсли;
	КонецЕсли;

    УстановитьПривилегированныйРежим(Ложь);

	Возврат ВсеОК;
	
КонецФункции

#КонецОбласти

#Область Инициализация

////////////////////////////////////////////////////////////////////////
// Инициализация переменных модуля набора записей

РежимПроведения=РежимПроведенияДокумента.Оперативный;

ДокументОбъект  = Неопределено; // Обязательный к заполнению перед началом проведения
ЗаказПокупателя = Неопределено;
ЗаказПоставщика = Неопределено;
Контрагент      = Неопределено;
СкладКомпании   = Неопределено;
ПоБазовомуКоличеству      = Ложь;
РезультатЗапросаПоТоварам = Неопределено;

ТаблицаЗакрытияРаспределений = Новый ТаблицаЗначений;
ТаблицаЗакрытияРаспределений.Колонки.Добавить("Номенклатура");
ТаблицаЗакрытияРаспределений.Колонки.Добавить("ХарактеристикаНоменклатуры");
ТаблицаЗакрытияРаспределений.Колонки.Добавить("Контрагент");
ТаблицаЗакрытияРаспределений.Колонки.Добавить("Заказ");
ТаблицаЗакрытияРаспределений.Колонки.Добавить("СкладКомпании");
ТаблицаЗакрытияРаспределений.Колонки.Добавить("Количество");
ТаблицаЗакрытияРаспределений.Колонки.Добавить("Резерв");
ТаблицаЗакрытияРаспределений.Колонки.Добавить("Остаток");

#КонецОбласти

#КонецЕсли