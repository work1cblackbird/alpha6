// Модуль менеджера регистра накоплений "Расчеты с контрагентами"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ИнициализацияСуммовыхРазниц() Экспорт 
	
	ТаблицаСуммовыхРазниц = Новый ТаблицаЗначений;
	ТаблицаСуммовыхРазниц.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаСуммовыхРазниц.Колонки.Добавить("СуммаУпр",      Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаСуммовыхРазниц;
	
КонецФункции

Процедура СписатьСуммовыеРазницы(
	Объект,
	РасчетыСКонтрагентами,
	СуммовыеРазницы,
	КурсВзаиморасчетовВТаблице = Ложь,
	ТолькоДляОплаты = Истина) Экспорт
	
	РежимСписанияСуммовыхРазниц = УчетныеПолитикиСервер.Значение("РежимСписанияСуммовыхРазниц", Объект.Дата);
	Если РежимСписанияСуммовыхРазниц = Перечисления.РежимыРегламентныхОпераций.Регламентно Тогда
		Возврат;
	КонецЕсли;
	
	МоментВремени = Новый Граница(Объект.Дата, ВидГраницы.Включая);
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.Выписка") Тогда
		
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		КурсВалютыРегл = Объект.Дата;
		
	Иначе
		
		ВалютаУпр = Объект.ВалютаУпр;
		ВалютаРегл = Объект.ВалютаРегл;
		КурсВалютыРегл = Объект.КурсВалютыРегл;
		
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	РасчетыСКонтрагентами.Организация КАК Организация,
	|	РасчетыСКонтрагентами.Контрагент КАК Контрагент,
	|	РасчетыСКонтрагентами.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	РасчетыСКонтрагентами.ТипРасчета КАК ТипРасчета,
	|	РасчетыСКонтрагентами.Заказ КАК Заказ,
	|	РасчетыСКонтрагентами.Сумма КАК Сумма,
	|	РасчетыСКонтрагентами.СуммаУпр КАК СуммаУпр,
	|	РасчетыСКонтрагентами.СуммаБаз КАК СуммаБаз,
	|	РасчетыСКонтрагентами.ВидДвижения КАК ВидДвижения,
	|	#РасчетыСКонтрагентами.КурсВалютыВзаиморасчетов
	|	РасчетыСКонтрагентами.ДокументРасчетов КАК ДокументРасчетов
	|ПОМЕСТИТЬ ВзаиморасчетыПоДокументу
	|ИЗ
	|	&РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыПоДокументу.Организация КАК Организация,
	|	ВзаиморасчетыПоДокументу.Контрагент КАК Контрагент,
	|	ВзаиморасчетыПоДокументу.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВзаиморасчетыПоДокументу.ТипРасчета КАК ТипРасчета,
	|	ВзаиморасчетыПоДокументу.Заказ КАК Заказ,
	|	ВзаиморасчетыПоДокументу.Сумма КАК Сумма,
	|	ВзаиморасчетыПоДокументу.СуммаУпр КАК СуммаУпр,
	|	ВзаиморасчетыПоДокументу.СуммаБаз КАК СуммаБаз,
	|	ВзаиморасчетыПоДокументу.ВидДвижения КАК ВидДвижения,
	|	#ВзаиморасчетыПоДокументу.КурсВалютыВзаиморасчетов
	|	ВзаиморасчетыПоДокументу.ДокументРасчетов КАК ДокументРасчетов
	|ПОМЕСТИТЬ ОплатыДокумента
	|ИЗ
	|	ВзаиморасчетыПоДокументу КАК ВзаиморасчетыПоДокументу
	|ГДЕ
	|	#УсловиеОтбораПоТипуРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыПоДокументу.Организация КАК Организация,
	|	ВзаиморасчетыПоДокументу.Контрагент КАК Контрагент,
	|	ВзаиморасчетыПоДокументу.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВзаиморасчетыПоДокументу.ДоговорВзаиморасчетов.ПодразделениеКомпании КАК ПодразделениеКомпанииДоговора,
	|	ВзаиморасчетыПоДокументу.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ВзаиморасчетыПоДокументу.ТипРасчета КАК ТипРасчета,
	|	#ВзаиморасчетыПоДокументу.КурсВалютыВзаиморасчетов
	|	ВзаиморасчетыПоДокументу.ДокументРасчетов КАК ДокументРасчетов,
	|	ВзаиморасчетыПоДокументу.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыПоДокументу.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ВзаиморасчетыПоДокументу.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыПоДокументу.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ВзаиморасчетыПоДокументу.СуммаУпр КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыПоДокументу.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ВзаиморасчетыПоДокументу.СуммаБаз КАК СуммаБаз,
	|	ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|	ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0) КАК СуммаУпрОстаток,
	|	ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаБазОстаток, 0) КАК СуммаБазОстаток
	|ИЗ
	|	ОплатыДокумента КАК ВзаиморасчетыПоДокументу
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	|				&МоментВремени,
	|				(Организация, Контрагент, ДоговорВзаиморасчетов, ТипРасчета, ДокументРасчетов, Заказ) В
	|					(ВЫБРАТЬ
	|						ВзаиморасчетыПоДокументу.Организация КАК Организация,
	|						ВзаиморасчетыПоДокументу.Контрагент КАК Контрагент,
	|						ВзаиморасчетыПоДокументу.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|						ВзаиморасчетыПоДокументу.ТипРасчета КАК ТипРасчета,
	|						ВзаиморасчетыПоДокументу.ДокументРасчетов КАК ДокументРасчетов,
	|						ВзаиморасчетыПоДокументу.Заказ КАК Заказ
	|					ИЗ
	|						ВзаиморасчетыПоДокументу КАК ВзаиморасчетыПоДокументу)) КАК РасчетыСКонтрагентамиОстатки
	|		ПО ВзаиморасчетыПоДокументу.Организация = РасчетыСКонтрагентамиОстатки.Организация
	|			И ВзаиморасчетыПоДокументу.Контрагент = РасчетыСКонтрагентамиОстатки.Контрагент
	|			И ВзаиморасчетыПоДокументу.ДоговорВзаиморасчетов = РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов
	|			И ВзаиморасчетыПоДокументу.ТипРасчета = РасчетыСКонтрагентамиОстатки.ТипРасчета
	|			И ВзаиморасчетыПоДокументу.ДокументРасчетов = РасчетыСКонтрагентамиОстатки.ДокументРасчетов
	|			И ВзаиморасчетыПоДокументу.Заказ = РасчетыСКонтрагентамиОстатки.Заказ";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"#РасчетыСКонтрагентами.КурсВалютыВзаиморасчетов",
		?(КурсВзаиморасчетовВТаблице,
			"РасчетыСКонтрагентами.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,",
			""));
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"#ВзаиморасчетыПоДокументу.КурсВалютыВзаиморасчетов",
		?(КурсВзаиморасчетовВТаблице,
			"ВзаиморасчетыПоДокументу.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,",
			"")); 
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"#УсловиеОтбораПоТипуРасчета",
		?(ТолькоДляОплаты, 
			"ВзаиморасчетыПоДокументу.ТипРасчета = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Оплата)",
			"Истина"));
		
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСКонтрагентами");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	ИсключениеКолонок = Новый Массив;
	ИсключениеКолонок.Добавить("ПодразделениеКомпанииДоговора");
	ИсключениеКолонок.Добавить("Сумма");
	ИсключениеКолонок.Добавить("СуммаБаз");
	ИсключениеКолонок.Добавить("СуммаУпр");
	ИсключениеКолонок.Добавить("СуммаОстаток");
	ИсключениеКолонок.Добавить("СуммаУпрОстаток");
	ИсключениеКолонок.Добавить("СуммаБазОстаток");
	ИсключениеКолонок.Добавить("КурсВалютыВзаиморасчетов");
	ИсключениеКолонок.Добавить("ВалютаДоговора");
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		Если ИсключениеКолонок.Найти(КолонкаРезультатЗапроса.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Рассчитываем суммы
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КурсВалютыВзаиморасчетов = ?(
			КурсВзаиморасчетовВТаблице,
			Выборка.КурсВалютыВзаиморасчетов,
			Объект.КурсВалютыВзаиморасчетов);
		
		// Пересчитаем только там где есть суммы
		ОстатокПоДокументу = ?(Выборка.СуммаОстаток < 0, -Выборка.СуммаОстаток, Выборка.СуммаОстаток);
		ОплатаПоДокументу = ?(Выборка.Сумма < 0, -Выборка.Сумма, Выборка.Сумма);
		Если ОплатаПоДокументу <= ОстатокПоДокументу Тогда
			СуммаПереоценки = Выборка.Сумма;
			СуммаПереоценкиУпр = Выборка.СуммаУпр;
			СуммаПереоценкиБаз = Выборка.СуммаБаз;
		Иначе
			СуммаПереоценки = Выборка.СуммаОстаток;
			СуммаПереоценкиУпр = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					Выборка.СуммаОстаток,
					Выборка.ВалютаДоговора,
					КурсВалютыВзаиморасчетов,
					ВалютаУпр,
					Объект.КурсВалютыУпр),
				2);
			СуммаПереоценкиБаз = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					Выборка.СуммаОстаток,
					Выборка.ВалютаДоговора,
					КурсВалютыВзаиморасчетов,
					ВалютаРегл,
					КурсВалютыРегл),
				2);
		КонецЕсли;
		Если СуммаПереоценки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КурсыВалютДокумента = КурсыВалютДокумента(Выборка.ДокументРасчетов);
		
		// Найдем курсовые разницы по курсу документа
		СуммаПереоценкиРасчетаУпр = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СуммаПереоценки,
					Выборка.ВалютаДоговора,
					КурсыВалютДокумента.КурсВалютыВзаиморасчетов,
					ВалютаУпр,
					КурсыВалютДокумента.КурсВалютыУпр),
				2);
		СуммаПереоценкиРасчетаБаз = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СуммаПереоценки,
					Выборка.ВалютаДоговора,
					КурсыВалютДокумента.КурсВалютыВзаиморасчетов,
					ВалютаРегл,
					КурсыВалютДокумента.КурсВалютыРегл),
				2);
		
		ОстатокСуммыПереоценкиУпр = СуммаПереоценкиУпр - СуммаПереоценкиРасчетаУпр;
		ОстатокСуммыПереоценкиБаз = СуммаПереоценкиБаз - СуммаПереоценкиРасчетаБаз;
		Если ОстатокСуммыПереоценкиУпр <> 0 Тогда
			НоваяЗапись = РасчетыСКонтрагентами.Добавить();
			НоваяЗапись.Период = Объект.Дата;
			НоваяЗапись.Регистратор = Объект.Ссылка;
			НоваяЗапись.Организация = Выборка.Организация;
			НоваяЗапись.Контрагент = Выборка.Контрагент;
			НоваяЗапись.ДоговорВзаиморасчетов = Выборка.ДоговорВзаиморасчетов;
			НоваяЗапись.ТипРасчета = Выборка.ТипРасчета;
			НоваяЗапись.ДокументРасчетов = Выборка.ДокументРасчетов;
			НоваяЗапись.Заказ = Выборка.Заказ;
			Если ОстатокСуммыПереоценкиУпр > 0 Тогда
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
				НоваяЗапись.СуммаУпр = Окр(ОстатокСуммыПереоценкиУпр, 2);
			Иначе
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяЗапись.СуммаУпр = Окр(-ОстатокСуммыПереоценкиУпр, 2);
			КонецЕсли;
			НоваяЗапись.Сумма = 0;
			НоваяЗапись.СуммаБаз = 0;
			НоваяЗапись.ХозОперация = Объект.ХозОперация;
			НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.СписаниеКурсовойРазницыУпрВалюты;
			НоваяЗапись.Активность = Истина;
			
			НоваяСтрока = СуммовыеРазницы.Добавить();
			НоваяСтрока.Подразделение = Выборка.ПодразделениеКомпанииДоговора;
			НоваяСтрока.СуммаУпр = ?(ОстатокСуммыПереоценкиУпр < 0, НоваяЗапись.СуммаУпр, -НоваяЗапись.СуммаУпр);
			
		КонецЕсли;
		
		Если ОстатокСуммыПереоценкиБаз <> 0 Тогда
			НоваяЗапись = РасчетыСКонтрагентами.Добавить();
			НоваяЗапись.Период = Объект.Дата;
			НоваяЗапись.Регистратор = Объект.Ссылка;
			НоваяЗапись.Организация = Выборка.Организация;
			НоваяЗапись.Контрагент = Выборка.Контрагент;
			НоваяЗапись.ДоговорВзаиморасчетов = Выборка.ДоговорВзаиморасчетов;
			НоваяЗапись.ТипРасчета = Выборка.ТипРасчета;
			НоваяЗапись.ДокументРасчетов = Выборка.ДокументРасчетов;
			НоваяЗапись.Заказ = Выборка.Заказ;
			Если ОстатокСуммыПереоценкиБаз > 0 Тогда
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
				НоваяЗапись.СуммаБаз = Окр(ОстатокСуммыПереоценкиБаз, 2);
			Иначе
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяЗапись.СуммаБаз = Окр(-ОстатокСуммыПереоценкиБаз, 2);
			КонецЕсли;
			НоваяЗапись.Сумма = 0;
			НоваяЗапись.СуммаУпр = 0;
			НоваяЗапись.ХозОперация = Объект.ХозОперация;
			НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.СписаниеКурсовойРазницыБазВалюты;
			НоваяЗапись.Активность = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция КурсыВалютДокумента(ДокументРасчетов)
	
	Результат = Новый Структура;
	Результат.Вставить("Дата");
	Результат.Вставить("КурсВалютыУпр");
	Результат.Вставить("КурсДокумента");
	Результат.Вставить("КурсВалютыВзаиморасчетов");
	Результат.Вставить("КурсВалютыРегл");
	
	ЕстьКурсВалютыУпр = ЕстьРеквизит(ДокументРасчетов, "КурсВалютыУпр");
	ЕстьКурсДокумента = ЕстьРеквизит(ДокументРасчетов, "КурсДокумента");
	ЕстьКурсВалютыВзаиморасчетов = ЕстьРеквизит(ДокументРасчетов, "КурсВалютыВзаиморасчетов");
	
	ДанныеДокумента = Новый Массив;
	ДанныеДокумента.Добавить("Дата");
	
	Если ЕстьКурсВалютыУпр Тогда
		ДанныеДокумента.Добавить("КурсВалютыУпр");
	КонецЕсли;
	
	Если ЕстьКурсДокумента Тогда
		ДанныеДокумента.Добавить("КурсДокумента");
	КонецЕсли;
	
	Если ЕстьКурсВалютыВзаиморасчетов Тогда
		ДанныеДокумента.Добавить("КурсВалютыВзаиморасчетов");
	КонецЕсли;
	
	ДатаДокументаРасчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументРасчетов,
		СтрСоединить(ДанныеДокумента, ","));
	
	ЗаполнитьЗначенияСвойств(Результат, ДатаДокументаРасчета);
	
	Для Каждого ТекущийПараметр Из Результат Цикл
		
		Если Не ЗначениеЗаполнено(ТекущийПараметр.Значение) Тогда
			Результат.Вставить(ТекущийПараметр.Ключ, ДатаДокументаРасчета.Дата);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СписаниеКурсовойРазницыБаз(Объект, РасчетыСКонтрагентами) Экспорт
	
	МоментВремени = Новый Граница(Объект.Дата, ВидГраницы.Включая);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасчетыСКонтрагентами.Организация КАК Организация,
	|	РасчетыСКонтрагентами.Контрагент КАК Контрагент,
	|	РасчетыСКонтрагентами.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	РасчетыСКонтрагентами.ТипРасчета КАК ТипРасчета,
	|	РасчетыСКонтрагентами.Заказ КАК Заказ,
	|	РасчетыСКонтрагентами.Сумма КАК Сумма,
	|	РасчетыСКонтрагентами.СуммаУпр КАК СуммаУпр,
	|	РасчетыСКонтрагентами.СуммаБаз КАК СуммаБаз,
	|	РасчетыСКонтрагентами.ВидДвижения КАК ВидДвижения,
	|	РасчетыСКонтрагентами.ДокументРасчетов КАК ДокументРасчетов
	|ПОМЕСТИТЬ ВзаиморасчетыПоДокументу
	|ИЗ
	|	&РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыПоДокументу.Организация КАК Организация,
	|	ВзаиморасчетыПоДокументу.Контрагент КАК Контрагент,
	|	ВзаиморасчетыПоДокументу.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВзаиморасчетыПоДокументу.ТипРасчета КАК ТипРасчета,
	|	ВзаиморасчетыПоДокументу.ДокументРасчетов КАК ДокументРасчетов,
	|	ВзаиморасчетыПоДокументу.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыПоДокументу.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ВзаиморасчетыПоДокументу.СуммаБаз + ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаБазОстаток, 0) КАК СуммаБаз
	|ИЗ
	|	ВзаиморасчетыПоДокументу КАК ВзаиморасчетыПоДокументу
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	|				&МоментВремени,
	|				(Организация, Контрагент, ДоговорВзаиморасчетов, ТипРасчета, ДокументРасчетов, Заказ) В
	|					(ВЫБРАТЬ
	|						ВзаиморасчетыПоДокументу.Организация КАК Организация,
	|						ВзаиморасчетыПоДокументу.Контрагент КАК Контрагент,
	|						ВзаиморасчетыПоДокументу.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|						ВзаиморасчетыПоДокументу.ТипРасчета КАК ТипРасчета,
	|						ВзаиморасчетыПоДокументу.ДокументРасчетов КАК ДокументРасчетов,
	|						ВзаиморасчетыПоДокументу.Заказ КАК Заказ
	|					ИЗ
	|						ВзаиморасчетыПоДокументу КАК ВзаиморасчетыПоДокументу)) КАК РасчетыСКонтрагентамиОстатки
	|		ПО ВзаиморасчетыПоДокументу.Организация = РасчетыСКонтрагентамиОстатки.Организация
	|			И ВзаиморасчетыПоДокументу.Контрагент = РасчетыСКонтрагентамиОстатки.Контрагент
	|			И ВзаиморасчетыПоДокументу.ДоговорВзаиморасчетов = РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов
	|			И ВзаиморасчетыПоДокументу.ТипРасчета = РасчетыСКонтрагентамиОстатки.ТипРасчета
	|			И ВзаиморасчетыПоДокументу.ДокументРасчетов = РасчетыСКонтрагентамиОстатки.ДокументРасчетов
	|			И ВзаиморасчетыПоДокументу.Заказ = РасчетыСКонтрагентамиОстатки.Заказ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВзаиморасчетыПоДокументу.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ВзаиморасчетыПоДокументу.Сумма + ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаОстаток, 0) = 0";
	Запрос.УстановитьПараметр("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСКонтрагентами");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		Если КолонкаРезультатЗапроса.Имя = "Сумма"
			ИЛИ КолонкаРезультатЗапроса.Имя = "СуммаБаз"
			ИЛИ КолонкаРезультатЗапроса.Имя = "СуммаУпр"
			ИЛИ КолонкаРезультатЗапроса.Имя = "СуммаОстаток" Тогда
			Продолжить;
		КонецЕсли;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Закрываем
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаБаз <> 0 Тогда
			НоваяЗапись = РасчетыСКонтрагентами.Добавить();
			НоваяЗапись.Период = Объект.Дата;
			НоваяЗапись.Регистратор = Объект.Ссылка;
			НоваяЗапись.Организация = Выборка.Организация;
			НоваяЗапись.Контрагент = Выборка.Контрагент;
			НоваяЗапись.ДоговорВзаиморасчетов = Выборка.ДоговорВзаиморасчетов;
			НоваяЗапись.ТипРасчета = Выборка.ТипРасчета;
			НоваяЗапись.ДокументРасчетов = Выборка.ДокументРасчетов;
			НоваяЗапись.Заказ = Выборка.Заказ;
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.СуммаБаз = Окр(-Выборка.СуммаБаз, 2);
			НоваяЗапись.Сумма = 0;
			НоваяЗапись.СуммаУпр = 0;
			НоваяЗапись.ХозОперация = Объект.ХозОперация;
			НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.СписаниеКурсовойРазницыБазВалюты;
			НоваяЗапись.Активность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры // Печать()

#КонецОбласти

#КонецОбласти

#КонецЕсли