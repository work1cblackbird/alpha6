// Модуль набора записей регистра "Денежные средства компании"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

#Область ОписаниеПеременных

Перем Валюта Экспорт;				// Валюта движения ДС
Перем Курс Экспорт;					// Курс движения ДС
Перем ВалютаУпр Экспорт;			// Валюта управленческого учета (если не заполнена берется из константы)
Перем СтруктурнаяЕдиница Экспорт;	// Касса компании, Р/С, Ценная бумага
Перем ДокументОбъект Экспорт;		// Объект породивший набор записей
Перем СтатьяДДС Экспорт;			// Статья движения ДС
Перем Сумма Экспорт;				// Сумма в валюте движения
Перем СуммаДоходаРасходаКурсовыхРазниц Экспорт; // Сумма дохода расхода курсовых разниц
Перем РежимПроведения Экспорт;		// Режим проведения документа оперативный/неоперативный
Перем СуммаВсего Экспорт;			// Общая сумма по документу
Перем КонтрольВалют Экспорт;		// Признак необходимости контроля валюты документа и структурной единицы.

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует движения по приходу (поступление денежных средств)
// Возвращаемое значение: Булево. Истина - все ОК, Ложь - чего-то не так.
Функция Приход() Экспорт
	
	Результат = Истина;
	
	// Проверки
	Если (НЕ ЗначениеЗаполнено(Валюта)) И (НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница)) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не достаточно параметров для проведения по регистру ""ДенежныеСредстваКомпании"" .'"),
			ДокументОбъект,
			,
			,
			Истина
		);
		// Убиваем циклическую ссылку
		Валюта			= Неопределено;
		ДокументОбъект	= Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	// Получим ускоряющие переменные
	Если Валюта = Неопределено Тогда
		Валюта	= ДокументОбъект.ВалютаДокумента;
		Курс	= ДокументОбъект.КурсДокумента;
	КонецЕсли; 
	
	Если ВалютаУпр = Неопределено Тогда
		ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.КурсВалютыУпр) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,ДокументОбъект.Дата);
		КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		КурсУпр = ДокументОбъект.КурсВалютыУпр;
	КонецЕсли;	
	СуммаУпр = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма,Валюта,Курс,ВалютаУпр,КурсУпр);

	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтруктурнаяЕдиница.ВалютаДенежныхСредств,ДокументОбъект.Дата);
	КурсСтруктурнойЕдиницы = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Сумма=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма,Валюта,Курс,СтруктурнаяЕдиница.ВалютаДенежныхСредств,КурсСтруктурнойЕдиницы);
	
	Если НЕ ВалютаСтруктурнойЕдиницыКорректна() Тогда
		Валюта			= Неопределено;
		ДокументОбъект	= Неопределено;
		Возврат Ложь;
	КонецЕсли; 	
	
	// Приходуем денежные средства
	НоваяЗапись	= Добавить();
	НоваяЗапись.ВидДвижения			= ВидДвиженияНакопления.Приход;
	НоваяЗапись.Период				= ДокументОбъект.Дата;
	НоваяЗапись.Регистратор			= ДокументОбъект.Ссылка;
	НоваяЗапись.СтруктурнаяЕдиница	= СтруктурнаяЕдиница;
	НоваяЗапись.Валюта				= СтруктурнаяЕдиница.ВалютаДенежныхСредств;
	НоваяЗапись.СтатьяДДС			= СтатьяДДС;
	НоваяЗапись.Сумма				= Окр(Сумма,2);
	НоваяЗапись.СуммаУпр			= Окр(СуммаУпр,2);
	// Определяемся с хоз. операцией
	НоваяЗапись.ХозОперация			= ДокументОбъект.ХозОперация;
	
	// Убиваем циклическую ссылку
	Валюта			= Неопределено;
	ДокументОбъект	= Неопределено;
	
	// Запишем управленческую сумму в дополнительные свойства, для доступа к ней извне.
	ДополнительныеСвойства.Вставить("СуммаЗаписиУпр", НоваяЗапись.СуммаУпр);
	
	Возврат Результат;
КонецФункции

// Формирует движения по расходу (расход денежных средств)
// Возвращаемое значение: Булево. Истина - все ОК, Ложь - чего-то не так.
Функция Расход() Экспорт
	
	Результат = Ложь;
	// Проверки
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не достаточно параметров для проведения по регистру ""ДенежныеСредстваКомпании"" .'"),
			ДокументОбъект
		);
		// Убиваем циклическую ссылку
		Валюта			= Неопределено;
		ДокументОбъект	= Неопределено;
		Возврат Результат;
	КонецЕсли;
	
	// Получим ускоряющие переменные
	Если Валюта = Неопределено Тогда
		Валюта = ДокументОбъект.ВалютаДокумента;
		Курс = ДокументОбъект.КурсДокумента;
	КонецЕсли; 
	
	Если ВалютаУпр = Неопределено Тогда
		ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.КурсВалютыУпр) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,ДокументОбъект.Дата);
		КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		КурсУпр = ДокументОбъект.КурсВалютыУпр;
	КонецЕсли;	
	СуммаУпр=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма,Валюта,Курс,ВалютаУпр,КурсУпр);

	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтруктурнаяЕдиница.ВалютаДенежныхСредств,ДокументОбъект.Дата);
	КурсСтруктурнойЕдиницы = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма,Валюта,Курс,СтруктурнаяЕдиница.ВалютаДенежныхСредств,КурсСтруктурнойЕдиницы);
	
	Если НЕ ВалютаСтруктурнойЕдиницыКорректна() Тогда
		Валюта			= Неопределено;
		ДокументОбъект	= Неопределено;
		Возврат ЛОЖЬ;
	КонецЕсли; 	
	
	// Получим текущие остатки
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СуммаОстаток,0) КАК СуммаОстаток,
	|	ЕСТЬNULL(СуммаУпрОстаток,0) КАК СуммаУпрОстаток
 	|ИЗ 
	|	РегистрНакопления.ДенежныеСредстваКомпании.Остатки(&Момент,Валюта=&Валюта И СтруктурнаяЕдиница=&СтруктурнаяЕдиница)
	|");
	Если (РежимПроведения = Неопределено) ИЛИ (РежимПроведения=РежимПроведенияДокумента.Неоперативный) Тогда
		МоментВремени = Новый Граница(ДокументОбъект.МоментВремени(),ВидГраницы.Исключая);
	Иначе
		МоментВремени = Неопределено;
	КонецЕсли;
	Запрос.УстановитьПараметр("Момент",МоментВремени);
	Запрос.УстановитьПараметр("Валюта",Валюта);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",СтруктурнаяЕдиница);
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ДенежныеСредстваКомпании");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
	ЗначенияБлокировки.Вставить("Валюта", Валюта);
	ЗначенияБлокировки.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
	
	СуммаОстатка=0; СуммаОстаткаУпр=0;
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаОстатка=Выборка.СуммаОстаток;
		СуммаОстаткаУпр=Выборка.СуммаУпрОстаток;
	КонецЕсли;
	Если СуммаВсего=Неопределено Тогда СуммаВсего=0; КонецЕсли; 
	СуммаОстатка=СуммаОстатка+СуммаВсего;
	
	// Проверим на отрицательные остатки
	Если (СуммаОстатка-Сумма) < 0 Тогда
		ТипСтруктурнойЕдиницы=ТипЗнч(СтруктурнаяЕдиница);
		// Проверим есть ли право на отрицательные остатки
		Если 	  (ТипСтруктурнойЕдиницы=Тип("СправочникСсылка.КассыКомпании")) ИЛИ (ТипСтруктурнойЕдиницы=Тип("СправочникСсылка.КассыККМ")) Тогда
			Результат = ПраваИНастройкиПользователя.Значение("РазрешитьОтрицательныеОстаткиПоКассе",ДокументОбъект);
		ИначеЕсли (ТипСтруктурнойЕдиницы=Тип("СправочникСсылка.БанковскиеСчета")) ИЛИ (ТипСтруктурнойЕдиницы=Тип("СправочникСсылка.ЦенныеБумаги")) Тогда
			Результат = ПраваИНастройкиПользователя.Значение("РазрешитьОтрицательныеОстаткиПоБанку",ДокументОбъект);
		Иначе
			Результат = Ложь;
		КонецЕсли;
		Если Результат Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Получены отрицательные суммовые остатки по <%1>'"),
					СокрЛП(СтруктурнаяЕдиница)
				),
				ДокументОбъект
			);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Нет прав на отрицательные суммовые остатки по <%1>'"),
					СокрЛП(СтруктурнаяЕдиница)
				),
				ДокументОбъект
			);
			Возврат Результат;
		КонецЕсли;
	Иначе
		Результат = Истина;	
	КонецЕсли;

	Если Результат Тогда
		// Расходуем денежные средства
		НоваяЗапись = Добавить();
		НоваяЗапись.ВидДвижения			= ВидДвиженияНакопления.Расход;
		НоваяЗапись.Период				= ДокументОбъект.Дата;
		НоваяЗапись.Регистратор			= ДокументОбъект.Ссылка;
		НоваяЗапись.СтруктурнаяЕдиница	= СтруктурнаяЕдиница;
		НоваяЗапись.Валюта				= СтруктурнаяЕдиница.ВалютаДенежныхСредств;
		НоваяЗапись.СтатьяДДС			= СтатьяДДС;
		НоваяЗапись.Сумма				= Окр(Сумма,2);
		НоваяЗапись.СуммаУпр			= Окр(СуммаУпр,2);
		// Определяемся с хоз. операцией
		НоваяЗапись.ХозОперация			= ДокументОбъект.ХозОперация;
	КонецЕсли;
	
	// Убиваем циклическую ссылку
	Валюта			= Неопределено;
	ДокументОбъект	= Неопределено;
	
	// Запишем управленческую сумму в дополнительные свойства, для доступа к ней извне.
	ДополнительныеСвойства.Вставить("СуммаЗаписиУпр", НоваяЗапись.СуммаУпр);
	
	Возврат Результат;
КонецФункции

// Списывает курсовые разницы
Функция СписаниеКурсовыхРазниц() Экспорт
	// Вспомогательные переменные
	СуммаДоходаРасходаКурсовыхРазниц =0;
	ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,ДокументОбъект.Дата);
	КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	СтрокаФильтра = "";
	Если ДополнительныеСвойства.Свойство("ФильтрПоПодразделению") Тогда
		СтрокаФильтра = ", 
		|СтруктурнаяЕдиница.ПодразделениеКомпании = &ПодразделениеКомпании";
	ИначеЕсли ДополнительныеСвойства.Свойство("ФильтрПоОрганизации") Тогда
		СтрокаФильтра = ", 
		|ВЫБОР
		|	КОГДА СтруктурнаяЕдиница.Организация ЕСТЬ NULL 
		|		ТОГДА СтруктурнаяЕдиница.ПодразделениеКомпании.Организация = &Организация
		|	ИНАЧЕ СтруктурнаяЕдиница.Организация = &Организация
		|КОНЕЦ";
	КонецЕсли;

	// Получаем выборку
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|   ДенежныеСредстваКомпанииОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ДенежныеСредстваКомпанииОстатки.Валюта КАК Валюта,
	|	ЕСТЬNULL(ДенежныеСредстваКомпанииОстатки.СуммаОстаток,0) КАК Сумма,
	|	ЕСТЬNULL(ДенежныеСредстваКомпанииОстатки.СуммаУпрОстаток,0) КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность,0)=0 ТОГДА
	|			КурсыВалютСрезПоследних.Курс
	|		ИНАЧЕ
	|			КурсыВалютСрезПоследних.Курс/КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК Курс
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКомпании.Остатки(&Момент" + СтрокаФильтра + ") КАК ДенежныеСредстваКомпанииОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Момент) КАК КурсыВалютСрезПоследних
	|	ПО ДенежныеСредстваКомпанииОстатки.Валюта=КурсыВалютСрезПоследних.Валюта
	|");
	Запрос.УстановитьПараметр("Момент",?(РежимПроведения=РежимПроведенияДокумента.Оперативный,Неопределено,ДокументОбъект.МоментВремени()));
	
	// Если нужно добавим фильтр.
	Если ДополнительныеСвойства.Свойство("ФильтрПоПодразделению") Тогда
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ДополнительныеСвойства.ФильтрПоПодразделению);
	ИначеЕсли ДополнительныеСвойства.Свойство("ФильтрПоОрганизации") Тогда
		Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.ФильтрПоОрганизации);	
	КонецЕсли; 
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ДенежныеСредстваКомпании");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
	
	РезультатЗапросаКурсовые = Запрос.Выполнить();
	
	// Если необходимо, заполним вспомогательную таблицу движений, которую 
	// можно использовать во "внешнем" коде.
	Если ДополнительныеСвойства.Свойство("ТаблицаДвижений") Тогда
		ЗаполнитьТаблицуДвижений = Истина;
	Иначе
		ЗаполнитьТаблицуДвижений = Ложь;
	КонецЕсли;

	// Идем по выборке
	Выборка=РезультатЗапросаКурсовые.Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаПереоценки=Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.Сумма,Выборка.Валюта,Выборка.Курс,ВалютаУпр,КурсУпр)-Выборка.СуммаУпр,2);
		Если СуммаПереоценки=0 Тогда Продолжить; КонецЕсли; // Переоценивать нечего
		// Переоцениваем
		НоваяЗапись=Добавить();
		НоваяЗапись.Период=ДокументОбъект.Дата;
		НоваяЗапись.Регистратор=ДокументОбъект.Ссылка;
		НоваяЗапись.СтруктурнаяЕдиница=Выборка.СтруктурнаяЕдиница;
		НоваяЗапись.Валюта=Выборка.Валюта;
		НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
		НоваяЗапись.СуммаУпр=Окр(СуммаПереоценки,2);
		НоваяЗапись.Сумма=0;
		// Доходы/расходы
		СуммаДоходаРасходаКурсовыхРазниц=СуммаДоходаРасходаКурсовыхРазниц+НоваяЗапись.СуммаУпр;
		// Определяемся с хоз. операцией
		НоваяЗапись.ХозОперация=ДокументОбъект.ХозОперация;
		НоваяЗапись.СтатьяДДС=СтатьяДДС;
		
		// Заполняем вспомогательную таблицу движений.
		Если ЗаполнитьТаблицуДвижений Тогда
			НоваяСтрока = ДополнительныеСвойства.ТаблицаДвижений.Добавить();
			НоваяСтрока.Подразделение      = Выборка.СтруктурнаяЕдиница.ПодразделениеКомпании;
			НоваяСтрока.КурсоваяРазницаУпр = НоваяЗапись.СуммаУпр;
		КонецЕсли;
	КонецЦикла;
	
	// Убиваем циклическую ссылку
	ДокументОбъект=Неопределено;
	
	// Все ОК
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет корректность валюты кассы, Р/С и затребованного движения
// При отрицательном результате проведение должно быть прервано
Функция ВалютаСтруктурнойЕдиницыКорректна()

	Если НЕ КонтрольВалют Тогда 

		Возврат Истина;

	КонецЕсли;
	
	Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.КассыКомпании") Тогда
		
		Если НЕ СтруктурнаяЕдиница.МноговалютнаяКасса И СтруктурнаяЕдиница.ВалютаДенежныхСредств <> Валюта Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не соответствует валюта денежных средств.'"), ДокументОбъект,,, Истина);
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		Если СтруктурнаяЕдиница.ВалютаДенежныхСредств <> Валюта Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не соответствует валюта расчетного счета.'"), ДокументОбъект,,, Истина);
			Возврат Ложь;
			
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.ЦенныеБумаги") Тогда
		
		Если СтруктурнаяЕдиница.ВалютаДенежныхСредств <> Валюта Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не соответствует валюта ценной бумаги.'"), ДокументОбъект,,, Истина);
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

#КонецОбласти

#Область Инициализация

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

СуммаДоходаРасходаКурсовыхРазниц = 0;
РежимПроведения = Неопределено;
СуммаВсего = 0;
ДополнительныеСвойства.Вставить("СуммаЗаписиУпр", 0);
КонтрольВалют = Истина;

#КонецОбласти

#КонецЕсли