// Модуль формы "Форма подбора полей отбора"

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ВидПолей") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ИдентификаторВладельца") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИдентификаторВладельца = Параметры.ИдентификаторВладельца;
	
	// Вставить содержимое обработчика.
	Если Параметры.Свойство("СхемаКомпоновки") Тогда
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Параметры.СхемаКомпоновки));
		СхемаКомпоновки = Параметры.СхемаКомпоновки;
	КонецЕсли;
	
	Если Параметры.Свойство("КомпоновщикНастроек") Тогда 
		КомпоновкаДанныхКлиентСервер.СкопироватьНастройкиКомпоновкиДанных(
			КомпоновщикНастроек.Настройки,
			Параметры.КомпоновщикНастроек.Настройки
		);
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоРесурсы") Тогда
		ТолькоРесурсы = Параметры.ТолькоРесурсы;
	КонецЕсли;
	
	// Получим настройки для текущей строки структуры настроек
	СтрокаНастроек = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока = КомпоновщикНастроек.Настройки.ПолучитьИдентификаторПоОбъекту(СтрокаНастроек);
	
	ВидПолей = Параметры.ВидПолей;
	Если ВидПолей = "Реквизиты" Тогда
		
		Элементы.ГруппаПорядок.Видимость         = Ложь;
		Элементы.ГруппаВыбор.Видимость           = Истина;
		Элементы.ГруппаПоляГруппировки.Видимость = Ложь;
		
		Заголовок = НСтр("ru = 'Реквизиты группировки'");
		Элементы.ГруппаПоляВыбора.ТекущаяСтраница = Элементы.ГруппаВыбор;
		
		Если Параметры.Свойство("АдресТаблицы") И ЭтоАдресВременногоХранилища(Параметры.АдресТаблицы) Тогда
			ОбъектКоллекции = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицы);
			ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(СтрокаНастроек.Выбор.Элементы, ОбъектКоллекции.Строки);
		КонецЕсли;
		
	ИначеЕсли ВидПолей = "Порядок" Тогда
		
		Элементы.ГруппаПорядок.Видимость         = Истина;
		Элементы.ГруппаВыбор.Видимость           = Ложь;
		Элементы.ГруппаПоляГруппировки.Видимость = Ложь;
		
		Заголовок = НСтр("ru = 'Порядок группировки'");
		Элементы.ГруппаПоляВыбора.ТекущаяСтраница = Элементы.ГруппаПорядок;
		
		Если Параметры.Свойство("АдресТаблицы") И ЭтоАдресВременногоХранилища(Параметры.АдресТаблицы) Тогда
			ОбъектКоллекции = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицы);
			ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(СтрокаНастроек.Порядок.Элементы, ОбъектКоллекции);
		КонецЕсли;
		
	ИначеЕсли ВидПолей = "ПоляГруппировки" Тогда
		
		Элементы.ГруппаПорядок.Видимость         = Ложь;
		Элементы.ГруппаВыбор.Видимость           = Ложь;
		Элементы.ГруппаПоляГруппировки.Видимость = Истина;
		
		Заголовок = НСтр("ru = 'Поля группировки'");
		Элементы.ГруппаПоляВыбора.ТекущаяСтраница = Элементы.ГруппаПоляГруппировки;
		
		Если Параметры.Свойство("АдресТаблицы") И ЭтоАдресВременногоХранилища(Параметры.АдресТаблицы) Тогда
			ОбъектКоллекции = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицы);
			ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(СтрокаНастроек.ПоляГруппировки.Элементы, ОбъектКоллекции);
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры.Свойство("ТекущееПоле", ТекущееПоле);
	
	Если Параметры.Свойство("ГруппировкиСтруктуры") Тогда
		ГруппировкиСтруктуры.ЗагрузитьЗначения(Параметры.ГруппировкиСтруктуры);
	КонецЕсли;
	
	Если ГруппировкиСтруктуры.Количество() = 0 ИЛИ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Элементы.ДоступныеПоляВыбора.НачальноеОтображениеДерева = НачальноеОтображениеДерева.НеРаскрывать;
		Элементы.ДоступныеПоляПорядка.НачальноеОтображениеДерева = НачальноеОтображениеДерева.НеРаскрывать;
	КонецЕсли;
	
	// В режиме веб-клиента произведем показ кнопки изменения текущего объекта
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Элементы.КомпоновщикНастроекНастройкиЭлементПорядокИзменить.Видимость = Истина;
		Элементы.КомпоновщикНастроекНастройкиЭлементВыборИзменить.Видимость = Истина;
		Элементы.КомпоновщикНастроекНастройкиЭлементПоляГруппировкиИзменить.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры //ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТипЗнч(ТекущееПоле) = Тип("ПолеКомпоновкиДанных") Тогда
		Если ВидПолей = "Реквизиты" Тогда
			ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(ТекущееПоле);
			Если НЕ ДоступноеПоле = Неопределено Тогда
				ИдентификаторСтроки = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.ПолучитьИдентификаторПоОбъекту(ДоступноеПоле);
				Элементы.ДоступныеПоляВыбора.ТекущаяСтрока = ИдентификаторСтроки;
			КонецЕсли;
		ИначеЕсли ВидПолей = "Порядок" Тогда
			ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.НайтиПоле(ТекущееПоле);
			Если НЕ ДоступноеПоле = Неопределено Тогда
				ИдентификаторСтроки = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.ПолучитьИдентификаторПоОбъекту(ДоступноеПоле);
				Элементы.ДоступныеПоляПорядка.ТекущаяСтрока = ИдентификаторСтроки;
			КонецЕсли;
		ИначеЕсли ВидПолей = "ПоляГруппировки" Тогда
			ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(ТекущееПоле);
			Если НЕ ДоступноеПоле = Неопределено Тогда
				ИдентификаторСтроки = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.ПолучитьИдентификаторПоОбъекту(ДоступноеПоле);
				Элементы.ДоступныеПоляГруппировок.ТекущаяСтрока = ИдентификаторСтроки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПолей = "Реквизиты" Тогда
		Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
			ДоступныеПоляВыбора = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора;
			ОграниченияИспользованияПолей = Элементы.ДоступныеПоляВыбора.ОграниченияИспользования;
			
			Для Каждого ЭлементСписка Из ГруппировкиСтруктуры Цикл
				
				ПолеГруппировки = ЭлементСписка.Значение;
				
				ПоляВетки = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеГруппировки);
				
				РодительГруппировки = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(ПолеГруппировки);
				Пока НЕ РодительГруппировки = Неопределено Цикл
					Если РодительГруппировки.Родитель = Неопределено Тогда
						Для Каждого ТекПоле Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
							
							Если НЕ ГруппировкиСтруктуры.НайтиПоЗначению(ТекПоле.Поле) = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							
							НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
							НовоеОграничение.Поле        = ТекПоле.Поле;
							НовоеОграничение.Доступность = Ложь;
						КонецЦикла;
					Иначе
						Для Каждого ТекПоле Из РодительГруппировки.Родитель.Элементы Цикл
							
							Если НЕ ГруппировкиСтруктуры.НайтиПоЗначению(ТекПоле.Поле) = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							
							НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
							НовоеОграничение.Поле        = ТекПоле.Поле;
							НовоеОграничение.Доступность = Ложь;
						КонецЦикла;
					КонецЕсли;
					РодительГруппировки = РодительГруппировки.Родитель;
				КонецЦикла;
				
			КонецЦикла;
		Иначе
			// установим текущую строку и развернем используемые реквизиты
			ПервыйВГруппировке = Истина;
			Для Каждого ЭлементСписка Из ГруппировкиСтруктуры Цикл
				ПолеГруппировки = ЭлементСписка.Значение;
				ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеГруппировки);
				ИдентификаторСтроки = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.ПолучитьИдентификаторПоОбъекту(ДоступноеПоле);
				Если ПервыйВГруппировке Тогда
					Элементы.ДоступныеПоляВыбора.ТекущаяСтрока = ИдентификаторСтроки;
					ПервыйВГруппировке = Ложь;
				КонецЕсли;
				Элементы.ДоступныеПоляВыбора.Развернуть(ИдентификаторСтроки, Ложь);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ВидПолей = "Порядок" Тогда
		Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
			ДоступныеПоляПорядка          = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка;
			ОграниченияИспользованияПолей = Элементы.ДоступныеПоляПорядка.ОграниченияИспользования;
			
			Для Каждого ЭлементСписка Из ГруппировкиСтруктуры Цикл
				
				ПолеГруппировки = ЭлементСписка.Значение;
				
				ПоляВетки = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.НайтиПоле(ПолеГруппировки);
				
				РодительГруппировки = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(ПолеГруппировки);
				Пока НЕ РодительГруппировки = Неопределено Цикл
					Если РодительГруппировки.Родитель = Неопределено Тогда
						Для Каждого ТекПоле Из КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.Элементы Цикл
							
							Если НЕ ГруппировкиСтруктуры.НайтиПоЗначению(ТекПоле.Поле) = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							
							НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
							НовоеОграничение.Поле        = ТекПоле.Поле;
							НовоеОграничение.Доступность = Ложь;
						КонецЦикла;
					Иначе
						Для Каждого ТекПоле Из РодительГруппировки.Родитель.Элементы Цикл
							
							Если НЕ ГруппировкиСтруктуры.НайтиПоЗначению(ТекПоле.Поле) = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							
							НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
							НовоеОграничение.Поле        = ТекПоле.Поле;
							НовоеОграничение.Доступность = Ложь;
						КонецЦикла;
					КонецЕсли;
					РодительГруппировки = РодительГруппировки.Родитель;
				КонецЦикла;
				
			КонецЦикла;
		Иначе
			// установим текущую строку и развернем используемые реквизиты
			ПервыйВГруппировке = Истина;
			Для Каждого ЭлементСписка Из ГруппировкиСтруктуры Цикл
				ПолеГруппировки = ЭлементСписка.Значение;
				ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.НайтиПоле(ПолеГруппировки);
				ИдентификаторСтроки = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.ПолучитьИдентификаторПоОбъекту(ДоступноеПоле);
				Если ПервыйВГруппировке Тогда
					Элементы.ДоступныеПоляПорядка.ТекущаяСтрока = ИдентификаторСтроки;
					ПервыйВГруппировке = Ложь;
				КонецЕсли;
				Элементы.ДоступныеПоляПорядка.Развернуть(ИдентификаторСтроки, Ложь);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПриОткрытии()

&НаКлиенте
Процедура УдалитьСтрокуПорядка(Команда)
	
	КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.Элементы.Получить(Элементы.КомпоновщикНастроекНастройкиЭлементПорядок.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при двойном щелчке мыши (нажатии клавиши Enter) в ячейке "Поле" таблицы "Компоновщик
// настроек настройки элемент порядок".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                  - Значение выбранной строки.
//  Поле                 - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево    - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура КомпоновщикНастроекНастройкиЭлементПорядокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Тип упорядочивания выбирается стандартной обработкой
	Если СтрНайти(Поле.Имя, "ПорядокТипУпорядочивания") > 0  Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СхемаКомпоновки",      СхемаКомпоновки);
	СтруктураПараметров.Вставить("КомпоновщикНастроек",  КомпоновщикНастроек);
	СтруктураПараметров.Вставить("ВидПолей",             "Порядок");
	СтруктураПараметров.Вставить("ГруппировкиСтруктуры", ГруппировкиСтруктуры.ВыгрузитьЗначения());
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещенияВыбораПоля", ЭтотОбъект);
	ОткрытьФорму(
		"ОбщаяФорма.ФормаВыбораПолейОтчета",
		СтруктураПараметров,
		Элемент,
		, , ,
		ОписаниеОповещенияВыбораПоля,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры //КомпоновщикНастроекНастройкиЭлементПорядокВыбор()

// Обработчик события возникающего при двойном щелчке мыши (нажатии клавиши Enter) в ячейке "Поле" таблицы "Компоновщик
// настроек настройки элемент выбор".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                  - Значение выбранной строки.
//  Поле                 - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево    - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура КомпоновщикНастроекНастройкиЭлементВыборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СхемаКомпоновки",      СхемаКомпоновки);
	СтруктураПараметров.Вставить("КомпоновщикНастроек",  КомпоновщикНастроек);
	СтруктураПараметров.Вставить("ВидПолей",             "Реквизиты");
	СтруктураПараметров.Вставить("ГруппировкиСтруктуры", ГруппировкиСтруктуры.ВыгрузитьЗначения());
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещенияВыбораПоля", ЭтотОбъект);
	ОткрытьФорму(
		"ОбщаяФорма.ФормаВыбораПолейОтчета",
		СтруктураПараметров,
		Элемент,
		, , ,
		ОписаниеОповещенияВыбораПоля,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры //КомпоновщикНастроекНастройкиЭлементВыборВыбор()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего на клиенте при выполнении команды "Выбрать".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Выбрать(Команда)
	
	Результат = Новый Структура;
	
	ЗаполнитьВыбор(Результат);
	Результат.Вставить("ВидПолей", ВидПолей);
	
	Закрыть(Результат);
	
КонецПроцедуры //Выбрать()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Видимость
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("КомпоновщикНастроекНастройкиЭлементПоляГруппировкиИспользование");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("КомпоновщикНастроекНастройкиЭлементПоляГруппировкиПоле");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", ЦветаСтиля.ЦветОсобогоТекста);
	
КонецПроцедуры

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

// Формирует структуру результата подбора полей.
//
// Параметры:
//  Результат - Структура - Структура, содержащая результат подбора полей.
//
&НаСервере
Процедура ЗаполнитьВыбор(Результат)
	
	ИдентификаторОбъекта = Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока;
	
	Если ИдентификаторОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Получим строку структуры
	СтрокаСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(ИдентификаторОбъекта);
	
	РодительЭлементов = Новый Структура;
	РодительЭлементов.Вставить("ПоляГруппировки", ГруппировкиСтруктуры);
	РодительЭлементов.Вставить("ПредставлениеПолей", "");
	РодительЭлементов.Вставить("ПредставлениеПорядка", "");
	РодительЭлементов.Вставить("Заголовок", "");
	
	ПредставлениеПолей = "";
	АдресТаблицы       = "";
	
	Если ВидПолей = "Реквизиты" Тогда
		
		ДеревоПолей = Новый ДеревоЗначений;
		ДеревоПолей.Колонки.Добавить("Использование");
		ДеревоПолей.Колонки.Добавить("Поле");
		ДеревоПолей.Колонки.Добавить("Заголовок");
		ДеревоПолей.Колонки.Добавить("Папка");
		ДеревоПолей.Колонки.Добавить("Расположение");
		
		ОтчетыПлатформаСервер.ЗаполнитьНастройкиОтчета(ЭтотОбъект, ДеревоПолей.Строки, СтрокаСтруктуры.Выбор.Элементы, СтрокаСтруктуры.Выбор.ДоступныеПоляВыбора, РодительЭлементов);
		
		Если ДеревоПолей.Строки.Количество()> 0 Тогда
			АдресТаблицы = ПоместитьВоВременноеХранилище(ДеревоПолей, ИдентификаторВладельца);
		КонецЕсли;
		
		ПредставлениеПолей = РодительЭлементов.ПредставлениеПолей;
		
	ИначеЕсли ВидПолей = "Порядок" Тогда
		
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("Использование");
		ТаблицаПолей.Колонки.Добавить("Поле");
		ТаблицаПолей.Колонки.Добавить("Заголовок");
		ТаблицаПолей.Колонки.Добавить("ТипУпорядочивания");
		
		ОтчетыПлатформаСервер.ЗаполнитьНастройкиОтчета(ЭтотОбъект, ТаблицаПолей, СтрокаСтруктуры.Порядок.Элементы, СтрокаСтруктуры.Порядок.ДоступныеПоляПорядка, РодительЭлементов);
		
		Если ТаблицаПолей.Количество()> 0 Тогда
			АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПолей, ИдентификаторВладельца);
		КонецЕсли;
		
		ПредставлениеПолей = РодительЭлементов.ПредставлениеПорядка;
		
	ИначеЕсли ВидПолей = "ПоляГруппировки" Тогда
		
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("Использование");
		ТаблицаПолей.Колонки.Добавить("Поле");
		ТаблицаПолей.Колонки.Добавить("Заголовок");
		ТаблицаПолей.Колонки.Добавить("ТипГруппировки");
		ТаблицаПолей.Колонки.Добавить("ТипДополнения");
		ТаблицаПолей.Колонки.Добавить("НачалоПериода");
		ТаблицаПолей.Колонки.Добавить("КонецПериода");
		
		ОтчетыПлатформаСервер.ЗаполнитьНастройкиОтчета(ЭтотОбъект, ТаблицаПолей, СтрокаСтруктуры.ПоляГруппировки.Элементы, СтрокаСтруктуры.ПоляГруппировки.ДоступныеПоляПолейГруппировок, РодительЭлементов);
		
		Если ТаблицаПолей.Количество()> 0 Тогда
			АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПолей, ИдентификаторВладельца);
		КонецЕсли;
		
		ПредставлениеПолей = РодительЭлементов.Заголовок;
		
	КонецЕсли;
	
	Результат.Вставить("АдресТаблицы", АдресТаблицы);
	Результат.Вставить("Заголовок",    ПредставлениеПолей);
	
КонецПроцедуры //ЗаполнитьВыбор()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОповещенияВыбораПоля(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		Если ВидПолей = "Реквизиты" Тогда
			
			ТекущаяСтрока = Элементы.КомпоновщикНастроекНастройкиЭлементВыбор.ТекущаяСтрока;
			Если ТекущаяСтрока = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			// Получим строку структуры
			СтрокаСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
			
			// Получим строку реквизитов
			СтрокаРеквизита = СтрокаСтруктуры.Выбор.ПолучитьОбъектПоИдентификатору(ТекущаяСтрока);
			
			// Заменим поле порядка
			СтрокаРеквизита.Поле = РезультатЗакрытия.Поле;
			
		ИначеЕсли ВидПолей = "Порядок" Тогда
			
			ТекущаяСтрока = Элементы.КомпоновщикНастроекНастройкиЭлементПорядок.ТекущаяСтрока;
			Если ТекущаяСтрока = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			// Получим строку структуры
			СтрокаСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
			
			// Получим строку порядка
			СтрокаПорядка   = СтрокаСтруктуры.Порядок.ПолучитьОбъектПоИдентификатору(ТекущаяСтрока);
			
			// Заменим поле порядка
			СтрокаПорядка.Поле = РезультатЗакрытия.Поле;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ОповещенияВыбораПоля()

#КонецОбласти

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

