// Модуль общей формы "Форма данных о бонусной программе"

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получим переданные параметры
	ВладелецОбъект            = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Объект");
	Карточка                  = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Карточка");
	Дата                      = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Дата", ТекущаяДатаСеанса());
	КоличествоКНачислению     = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоличествоКНачислению");
	КоличествоКСписанию       = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоличествоКСписанию");
	
	БонуснаяПрограмма = Карточка.БонуснаяПрограмма;
	
	// Проверка бонусной программы
	Если НЕ ЗначениеЗаполнено(БонуснаяПрограмма) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ БонусныеПрограммыСервер.БонуснаяПрограммаАктивна(БонуснаяПрограмма, Дата) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Бонусная программа ""%1"" не активна на %2 Для активации перейдите в справочник бонусных программ.'"),
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(БонуснаяПрограмма),
				Формат(Дата,"ДЛФ=DD")
			),
			,,,Отказ);
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Параметры.Объект.Ссылка.Метаданные();
	ИмяОбъекта        = МетаданныеОбъекта.Имя;
	
	// Произведем добавление реквизита формы описывающего объект подобный владельцу
	ДобавляемыеРеквизиты = Новый Массив();
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументОбъект", Новый ОписаниеТипов("ДокументОбъект."+ИмяОбъекта)));
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ИсходныйОбъект    = ДанныеФормыВЗначение(ВладелецОбъект, Тип("ДокументОбъект."+ИмяОбъекта));
	ЗначениеВРеквизитФормы(ИсходныйОбъект, "ДокументОбъект");
	
	Если НЕ ЭтотОбъект.ТолькоПросмотр Тогда 
		БонусныеПрограммыСервер.РассчитатьБонусныеБаллыКНачислению(ВладелецОбъект, Карточка.БонуснаяПрограмма);
		КоличествоКНачислению = ВладелецОбъект.КоличествоКНачислению;
	КонецЕсли;
	
	ЗаполнитьДанные();
	
	Элементы.КоличествоКСписанию.ТолькоПросмотр = ЭтотОбъект.ДокументОбъект.Проведен И ?(ТипЗнч(ИсходныйОбъект) = Тип("ДокументОбъект.ЗаказНаряд"), ЭтотОбъект.ДокументОбъект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт, Истина);
	Элементы.КоличествоКСписанию.ТолькоПросмотр = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТолькоПросмотр", Элементы.КоличествоКСписанию.ТолькоПросмотр);
	Элементы.Применить.Доступность = НЕ Элементы.КоличествоКСписанию.ТолькоПросмотр;
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "Количество к списанию".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КоличествоКСписаниюПриИзменении(Элемент)
	
	КоличествоКСписанию = Мин(КоличествоКСписанию, ДопустимоеКоличествоБаллов, БалловНакопленоКонтрагентом);
	
КонецПроцедуры // КоличествоКСписаниюПриИзменении()

// Обработчик события возникающего на клиенте при нажатии на надпись "Подробно...".
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НадписьПодробноНажатие(Элемент)
	
	// фильтры
	ОтчетОтбор = Новый Структура;
	ОтчетОтбор.Вставить("БонуснаяКарта", Карточка);
	
	ОтчетыПлатформаКлиент.ОткрытьОтчет("Отчет.ОстаткиИОборотыБонусныхБаллов", "Остатки", , , , ОтчетОтбор, , ТекущаяДата());
	
КонецПроцедуры // НадписьПодробноНажатие()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "Применить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Применить(Команда)
	
	Если КоличествоКСписанию > ДопустимоеКоличествоБаллов Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Введено бонусных баллов к списанию больше допустимого для оплаты.'"));
		Возврат;
	ИначеЕсли КоличествоКСписанию > БалловНакопленоКонтрагентом Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Введено бонусных баллов к списанию больше, чем накоплено контрагентом.'"));
		Возврат;
	КонецЕсли;
	
	Закрыть(КоличествоКСписанию);
	
КонецПроцедуры // Применить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура получения остатков по бонусной карте
//
&НаСервере
Процедура ЗаполнитьДанные()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БонусныеБаллыОстаткиВНаличие.КоличествоОстаток КАК КоличествоОстаток,
	|	БонусныеБаллыОстаткиКЗачислению.КоличествоОстаток КАК КоличествоКНачислениюОстаток
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы.Остатки(
	|			,
	|			БонуснаяКарта = &Карта
	|				И АктивностьБонусов) КАК БонусныеБаллыОстаткиВНаличие,
	|	РегистрНакопления.БонусныеБаллы.Остатки(
	|			,
	|			БонуснаяКарта = &Карта
	|				И НЕ АктивностьБонусов) КАК БонусныеБаллыОстаткиКЗачислению";
	Запрос.УстановитьПараметр("Карта", Карточка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОжидаетЗачисления = 0; БалловНакопленоКонтрагентом = 0;
	Если Выборка.Следующий() Тогда
		ОжидаетЗачисления = Выборка.КоличествоКНачислениюОстаток;
		БалловНакопленоКонтрагентом = Выборка.КоличествоОстаток;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ТолькоПросмотр Тогда
		ДопустимоеКоличествоБаллов = Мин(БонусныеПрограммыСервер.МаксимальноеКоличествоБаллов(ЭтотОбъект.ДокументОбъект, БонуснаяПрограмма), БалловНакопленоКонтрагентом);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДанные()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ
