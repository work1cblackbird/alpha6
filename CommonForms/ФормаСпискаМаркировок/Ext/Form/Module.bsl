
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИдентификаторСтрокиТовара = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ИдентификаторТовара", "");
	
	УстановитьУсловноеОформление();
	
	Если ПустаяСтрока(ИдентификаторСтрокиТовара) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Самостоятельное открытие формы запрещено.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Установим заголовок формы.
	Номенклатура = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Номенклатура");
	Организация = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Организация");
	ПодразделениеКомпании = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПодразделениеКомпании");
	ЭтоВозврат = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ЭтоВозврат", Ложь);
	ЭтоЧекКоррекции = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ЭтоЧекКоррекции", Ложь);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ЭтотОбъект.Заголовок = СтрШаблон(НСтр("ru = 'Список кодов маркировки %1'"), Строка(Номенклатура));
	КонецЕсли;
	
	// Заполним текущим списком маркировок
	ТекущийСписокКодовМаркировки = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СписокКодовМаркировки", Новый Массив);
	ЕстьПримечания = Ложь;
	Если ТекущийСписокКодовМаркировки.Количество() > 0 Тогда
		Если ТипЗнч(ТекущийСписокКодовМаркировки[0]) = Тип("Строка") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(
				СписокКодовМаркировки,
				ТекущийСписокКодовМаркировки,
				"КодМаркировки"
			);
			Для Каждого Строка Из СписокКодовМаркировки Цикл
				Строка.Соответствует = Истина;
			КонецЦикла;
		Иначе
			Для Каждого Строка Из ТекущийСписокКодовМаркировки Цикл
				НоваяСтрока = СписокКодовМаркировки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				ЕстьПримечания = ЕстьПримечания ИЛИ ЗначениеЗаполнено(Строка.Примечание);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере(Параметры, ЕстьПримечания);
	
	ЗаполнитьНомераСтрок();
	
	МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);
	ПроверкаСоответствияКодовМаркировкиПроводилась = Ложь;
	
	// Установим доступность элементов
	Элементы.СписокКодовМаркировки.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.Применить.Доступность = НЕ ТолькоПросмотр;
	
	// Проверим видимость колонки ККТ
	ФР = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ФР");
	
	Элементы.ПроверкаККТ.Видимость = ЗначениеЗаполнено(ФР)
		И ОборудованиеЧекопечатающиеУстройстваВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(ФР);
	
	Элементы.ПроверкаРазрешительныйРежим.Видимость = 
		ПолучитьЗначениеПараметраСтруктуры(Параметры, "ВыводитьПроверкуРазрешительногоРежима", Ложь)
		И ЗначениеЗаполнено(Номенклатура)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ТипНоменклатуры.ИспользоватьРазрешительныйРежим");
	
	МаркировкаТоваровСервер.УстановитьРедактированиеКодовМаркировки(
		ЭтотОбъект,
		Параметры.Ссылка,
		Элементы.СписокКодовМаркировкиКодМаркировки.Имя
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Принимаем только внешние события от сканера ШК
	Если НЕ ВводДоступен() ИЛИ ИмяСобытия <> "ScanData" ИЛИ ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Штрихкод = ШтрихкодированиеКлиент.ПолучитьШтрихкодИзПараметровОборудования(ИмяСобытия, Параметр);
	ПараметрыДействия = Новый Структура;
	ШтрихкодированиеКлиент.ОбработатьПолныйШтрихкод(Штрихкод, ПараметрыДействия);
	Если ШтрихКод = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, что считана именно маркировка.
	ТекстСообщения = "";
	Если НЕ ЭтоКодМаркировки(ПараметрыДействия.ШтрихКод, ТекстСообщения) Тогда
		// Это не маркировка.
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Проверим наличие данной маркировки в списке.
	ПараметрыОтбора = Новый Структура("КодМаркировки", ПараметрыДействия.ШтрихКод);
	Если СписокКодовМаркировки.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Код маркировки уже присутствует.'"));
		Возврат;
	КонецЕсли;
	
	// Добавим новый код маркировки.
	НоваяСтрока = СписокКодовМаркировки.Добавить();
	НоваяСтрока.КодМаркировки = ПараметрыДействия.ШтрихКод;
	НоваяСтрока.Соответствует = Истина;
	НоваяСтрока.НомерСтроки = СписокКодовМаркировки.Количество() + 1;
	ПредставлениеСтатуса = 
		МенеджерОборудованияАвтосалонКлиентСервер.ОформлениеРезультатаПроверкиКодовМаркировки().Получить("НеПроверено");
	НоваяСтрока.СтатусПроверкиККТ = ПредставлениеСтатуса.Представление;
	НоваяСтрока.КартинкаПроверкиККТ = ПредставлениеСтатуса.Картинка;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура СписокКодовМаркировкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.СписокКодовМаркировки.ТекущиеДанные.НомерСтроки = СписокКодовМаркировки.Количество();
		Элементы.СписокКодовМаркировки.ТекущиеДанные.Соответствует = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКодовМаркировкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Штрихкод = ТекущиеДанные.КодМаркировки;
		СтруктураМаркировки = МаркировкаТоваровКлиент.РазобратьШтриховойКодТовара(Штрихкод);
		
		Если МаркировкаТоваровКлиентСервер.ЭтоКодТовараВФорматеDataMatrixGS1(Штрихкод, СтруктураМаркировки) Тогда
			
			Если НЕ СтруктураМаркировки.ДанныеШтрихкода.Получить("92") = Неопределено
				ИЛИ ПолучитьЗначениеПараметраСтруктуры(СтруктураМаркировки, "ПотребительскаяУпаковкаТабачнойПродукции", Ложь) Тогда
				// Был введен полный код с криптохвостом и спецсимволами.
				МаркировкаТоваровКлиентСервер.ЗаписатьПолныйШтрихкод(СтруктураМаркировки);
			ИначеЕсли НЕ (СтруктураМаркировки.ДанныеШтрихкода.Получить("01") <> Неопределено
					И СтруктураМаркировки.ДанныеШтрихкода.Получить("21") <> Неопределено) Тогда
				// Был введен полный код с криптохвостом без спецсимволов
				// или ошибки в криптохвосте - не удалось разобрать полностью КМ.
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Введен некорректный код маркировки (без спецсимволов). Данный код невозможно пробить на ФР. Попробуйте скопировать код из другого источника или добавить его при помощи сканера штрихкодов.'")
				);
				ТекущиеДанные.КартинкаПроверкиВводаКМ = БиблиотекаКартинок.ОформлениеКругКрасный;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КартинкаПроверкиВводаКМ) Тогда
				ТекущиеДанные.КартинкаПроверкиВводаКМ = БиблиотекаКартинок.ОформлениеКругЗеленый;
			КонецЕсли;
			
			ТекущиеДанные.КодМаркировки = МаркировкаТоваровКлиентСервер.СформироватьКодМаркировки(СтруктураМаркировки);
			
		КонецЕсли;
		
		Если НоваяСтрока Тогда
			
			ПредставлениеСтатуса = МенеджерОборудованияАвтосалонКлиентСервер
				.ОформлениеРезультатаПроверкиКодовМаркировки()
				.Получить("НеПроверено");
			ТекущиеДанные.СтатусПроверкиККТ = ПредставлениеСтатуса.Представление;
			ТекущиеДанные.КартинкаПроверкиККТ = ПредставлениеСтатуса.Картинка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокКодовМаркировкиПослеУдаленияНаСервере()
	
	ЗаполнитьНомераСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКодовМаркировкиПослеУдаления(Элемент)
	
	СписокКодовМаркировкиПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СписокКодовМаркировкиОкончаниеПеретаскиванияНаСервере()
	
	ЗаполнитьНомераСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКодовМаркировкиОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СписокКодовМаркировкиОкончаниеПеретаскиванияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКодовМаркировкиКодМаркировкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокКодовМаркировки.ТекущиеДанные;
	ТекущиеДанные.СостояниеКодаМаркировкиИБ = Неопределено;
	ТекущиеДанные.СостояниеКодаМаркировкиСМТ = "";
	ТекущиеДанные.Примечание = "";
	ТекущиеДанные.Соответствует = Истина;
	ТекущиеДанные.ПроверкаСоответствияКодовМаркировкиПроводилась = Ложь;
	
	ПроверкаСоответствияКодовМаркировкиПроводилась = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКодовМаркировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПроверкаСоответствияКодовМаркировкиПроводилась = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКодовМаркировкиКодМаркировкиОкончаниеВводаТекста(
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		СтандартнаяОбработка)
	
	Попытка
		
		#Если НЕ МобильныйКлиент Тогда
			Объект = Новый COMОбъект("htmlfile"); 
			Штрихкод = Объект.ParentWindow.ClipboardData.Getdata("Text");
			ШтрихкодБезСпецСимволов = КодМаркировкиБезСпецСимволов(Штрихкод);
			ТекущиеДанные = Элементы.СписокКодовМаркировки.ТекущиеДанные;
			
			Если НЕ ТекущиеДанные = Неопределено И ЗначениеЗаполнено(ШтрихКод) И Текст = ШтрихкодБезСпецСимволов Тогда
				ТекущиеДанные.КодМаркировки = Штрихкод;
			КонецЕсли;
		#Иначе
			ВызватьИсключение НСтр("ru = 'Функция недоступна в режиме мобильного клиента.'");
		#КонецЕсли
		
	Исключение
		
		ТехнологическаяПлатформаВызовСервера.СделатьЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при работе с COM-объектом'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		
	КонецПопытки;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Применить(Команда)
	
	// Проверим корректность введенный кодов маркировки.
	Если НЕ КорректныеКодыМаркировки() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторТовара", ИдентификаторСтрокиТовара);
	Результат.Вставить("ПроверкаСоответствияПроводилась", ПроверкаСоответствияКодовМаркировкиПроводилась);
	Результат.Вставить("СписокКодовМаркировки", СписокКодовМаркировки());
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСтатусыКодовМаркировки(Команда)
	
	ИмяДействия = "ОтправкаЗапросаНаПолучениеТекущихСтатусовМаркировки";
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Действие", ИмяДействия);
	ДополнительныеПараметры.Вставить("КодыМаркировки", ЗаполнитьКодыМаркировкиДляПроверки());
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("ПодразделениеКомпании", ПодразделениеКомпании);
	ДополнительныеПараметры.Вставить("НеТребуетсяКлючСессии", Ложь);
	ДополнительныеПараметры.Вставить(
		"РазрешенныеСостояния",
		МаркировкаТоваровКлиент.РазрешенныеСостояния(ЭтоВозврат, ЭтоЧекКоррекции));
	ОбработчикОповещения = Новый ОписаниеОповещения("ПолучитьЗапросЗавершение", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ОбработкаРезультата", ОбработчикОповещения);
	
	МаркировкаТоваровКлиент.ОтправитьПолучитьЗапрос(ЭтотОбъект, Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПолучитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаСоответствияКодовМаркировкиПроводилась = Истина;
	
	ЕстьПримечания = Ложь;
	Для Каждого Строка Из Результат.Данные.КодыМаркировки Цикл
		ПараметрыОтбора = Новый Структура("КодМаркировки", Строка.КодМаркировки);
		НайденнаяСтрока = СписокКодовМаркировки.НайтиСтроки(ПараметрыОтбора);
		Если НайденнаяСтрока.Количество() = 0 Тогда
			// хотя такого быть не может
			Продолжить;
		КонецЕсли;
		ЕстьПримечания = ЕстьПримечания ИЛИ ЗначениеЗаполнено(Строка.Примечание);
		ЗаполнитьЗначенияСвойств(НайденнаяСтрока[0], Строка, , "КодМаркировки");
		НайденнаяСтрока[0].ПроверкаСоответствияКодовМаркировкиПроводилась = Истина;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокКодовМаркировкиПримечание",
		"Видимость",
		ЕстьПримечания
	);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКодовМаркировки.Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКодовМаркировки.Соответствует");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКодовМаркировки.КодМаркировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	ЭлементУсловногоОформления.Оформление
		.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.СписокКодовМаркировкиОшибкиПриПроверкеШрифт);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКодовМаркировкиСостояниеКодаМаркировкиИБ.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКодовМаркировки.СостояниеКодаМаркировкиИБ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Выполните проверку'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКодовМаркировкиСостояниеКодаМаркировкиСМТ.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКодовМаркировки.СостояниеКодаМаркировкиСМТ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Выполните проверку'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере(Параметры, ЕстьПримечания)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокКодовМаркировкиВозврат",
		"Видимость",
		ПолучитьЗначениеПараметраСтруктуры(Параметры, "ЭтоКорректировка", Ложь)
	);
	
	ОтображатьСостояния = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ОтображатьСостояния", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокКодовМаркировкиСостояниеКодаМаркировкиИБ",
		"Видимость",
		ОтображатьСостояния
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокКодовМаркировкиСостояниеКодаМаркировкиСМТ",
		"Видимость",
		ОтображатьСостояния
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокКодовМаркировкиПримечание",
		"Видимость",
		ЕстьПримечания
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПроверкаКодовМаркировки",
		"Видимость",
		ОтображатьСостояния
	);
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоКодМаркировки(ШтрихКод, ТекстСообщения, Заменять = Истина)
	
	Результат = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(ШтрихКод, ТекстСообщения);
	
	Если Заменять Тогда
		ШтрихКод = Результат;
	КонецЕсли;
	
	Возврат ПустаяСтрока(ТекстСообщения);
	
КонецФункции // ЭтоКодМаркировки()

&НаКлиенте
Функция КорректныеКодыМаркировки()
	
	Отказ = Ложь;
	ЕстьПустыеСтроки = Ложь;
	
	Для Каждого ТекущаяСтрока Из СписокКодовМаркировки Цикл
		ТекстСообщения = "";
		Если ПустаяСтрока(ТекущаяСтрока.КодМаркировки) Тогда
			ЕстьПустыеСтроки = Истина;
			Продолжить;
		ИначеЕсли НЕ ЭтоКодМаркировки(ТекущаяСтрока.КодМаркировки, ТекстСообщения, Ложь) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект", Отказ);
		КонецЕсли;
		ПараметрыОтбора = Новый Структура("КодМаркировки", ТекущаяСтрока.КодМаркировки);
		НайденныеСтроки = СписокКодовМаркировки.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 1 Тогда
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"СписокКодовМаркировки",
				ТекущаяСтрока.НомерСтроки,
				"КодМаркировки"
			);
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Код маркировки <%1> дублируется в строках.'"), ТекущаяСтрока.КодМаркировки),
				,
				ПутьКТабличнойЧасти,
				"Объект",
				Отказ
			);
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПустыеСтроки Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Необходимо заполнить или удалить пустые строки.'"), , , , Отказ
		);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Функция СписокКодовМаркировки()
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РеквизитФормыВЗначение("СписокКодовМаркировки"));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНомераСтрок()
	
	Индекс = 1;
	Для Каждого Строка Из СписокКодовМаркировки Цикл
		Строка.НомерСтроки = Индекс;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьКодыМаркировкиДляПроверки()
	
	Результат = Новый Массив;
	Для Каждого Строка Из СписокКодовМаркировки Цикл
		Результат.Добавить(Строка.КодМаркировки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция КодМаркировкиБезСпецСимволов(ШтрихКод)
	
	Возврат СтрЗаменить(Штрихкод, Символ(29), "");
	
КонецФункции

#КонецОбласти
