// Модуль формы "Полная форма настроек отчета"

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НачалоПериода   = НачалоМесяца(ТекущаяДатаСеанса());
	КонецПериода    = КонецМесяца(НачалоПериода);
	
	ОтчетОбъект     = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("Вариант") Тогда 
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(Параметры.Вариант);
	КонецЕсли;
	
	Если Параметры.Свойство("КлючОбъекта") Тогда
		КлючОбъекта     = Параметры.КлючОбъекта;
		СхемаКомпоновки = Параметры.СхемаКомпоновки;
		Заголовок       = НСтр("ru = 'Настройки отчета:'") + " " + Параметры.ЗаголовокОтчета;
		ЗаголовокОтчета = Параметры.ЗаголовокОтчета;
		Если Параметры.КлючОбъекта = "Отчет.ПечатьРеестра" Тогда
			Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
		КонецЕсли;
	Иначе
		ОтчетОбъект           = РеквизитФормыВЗначение("Отчет");
		ОтчетМетаданные       = ОтчетОбъект.Метаданные();
		КлючОбъекта           = ОтчетМетаданные.ПолноеИмя();
		СхемаКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных;
		СхемаКомпоновки       = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
		
		Попытка
			ОтчетОбъект.ЗаполнитьНачальныеНастройки();
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения начальных настроек'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Заголовок = НСтр("ru = 'Настройки отчета:'") + " " + СокрЛП(ОтчетМетаданные.Представление());
		ЗаголовокОтчета = СокрЛП(ОтчетМетаданные.Представление());
		
	КонецЕсли;

	Если Параметры.Свойство("ПредставлениеСформировать") Тогда
		СформироватьОтчетЗаголовок = Параметры.ПредставлениеСформировать.Заголовок;
		СформироватьОтчетПодсказка = Параметры.ПредставлениеСформировать.Подсказка;
		Команды.СформироватьОтчет.Заголовок = СформироватьОтчетЗаголовок;
		Команды.СформироватьОтчет.Подсказка = СформироватьОтчетПодсказка;
	КонецЕсли;
	
	ОтчетыПлатформаСервер.ОбновитьСписокВариантовОтчета(ЭтотОбъект);
	
	Параметры.Свойство("НачалоПериода", НачалоПериода);
	Параметры.Свойство("КонецПериода",  КонецПериода);
	Параметры.Свойство("ВидПериода",    ВидПериода);
	
	Если Параметры.Свойство("СтартовыеНастройки") Тогда
		СтартовыеНастройки = Параметры.СтартовыеНастройки;
	КонецЕсли;
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, "Период" + ВидПериода);
	
	// Подготовим структуру параметров вывода
	ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();

КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить.
//
// Параметры:
//  ИмяСобытия - Строка       - Имя, идентифицирующее событие.
//  Параметр   - Произвольный - Параметр сообщения.
//  Источник   - Произвольный - Источник события.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ВариантыОтчетов" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			ПредставлениеТекущегоВарианта = Параметр.ВариантНаименование;
			КлючТекущегоВарианта          = Параметр.ВариантКлючВарианта;
		Иначе
			ОбновитьСписокВариантовОтчета();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

// Обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	Если НЕ ЗначениеЗаполнено(ВидПериода) Тогда
		ВидПериода = ВариантыОтчетовАльфаАвтоКлиентСервер.ПолучитьВидПериода(КлючОбъекта, КлючТекущегоВарианта);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидПериода) Тогда
		ВидПериода = "Произвольный";
	КонецЕсли;
	
	ОбновитьНастройкиОтчета(Отчет.КомпоновщикНастроек.Настройки);
	ОтчетыПлатформаСервер.ОбновитьСписокВариантовОтчета(ЭтотОбъект);
	Заголовок = НСтр("ru = 'Настройки отчета:'") + " " + Заголовок;
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	
КонецПроцедуры // ПриЗагрузкеВариантаНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "Вариант периода".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ВариантПериодаПриИзменении(Элемент)
	
	КонецПериода = ВариантПериода;
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	ЗаполнитьПараметрыДанных();
	
КонецПроцедуры //ВариантПериодаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Начало периода".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ЗаполнитьПараметрыДанных();
	
КонецПроцедуры // НачалоПериодаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Конец периода".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ЗаполнитьПараметрыДанных();
	
КонецПроцедуры // КонецПериодаПриИзменении()

// Обработчик события возникающего на клиенте при активизации строки таблицы.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПриАктивизацииСтроки(Элемент)
	
	ЭлементСтруктуры = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
	ТипЭлемента = ТипЗнч(ЭлементСтруктуры);
	
	Если ТипЭлемента = Неопределено
		ИЛИ ТипЭлемента = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных")
		ИЛИ ТипЭлемента = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		
		ПоляГруппировкиНедоступны();
		ВыбранныеПоляНедоступны();
		ОтборНедоступен();
		ПорядокНедоступен();
		УсловноеОформлениеНедоступно();
		ПараметрыВыводаНедоступны();
		
	ИначеЕсли ТипЭлемента = Тип("НастройкиКомпоновкиДанных")
		ИЛИ ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		
		ПоляГруппировкиНедоступны();
		
		ЛокальныеВыбранныеПоля = Истина;
		Элементы.ЛокальныеВыбранныеПоля.ТолькоПросмотр = Истина;
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.НастройкиВыбранныхПолей;
		
		ЛокальныйОтбор = Истина;
		Элементы.ЛокальныйОтбор.ТолькоПросмотр = Истина;
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.НастройкиОтбора;
		
		ЛокальныйПорядок = Истина;
		Элементы.ЛокальныйПорядок.ТолькоПросмотр = Истина;
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.НастройкиПорядка;
		
		ЛокальноеУсловноеОформление = Истина;
		Элементы.ЛокальноеУсловноеОформление.ТолькоПросмотр = Истина;
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.НастройкиУсловногоОформления;
		
		ЛокальныеПараметрыВывода = Истина;
		Элементы.ЛокальныеПараметрыВывода.ТолькоПросмотр = Истина;
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.НастройкиПараметровВывода;
		
	ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных")
		ИЛИ ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		Элементы.СтраницыПолейГруппировки.ТекущаяСтраница = Элементы.НастройкиПолейГруппировки;
		
		ВыбранныеПоляДоступны(ЭлементСтруктуры);
		ОтборДоступен(ЭлементСтруктуры);
		ПорядокДоступен(ЭлементСтруктуры);
		УсловноеОформлениеДоступно(ЭлементСтруктуры);
		ПараметрыВыводаДоступны(ЭлементСтруктуры);
		
	ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных")
		ИЛИ ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		ПоляГруппировкиНедоступны();
		ВыбранныеПоляДоступны(ЭлементСтруктуры);
		ОтборНедоступен();
		ПорядокНедоступен();
		УсловноеОформлениеДоступно(ЭлементСтруктуры);
		ПараметрыВыводаДоступны(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры //КомпоновщикНастроекНастройкиПриАктивизацииСтроки()

// Обработчик события возникающего на клиенте при активизации активизации поля, расположенного в колонке таблицы.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПриАктивизацииПоля(Элемент)
		
	Перем ВыбраннаяСтраница;
	
	Если Элементы.КомпоновщикНастроекНастройки.ТекущийЭлемент.Имя = "КомпоновщикНастроекНастройкиНаличиеВыбора" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаПолейВыбора;
		
	ИначеЕсли Элементы.КомпоновщикНастроекНастройки.ТекущийЭлемент.Имя = "КомпоновщикНастроекНастройкиНаличиеОтбора" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаОтбора;
		
	ИначеЕсли Элементы.КомпоновщикНастроекНастройки.ТекущийЭлемент.Имя = "КомпоновщикНастроекНастройкиНаличиеПорядка" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаПорядка;
		
	ИначеЕсли Элементы.КомпоновщикНастроекНастройки.ТекущийЭлемент.Имя = "КомпоновщикНастроекНастройкиНаличиеУсловногоОформления" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаУсловногоОформления;
		
	ИначеЕсли Элементы.КомпоновщикНастроекНастройки.ТекущийЭлемент.Имя = "КомпоновщикНастроекНастройкиНаличиеПараметровВывода" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаПараметровВывода;
		
	КонецЕсли;
	
	Если ВыбраннаяСтраница <> Неопределено Тогда
		
		Элементы.СтраницыНастроек.ТекущаяСтраница = ВыбраннаяСтраница;
		
	КонецЕсли;

КонецПроцедуры //КомпоновщикНастроекНастройкиПриАктивизацииПоля()

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПараметрыДанныхПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные.Параметр = "НачалоПериода"
		ИЛИ Элемент.ТекущиеДанные.Параметр = "КонецПериода" Тогда 
		Элементы.КомпоновщикНастроекНастройкиПараметрыДанныхЗначение.ТолькоПросмотр = Истина;
	Иначе 
		Элементы.КомпоновщикНастроекНастройкиПараметрыДанныхЗначение.ТолькоПросмотр = Ложь;
	КонецЕсли;
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Параметры".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПараметрыДанныхЗначениеПриИзменении(Элемент)
	
	Если НЕ Элементы.КомпоновщикНастроекНастройкиПараметрыДанных.ТекущиеДанные = Неопределено Тогда
		Если Элементы.КомпоновщикНастроекНастройкиПараметрыДанных.ТекущиеДанные.Параметр = "НачалоПериода" Тогда
			НачалоПериода = Элементы.КомпоновщикНастроекНастройкиПараметрыДанных.ТекущиеДанные.Дата;
		ИначеЕсли Элементы.КомпоновщикНастроекНастройкиПараметрыДанных.ТекущиеДанные.Параметр = "КонецПериода" Тогда
			КонецПериода = Элементы.КомпоновщикНастроекНастройкиПараметрыДанных.ТекущиеДанные.Дата;
		КонецЕсли;
		ПериодПроизвольный(Команды.ПериодПроизвольный);
	КонецЕсли;
	
КонецПроцедуры // КомпоновщикНастроекНастройкиПараметрыДанныхЗначениеПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Дата".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПараметрыДанныхДатаПриИзменении(Элемент)
	
	КомпоновщикНастроекНастройкиПараметрыДанныхЗначениеПриИзменении(Неопределено);

КонецПроцедуры // КомпоновщикНастроекНастройкиПараметрыДанныхДатаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Локальные выбранные поля".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЛокальныеВыбранныеПоляПриИзменении(Элемент)
	
	Если ЛокальныеВыбранныеПоля Тогда
		
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.НастройкиВыбранныхПолей;
		
	Иначе
		
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.ОтключенныеНастройкиВыбранныхПолей;
		ЭлементСтруктуры = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
		Отчет.КомпоновщикНастроек.Настройки.ОчиститьВыборЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры //ЛокальныеВыбранныеПоляПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Локальные отбор".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЛокальныйОтборПриИзменении(Элемент)
	
	Если ЛокальныйОтбор Тогда
		
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.НастройкиОтбора;
			
	Иначе
		
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.ОтключенныеНастройкиОтбора;

		ЭлементСтруктуры = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
		Отчет.КомпоновщикНастроек.Настройки.ОчиститьОтборЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры //ЛокальныйОтборПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Локальные порядок".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЛокальныйПорядокПриИзменении(Элемент)
	
	Если ЛокальныйПорядок Тогда
		
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.НастройкиПорядка;
		
	Иначе
		
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.ОтключенныеНастройкиПорядка;
		ЭлементСтруктуры = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
		Отчет.КомпоновщикНастроек.Настройки.ОчиститьПорядокЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры //ЛокальныйПорядокПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Локальное условное оформление".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЛокальноеУсловноеОформлениеПриИзменении(Элемент)
	
	Если ЛокальноеУсловноеОформление Тогда
		
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.НастройкиУсловногоОформления;
		
	Иначе
		
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.ОтключенныеНастройкиУсловногоОформления;
		ЭлементСтруктуры = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
		Отчет.КомпоновщикНастроек.Настройки.ОчиститьУсловноеОформлениеЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры //ЛокальноеУсловноеОформлениеПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Локальные параметры вывода".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЛокальныеПараметрыВыводаПриИзменении(Элемент)
	
	Если ЛокальныеПараметрыВывода Тогда
		
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.НастройкиПараметровВывода;
		
	Иначе
		
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.ОтключенныеНастройкиПараметровВывода;
		ЭлементСтруктуры = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
		Отчет.КомпоновщикНастроек.Настройки.ОчиститьПараметрыВыводаЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры //ЛокальныеПараметрыВыводаПриИзменении()

// Обработчик события возникающего на клиенте при нажатии на надпись "Переход к выбранным полям отчета".
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПерейтиКОтчету(Элемент)
	
	ЭлементСтруктуры = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
	НастройкиЭлемента =  Отчет.КомпоновщикНастроек.Настройки.НастройкиЭлемента(ЭлементСтруктуры);
	Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока = Отчет.КомпоновщикНастроек.Настройки.ПолучитьИдентификаторПоОбъекту(НастройкиЭлемента);
	
КонецПроцедуры //ПерейтиКОтчету()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего при при выборе варианта отчета в контексте сервера.
//
// Параметры:
//  ИмяВарианта - Строка - Имя выбранного варианта отчета.
//
&НаСервере
Процедура ВыбратьВариантНаСервере(ИмяВарианта)
	
	ОтчетыПлатформаСервер.УстановитьЗаголовокВарианта(ЭтотОбъект, ИмяВарианта);
	Заголовок = НСтр("ru = 'Настройки отчета:'") + " " + Заголовок;
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(СхемаКомпоновки);
	
	ВидПериода = ВариантыОтчетовАльфаАвтоКлиентСервер.ПолучитьВидПериода(КлючОбъекта, КлючТекущегоВарианта);
	
	ТиповойВариантНастроек = СхемаКомпоновкиДанных.ВариантыНастроек.Найти(КлючТекущегоВарианта);
	СтруктураПериода = ВариантыОтчетовАльфаАвтоКлиентСервер.ПолучитьПериод(КлючОбъекта, КлючТекущегоВарианта);
	Если ТиповойВариантНастроек = Неопределено Тогда
		// Пользовательский вариант настроек
		Настройки = ВариантыОтчетовАльфаАвтоКлиентСервер.ПолучитьНастройки(КлючОбъекта, КлючТекущегоВарианта);
		Если НЕ Настройки = Неопределено Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
			ОбновитьНастройкиОтчета(Отчет.КомпоновщикНастроек.Настройки);
		КонецЕсли;
	Иначе
		Если КлючОбъекта = "Отчет.ПечатьРеестра" Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СтартовыеНастройки);
		Иначе
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ТиповойВариантНастроек.Настройки);
		КонецЕсли;
		ОбновитьНастройкиОтчета(Отчет.КомпоновщикНастроек.Настройки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПериода.НачалоПериода) И НЕ Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода")) = Неопределено Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала[СтруктураПериода.НачалоПериода]));
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураПериода.КонецПериода) И НЕ Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода")) = Неопределено Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала[СтруктураПериода.КонецПериода]));
	КонецЕсли;
	
	Если ВидПериода = "Произвольный" Тогда
		Для Каждого ТекущийПараметр Из Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
			
			ИмяПараметра = СокрЛП(ТекущийПараметр.Параметр);
			Если ИмяПараметра = "НачалоПериода" Тогда
				Если ЗначениеЗаполнено(ТекущийПараметр.Значение) Тогда
					НачалоПериода = ?(ТипЗнч(ТекущийПараметр.Значение) = Тип("Дата"),ТекущийПараметр.Значение,ТекущийПараметр.Значение.Дата);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если ИмяПараметра = "КонецПериода" Тогда
				Если ЗначениеЗаполнено(ТекущийПараметр.Значение) И ИмяПараметра = "КонецПериода" Тогда
					КонецПериода = ?(ТипЗнч(ТекущийПараметр.Значение) = Тип("Дата"),ТекущийПараметр.Значение,ТекущийПараметр.Значение.Дата);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		Если НЕ Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода")) = Неопределено Тогда
			Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
		КонецЕсли;
		Если НЕ Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода")) = Неопределено Тогда
			Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода",КонецПериода);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ВыбратьВариантНаСервере()

// Обработчик события возникающего на клиенте при выборе варианта отчета.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ВыбратьВариант(Команда)
	
	ИмяВарианта = СтрЗаменить(Команда.Имя, "ВыбратьВариант", "");
	
	ВариантНастроек = ТаблицаВариантов.НайтиСтроки(Новый Структура("Имя", ИмяВарианта));
	Если ВариантНастроек.Количество()>0 Тогда
		КлючТекущегоВарианта          = ВариантНастроек[0].Идентификатор;
		ПредставлениеТекущегоВарианта = ВариантНастроек[0].Представление;
	КонецЕсли;
	
	ВыбратьВариантНаСервере(ИмяВарианта);
	
КонецПроцедуры //Подключаемый_ВыбратьВариант()

// Обработчик события возникающего на клиенте при выполнении команды "Сформировать".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Если КлючОбъекта = "Отчет.ПечатьРеестра" Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.Настройки);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КлючВарианта",          СокрЛП(КлючТекущегоВарианта));
	СтруктураПараметров.Вставить("ПредставлениеВарианта", СокрЛП(ПредставлениеТекущегоВарианта));
	СтруктураПараметров.Вставить("Вариант",               ОтчетыПлатформаВызовСервера.КомпоновщикПолучитьНастройки(Отчет.КомпоновщикНастроек));
	СтруктураПараметров.Вставить("НачалоПериода",         НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода",          КонецДня(КонецПериода));
	СтруктураПараметров.Вставить("ВидПериода",            ВидПериода);
		
	Закрыть(СтруктураПараметров);
	
КонецПроцедуры //СформироватьОтчет()

// Обработчик события возникающего на клиенте при выполнении команды "Период произвольный".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодПроизвольный(Команда)
	
	ВидПериода = "Произвольный";
	
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	
	ВидимостьПериода();
	
КонецПроцедуры //ПериодПроизвольный()

// Обработчик события возникающего на клиенте при выполнении команды "Период день".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодДень(Команда)
	
	ВидПериода    = "День";
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	
	ВидимостьПериода();
	ЗаполнитьПараметрыДанных();
	
КонецПроцедуры //ПериодДень()

// Обработчик события возникающего на клиенте при выполнении команды "Период неделя".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодНеделя(Команда)
	
	ВидПериода    = "Неделя";
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	
	ВидимостьПериода();
	ЗаполнитьПараметрыДанных();
	
КонецПроцедуры //ПериодНеделя()

// Обработчик события возникающего на клиенте при выполнении команды "Период месяц".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодМесяц(Команда)
	
	ВидПериода    = "Месяц";
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	
	ВидимостьПериода();
	ЗаполнитьПараметрыДанных();
	
КонецПроцедуры //ПериодМесяц()

// Обработчик события возникающего на клиенте при выполнении команды "Период квартал".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодКвартал(Команда)
	
	ВидПериода    = "Квартал";
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	
	ВидимостьПериода();
	ЗаполнитьПараметрыДанных();
	
КонецПроцедуры // ПериодКвартал()

// Обработчик события возникающего на клиенте при выполнении команды "Период год".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодГод(Команда)
	
	ВидПериода    = "Год";
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	
	ВидимостьПериода();
	ЗаполнитьПараметрыДанных();
	
КонецПроцедуры // ПериодГод()

// Обработчик события возникающего на клиенте при выполнении команды "Период назад".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодНазад(Команда)
	
	Направление = -1;
	ОтчетыПлатформаКлиентСервер.СместитьПериод(ЭтотОбъект, Направление);
	ЗаполнитьПараметрыДанных();
		
КонецПроцедуры // ПериодНазад()

// Обработчик события возникающего на клиенте при выполнении команды "Период вперед".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодВперед(Команда)
	
	Направление = +1;
	ОтчетыПлатформаКлиентСервер.СместитьПериод(ЭтотОбъект, Направление);
	ЗаполнитьПараметрыДанных();	

КонецПроцедуры //ПериодВперед()

// Обработчик события возникающего на клиенте при выполнении команды "Режим пользователя".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура РежимПользователя(Команда)
	
	ОткрытьФормуНастроек();
	
КонецПроцедуры //РежимПользователя()

// Обработчик события возникающего на клиенте при выполнении команды "Отправить по электронной почте".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	ОтправитьОтчетыПоПочте();
	
КонецПроцедуры // ОтправитьПоЭлектроннойПочте()

// Обработчик события возникающего при выполнении команды "Загрузить настройки" в контексте сервера.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаСервере
Процедура ЗагрузитьНастройкиНаСервере(ТекстXML)
	
	НастройкиОтчета = ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекстXML);
	
	Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	ОбновитьНастройкиОтчета(Отчет.КомпоновщикНастроек.Настройки);
	
КонецПроцедуры //ЗагрузитьНастройкиНаСервере()

// Обработчик события возникающего на клиенте при выполнении команды "Загрузить настройки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.МножественныйВыбор = Ложь;
	Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Все файлы (*.%1)|*.%1'"), "xml", "xml");
	ВыборФайла.Фильтр = Фильтр;
	
	ДополнительныеПараметры = Новый Структура("ВыборФайла", ВыборФайла);
	
	ВыборФайла.Показать(Новый ОписаниеОповещения("ЗагрузитьНастройкиПродолжение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры // ЗагрузитьНастройки()

&НаКлиенте
Процедура ЗагрузитьНастройкиПродолжение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборФайла = ДополнительныеПараметры.ВыборФайла;
	
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ТД = Новый ТекстовыйДокумент;
	ТД.НачатьЧтение(
		Новый ОписаниеОповещения("ЗагрузитьНастройкиЗавершение", ЭтотОбъект, Новый Структура("ТД", ТД)),
		ВыборФайла.ПолноеИмяФайла,
		"UTF-8");

КонецПроцедуры // ЗагрузитьНастройкиПродолжение()

&НаКлиенте
Процедура ЗагрузитьНастройкиЗавершение(ДополнительныеПараметры) Экспорт
	
	ТД = ДополнительныеПараметры.ТД;
	
	ТекстXML = ТД.ПолучитьТекст();
	
	ЗагрузитьНастройкиНаСервере(ТекстXML);
	
КонецПроцедуры // ЗагрузитьНастройкиЗавершение()

// Обработчик события возникающего при выполнении команды "Выгрузить настройки" в контексте сервера.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаСервере
Функция ВыгрузитьНастройкиНаСервере()
	
	ТекстXML = ОбщегоНазначения.ЗначениеВСтрокуXML(Отчет.КомпоновщикНастроек.Настройки);
	
	Возврат ТекстXML;
	
КонецФункции //ВыгрузитьНастройкиНаСервере()

// Обработчик события возникающего на клиенте при выполнении команды "Выгрузить настройки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ВыгрузитьНастройки(Команда)
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.МножественныйВыбор = Ложь;
	Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Все файлы (*.%1)|*.%1'"), "xml", "xml");
	ВыборФайла.Фильтр = Фильтр;
	
	ДополнительныеПараметры = Новый Структура("ВыборФайла", ВыборФайла);
	
	ВыборФайла.Показать(Новый ОписаниеОповещения("ВыгрузитьНастройкиЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры // ВыгрузитьНастройки()

&НаКлиенте
Процедура ВыгрузитьНастройкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборФайла = ДополнительныеПараметры.ВыборФайла;
	
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстXML = ВыгрузитьНастройкиНаСервере();
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(ТекстXML);
	ТД.НачатьЗапись(, ВыборФайла.ПолноеИмяФайла, "UTF-8");

КонецПроцедуры // ВыгрузитьНастройкиЗавершение()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

// Настраивает заголовок подменю периода, формат отображения периода и видимость полей периода.
//
&НаСервере
Процедура ВидимостьПериода()
	
	ОтчетыПлатформаСервер.ВидимостьПериода(ЭтотОбъект);
	
КонецПроцедуры //ВидимостьПериода()

// Настраивает дату начала и окончания периода.
//
&НаКлиенте
Процедура ЗаполнитьПараметрыДанных()
	
	Если ЗначениеЗаполнено(НачалоПериода) И НЕ Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода")) = Неопределено Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериода) И НЕ Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода")) = Неопределено Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", КонецПериода);
	КонецЕсли;
		
КонецПроцедуры //ЗаполнитьПараметрыДанных()

// Обновляет список вариантов отчета.
//
&НаСервере
Процедура ОбновитьСписокВариантовОтчета()
	
	ОтчетыПлатформаСервер.ОбновитьСписокВариантовОтчета(ЭтотОбъект);
	Заголовок = НСтр("ru = 'Настройки отчета:'") + " " + Заголовок;
	
КонецПроцедуры //ОбновитьСписокВариантовОтчета()

// Обновляет настройки отчета.
//
&НаСервере
Процедура ОбновитьНастройкиОтчета(Настройки)
	
	Для Каждого ТекущийПараметр Из Настройки.ПараметрыДанных.Элементы Цикл
		
		ИмяПараметра = СокрЛП(ТекущийПараметр.Параметр);
		Если ИмяПараметра = "НачалоПериода" Тогда
			ЕстьНачалоПериода = ТекущийПараметр.Использование;
		ИначеЕсли ИмяПараметра = "КонецПериода" ИЛИ ИмяПараметра = "Период" ИЛИ ИмяПараметра = "ПериодГраница" Тогда
			ЕстьКонецПериода = ТекущийПараметр.Использование;
		КонецЕсли;
		
	КонецЦикла;
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, "Период"+ВидПериода);
	
	ВидимостьПериода();
	
КонецПроцедуры //ОбновитьНастройкиОтчета()

// Подготавливает параметры открытия, и вызывает упрощенную форму настроек отчета.
//
&НаКлиенте
Процедура ОткрытьФормуНастроек()
	
	Если КлючОбъекта = "Отчет.ПечатьРеестра" Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.Настройки);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КлючОбъекта",           КлючОбъекта);
	СтруктураПараметров.Вставить("СхемаКомпоновки",       СхемаКомпоновки);
	СтруктураПараметров.Вставить("ЗаголовокОтчета",       ЗаголовокОтчета);
	СтруктураПараметров.Вставить("КлючВарианта",          СокрЛП(КлючТекущегоВарианта));
	СтруктураПараметров.Вставить("ПредставлениеВарианта", СокрЛП(ПредставлениеТекущегоВарианта));
	СтруктураПараметров.Вставить("Вариант",               ОтчетыПлатформаВызовСервера.КомпоновщикПолучитьНастройки(Отчет.КомпоновщикНастроек));
	СтруктураПараметров.Вставить("НачалоПериода",         НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода",          КонецДня(КонецПериода));
	СтруктураПараметров.Вставить("ВидПериода",            ВидПериода);
	СтруктураПараметров.Вставить("ПредставлениеСформировать", Новый Структура("Заголовок, Подсказка",
		СформироватьОтчетЗаголовок, СформироватьОтчетПодсказка));
	
	ОписаниеОповещенияИзмененияНастроек = Новый ОписаниеОповещения("Подключаемый_ОповещениеИзмененияНастроек", ВладелецФормы);
	
	ОткрытьФорму(СтрЗаменить(ИмяФормы, ".ФормаВарианта", ".ФормаНастроек"), СтруктураПараметров, ВладелецФормы,,,, ОписаниеОповещенияИзмененияНастроек, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ЭтотОбъект.ВариантМодифицирован = Ложь;
	
	Закрыть();
	
КонецПроцедуры //ОткрытьФормуНастроек()

// Обработчик события возникающего на клиенте при выполнении команды "Отправить".
//
&НаКлиенте
Процедура ОтправитьОтчетыПоПочте()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОтправитьНастройкиОтчетаПоПочтеНастройкаУчетнойЗаписиПредложена", ЭтотОбъект);
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		МодульРаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры // ОтправитьОтчетыПоПочте()

&НаСервере
Функция ПолучениеВыгрузкиНастроекОтчета()
	
	Результат = Новый Массив;
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	
	ТекстXML = ВыгрузитьНастройкиНаСервере();
	ПредставлениеФайла = НСтр("ru = 'Настройки отчета'") + " "
		+ СтрЗаменить(Заголовок, НСтр("ru = 'Настройки отчета:'") + " ", "") +"'.xml";
	ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ПредставлениеФайла;
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(ТекстXML);
	ТД.Записать(ПолноеИмяФайла, КодировкаТекста.UTF8);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Представление", ПредставлениеФайла);
	ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
	
	Результат.Добавить(ОписаниеФайла);
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции // ПолучениеВыгрузкиНастроек()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  УчетнаяЗаписьНастроена       - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОтправитьНастройкиОтчетаПоПочтеНастройкаУчетнойЗаписиПредложена(УчетнаяЗаписьНастроена, ДополнительныеПараметры) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	СписокВложений = ПолучениеВыгрузкиНастроекОтчета();
	
	ПараметрыОтправки = ПараметрыВывода.ПараметрыОтправки;
	Получатели = ПараметрыОтправки.Получатель;
	
	ПараметрыНовогоПисьма = Новый Структура;
	ПараметрыНовогоПисьма.Вставить("Получатель", Получатели);
	ПараметрыНовогоПисьма.Вставить("Тема", ПараметрыОтправки.Тема);
	ПараметрыНовогоПисьма.Вставить("Текст", ПараметрыОтправки.Текст);
	ПараметрыНовогоПисьма.Вставить("Вложения", СписокВложений);
	ПараметрыНовогоПисьма.Вставить("УдалятьФайлыПослеОтправки", Истина);
	
	МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
	МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыНовогоПисьма);
	
КонецПроцедуры // Подключаемый_ОтправитьНастройкиОтчетаПоПочтеНастройкаУчетнойЗаписиПредложена()

// Производит настройку параметров отображения страниц.
//
&НаКлиенте
Процедура ПоляГруппировкиНедоступны()
	
	Элементы.СтраницыПолейГруппировки.ТекущаяСтраница = Элементы.НедоступныеНастройкиПолейГруппировки;
	
КонецПроцедуры //ПоляГруппировкиНедоступны()

// Производит настройку параметров отображения страниц.
//
&НаКлиенте
Процедура ВыбранныеПоляНедоступны()
	
	ЛокальныеВыбранныеПоля = Ложь;
	Элементы.ЛокальныеВыбранныеПоля.ТолькоПросмотр = Истина;
	Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.НедоступныеНастройкиВыбранныхПолей;
	
КонецПроцедуры //ВыбранныеПоляНедоступны()

// Производит настройку параметров отображения страниц.
//
&НаКлиенте
Процедура ОтборНедоступен()
	
	ЛокальныйОтбор = Ложь;
	Элементы.ЛокальныйОтбор.ТолькоПросмотр = Истина;
	Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.НедоступныеНастройкиОтбора;
	
КонецПроцедуры //ОтборНедоступен()

// Производит настройку параметров отображения страниц.
//
&НаКлиенте
Процедура ПорядокНедоступен()
	
	ЛокальныйПорядок = Ложь;
	Элементы.ЛокальныйПорядок.ТолькоПросмотр = Истина;
	Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.НедоступныеНастройкиПорядка;
	
КонецПроцедуры //ПорядокНедоступен()

// Производит настройку параметров отображения страниц.
//
&НаКлиенте
Процедура УсловноеОформлениеНедоступно()
	
	ЛокальноеУсловноеОформление = Ложь;
	Элементы.ЛокальноеУсловноеОформление.ТолькоПросмотр = Истина;
	Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.НедоступныеНастройкиУсловногоОформления;
	
КонецПроцедуры //УсловноеОформлениеНедоступно()

// Производит настройку параметров отображения страниц.
//
&НаКлиенте
Процедура ПараметрыВыводаНедоступны()
	
	ЛокальныеПараметрыВывода = Ложь;
	Элементы.ЛокальныеПараметрыВывода.ТолькоПросмотр = Истина;
	Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.НедоступныеНастройкиПараметровВывода;
	
КонецПроцедуры //ПараметрыВыводаНедоступны()

// Производит настройку параметров отображения страниц.
//
&НаКлиенте
Процедура ВыбранныеПоляДоступны(ЭлементСтруктуры)
	
	Если Отчет.КомпоновщикНастроек.Настройки.НаличиеВыбораУЭлемента(ЭлементСтруктуры) Тогда
		ЛокальныеВыбранныеПоля = Истина;
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.НастройкиВыбранныхПолей;
	Иначе
		ЛокальныеВыбранныеПоля = Ложь;
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.ОтключенныеНастройкиВыбранныхПолей;
	КонецЕсли;
		
	Элементы.ЛокальныеВыбранныеПоля.ТолькоПросмотр = Ложь;
	
КонецПроцедуры //ВыбранныеПоляДоступны()

// Производит настройку параметров отображения страниц.
//
&НаКлиенте
Процедура ОтборДоступен(ЭлементСтруктуры)
	
	Если Отчет.КомпоновщикНастроек.Настройки.НаличиеОтбораУЭлемента(ЭлементСтруктуры) Тогда
		ЛокальныйОтбор = Истина;
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.НастройкиОтбора;
	Иначе
		ЛокальныйОтбор = Ложь;
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.ОтключенныеНастройкиОтбора;
	КонецЕсли;
	
	Элементы.ЛокальныйОтбор.ТолькоПросмотр = Ложь;
	
КонецПроцедуры //ОтборДоступен()

// Производит настройку параметров отображения страниц.
//
&НаКлиенте
Процедура ПорядокДоступен(ЭлементСтруктуры)
	
	Если Отчет.КомпоновщикНастроек.Настройки.НаличиеПорядкаУЭлемента(ЭлементСтруктуры) Тогда
		ЛокальныйПорядок = Истина;
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.НастройкиПорядка;
	Иначе
		ЛокальныйПорядок = Ложь;
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.ОтключенныеНастройкиПорядка;
	КонецЕсли;
	
	Элементы.ЛокальныйПорядок.ТолькоПросмотр = Ложь;
	
КонецПроцедуры //ПорядокДоступен()

// Производит настройку параметров отображения страниц.
//
&НаКлиенте
Процедура УсловноеОформлениеДоступно(ЭлементСтруктуры)
	
	Если Отчет.КомпоновщикНастроек.Настройки.НаличиеУсловногоОформленияУЭлемента(ЭлементСтруктуры) Тогда
		ЛокальноеУсловноеОформление = Истина;
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.НастройкиУсловногоОформления;
	Иначе
		ЛокальноеУсловноеОформление = Ложь;
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.ОтключенныеНастройкиУсловногоОформления;
	КонецЕсли;
	
	Элементы.ЛокальноеУсловноеОформление.ТолькоПросмотр = Ложь;
	
КонецПроцедуры //УсловноеОформлениеДоступно()

// Производит настройку параметров отображения страниц.
//
&НаКлиенте
Процедура ПараметрыВыводаДоступны(ЭлементСтруктуры)
	
	Если Отчет.КомпоновщикНастроек.Настройки.НаличиеПараметровВыводаУЭлемента(ЭлементСтруктуры) Тогда
		ЛокальныеПараметрыВывода = Истина;
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.НастройкиПараметровВывода;
	Иначе
		ЛокальныеПараметрыВывода = Ложь;
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.ОтключенныеНастройкиПараметровВывода;
	КонецЕсли;
	
	Элементы.ЛокальныеПараметрыВывода.ТолькоПросмотр = Ложь;
	
КонецПроцедуры //ПараметрыВыводаДоступны()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Результат               - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаСохраненияВарианта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеТекущегоВарианта = Результат.ВариантНаименование;
	КлючТекущегоВарианта          = Результат.ВариантКлючВарианта;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
	   И НЕ ОтчетыПлатформаВызовСервера.ДействиеОтбораВозможноВыполнить(ТекущиеДанные.ЛевоеЗначение) Тогда
	   	СтандартнаяОбработка = Ложь;
	   	ВыбраннаяСтрока = Неопределено;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
	   И НЕ ОтчетыПлатформаВызовСервера.ДействиеОтбораВозможноВыполнить(ТекущиеДанные.ЛевоеЗначение) Тогда
	   	Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
	   И НЕ ОтчетыПлатформаВызовСервера.ДействиеОтбораВозможноВыполнить(ТекущиеДанные.ЛевоеЗначение) Тогда
	   	Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ


