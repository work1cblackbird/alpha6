///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ЗагружатьРасширенияКонфигурации.Видимость = Не РаботаВМоделиСервиса.РазделениеВключено();
	
	ПараметрыПараллельнойЗагрузки = ВыгрузкаЗагрузкаДанныхСлужебный.ПараметрыПараллельнойВыгрузкиЗагрузкиДанных();
	
	Если ПараметрыПараллельнойЗагрузки.ДостпноИспользование Тогда
		КоличествоЗаданийЗагрузкиДанных = ПараметрыПараллельнойЗагрузки.КоличествоПотоков;
	Иначе
		КоличествоЗаданийЗагрузкиДанных = 1;
		Элементы.ГруппаПараллельнаяЗагрузка.Видимость = Ложь;
	КонецЕсли;
	
	ОбработатьПрерваннуюПроцедуруЗагрузки();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ХешСуммаФайла) Тогда
		ОткрытьВыборФайла(
			НСтр("ru = 'Для продолжения необходимо повторно загрузить файл'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Или Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Прервать загрузку данных?'");
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса,
		РежимДиалогаВопрос.ОКОтмена,,
		КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПерезапуститьПрограммуПриЗакрытии Тогда
		ПерезапуститьПрограмму();
	Иначе
		ВыгрузкаЗагрузкаДанныхКлиент.ПоказатьДиалогПрерваннойЗагрузкиПриНеобходимости();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОткрытьФормуАктивныхПользователей(Элемент)
	
	ОткрытьФорму("Обработка.АктивныеПользователи.Форма.АктивныеПользователи");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСКаркасамиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСправкуФормы();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияБезКаркасовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСправкуФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПродолжить(Команда)

	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаОсновная Тогда
		ОткрытьВыборФайла(
			НСтр("ru = 'Загрузка файла'"));
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРасширения Тогда
		ПроверкаРежимаВыгрузкиДляТехническойПоддержки();
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОшибкиПредупреждения Тогда
		Закрыть();
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПерезапуститьПрограмму()
	ПрекратитьРаботуСистемы(Истина);
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПредупрежденийПоРасширениям(Расширения)
	
	ОтображатьБезКаркасов = Расширения.БезКаркасов.Количество() > 0;
	Элементы.ДекорацияБезКаркасов.Видимость = ОтображатьБезКаркасов;
	Элементы.ДекорацияБезКаркасовНиз.Видимость = ОтображатьБезКаркасов;
	Элементы.ГруппаСписокБезКаркасов.Видимость = ОтображатьБезКаркасов;
	Если Расширения.БезКаркасов.Количество() > 0 Тогда
		
		Элементы.ДекорацияСписокБезКаркасов.Заголовок = СтрСоединить(Расширения.БезКаркасов, Символы.ПС);
		
	КонецЕсли;
		
	ОтображатьСКаркасами = Расширения.СКаркасами.Количество() > 0;
	Элементы.ДекорацияСКаркасами.Видимость = ОтображатьСКаркасами;
	Элементы.ГруппаСписокКаркасов.Видимость = ОтображатьСКаркасами;
	Если Расширения.СКаркасами.Количество() > 0 Тогда
		
		Элементы.ДекорацияСписокКаркасов.Заголовок = СтрСоединить(Расширения.СКаркасами, Символы.ПС);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборФайла(Заголовок)

	ИмяФайлаВременногоХранилища = ПолучитьФайлВременногоХранилища(УникальныйИдентификатор);

	ПараметрыПередачи = ФайлыБТСКлиент.ПараметрыПомещенияФайла();
	ПараметрыПередачи.ИмяФайлаИлиАдрес = ИмяФайлаВременногоХранилища;
	ПараметрыПередачи.ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ОбработатьПомещениеФайла", ЭтотОбъект);
	ПараметрыПередачи.БлокируемаяФорма = ЭтотОбъект;
	ПараметрыПередачи.ЗаголовокДиалогаВыбора = Заголовок;
	ПараметрыПередачи.ФильтрДиалогаВыбора = СтрШаблон(НСтр("ru = 'Архивы %1'"), "(*.zip)|*.zip");
	ПараметрыПередачи.ИмяФайлаДиалогаВыбора = ВыгрузкаЗагрузкаДанныхКлиентСервер.ИмяФайлаВыгрузкиДанных();

	ФайлыБТСКлиент.ПоместитьФайлИнтерактивно(ПараметрыПередачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПомещениеФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаВременногоХранилища);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ХешСуммаФайла) Тогда
		
		Если ХешСуммаВременногоФайлаСовпадает(ИмяФайлаВременногоХранилища, ХешСуммаФайла) Тогда
			ЗапуститьЗагрузкуДанных();	
		Иначе
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодтверждениеЗагрузкиДругогоФайлаЗавершение", ЭтотОбъект);
		
			ПоказатьВопрос(ОписаниеОповещения,
				НСтр("ru = 'Файл данных не совпадает с тем из которого загрузка запускалась ранее. Продолжение загрузки будет не возможно и она будет запущена с начала.
				|Продолжить?'"),
				РежимДиалогаВопрос.ОКОтмена,,
				КодВозвратаДиалога.Отмена);
		
		КонецЕсли;
		
	Иначе		
		
		ОбработатьПодтверждениеФайла();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗагрузкиДругогоФайлаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ХешСуммаФайла = Неопределено;
	Элементы.ЗагружатьРасширенияКонфигурации.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	ОбработатьПодтверждениеФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодтверждениеФайла() Экспорт
	
	РезультатПроверки = ПроверитьКонфигурациюВыгрузки(ИмяФайлаВременногоХранилища);
	
	Если Не РезультатПроверки.Успех Тогда

		УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаВременногоХранилища);

		ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		ПараметрыВопроса.Картинка = БиблиотекаКартинок.Ошибка32;
		ПараметрыВопроса.Заголовок = НСтр("ru = 'Ошибка загрузки файла'");

		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
			Неопределено,
			РезультатПроверки.ТекстОшибкиПроверки,
			РежимДиалогаВопрос.ОК,
			ПараметрыВопроса);

		Возврат;
	КонецЕсли;

	Если ФайлДанныхСодержитПоставляемыеРасширения() Тогда

		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасширения;

	Иначе

		ПроверкаРежимаВыгрузкиДляТехническойПоддержки();

	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьКонфигурациюВыгрузки(ИмяФайлаВременногоХранилища)
	
	ИмяФайлаНаСервере = ФайлыБТС.ПолноеИмяФайлаВременногоХранилища(ИмяФайлаВременногоХранилища);	
	
	ЧтениеДанныхАрхива = Новый ЧтениеZipФайла(ИмяФайлаНаСервере);

	Попытка
		РезультатПроверки = ПроверитьКонфигурациюВыгрузкиВнутр(ЧтениеДанныхАрхива)
	Исключение
		ЧтениеДанныхАрхива.Закрыть();
		ВызватьИсключение;
	КонецПопытки;
	
	ЧтениеДанныхАрхива.Закрыть();
		
	Возврат РезультатПроверки;

КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьКонфигурациюВыгрузкиВнутр(ЧтениеДанныхАрхива)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", Истина);
	СтруктураВозврата.Вставить("ТекстОшибкиПроверки", "");

	ПутьКФайлуСодержимого = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, "PackageContents.xml");
	Если ПутьКФайлуСодержимого = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'В архиве отсутствует файл содержимого (%1)'"), "PackageContents.xml");
	КонецЕсли;

	ТекстИсключенияОтсутствиеИнформацииОВыгрузке = СтрШаблон(
		НСтр("ru = 'В архиве отсутствует файл информации о выгрузке (%1)'"), "DumpInfo.xml");
	ИмяФайлаИнформацииОВыгрузке = ПолучитьИмяФайлаПоДаннымСодержимого(
		ПутьКФайлуСодержимого, 
		ВыгрузкаЗагрузкаДанныхСлужебный.DumpInfo(), 
		Неопределено); 
	Если ИмяФайлаИнформацииОВыгрузке = Неопределено Тогда
		ВызватьИсключение ТекстИсключенияОтсутствиеИнформацииОВыгрузке;
	КонецЕсли;
	
	ПутьКФайлуИнформацииОВыгрузке = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, ИмяФайлаИнформацииОВыгрузке);
	Если ПутьКФайлуИнформацииОВыгрузке = Неопределено Тогда
		ВызватьИсключение ТекстИсключенияОтсутствиеИнформацииОВыгрузке;
	КонецЕсли;
	
	ИнформацияОВыгрузке =  ВыгрузкаЗагрузкаДанныхСлужебный.ПрочитатьОбъектXDTOИзФайла(
		ПутьКФайлуИнформацииОВыгрузке,
		ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "DumpInfo"));
	
	УдалитьФайлыВПопытке(ПутьКФайлуИнформацииОВыгрузке);
	
	//Проверка выполняется только между идентичными версиями конфигурации	
	Если ИнформацияОВыгрузке.Configuration.Name <> Метаданные.Имя 
		Или ИнформацияОВыгрузке.Configuration.Version <> Метаданные.Версия Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
		
	ИмяФайлаСхемыКонфигурации = ПолучитьИмяФайлаПоДаннымСодержимого(
		ПутьКФайлуСодержимого, 
		"CustomData", 
		"ConfigScheme"); 
	
	УдалитьФайлыВПопытке(ПутьКФайлуСодержимого);

	Если ИмяФайлаСхемыКонфигурации = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Конфигурация поддерживает проверку схемы данных, но файл схемы не найден в файле выгрузки.
					 | Структура файла выгрузки не соответствует ожидаемой.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение, , , ТекстПредупреждения);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ПутьКФайлуСхемыКонфигурацииВыгрузки = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, ИмяФайлаСхемыКонфигурации); 
	Если ПутьКФайлуСхемыКонфигурацииВыгрузки = Неопределено Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
		
	ДвоичныеДанныеСхемыКонфигурации = СхемаКонфигурации.ДвоичныеДанныеСхемы(Ложь, Ложь);	

	ХешированиеДанныхСхемыКонфигурации = Новый ХешированиеДанных(ХешФункция.CRC32);
	ХешированиеДанныхСхемыКонфигурации.Добавить(ДвоичныеДанныеСхемыКонфигурации);
	
	Если ХешированиеДанныхСхемыКонфигурации.ХешСумма = ХешСуммаФайла(ПутьКФайлуСхемыКонфигурацииВыгрузки) Тогда
		УдалитьФайлыВПопытке(ПутьКФайлуСхемыКонфигурацииВыгрузки);
		Возврат СтруктураВозврата;
	КонецЕсли;
	 	
	ОписанияРазличий = АнализСхемКонфигурации.ОписанияРазличийСхемКонфигураций(
		Новый ДвоичныеДанные(ПутьКФайлуСхемыКонфигурацииВыгрузки),
		ДвоичныеДанныеСхемыКонфигурации);
	
	УдалитьФайлыВПопытке(ПутьКФайлуСхемыКонфигурацииВыгрузки);
	
	Если ЗначениеЗаполнено(ОписанияРазличий) Тогда
		
		ЧастиТекстаОшибки = Новый Массив;	
		
		ЧастиТекстаОшибки.Добавить(НСтр("ru = 'Файл выгрузки не может быть загружен в информационную базу: его конфигурация отличается от конфигурации информационной базы. 
			|Для устранения различий необходимо обратиться к своей обслуживающей организации или администратору информационной базы.'"));		
		
		ЧастиТекстаОшибки.Добавить(Символы.ПС);
		ЧастиТекстаОшибки.Добавить(Символы.ПС);

		Для Каждого ОписанияРазличия Из ОписанияРазличий Цикл
			ЧастиТекстаОшибки.Добавить("● ");
			ЧастиТекстаОшибки.Добавить(ОписанияРазличия);
			ЧастиТекстаОшибки.Добавить(Символы.ПС);
		КонецЦикла;
		
		СтруктураВозврата.ТекстОшибкиПроверки = СтрСоединить(ЧастиТекстаОшибки);
		СтруктураВозврата.Успех = Ложь;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

&НаКлиенте
Процедура ПроверкаРежимаВыгрузкиДляТехническойПоддержки()
	
	Если ВыгрузкаВРежимеДляТехническойПоддержки(ИмяФайлаВременногоХранилища) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаРежимаВыгрузкиДляТехническойПоддержкиЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Файл данных создан в режиме выгрузки для технической поддержки.
      		|Приложение полученное из такой выгрузки предназначено только для целей тестирования и разбора проблем. Продолжить загрузку?'"),
			РежимДиалогаВопрос.ОКОтмена,,
			КодВозвратаДиалога.Отмена);
		
	Иначе		
		ЗапуститьЗагрузкуДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаРежимаВыгрузкиДляТехническойПоддержкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьЗагрузкуДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПрерваннуюПроцедуруЗагрузки()
		
	Если Не Параметры.ПрерванаПроцедураЗагрузки Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки
		= Константы.ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Получить().Получить();
		
	Если ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(
		ЭтотОбъект,
		ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки);	
	
	Элементы.ЗагружатьРасширенияКонфигурации.ОтображениеПредупрежденияПриРедактировании
		= ОтображениеПредупрежденияПриРедактировании.Отображать;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьЗагрузкуДанных()
	
	УстановитьМонопольныйРежимНаСервере();
	
	Попытка
		ЗапуститьЗагрузкуДанныхНаСервере();
	Исключение
		
		ОтменитьЗагрузкуНаСервере();
				
		ИнформацияОбОшибке = ИнформацияОбОшибке();
			
		ОбработатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ТекстОшибкиПредупреждения = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ПоказатьОшибкиПредупреждения(
			Истина,
			НСтр("ru = 'При запуске загрузки данных произошла ошибка:'"),
			НСтр("ru = 'Рекомендуется повторить попытку загрузки'"));
		
		Возврат;
		
	КонецПопытки;
	
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОжидание;
		
	ПодключитьОбработчикОжидания("ПроверитьГотовностьЗагрузки", 5);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьГотовностьЗагрузки()
	 
	Попытка
		СостояниеЗагрузки = СостояниеЗагрузки(ИдентификаторЗадания, ИдентификаторСостояния, АдресХранилища);
	Исключение
		
		ОтменитьЗагрузкуНаСервере();
			
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОтключитьОбработчикОжидания("ПроверитьГотовностьЗагрузки");
		
		ОбработатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ТекстОшибкиПредупреждения = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ПоказатьОшибкиПредупреждения(
			Истина,
			НСтр("ru = 'При загрузке данных произошла ошибка:'"),
			НСтр("ru = 'При продолжении будет предложено повторить попытку загрузки'"));
		
		Возврат;
		
	КонецПопытки;
	
	Если СостояниеЗагрузки.ПредставлениеСостояния <> Неопределено Тогда	
		ПредставлениеСостояния  = СостояниеЗагрузки.ПредставлениеСостояния
			+ Символы.ПС 
			+ ВыгрузкаЗагрузкаДанныхКлиентСервер.ПодсказкаДлительнойОперации();
	КонецЕсли;
						
	ПроцентЗавершения = СостояниеЗагрузки.ПроцентЗавершения;
	Элементы.ГруппаПроцентЗавершения.Видимость = СостояниеЗагрузки.ПроцентЗавершения <> Неопределено;
		
	Если Не СостояниеЗагрузки.Завершена Тогда 
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("ПроверитьГотовностьЗагрузки");	
		 
	ОбработатьРезультатЗагрузкиНаСервере();

	Если ЗначениеЗаполнено(ТекстОшибкиПредупреждения) Тогда
		
		ПерезапуститьПрограммуПриЗакрытии = Истина;
		ПоказатьОшибкиПредупреждения(
			Ложь,
			НСтр("ru = 'Загрузка данных завершена. В процессе загрузки получены предупреждения:'"),
			НСтр("ru = 'Подробная информация записана в журнал регистрации. При продолжении программа будет перезапущена'"));

	Иначе
		ПерезапуститьПрограмму();	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьОшибку(Знач ПодробноеПредставление)
	
	ШаблонЗаписиЖР = НСтр("ru = 'При загрузке данных произошла ошибка:
		|
		|-----------------------------------------
		|%1
		|-----------------------------------------'");
		
	ТекстЗаписиЖР = СтрШаблон(ШаблонЗаписиЖР, ПодробноеПредставление);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ТекстЗаписиЖР);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкиПредупреждения(Ошибка, Подсказка, Рекомендация)
	
	Элементы.ОшибкиПредупрежденияПодсказка.Заголовок = Подсказка;
	Элементы.ОшибкиПредупрежденияРекомендация.Заголовок = Рекомендация;
	
 	Элементы.Продолжить.Заголовок = "OK";
 	Элементы.Отмена.Видимость = Ложь;
 	 
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Низ;

	Если Ошибка Тогда
		Картинка = БиблиотекаКартинок.Ошибка32;	
	Иначе
		Картинка = БиблиотекаКартинок.Предупреждение32;	
	КонецЕсли;
	Элементы.ОшибкиПредупрежденияКартинка.Картинка = Картинка;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОшибкиПредупреждения; 
	
КонецПроцедуры

&НаСервереБезКонтекста																	
Функция СостояниеЗагрузки(ИдентификаторЗадания, ИдентификаторСостояния, АдресХранилища)
	
	СостояниеЗагрузки = Новый Структура();
	СостояниеЗагрузки.Вставить("Завершена", Ложь);
	СостояниеЗагрузки.Вставить("ПредставлениеСостояния", Неопределено);
	СостояниеЗагрузки.Вставить("ПроцентЗавершения", Неопределено);
			
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	ЗаданиеАктивно = Ложь;
			
	Если Задание = Неопределено Тогда
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если РезультатЗагрузки = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'При загрузке данных произошла ошибка - не найдено задание выполняющее загрузку.'");
		КонецЕсли;
	Иначе
		
		Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда		
			ЗаданиеАктивно = Истина;				
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			ОшибкаЗадания = Задание.ИнформацияОбОшибке;
			Если ОшибкаЗадания <> Неопределено Тогда
				ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ОшибкаЗадания);
			Иначе
				ВызватьИсключение
					НСтр("ru = 'При загрузке данных произошла ошибка - задание выполняющее загрузку завершилось с неизвестной ошибкой.'");
			КонецЕсли;
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			ВызватьИсключение НСтр("ru = 'При загрузке данных произошла ошибка - задание выполняющее загрузку было отменено администратором.'");
		КонецЕсли;
				
	КонецЕсли;
	
 	СостояниеЗагрузки.Завершена = Не ЗаданиеАктивно;
 				
	СостояниеВыгрузкиЗагрузкиОбластиДанных = ВыгрузкаЗагрузкаДанных.СостояниеВыгрузкиЗагрузкиОбластиДанных(
		ИдентификаторСостояния);	
				
	Если ЗначениеЗаполнено(СостояниеВыгрузкиЗагрузкиОбластиДанных) Тогда
		СостояниеЗагрузки.ПредставлениеСостояния = ВыгрузкаЗагрузкаДанных.ПредставлениеСостоянияВыгрузкиЗагрузкиОбластиДанных(
			СостояниеВыгрузкиЗагрузкиОбластиДанных);
		СостояниеЗагрузки.ПроцентЗавершения = ВыгрузкаЗагрузкаДанных.ПроцентЗавершенияВыгрузкиЗагрузкиОбластиДанных(
			СостояниеВыгрузкиЗагрузкиОбластиДанных);
	КонецЕсли;
 	
	Возврат СостояниеЗагрузки;

КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаВременногоХранилища)

	Если Не ЗначениеЗаполнено(ИмяФайлаВременногоХранилища) Тогда
		Возврат;
	КонецЕсли;
		
	ФайлыБТС.УдалитьФайлВременногоХранилища(ИмяФайлаВременногоХранилища);

КонецПроцедуры

&НаСервере
Функция ФайлДанныхСодержитПоставляемыеРасширения()
	
	ИмяФайлаНаСервере = ФайлыБТС.ПолноеИмяФайлаВременногоХранилища(ИмяФайлаВременногоХранилища);	
	
	ПутьКФайлуРасширений = ИзвлечьФайлИзZipАрхива(ИмяФайлаНаСервере, "Extensions.xml");
		
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуРасширений);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Data" Тогда
		УдалитьФайлыВПопытке(ПутьКФайлуРасширений);
		Возврат Ложь;
	КонецЕсли;
	
	МассивВерсий = Новый Массив;
	Расширения = Новый Структура("СКаркасами, БезКаркасов", Новый Массив, Новый Массив);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Extension" Тогда		
			Продолжить;	
		КонецЕсли;
		
		ИзменяетСтруктуруДанных = XMLЗначение(Тип("Булево"), ЧтениеXML.ЗначениеАтрибута("ModifiesDataStructure"));
		Наименование = XMLЗначение(Тип("Строка"), ЧтениеXML.ЗначениеАтрибута("Name"));
		
		Если НЕ ИзменяетСтруктуруДанных Тогда
			Продолжить;
		КонецЕсли;

		МассивВерсий.Добавить(Наименование);
		Если ЧтениеXML.ЗначениеАтрибута("IsFrame") <> Неопределено Тогда
			Если XMLЗначение(Тип("Булево"), ЧтениеXML.ЗначениеАтрибута("IsFrame")) = Истина Тогда
				Расширения.СКаркасами.Добавить(Наименование);
			Иначе
				Расширения.БезКаркасов.Добавить(Наименование);
			КонецЕсли;
		Иначе
			Расширения.БезКаркасов.Добавить(Наименование);
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьФайлыВПопытке(ПутьКФайлуРасширений);
	
	Если МассивВерсий.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастроитьВидимостьПредупрежденийПоРасширениям(Расширения);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьМонопольныйРежимНаСервере()
	
	РаботаВМоделиСервиса.УстановитьМонопольнуюБлокировку(ИспользоватьМногопоточность());
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьЗагрузкуДанныхНаСервере()
		
	Попытка
			
		ИмяФайлаНаСервере = ФайлыБТС.ПолноеИмяФайлаВременногоХранилища(ИмяФайлаВременногоХранилища);
		
		ВыгрузкаЗагрузкаОбластейДанных.ПроверитьВыгрузкаВАрхивеСовместимаСТекущейКонфигурацией(ИмяФайлаНаСервере);
		
		ВосстановитьРасширенияИнформационнойБазы(ИмяФайлаНаСервере);
		
		ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки = Новый Структура();
		ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Вставить(
			"ХешСуммаФайла",
			ХешСуммаФайла(ИмяФайлаНаСервере));
		ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Вставить(
			"ЗагружатьРасширенияКонфигурации",
			ЗагружатьРасширенияКонфигурации);
		ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Вставить(
			"КоличествоЗаданийЗагрузкиДанных",
			КоличествоЗаданийЗагрузкиДанных);
		
		Константы.ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Установить(
			Новый ХранилищеЗначения(ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки));	
		
		ИдентификаторСостояния = Новый УникальныйИдентификатор();
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		
		ПараметрыЗагрузки = Новый Структура();
		ПараметрыЗагрузки.Вставить("ИдентификаторСостояния", ИдентификаторСостояния);
		ПараметрыЗагрузки.Вставить("ПропуститьВосстановлениеРасширений", Истина);
		ПараметрыЗагрузки.Вставить("АдресХранилищаРезультата", АдресХранилища);
		ПараметрыЗагрузки.Вставить("КоличествоПотоков", КоличествоЗаданийЗагрузкиДанных);
			
		ПараметрыЗадания = Новый Массив();
		ПараметрыЗадания.Добавить(ИмяФайлаНаСервере);
		ПараметрыЗадания.Добавить(Истина);
		ПараметрыЗадания.Добавить(Истина);
		ПараметрыЗадания.Добавить(Неопределено);
		ПараметрыЗадания.Добавить(Неопределено);
		ПараметрыЗадания.Добавить(ПараметрыЗагрузки);
			
		ПредставлениеСостояния = ВыгрузкаЗагрузкаДанныхКлиентСервер.ПредставлениеСостоянияПодготовкиВыгрузкиЗагрузкиОбластиДанных(Истина) 
			+ Символы.ПС 
			+ ВыгрузкаЗагрузкаДанныхКлиентСервер.ПодсказкаДлительнойОперации();	
							 
		ФоновоеЗадание = РасширенияКонфигурации.ВыполнитьФоновоеЗаданиеСРасширениямиБазыДанных(
			"ВыгрузкаЗагрузкаОбластейДанных.ЗагрузитьТекущуюОбластьИзАрхива",
			ПараметрыЗадания);
		ИдентификаторЗадания = ФоновоеЗадание.УникальныйИдентификатор;
						
	Исключение
				
		РаботаВМоделиСервиса.СнятьМонопольнуюБлокировку(ИспользоватьМногопоточность());
		
		УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаВременногоХранилища);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьРасширенияИнформационнойБазы(ИмяФайлаНаСервере)
	
	ДанныеРасширений = Новый Структура();
		
	Если ЗагружатьРасширенияКонфигурации Тогда
		РасширенияДляВосстановления = РасширенияДляВосстановления(ИмяФайлаНаСервере);
		Если ЗначениеЗаполнено(РасширенияДляВосстановления) Тогда
			ДанныеРасширений.Вставить("РасширенияДляВосстановления", РасширенияДляВосстановления);
		КонецЕсли;
	КонецЕсли;
		
	КаркасыРасширенийДляВосстановления = КаркасыРасширенийДляВосстановления(ИмяФайлаНаСервере);
	Если ЗначениеЗаполнено(КаркасыРасширенийДляВосстановления) Тогда	
		ДанныеРасширений.Вставить("КаркасыРасширенийДляВосстановления", КаркасыРасширенийДляВосстановления);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеРасширений) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузкаЗагрузкаДанныхСлужебный.ВосстановитьРасширенияИнформационнойБазы(ДанныеРасширений);	
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция КаркасыРасширенийДляВосстановления(ИмяФайлаНаСервере)
	
	ЧтениеДанныхАрхива = Новый ЧтениеZipФайла(ИмяФайлаНаСервере);
	
	Попытка
		РасширенияДляВосстановления = КаркасыРасширенийДляВосстановленияВнутр(ЧтениеДанныхАрхива);
	Исключение
		ЧтениеДанныхАрхива.Закрыть();
		ВызватьИсключение;
	КонецПопытки;
	
	ЧтениеДанныхАрхива.Закрыть();
	
	Возврат РасширенияДляВосстановления; 
	
КонецФункции

&НаСервереБезКонтекста
Функция КаркасыРасширенийДляВосстановленияВнутр(ЧтениеДанныхАрхива)
	
	РасширенияДляВосстановления = Новый Массив;

	ПутьКФайлуРасширений = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, "Extensions.xml");
	Если ПутьКФайлуРасширений = Неопределено Тогда
		Возврат РасширенияДляВосстановления;
	КонецЕсли;

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуРасширений);
	ЧтениеXML.ПерейтиКСодержимому();

	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Data" Тогда
		УдалитьФайлыВПопытке(ПутьКФайлуРасширений);
		Возврат РасширенияДляВосстановления;
	КонецЕсли;

	Пока ЧтениеXML.Прочитать() Цикл

		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Extension" Тогда
			Продолжить;
		КонецЕсли;

		ИзменяетСтруктуруДанных = XMLЗначение(Тип("Булево"), ЧтениеXML.ЗначениеАтрибута("ModifiesDataStructure"));
		Наименование = XMLЗначение(Тип("Строка"), ЧтениеXML.ЗначениеАтрибута("Name"));
		АтрибутКаркас = ЧтениеXML.ЗначениеАтрибута("IsFrame");
		АтрибутИмяФайла = ЧтениеXML.ЗначениеАтрибута("FileName");
		Если Не ИзменяетСтруктуруДанных Или АтрибутКаркас = Неопределено Или АтрибутИмяФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ЭтоКаркас = XMLЗначение(Тип("Булево"), АтрибутКаркас);
		ИмяФайлаРасширения = XMLЗначение(Тип("Строка"), АтрибутИмяФайла);

		Если Не ЗначениеЗаполнено(ИмяФайлаРасширения) Или Не ЭтоКаркас Тогда
			Продолжить;
		КонецЕсли;

		ПутьКФайлуРасширения = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, ИмяФайлаРасширения);
		Если ПутьКФайлуРасширения = Неопределено Тогда
			ВызватьИсключение СтрШаблон(Нстр("ru = 'Не найден файл данных расширения %1'"), ИмяФайлаРасширения);
		КонецЕсли;

		РасширениеДляВосстановления = Новый Структура;
		РасширениеДляВосстановления.Вставить("Имя", Наименование);
		
		ДанныеФайлаПользовательскогоРасширения = Новый ДвоичныеДанные(ПутьКФайлуРасширения);
		РасширениеДляВосстановления.Вставить("Данные", ДанныеФайлаПользовательскогоРасширения);

		РасширенияДляВосстановления.Добавить(РасширениеДляВосстановления);

		УдалитьФайлыВПопытке(ПутьКФайлуРасширения);
		
	КонецЦикла;
	
	УдалитьФайлыВПопытке(ПутьКФайлуРасширений);
	
	Возврат РасширенияДляВосстановления;
	
КонецФункции


// Хеш сумма временного файла совпадает.
// 
// Параметры:
//  ИмяФайлаВременногоХранилища - Строка - Имя временного файла
//  ХешСуммаФайла - Число - Хеш сумма файла
// 
// Возвращаемое значение:
//  Булево - Хеш сумма временного файла совпадает
&НаСервереБезКонтекста
Функция ХешСуммаВременногоФайлаСовпадает(ИмяФайлаВременногоХранилища, ХешСуммаФайла)
		
	ПолноеИмяФайлаВСеансе = ФайлыБТС.ПолноеИмяФайлаВременногоХранилища(ИмяФайлаВременногоХранилища);

	Возврат ХешСуммаФайла(ПолноеИмяФайлаВСеансе) = ХешСуммаФайла;
	
КонецФункции

// Хеш сумма файла.
// 
// Параметры: 
//  ИмяФайла - Строка - Имя файла
// 
// Возвращаемое значение: 
//  Число - Хеш сумма файла
&НаСервереБезКонтекста
Функция ХешСуммаФайла(ИмяФайла)
			
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
	ХешированиеДанных.ДобавитьФайл(ИмяФайла);
	
	Возврат ХешированиеДанных.ХешСумма;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьФайлыВПопытке(ИмяПапкиИлиФайла)
	
	// @skip-check module-nstr-camelcase - ошибка проверки
	ИмяСобытияЖР = НСтр("ru = 'Удаление файла.Загрузка файла выгрузки'", ОбщегоНазначения.КодОсновногоЯзыка());
	ФайлыБТС.УдалитьФайлыВПопытке(ИмяПапкиИлиФайла, ИмяСобытияЖР);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасширенияДляВосстановления(ИмяФайлаНаСервере)

	ЧтениеДанныхАрхива = Новый ЧтениеZipФайла(ИмяФайлаНаСервере);

	Попытка
		РасширенияДляВосстановления = РасширенияДляВосстановленияВнутр(ЧтениеДанныхАрхива);
	Исключение
		ЧтениеДанныхАрхива.Закрыть();
		ВызватьИсключение;
	КонецПопытки;
	
	ЧтениеДанныхАрхива.Закрыть();
		
	Возврат РасширенияДляВосстановления;
КонецФункции

&НаСервереБезКонтекста
Функция РасширенияДляВосстановленияВнутр(ЧтениеДанныхАрхива)

	РасширенияДляВосстановления = Новый Массив;

	ТипУникальныйИдентификатор = Тип("УникальныйИдентификатор");

	ПутьКФайлуПользовательскихРасширений = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, "CustomExtensions.json");
	Если ПутьКФайлуПользовательскихРасширений = Неопределено Тогда
		Возврат РасширенияДляВосстановления;
	КонецЕсли;

	ЧтениеФайлаПользовательскихРасширений = Новый ЧтениеJSON;
	ЧтениеФайлаПользовательскихРасширений.ОткрытьФайл(ПутьКФайлуПользовательскихРасширений);

	ИнформацияОПользовательскихРасширениях = ПрочитатьJSON(ЧтениеФайлаПользовательскихРасширений);
	ЧтениеФайлаПользовательскихРасширений.Закрыть();

	Для Каждого ИнформацияОПользовательскомРасширении Из ИнформацияОПользовательскихРасширениях Цикл

		ИмяФайлаПользовательскогоРасширения = Неопределено;
		Если Не ИнформацияОПользовательскомРасширении.Свойство("FileName", ИмяФайлаПользовательскогоРасширения)
			Или Не ЗначениеЗаполнено(ИмяФайлаПользовательскогоРасширения) Тогда
			Продолжить;
		КонецЕсли;

		ПутьКФайлуПользовательскогоРасширения = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива,
			ИмяФайлаПользовательскогоРасширения);
		Если ПутьКФайлуПользовательскогоРасширения = Неопределено Тогда
			ВызватьИсключение СтрШаблон(Нстр("ru = 'Не найден файл данных расширения %1'"),
				ИмяФайлаПользовательскогоРасширения);
		КонецЕсли;

		РасширениеДляВосстановления = Новый Структура;
		РасширениеДляВосстановления.Вставить("Активно", ИнформацияОПользовательскомРасширении.Active);
		РасширениеДляВосстановления.Вставить("БезопасныйРежим", ИнформацияОПользовательскомРасширении.SafeMode);

		ЗащитаОтОпасныхДействий = Новый ОписаниеЗащитыОтОпасныхДействий;
		ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = ИнформацияОПользовательскомРасширении.UnsafeOperationWarnings;
		РасширениеДляВосстановления.Вставить("ЗащитаОтОпасныхДействий", ЗащитаОтОпасныхДействий);

		РасширениеДляВосстановления.Вставить("Имя", ИнформацияОПользовательскомРасширении.Name);
		РасширениеДляВосстановления.Вставить("ИспользоватьОсновныеРолиДляВсехПользователей",
			ИнформацияОПользовательскомРасширении.UseDefaultRolesForAllUsers);
		РасширениеДляВосстановления.Вставить("ИспользуетсяВРаспределеннойИнформационнойБазе",
			ИнформацияОПользовательскомРасширении.UsedInDistributedInfoBase);
		РасширениеДляВосстановления.Вставить("Синоним", ИнформацияОПользовательскомРасширении.Synonym);
		РасширениеДляВосстановления.Вставить("ИзменяетСтруктуруДанных",
			ИнформацияОПользовательскомРасширении.ModifiesDataStructure);
		РасширениеДляВосстановления.Вставить("УникальныйИдентификатор", XMLЗначение(ТипУникальныйИдентификатор,
			ИнформацияОПользовательскомРасширении.UUID));
		ДанныеФайлаПользовательскогоРасширения =  Новый ДвоичныеДанные(ПутьКФайлуПользовательскогоРасширения);
		РасширениеДляВосстановления.Вставить("Данные", ДанныеФайлаПользовательскогоРасширения);

		РасширенияДляВосстановления.Добавить(РасширениеДляВосстановления);

		УдалитьФайлыВПопытке(ПутьКФайлуПользовательскогоРасширения);

	КонецЦикла;
	
	УдалитьФайлыВПопытке(ПутьКФайлуПользовательскихРасширений);
		
	Возврат РасширенияДляВосстановления;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФайлВременногоХранилища(ИдентификаторЭтойФормы)
	
	ИмяФайла = ФайлыБТС.НовыйФайлВременногоХранилища("xml2data", "zip", 120);
	ФайлыБТС.ЗаблокироватьФайлВременногоХранилища(ИмяФайла, ИдентификаторЭтойФормы);
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяФайлаПоДаннымСодержимого(ПутьКФайлуСодержимого, ТипФайла, ТипДаных)

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуСодержимого);

	ЧтениеXML.ПерейтиКСодержимому();

	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Data" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента ""Data"".'");
	КонецЕсли;

	ЧтениеXML.Прочитать();
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

		Если ОбъектXDTO.Type = ТипФайла И (ТипДаных = Неопределено Или ОбъектXDTO.Свойства().Получить("DataType")
			<> Неопределено И ОбъектXDTO.DataType = ТипДаных) Тогда

			Возврат ОбъектXDTO.Name;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаСервереБезКонтекста
Функция ИзвлечьФайлИзZipАрхива(АрхивИлиЧтение, ИмяФайла)

	Если ТипЗнч(АрхивИлиЧтение) = Тип("ЧтениеZipФайла") Тогда
		ЧтениеДанныхАрхива = АрхивИлиЧтение;
	Иначе
		ЧтениеДанныхАрхива = Новый ЧтениеZipФайла(АрхивИлиЧтение);
	КонецЕсли;
	
	Попытка
		ПутьКФайлу = ИзвлечьФайлИзZipАрхиваВнутр(ЧтениеДанныхАрхива, ИмяФайла)
	Исключение
		Если ТипЗнч(АрхивИлиЧтение) <> Тип("ЧтениеZipФайла") Тогда
			ЧтениеДанныхАрхива.Закрыть();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если ТипЗнч(АрхивИлиЧтение) <> Тип("ЧтениеZipФайла") Тогда
		ЧтениеДанныхАрхива.Закрыть();
	КонецЕсли;	
		
	Возврат ПутьКФайлу;

КонецФункции

&НаСервереБезКонтекста
Функция ИзвлечьФайлИзZipАрхиваВнутр(ЧтениеДанныхАрхива, ИмяФайла)
	
	ЭлементZip = ЧтениеДанныхАрхива.Элементы.Найти(ИмяФайла);
	Если ЭлементZip = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяВременногоКаталога = ПолучитьИмяВременногоФайла();
	ЧтениеДанныхАрхива.Извлечь(ЭлементZip, ИмяВременногоКаталога, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ПереместитьФайл(ИмяВременногоКаталога + ПолучитьРазделительПути() + ИмяФайла, ИмяВременногоФайла);
	
	УдалитьФайлыВПопытке(ИмяВременногоКаталога);	
				
	Возврат ИмяВременногоФайла;

КонецФункции

&НаСервереБезКонтекста
Функция ИмяСобытияЖурналаРегистрации()
	Возврат НСтр("ru = 'Загрузка данных из сервиса'", ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции

&НаСервере
Процедура ОбработатьРезультатЗагрузкиНаСервере() 
	
	ИдентификаторЗадания = Неопределено;
	
	РаботаВМоделиСервиса.СнятьМонопольнуюБлокировку(ИспользоватьМногопоточность());
			
	УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаВременногоХранилища);
	
	Константы.ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Установить(
		Неопределено);	
	
	РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если РезультатЗагрузки = Неопределено Тогда
		ВызватьИсключение(НСтр("ru = 'При загрузке данных произошла ошибка - не найден результат загрузки'"));
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	Предупреждения = РезультатЗагрузки.Предупреждения;
	
	Если ЗначениеЗаполнено(Предупреждения) Тогда
		
		Разделитель = "
		|-----------------------------------------------
		|";

		ТекстОшибкиПредупреждения = СтрСоединить(Предупреждения, Разделитель);
	
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьЗагрузкуНаСервере();
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьЗагрузкуНаСервере()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ФоновоеЗаданиеЗагрузки = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если ФоновоеЗаданиеЗагрузки <> Неопределено 
			И ФоновоеЗаданиеЗагрузки.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			ФоновоеЗаданиеЗагрузки.Отменить();
		КонецЕсли;
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;

	УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаВременногоХранилища);
				
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузкаВРежимеДляТехническойПоддержки(ИмяФайлаВременногоХранилища)
	
	РазделительПути = ПолучитьРазделительПути();
	
	//@skip-check missing-temporary-file-deletion
	ВременныйКаталог = ПолучитьИмяВременногоФайла() + РазделительПути;
	СоздатьКаталог(ВременныйКаталог);
	
	ИмяФайлаНаСервере = ФайлыБТС.ПолноеИмяФайлаВременногоХранилища(ИмяФайлаВременногоХранилища);	
    Архив = ВыгрузкаЗагрузкаДанныхСлужебный.ПрочитатьАрхив(ИмяФайлаНаСервере);
	
	ИмяФайлаСостава = ВыгрузкаЗагрузкаДанныхСлужебный.ПолучитьИмяФайла(
		ВыгрузкаЗагрузкаДанныхСлужебный.PackageContents());
	ВыгрузкаЗагрузкаДанныхСлужебный.РаспаковатьФайлАрхива(
		Архив,
		ВременныйКаталог,
		ИмяФайлаСостава);
	Состав = ВыгрузкаЗагрузкаДанныхСлужебный.СоставАрхива(
		ВременныйКаталог + ИмяФайлаСостава);
	
	ПараметрыПоиска = ВыгрузкаЗагрузкаДанныхСлужебный.НовыеПараметрыПоискаФайлаИзСоставаАрхива();
	ПараметрыПоиска.Имя = ВыгрузкаЗагрузкаДанныхСлужебный.ПолучитьИмяФайла(ВыгрузкаЗагрузкаДанныхСлужебный.Digest());
	
	ПараметрыФайлаДайджеста = ВыгрузкаЗагрузкаДанныхСлужебный.ПолучитьПараметрыФайлаИзСоставаАрхива(
		Состав, ПараметрыПоиска);
	ИмяФайлаДайджеста = ПараметрыФайлаДайджеста.Имя;
	ИмяКаталогаДайджеста = ПараметрыФайлаДайджеста.Каталог;
	
	ВыгрузкаЗагрузкаДанныхСлужебный.РаспаковатьФайлАрхива(
		Архив,
		ВременныйКаталог,
		ИмяФайлаДайджеста, 
		ИмяКаталогаДайджеста);
		
	ВыгрузкаДляТехническойПоддержки = ВыгрузкаЗагрузкаДанныхСлужебный.ВыгрузкаВРежимеДляТехническойПоддержки(
		ВременныйКаталог + ИмяКаталогаДайджеста + РазделительПути + ИмяФайлаДайджеста);
	
	УдалитьФайлыВПопытке(ВременныйКаталог);
	
	Возврат ВыгрузкаДляТехническойПоддержки;
	
КонецФункции

&НаСервере
Функция ИспользоватьМногопоточность()
	
	Возврат КоличествоЗаданийЗагрузкиДанных > 1;
	
КонецФункции

#КонецОбласти