// Модуль формы "Изменение скидок и маркетинговых программ"

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметры(Параметры);
	
	ОбновитьИнформацияОбУсловииПодбораСкидок();
	
	ЗаполнитьДоступныеСкидки();
	
	ОбновитьДоступностьДоступныхСкидок(ДоступныеСкидки, ГруппыСовместногоИстользования, ВыбранныеСкидки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДоступныеСкидкиВыбранаПриИзменении(Элемент)
	
	Если Элементы.ДоступныеСкидки.ТекущиеДанные.Выбрана Тогда
		ДобавитьВВыбранныеСкидки(Элементы.ДоступныеСкидки.ТекущиеДанные);
	Иначе
		УдалитьИзВыбранныхСкидок(Элементы.ДоступныеСкидки.ТекущиеДанные.Скидка);
	КонецЕсли;
	
	ОбновитьСуммуВРодителе(Элементы.ДоступныеСкидки.ТекущиеДанные.ПолучитьРодителя());
	
	ОбновитьДоступностьДоступныхСкидок(ДоступныеСкидки, ГруппыСовместногоИстользования, ВыбранныеСкидки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Применить(Команда)
	
	Закрыть(ПоместитьТаблицуВоВременноеХранилище(ВыбранныеСкидки, ВладелецФормы.УникальныйИдентификатор));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПараметры(ВходныеПараметры)
	
	ИсключаемыеПоля = Новый Массив;
	ИсключаемыеПоля.Добавить("ЗакрыватьПриВыборе");
	ИсключаемыеПоля.Добавить("ЗакрыватьПриЗакрытииВладельца");
	ИсключаемыеПоля.Добавить("КлючНазначенияИспользования");
	ИсключаемыеПоля.Добавить("ТолькоПросмотр");
	ИсключаемыеПоля.Добавить("ВыбранныеСкидки");
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВходныеПараметры,, СтрСоединить(ИсключаемыеПоля, ","));
	Для Каждого Скидка Из ВходныеПараметры.ВыбранныеСкидки Цикл
		ЗаполнитьЗначенияСвойств(ВыбранныеСкидки.Добавить(), Скидка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформацияОбУсловииПодбораСкидок()
	
	ЭлементыСтроки = Новый Массив;
	ЭлементыСтроки.Добавить("    - активные в подразделении ");
	ЭлементыСтроки.Добавить(
		Новый ФорматированнаяСтрока(
			Строка(ПодразделениеКомпании),
			,
			ЦветаСтиля.ТекстИнформационнойНадписи,
			,
			ПолучитьНавигационнуюСсылку(ПодразделениеКомпании)
		)
	);
	ЭлементыСтроки.Добавить(" на ");
	ЭлементыСтроки.Добавить(Формат(ДатаСреза, "ДФ=dd/MM/yyyy"));
	
	ИнформацияОбУсловииПодбораСкидок = Новый ФорматированнаяСтрока(ЭлементыСтроки);
	
	Если НЕ Модель.Пустая() Тогда
		ЭлементыСтроки.Очистить();
		ЭлементыСтроки.Добавить("    - предоставляемые на модель ");
		ЭлементыСтроки.Добавить(
			Новый ФорматированнаяСтрока(
				Строка(Модель),
				,
				ЦветаСтиля.ТекстИнформационнойНадписи,
				,
				ПолучитьНавигационнуюСсылку(Модель)
			)
		);
		
		ИнформацмяОбОтбореПоМодели = Новый ФорматированнаяСтрока(ЭлементыСтроки);
	Иначе
		Элементы.ИнформацмяОбОтбореПоМодели.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ Комплектация.Пустая() Тогда
		ЭлементыСтроки.Очистить();
		ЭлементыСтроки.Добавить("    - предоставляемые на комплектацию ");
		ЭлементыСтроки.Добавить(
			Новый ФорматированнаяСтрока(
				Строка(Комплектация),
				,
				ЦветаСтиля.ТекстИнформационнойНадписи,
				,
				ПолучитьНавигационнуюСсылку(Комплектация)
			)
		);
		ЭлементыСтроки.Добавить(" модели ");
		ЭлементыСтроки.Добавить(
			Новый ФорматированнаяСтрока(
				Строка(Модель),
				,
				ЦветаСтиля.ТекстИнформационнойНадписи,
				,
				ПолучитьНавигационнуюСсылку(Модель)
			)
		);
		
		ИнформацмяОбОтбореПоКомплектации = Новый ФорматированнаяСтрока(ЭлементыСтроки);
	Иначе
		Элементы.ИнформацмяОбОтбореПоКомплектации.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеСкидки()
	ЭлементыДерева = ДоступныеСкидки.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Срез", ДатаСреза);
	Запрос.УстановитьПараметр("Источник", ПодразделениеКомпании);
	Запрос.УстановитьПараметр("ВалютаДокумента", Валюта);
	Запрос.УстановитьПараметр("КурсВалютыДокумента", Курс);
	Запрос.УстановитьПараметр("Модель", Модель);
	Запрос.УстановитьПараметр("Комплектация", Комплектация);
	Запрос.УстановитьПараметр("ВыбранныеСкидки", ВыбранныеСкидки.Выгрузить().ВыгрузитьКолонку("Скидка"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДействиеСкидокАвтомобилейСрезПоследних.Скидка КАК Скидка,
	|	ДействиеСкидокАвтомобилейСрезПоследних.Скидка.ЭтоМаркетинговаяПрограмма КАК ЭтоМаркетинговаяПрограмма,
	|	ДействиеСкидокАвтомобилейСрезПоследних.Скидка.Значение КАК Значение,
	|	ДействиеСкидокАвтомобилейСрезПоследних.Скидка.Валюта КАК Валюта
	|ПОМЕСТИТЬ ДоступныеСкидки
	|ИЗ
	|	РегистрСведений.ДействиеСкидокАвтомобилей.СрезПоследних(
	|			&Срез,
	|			Источник = &Источник
	|				И Скидка.ВидДеятельности = 1
	|				И (Скидка.ОтборПоМоделиИКомплектации = 0
	|					ИЛИ Скидка.ОтборПоМоделиИКомплектации = 1
	|						И Скидка.Модель = &Модель
	|					ИЛИ Скидка.ОтборПоМоделиИКомплектации = 2
	|						И Скидка.Модель = &Модель
	|						И Скидка.Комплектация = &Комплектация)) КАК ДействиеСкидокАвтомобилейСрезПоследних
	|ГДЕ
	|	ДействиеСкидокАвтомобилейСрезПоследних.Действует = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс/(ВЫБОР
	|		КОГДА КурсыВалютСрезПоследних.Кратность = 0
	|		ТОГДА 1
	|		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ * &КурсВалютыДокумента) КАК КоэфКВалютеДокумента
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&Срез,
	|			Валюта В
	|				(ВЫБРАТЬ
	|					ДоступныеСкидки.Валюта КАК Валюта
	|				ИЗ
	|					ДоступныеСкидки КАК ДоступныеСкидки)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеСкидки.Скидка КАК Скидка,
	|	ДоступныеСкидки.ЭтоМаркетинговаяПрограмма КАК ЭтоМаркетинговаяПрограмма,
	|	ВЫБОР
	|		КОГДА ДоступныеСкидки.Валюта = &ВалютаДокумента
	|			ТОГДА ДоступныеСкидки.Значение
	|		ИНАЧЕ ДоступныеСкидки.Значение * ЕСТЬNULL(КурсыВалют.КоэфКВалютеДокумента, 1)
	|	КОНЕЦ КАК Значение
	|ПОМЕСТИТЬ ДействующиеСкидкиСПересчетом
	|ИЗ
	|	ДоступныеСкидки КАК ДоступныеСкидки
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО ДоступныеСкидки.Валюта = КурсыВалют.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДоступныеСкидки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеСкидкиСПересчетом.Скидка КАК Скидка,
	|	ДействующиеСкидкиСПересчетом.ЭтоМаркетинговаяПрограмма КАК ЭтоМаркетинговаяПрограмма,
	|	ВЫБОР
	|		КОГДА ДействующиеСкидкиСПересчетом.ЭтоМаркетинговаяПрограмма = 1
	|			ТОГДА ""Маркетинговые программы""
	|		ИНАЧЕ ""Скидки""
	|	КОНЕЦ КАК ПредставлениеГруппы,
	|	ДействующиеСкидкиСПересчетом.Значение КАК Значение,
	|	ВЫБОР
	|		КОГДА ДействующиеСкидкиСПересчетом.Скидка В (&ВыбранныеСкидки)
	|			ТОГДА ДействующиеСкидкиСПересчетом.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗначениеВыбранных,
	|	ВЫБОР
	|		КОГДА ДействующиеСкидкиСПересчетом.Скидка В (&ВыбранныеСкидки)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выбрана,
	|	ДействующиеСкидкиСПересчетом.Скидка.Представление КАК Представление,
	|	0 КАК Картинка,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	ИСТИНА КАК Доступна,
	|	"""" КАК ПричинаНеДоступности
	|ИЗ
	|	ДействующиеСкидкиСПересчетом КАК ДействующиеСкидкиСПересчетом
	|ИТОГИ
	|	СУММА(ЗначениеВыбранных) КАК Значение,
	|	ВЫБОР
	|		КОГДА ЭтоМаркетинговаяПрограмма ЕСТЬ NULL
	|			ТОГДА ""Итого""
	|		ИНАЧЕ МАКСИМУМ(ПредставлениеГруппы)
	|	КОНЕЦ КАК Представление,
	|	1 КАК Картинка,
	|	ИСТИНА КАК ЭтоГруппа
	|ПО
	|	ОБЩИЕ,
	|	ЭтоМаркетинговаяПрограмма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеСкидкиСПересчетом.Скидка КАК Скидка
	|ИЗ
	|	ДействующиеСкидкиСПересчетом КАК ДействующиеСкидкиСПересчетом";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(
		РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам),
		"ДоступныеСкидки"
	);
	
	ГруппыСовместногоИстользования = Новый ФиксированноеСоответствие(
		СкидкиИМаркетинговыеПрограммы.ГруппыСовместногоИспользованияСкидок(
			РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выгрузить().ВыгрузитьКолонку("Скидка")
		)
	);;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВВыбранныеСкидки(Строка)
	
	ЗаполнитьЗначенияСвойств(ВыбранныеСкидки.Добавить(), Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзВыбранныхСкидок(Скидка)
	
	НайденыеСтроки = ВыбранныеСкидки.НайтиСтроки(Новый Структура("Скидка", Скидка));
	Для Каждого Строка Из НайденыеСтроки Цикл
		ВыбранныеСкидки.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммуВРодителе(Родитель)
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель.Значение = 0;
	
	ЭлемнетыРодителя = Родитель.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлемнетыРодителя Цикл
		Если Элемент.ЭтоГруппа ИЛИ Элемент.Выбрана Тогда
			Родитель.Значение = Родитель.Значение + Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСуммуВРодителе(Родитель.ПолучитьРодителя());
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоместитьТаблицуВоВременноеХранилище(Знач Таблица, УникальныйИдентификаторВладельца)
	
	Возврат ПоместитьВоВременноеХранилище(Таблица.Выгрузить(), УникальныйИдентификаторВладельца);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьДоступныхСкидок(Дерево, Группы, Скидки)
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент.ЭтоГруппа Тогда
			ОбновитьДоступностьДоступныхСкидок(Элемент, Группы, Скидки);
		ИначеЕсли НЕ Элемент.Выбрана Тогда
			СоставГруппы = Группы.Получить(Элемент.Скидка);
			Если СоставГруппы <> Неопределено Тогда
				Доступна = (Скидки.Количество() = 0);
				Для Каждого Скидка Из Скидки Цикл
					Если СоставГруппы.Найти(Скидка.Скидка) <> Неопределено Тогда
						Доступна = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Элемент.Доступна = Доступна;
			Иначе
				Элемент.Доступна = (Скидки.Количество() = 0);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти





