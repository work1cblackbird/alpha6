// Модуль общей формы "Обновление документов оплаты"

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Документ    = ?(Параметры.Свойство("Документ"), Параметры.Документ, Неопределено);
	Счет        = ?(Параметры.Свойство("СчетНаОплату"), Параметры.СчетНаОплату, Неопределено);
	СчетФактура = ?(Параметры.Свойство("СчетФактура"), Параметры.СчетФактура, Неопределено);
	
	Если Счет = Неопределено Тогда
		Счет = ?(Параметры.Свойство("СчетОтПоставщика"), Параметры.СчетОтПоставщика, Неопределено);
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю, на сервере.
//
&НаСервере
Процедура ПриОткрытииНаСервере()
	
	МассивИменДокументовДляЗаполнения = Новый Массив;
	
	Если ТипЗнч(Счет) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		МассивИменДокументовДляЗаполнения.Добавить("СчетНаОплату");
	Иначе
		МассивИменДокументовДляЗаполнения.Добавить("СчетОтПоставщика");
	КонецЕсли;
	
	УстановитьПараметрыЭлементов(МассивИменДокументовДляЗаполнения, "Счет");
	
	МассивИменДокументовДляЗаполнения = Новый Массив;
	МассивИменДокументовДляЗаполнения.Добавить("СчетФактураВыданный");
	МассивИменДокументовДляЗаполнения.Добавить("СчетФактураПолученный");
	
	УстановитьПараметрыЭлементов(МассивИменДокументовДляЗаполнения, "СчетФактура");
	
КонецПроцедуры // ПриОткрытииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПриОткрытииНаСервере();
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события возникающего на клиенте при закрытии формы.
//
// Параметры:
//  ЗавершениеРаботы - Булево - Признак закрытия формы в процессе завершения работы приложения.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ДокументыОбновлены Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru='Найденные документы не были обновлены. Возможны расхождения в учете.'"),
			, , ,
			СтатусОповещенияПользователя.Информация);
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "ОбновитьСчет".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент, измененние которого вызвало данное событие.
//
&НаКлиенте
Процедура ОбновитьСчетПриИзменении(Элемент)
	
	Элементы.КомандаОК.Доступность = ОбновитьСчет ИЛИ ОбновитьСчетФактура;
	
	Если Элементы.Счет.РежимВыбораИзСписка Тогда
		Элементы.Счет.ТолькоПросмотр = НЕ ОбновитьСчет;
	КонецЕсли;

КонецПроцедуры // ОбновитьСчетПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ОбновитьСчетФактуру".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент, измененние которого вызвало данное событие.
//
&НаКлиенте
Процедура ОбновитьСчетФактуруПриИзменении(Элемент)
	
	Элементы.КомандаОК.Доступность = ОбновитьСчет ИЛИ ОбновитьСчетФактура;
	
КонецПроцедуры // ОбновитьСчетФактуруПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "Перезаполнить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаОК(Команда)
	
	ДокументыОбновлены = Истина;
	
	ДанныеФорм = Новый Структура;
	
	Если ОбновитьСчет Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ТребуетсяПерезаполнение", Истина);
		
		Если ЭтоОперативноеПроведение(Документ, Счет) Тогда
			ПараметрыОткрытия.Вставить("ПолучитьДанныеНаДатуОснования", Истина);
		КонецЕсли;
		
		Если ТипЗнч(Счет) = Тип("ДокументСсылка.СчетНаОплату") Тогда
			ТипДокумента = "СчетНаОплату";
		Иначе
			ТипДокумента = "СчетОтПоставщика";
		КонецЕсли;
		
		ПараметрыОткрытия.Вставить("Ключ", Счет);
		ОткрытьФорму(СтрШаблон("Документ.%1.ФормаОбъекта", ТипДокумента), ПараметрыОткрытия);
		
	КонецЕсли;
	
	Если ОбновитьСчетФактура Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ТребуетсяПерезаполнение", Истина);
		ПараметрыОткрытия.Вставить("Ключ", СчетФактура);
		
		Если ЭтоОперативноеПроведение(Документ, СчетФактура) Тогда
			ПараметрыОткрытия.Вставить("ПолучитьДанныеНаДатуОснования", Истина);
		КонецЕсли;
		
		Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ТипДокумента = "СчетФактураВыданный";
		Иначе
			ТипДокумента = "СчетФактураПолученный";
		КонецЕсли;
		
		ОткрытьФорму(СтрШаблон("Документ.%1.ФормаОбъекта", ТипДокумента), ПараметрыОткрытия);
		
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры // КомандаОк()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит настройку элементов формы.
//
// Параметры:
//  МассивИменДокументовДляЗаполнения - Массив - Хранит имена документов, которые могут быть перезаполнены.
//  ИмяСвязанныхЭлементовФормы        - Строка - Корень имен элементов формы, отвечающих за визуальное представление документов.
//
&НаСервере
Процедура УстановитьПараметрыЭлементов(МассивИменДокументовДляЗаполнения, ИмяСвязанныхЭлементовФормы)
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект[ИмяСвязанныхЭлементовФормы]) Тогда
		
		Элементы[ИмяСвязанныхЭлементовФормы].Доступность = Ложь;
		Элементы["Обновить" + ИмяСвязанныхЭлементовФормы].Доступность = Ложь;
		ЭтотОбъект["Обновить" + ИмяСвязанныхЭлементовФормы] = Ложь;
		
	Иначе
		
		ЭтотОбъект["Обновить" + ИмяСвязанныхЭлементовФормы] = Истина;
		Элементы[ИмяСвязанныхЭлементовФормы].СписокВыбора.Очистить();
		
		Если МассивИменДокументовДляЗаполнения.Количество() = 1 Тогда
			
			ДокументыДляЗаполнения = ПолучитьДокументыВида(МассивИменДокументовДляЗаполнения[0]);
			
		Иначе
		
			ДокументыДляЗаполнения = ПолучитьДокументыВидов(МассивИменДокументовДляЗаполнения);
			
		КонецЕсли;
		
		Если ДокументыДляЗаполнения.Количество() > 1 Тогда
			
			Для Каждого СсылкаНаДокумент Из ДокументыДляЗаполнения Цикл
				
				Элементы[ИмяСвязанныхЭлементовФормы].СписокВыбора.Добавить(СсылкаНаДокумент);
				
			КонецЦикла;
			
			ЭтотОбъект[ИмяСвязанныхЭлементовФормы] =
				Элементы[ИмяСвязанныхЭлементовФормы].СписокВыбора[ДокументыДляЗаполнения.Количество() - 1].Значение;
			
		Иначе
			
			Элементы[ИмяСвязанныхЭлементовФормы].РежимВыбораИзСписка = Ложь;
			Элементы[ИмяСвязанныхЭлементовФормы].ТолькоПросмотр = Истина;
			Элементы[ИмяСвязанныхЭлементовФормы].КнопкаОткрытия = Истина;
			ЭтотОбъект[ИмяСвязанныхЭлементовФормы] = ДокументыДляЗаполнения[0];
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыЭлементов()

// Позволяет получить массив всех ссылок на документы указанного вида.
//
// Параметры:
//  ИмяДокумента - Строка - Вид документа.
//
&НаСервере
Функция ПолучитьДокументыВида(ИмяДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументДляЗаполнения.Ссылка
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК ДокументДляЗаполнения
		|ГДЕ
		|	ДокументДляЗаполнения.ДокументОснование = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументДляЗаполнения.Дата";
	Запрос.УстановитьПараметр("ДокументОснование", Документ);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
	
	Возврат ВыборкаДетальныеЗаписи.ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ПолучитьДокументыВида()

// Позволяет получить массив всех ссылок на документы указанных видов.
//
// Параметры:
//  МассивИменДокументов - Массив - Имена водов документов.
//
&НаСервере
Функция ПолучитьДокументыВидов(МассивИменДокументов)
	
	Если МассивИменДокументов.Количество() = 1 Тогда
		Возврат ПолучитьДокументыВида(МассивИменДокументов[0]);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументДляЗаполнения.Ссылка,
		|	ДокументДляЗаполнения.Дата
		|ИЗ
		|	Документ." + МассивИменДокументов[0] + " КАК ДокументДляЗаполнения
		|ГДЕ
		|	ДокументДляЗаполнения.ДокументОснование = &ДокументОснование";
	
	Для Счетчик = 1 По МассивИменДокументов.Количество() - 1 Цикл
		
		Запрос.Текст = Запрос.Текст + " ОБЪЕДИНИТЬ ";
		
		Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ
			|	ДокументДляЗаполнения.Ссылка,
			|	ДокументДляЗаполнения.Дата
			|ИЗ
			|	Документ." + МассивИменДокументов[Счетчик] + " КАК ДокументДляЗаполнения
			|ГДЕ
			|	ДокументДляЗаполнения.ДокументОснование = &ДокументОснование";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Дата";
	
	Запрос.УстановитьПараметр("ДокументОснование", Документ);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
	
	Возврат ВыборкаДетальныеЗаписи.ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ПолучитьДокументыВидов()

&НаСервереБезКонтекста
Функция ЭтоОперативноеПроведение(ДокументОснование, ДокументОплаты)
	
	ДатаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");
	ДатаДокументаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОплаты, "Дата");
	
	Возврат
		(НачалоДня(ДатаОснования) = НачалоДня(ТекущаяДатаСеанса())
		И НачалоДня(ДатаОснования) = НачалоДня(ДатаДокументаОплаты));
	
КонецФункции // ЭтоОперативноеПроведение()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ
