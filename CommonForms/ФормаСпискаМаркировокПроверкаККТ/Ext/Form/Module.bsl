
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Документ = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Документ", Ложь);
	Если НЕ ЗначениеЗаполнено(Параметры.Документ) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Признак пробития чека
	РежимПробитияЧека = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПробитиеЧека", Ложь);
	
	ЕстьПризнакПередачиТоваров = ЕстьРеквизит(Документ, "ПризнакСпособаРасчета");
	
	РеквизитыДокумента = Новый Массив;
	РеквизитыДокумента.Добавить("Организация");
	
	Если ЕстьРеквизит(Документ, "ФР") Тогда
		РеквизитыДокумента.Добавить("ФР");
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЕстьПризнакПередачиТоваров Тогда
		РеквизитыДокумента.Добавить("ПризнакСпособаРасчета");
	КонецЕсли;
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Документ,
		СтрСоединить(РеквизитыДокумента, ","));
	ОрганизацияДокумента = ДанныеДокумента.Организация;
	
	ИдентификаторУстройства = ПолучитьЗначениеПараметраСтруктуры(ДанныеДокумента, "ФР", "");
	Если НЕ ЗначениеЗаполнено(ИдентификаторУстройства)
		ИЛИ НЕ ОборудованиеЧекопечатающиеУстройстваВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(
			ИдентификаторУстройства) Тогда
		Если НЕ РежимПробитияЧека Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Для данного ККТ не настроена проверка кодов маркировки'"),,,, Отказ
			);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЕстьПризнакПередачиТоваров
		И НЕ (ДанныеДокумента.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты
			ИЛИ ДанныеДокумента.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
			ИЛИ ДанныеДокумента.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой) Тогда
		Если НЕ РежимПробитияЧека Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Проверка кодов маркировки перед пробитием чека на ККТ доступна только при передаче товаров'"),,,, Отказ
			);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭтоЧекКоррекции = ТипЗнч(Документ) = Тип("ДокументСсылка.ЧекКоррекции");
	
	ЗаполнитьСписокКодовМаркировки();
	
	Если СписокКодовМаркировки.ПолучитьЭлементы().Количество() = 0 Тогда
		Если НЕ РежимПробитияЧека Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'В документе нет товаров с кодами маркировки'"),,,,
				Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗакрытьФорму = Ложь;
	НачальнаяПроверка = Истина;
	ОтменаПробитияЧека = РежимПробитияЧека;
	ОтменаПробитияПослеЗаписи = Ложь;
	
	// Видимость элементов
	Элементы.ПродолжитьПробитиеЧека.Видимость = РежимПробитияЧека;
	Элементы.Отмена.Видимость = РежимПробитияЧека;
	Элементы.НадписьПояснениеКнопки.Видимость = РежимПробитияЧека;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтотОбъект, "СписокКодовМаркировки",, Истина);
	ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьПроверкуКМПриОткрытии", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ДлительнаяОперация Тогда
		
		Если РежимПробитияЧека И Не ЗакрытьФорму Тогда
			
			// Сохраним результат проведения проверки кодов маркировки
			СтандартнаяОбработка = Ложь;
			Отказ = Истина;
			ПодключитьОбработчикОжидания("Подключаемый_ЗаписатьРезультатПроверкиКодовМаркировки", 0.1, Истина);
			ЗакрытьФорму = Истина;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ОтменаПробитияЧека Тогда
		
		ОписаниеОбработкиВопроса = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаВопросаПередЗакрытием",
			ЭтотОбъект);
		ПоказатьВопрос(
			ОписаниеОбработкиВопроса,
			НСтр("ru = 'Закрытие формы проверки кодов маркировки приведет к отмене пробития чека.'"),
			РежимДиалогаВопрос.ОКОтмена,,,
			НСтр("ru = 'Пробитие чека'"));
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	
	Если ЗакрытьФорму Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Сохраним результат проведения проверки кодов маркировки
	СтандартнаяОбработка = Ложь;
	Отказ = Истина;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗаписатьРезультатПроверкиКодовМаркировки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПродолжитьПробитиеЧека(Команда)
	
	ОтменаПробитияЧека = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерепроверитьВсе(Команда)
	
	// Выявляем непроверенные КМ
	СписокКодовМаркировкиПроверки = Новый Массив;
	
	ЕстьКодыМаркировкиСОшибками = Ложь;
	
	// Обойдем дерево списка кодов маркировки и заполним полный код
	Для Каждого ТекущаяСтрока Из СписокКодовМаркировки.ПолучитьЭлементы() Цикл
		
		Для Каждого ТекущаяСтрокаКодаМаркировки Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
			
			// Заполним строку для проверки
			СписокКодовМаркировкиПроверки.Добавить(ТекущаяСтрокаКодаМаркировки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	НачатьПроверкуРазрешительногоРежима(СписокКодовМаркировкиПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Перепроверить(Команда)
	
	ТекущиеДанные = Элементы.СписокКодовМаркировки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.КодМаркировки) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СписокКодовМаркировкиПроверки = Новый Массив;
	СписокКодовМаркировкиПроверки.Добавить(ТекущиеДанные);
		
	НачатьПроверкуРазрешительногоРежима(СписокКодовМаркировкиПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокКодовМаркировки()
	
	ПланируемыйСтатусМаркируемогоТовара = ПланируемыйСтатусМаркируемогоТовара(Документ);
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Товары,КодыМаркировки");
	
	Товары = ДанныеДокумента.Товары.Выгрузить();
	КодыМаркировки = ДанныеДокумента.КодыМаркировки.Выгрузить();
	
	МассивКодовМаркировки = Новый Массив;
	СтрокиБезХарактеристики = Товары.НайтиСтроки(
		Новый Структура("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()));
	ЕстьХарактеристка = СтрокиБезХарактеристики.Количество() <> Товары.Количество();
	
	Если НЕ ЕстьХарактеристка Тогда
		Элементы.СписокКодовМаркировкиПредставлениеСтроки.Заголовок =
			НСтр("ru = 'N/Номенклатура/Ед. изм./Количество/Код маркировки'");
	КонецЕсли;
	
	// Получим акртикулы номенклатуры
	НоменклатураДокумента = Товары.ВыгрузитьКолонку("Номенклатура");
	ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		НоменклатураДокумента,
		"Артикул,ТипНоменклатуры");
	
	ПараметрыОтбора = Новый Структура("ИдентификаторТовара");
	ЕстьИспользованиеРазрешительногоРежима = Ложь;
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		
		ПараметрыОтбора.ИдентификаторТовара = ТекущаяСтрока.ИдентификаторТовара;
		НайденныеСтроки = КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПараметрыНоменклатуры = ДанныеНоменклатуры.Получить(ТекущаяСтрока.Номенклатура);
		
		НоваяСтрока = СписокКодовМаркировки.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		// Соберем представление строки
		МассивКолонок = Новый Массив;
		МассивКолонок.Добавить(ТекущаяСтрока.НомерСтроки);
		МассивКолонок.Добавить(
			СтрШаблон("[%1] %2",
			ПараметрыНоменклатуры.Артикул, ТекущаяСтрока.Номенклатура));
		
		Если ЕстьХарактеристка Тогда
			
			МассивКолонок.Добавить(ТекущаяСтрока.ХарактеристикаНоменклатуры);
			
		КонецЕсли;
		
		МассивКолонок.Добавить(ТекущаяСтрока.ЕдиницаИзмерения);
		МассивКолонок.Добавить(Формат(ТекущаяСтрока.Количество, "ЧЦ=15; ЧДЦ=3"));
		
		НоваяСтрока.ПредставлениеСтроки = СтрСоединить(МассивКолонок, " / ");
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НоваяСтрокаМаркировки = НоваяСтрока.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаМаркировки, НайденнаяСтрока,, "НомерСтроки");
			НоваяСтрокаМаркировки.ПланируемыйСтатусТовара = ПланируемыйСтатусМаркируемогоТовара;
			НоваяСтрокаМаркировки.ИдентификаторЗапроса = Новый УникальныйИдентификатор;
			МассивКодовМаркировки.Добавить(НайденнаяСтрока.КодМаркировки);
			НоваяСтрокаМаркировки.ПредставлениеСтроки = НоваяСтрокаМаркировки.КодМаркировки;
			НоваяСтрокаМаркировки.ИспользоватьРазрешительныйРежим =
				ПараметрыНоменклатуры.ТипНоменклатуры.ИспользоватьРазрешительныйРежим;
			
		КонецЦикла;
		
		ЕстьИспользованиеРазрешительногоРежима = ЕстьИспользованиеРазрешительногоРежима
			ИЛИ НоваяСтрокаМаркировки.ИспользоватьРазрешительныйРежим;
		
	КонецЦикла;
	
	// Получим полные коды маркировки
	ПолныеКодыМаркировки = МаркировкаТоваровСервер.КодыМаркировкиВBASE64(МассивКодовМаркировки);
	
	// Обойдем дерево списка кодов маркировки и заполним полный код
	Для Каждого ТекущаяСтрока Из СписокКодовМаркировки.ПолучитьЭлементы() Цикл
		
		Для Каждого ТекущаяСтрокаКодаМаркировки Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
			
			ПолныйКодМаркировки = ПолныеКодыМаркировки.Получить(ТекущаяСтрокаКодаМаркировки.КодМаркировки);
			Если ПолныйКодМаркировки <> Неопределено Тогда
				
				ТекущаяСтрокаКодаМаркировки.ПолныйКодМаркировки = ПолныйКодМаркировки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Элементы.ГруппаРазрешительныйРежим.Видимость = ЕстьИспользованиеРазрешительногоРежима;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПроверкуКМПриОткрытии()
	
	// Выявляем непроверенные КМ
	СписокНеПроверенныхКодовМаркировки = Новый Массив;
	
	ЕстьКодыМаркировкиСОшибками = Ложь;
	
	// Обойдем дерево списка кодов маркировки и заполним полный код
	Для Каждого ТекущаяСтрока Из СписокКодовМаркировки.ПолучитьЭлементы() Цикл
		
		Для Каждого ТекущаяСтрокаКодаМаркировки Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
			
			Если РежимПробитияЧека
				ИЛИ МенеджерОборудованияАвтосалонКлиентСервер.НеПроверенКодМаркировки(ТекущаяСтрокаКодаМаркировки) Тогда
				
				// Заполним строку для проверки
				СписокНеПроверенныхКодовМаркировки.Добавить(ТекущаяСтрокаКодаМаркировки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
		
	НачатьПроверкуРазрешительногоРежима(СписокНеПроверенныхКодовМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуКодовМаркировкиНаККТ(СписокПроверкиКодовМаркировки, НомерЭлемента = 0)
	
	// Завершим проверку
	Если НомерЭлемента > СписокПроверкиКодовМаркировки.Количество() - 1 Тогда
		
		УстановитьСтатусыПроверкиКодовМаркировки();
		Если Не ЗакрытьФорму Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.КодыМаркировки;
		КонецЕсли;
		Возврат;
		
	ИначеЕсли НомерЭлемента = 0 Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.ДлительнаяОперация;
		Элементы.НадписьДлительнойОперации.Заголовок = НСтр("ru = 'Выполняется проверка кодов маркировки средствами ККТ
		|Пожалуйста, подождите...'");
		
		// Перед проверкой очистим предыдущие проверки
		Для Каждого ТекущаяСтрока Из СписокПроверкиКодовМаркировки Цикл
			
			ТекущаяСтрока.КодРезультатаПроверки = "";
			ТекущаяСтрока.КодМаркировкиПроверен = Ложь;
			ТекущаяСтрока.КодОбработкиЗапроса = "";
			ТекущаяСтрока.ПредставлениеРезультатаПроверки = "";
			ТекущаяСтрока.РезультатПроверки = Ложь;
			ТекущаяСтрока.РезультатПроверкиОИСМ = Ложь;
			ТекущаяСтрока.СтатусТовара = ПредопределенноеЗначение("Перечисление.ОтветОИСМОСтатусеТовара.ПустаяСсылка");
			ТекущаяСтрока.ТекстОшибки = "";
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("СписокПроверкиКодовМаркировки", СписокПроверкиКодовМаркировки);
	ПараметрыПроверки.Вставить("НомерСтроки", НомерЭлемента);
	
	КоличествоПроверяемыхКодовМаркировки = СписокПроверкиКодовМаркировки.Количество();
	ВидОперации = "ЛокальнаяПроверкаЗапросаКМ";
	ПараметрыПроверкиКодаМаркировки = ПараметрыПроверки;
	ПодключитьОбработчикОжидания("Подключаемый_СледующаяПроверкаКодаМаркировки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СледующаяПроверкаКодаМаркировки()
	
	ПредставлениеПроцессаЗагрузки = Новый Массив;
	ПредставлениеПроцессаЗагрузки.Добавить(НСтр("ru = 'Выполняется проверка кодов маркировки средствами ККТ'"));
	ПредставлениеПроцессаЗагрузки.Добавить(СтрШаблон(
		НСтр("ru = 'Проверяется код маркировки %1 из %2'"),
		ПараметрыПроверкиКодаМаркировки.НомерСтроки + 1,
		КоличествоПроверяемыхКодовМаркировки));
	ПредставлениеПроцессаЗагрузки.Добавить(НСтр("ru = 'Пожалуйста, подождите...'"));
	
	Элементы.НадписьДлительнойОперации.Заголовок = Новый ФорматированнаяСтрока(
		СтрСоединить(ПредставлениеПроцессаЗагрузки, Символы.ПС));
	
	Если ВидОперации = "ЛокальнаяПроверкаЗапросаКМ" Тогда
		
		ВыполнитьЛокальнуюПроверку(ПараметрыПроверкиКодаМаркировки);
		
	ИначеЕсли ВидОперации = "УдаленнаяПроверка" Тогда
		
		ВыполнитьУдаленнуюПроверку(ПараметрыПроверкиКодаМаркировки);
		
	ИначеЕсли ВидОперации = "ПодтверждениеКодаМаркировки" Тогда
		
		ВыполнитьПодтверждениеКодаМаркировки(ПараметрыПроверкиКодаМаркировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЛокальнуюПроверку(ПараметрыПроверки)
	
	СтрокаКодаМаркировки = ПараметрыПроверки.СписокПроверкиКодовМаркировки[ПараметрыПроверки.НомерСтроки];
	
	Если НЕ ЗначениеЗаполнено(СтрокаКодаМаркировки.ПолныйКодМаркировки) Тогда
		
		СтрокаКодаМаркировки.ТекстОшибки =
			НСтр("ru = 'Требуется получить полный код маркировки. Необходимо снова ее сканировать в документ.'");
		
		ВыполнитьПроверкуКодовМаркировкиНаККТ(
			ПараметрыПроверки.СписокПроверкиКодовМаркировки,
			ПараметрыПроверки.НомерСтроки + 1);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЗапросаКМ = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыЗапросКМ();
	ПараметрыЗапросаКМ.ИдентификаторЗапроса = СтрокаКодаМаркировки.ИдентификаторЗапроса;
	ПараметрыЗапросаКМ.Количество = 1;
	ПараметрыЗапросаКМ.КонтрольнаяМарка = СтрокаКодаМаркировки.ПолныйКодМаркировки;
	ПараметрыЗапросаКМ.ПланируемыйСтатусТовара = СтрокаКодаМаркировки.ПланируемыйСтатусТовара;
	ПараметрыЗапросаКМ.ОжидатьПолучениеОтветаОИСМ = Истина;
	
	ОбработчикЗавершенияПроверки = Новый ОписаниеОповещения(
		"Подключаемый_ЗавершениеЛокальнойПроверки",
		ЭтотОбъект,
		ПараметрыПроверки);
	
	ДополнительныеПараметры = МенеджерОборудованияКлиентСервер.ДополнительныеПараметрыОперации(Истина);
	
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗапросКМ(
		ОбработчикЗавершенияПроверки,
		ЭтотОбъект,
		ИдентификаторУстройства,
		ПараметрыЗапросаКМ,
		ДополнительныеПараметры
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУдаленнуюПроверку(ПараметрыПроверки)
	
	ЗавершениеУдаленнойПроверки = Новый ОписаниеОповещения(
		"Подключаемый_ЗавершитьУдаленнуюПроверку",
		ЭтотОбъект,
		ПараметрыПроверки);
	
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолученияРезультатовЗапросаКМ(
		ЗавершениеУдаленнойПроверки,
		ЭтотОбъект,
		ИдентификаторУстройства,
		Неопределено
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодтверждениеКодаМаркировки(ПараметрыПроверки)
	
	СтрокаКодаМаркировки = ПараметрыПроверки.СписокПроверкиКодовМаркировки[ПараметрыПроверки.НомерСтроки];
	ПараметрыПодтвержденияКМ = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПодтверждениеКМ();
	ПараметрыПодтвержденияКМ.ИдентификаторЗапроса = СтрокаКодаМаркировки.ИдентификаторЗапроса;
	
	ЗавершениеПодтвержденияКодаМаркировки = Новый ОписаниеОповещения(
		"Подключаемый_ЗавершениеПодключенияКодаМарикровки",
		ЭтотОбъект,
		ПараметрыПроверки);
	
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПодтверждениеКМ(
		ЗавершениеПодтвержденияКодаМаркировки,
		ЭтотОбъект,
		ИдентификаторУстройства,
		ПараметрыПодтвержденияКМ
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗавершениеЛокальнойПроверки(РезультатПроверки, ПараметрыПроверки) Экспорт
	
	СтрокаКодаМаркировки = ПараметрыПроверки.СписокПроверкиКодовМаркировки[ПараметрыПроверки.НомерСтроки];
	ВыходныеПараметры = РезультатПроверки;
	
	Если РезультатПроверки.Результат Тогда
		
		СтрокаКодаМаркировки.КодМаркировкиПроверен = ВыходныеПараметры.КодМаркировкиПроверен;
		СтрокаКодаМаркировки.РезультатПроверки     = ВыходныеПараметры.РезультатПроверки;
		СтрокаКодаМаркировки.ТекстОшибки = "";
		
	Иначе
		
		СтрокаКодаМаркировки.ТекстОшибки = РезультатПроверки.ОписаниеОшибки;
		
		// Есть ошибка при проверке - другой КМ проверяем
		ВыполнитьПроверкуКодовМаркировкиНаККТ(
			ПараметрыПроверки.СписокПроверкиКодовМаркировки,
			ПараметрыПроверки.НомерСтроки + 1);
		Возврат;
		
	КонецЕсли;
	
	ВидОперации = "УдаленнаяПроверка";
	ПараметрыПроверкиКодаМаркировки = ПараметрыПроверки;
	// Увелечение времени необходимо для успешной обработки запроса проверки марки оборудованием.
	// Возможно потребуется переработка если на других устройствах не будет успевать пройти обработка.
	ПодключитьОбработчикОжидания("Подключаемый_СледующаяПроверкаКодаМаркировки", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗавершитьУдаленнуюПроверку(РезультатПроверки, ПараметрыПроверки) Экспорт
	
	СтрокаКодаМаркировки = ПараметрыПроверки.СписокПроверкиКодовМаркировки[ПараметрыПроверки.НомерСтроки];
	ВыходныеПараметры = РезультатПроверки;
	
	Если РезультатПроверки.Результат Тогда
		
		СтрокаКодаМаркировки.РезультатПроверкиОИСМ 	= ВыходныеПараметры.РезультатПроверкиОИСМ;
		СтрокаКодаМаркировки.СтатусТовара         	= ВыходныеПараметры.СтатусТовара;
		СтрокаКодаМаркировки.КодРезультатаПроверки           = ВыходныеПараметры.КодРезультатаПроверкиОИСМ;
		СтрокаКодаМаркировки.ПредставлениеРезультатаПроверки = ВыходныеПараметры.РезультатПроверкиОИСМПредставление;
		СтрокаКодаМаркировки.КодОбработкиЗапроса             = ВыходныеПараметры.КодОбработкиЗапроса;
		СтрокаКодаМаркировки.ТекстОшибки = "";
		
		
		Если ВыходныеПараметры.СтатусРезультата = ПредопределенноеЗначение("Перечисление.СтатусРезультатаЗапросаКМ.Ожидается")
			И Ложь Тогда
			
			ПараметрыПроверкиКодаМаркировки = ПараметрыПроверки;
			ВидОперации = "УдаленнаяПроверка";
			ПодключитьОбработчикОжидания("Подключаемый_СледующаяПроверкаКодаМаркировки", 1, Истина);
			Возврат;
			
		КонецЕсли;

	Иначе
		
		СтрокаКодаМаркировки.ТекстОшибки = РезультатПроверки.ОписаниеОшибки;
		
		// Есть ошибка при проверке - другой КМ проверяем
		ВыполнитьПроверкуКодовМаркировкиНаККТ(
			ПараметрыПроверки.СписокПроверкиКодовМаркировки,
			ПараметрыПроверки.НомерСтроки + 1);
		
	КонецЕсли;
	
	ВидОперации = "ПодтверждениеКодаМаркировки";
	ПараметрыПроверкиКодаМаркировки = ПараметрыПроверки;
	ПодключитьОбработчикОжидания("Подключаемый_СледующаяПроверкаКодаМаркировки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗавершениеПодключенияКодаМарикровки(РезультатПроверки, ПараметрыПроверки) Экспорт
	
	СтрокаКодаМаркировки = ПараметрыПроверки.СписокПроверкиКодовМаркировки[ПараметрыПроверки.НомерСтроки];
	
	Если НЕ РезультатПроверки.Результат Тогда
		
		СтрокаКодаМаркировки.ТекстОшибки = РезультатПроверки.ОписаниеОшибки;
		
	Иначе
		
		СтрокаКодаМаркировки.ТекстОшибки = "";
		
	КонецЕсли;
	
	ВыполнитьПроверкуКодовМаркировкиНаККТ(
		ПараметрыПроверки.СписокПроверкиКодовМаркировки,
		ПараметрыПроверки.НомерСтроки + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусыПроверкиКодовМаркировки()
	
	ВсеКодыМаркировкиКорректные = Истина;
	
	ПредставлениеСтатусов = МенеджерОборудованияАвтосалонКлиентСервер.ОформлениеРезультатаПроверкиКодовМаркировки();
	
	// Обойдем дерево списка кодов маркировки и заполним полный код
	Для Каждого ТекущаяСтрока Из СписокКодовМаркировки.ПолучитьЭлементы() Цикл
		
		Для Каждого ТекущаяСтрокаКодаМаркировки Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
			
			Если МенеджерОборудованияАвтосалонКлиентСервер.НеПроверенКодМаркировки(ТекущаяСтрокаКодаМаркировки) Тогда
				
				ИмяСтатуса = "НеПроверено";
				ВсеКодыМаркировкиКорректные = Ложь;
				
			ИначеЕсли МенеджерОборудованияАвтосалонКлиентСервер.ОшибкаПроверкиКодаМаркировки(ТекущаяСтрокаКодаМаркировки) Тогда
				
				ИмяСтатуса = "Ошибка";
				ВсеКодыМаркировкиКорректные = Ложь;
				
				Если ПустаяСтрока(ТекущаяСтрока.ТекстОшибки) Тогда
					
					ТекущаяСтрокаКодаМаркировки.ТекстОшибки =
						МенеджерОборудованияАвтосалонКлиентСервер.ПредставлениеОшибкиПроверки(ТекущаяСтрокаКодаМаркировки);
					
				КонецЕсли;
				
			Иначе
				
				ИмяСтатуса = "Выполнено";
				
			КонецЕсли;
			
			Если ТекущаяСтрокаКодаМаркировки.ИспользоватьРазрешительныйРежим
				И ТекущаяСтрокаКодаМаркировки.РезультатПроверкиРазрешительногоРежима <> 1 Тогда
				
				ВсеКодыМаркировкиКорректные = Ложь;
				
			КонецЕсли;
			
			ПредставлениеПроверки = ПредставлениеСтатусов.Получить(ИмяСтатуса);
			ТекущаяСтрокаКодаМаркировки.Состояние = ПредставлениеПроверки.Представление;
			ТекущаяСтрокаКодаМаркировки.КартинкаСостояния = ПредставлениеПроверки.Картинка;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НачальнаяПроверка И РежимПробитияЧека И ВсеКодыМаркировкиКорректные Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПланируемыйСтатусМаркируемогоТовара(Документ)
	
	Результат = Перечисления.ПланируемыйСтатусМаркируемогоТовара.ПустаяСсылка();
	
	ХозОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Хозоперация");
	
	СписокОперацийПродажи = Новый Массив;
	СписокОперацийПродажи.Добавить(Справочники.ХозОперации.Чек);
	СписокОперацийПродажи.Добавить(Справочники.ХозОперации.ЧекНаОплату);
	СписокОперацийПродажи.Добавить(Справочники.ХозОперации.ПриходныйКассовыйОрдер);
	СписокОперацийПродажи.Добавить(Справочники.ХозОперации.БанковскаяВыписка);
	
	СписокОперацийВозврата = Новый Массив;
	СписокОперацийВозврата.Добавить(Справочники.ХозОперации.ЧекНаВозврат);
	СписокОперацийПродажи.Добавить(Справочники.ХозОперации.ЧекНаОплатуВозврат);
	СписокОперацийПродажи.Добавить(Справочники.ХозОперации.РасходныйКассовыйОрдер);
	
	Если СписокОперацийПродажи.Найти(ХозОперация) <> Неопределено Тогда
		
		Результат = Перечисления.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварРеализован;
		
	Иначе
		
		Результат = Перечисления.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварВозвращен;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЗаписатьРезультатПроверкиКодовМаркировки()
	
	// Результат проверок запишем в массив структур
	КодыМаркировки = Новый Массив;
	СтрокаМаркировки = Новый Структура();
	СтрокаМаркировки.Вставить("ИдентификаторТовара");
	СтрокаМаркировки.Вставить("КодМаркировки");
	СтрокаМаркировки.Вставить("КодРезультатаПроверки");
	СтрокаМаркировки.Вставить("КодМаркировкиПроверен");
	СтрокаМаркировки.Вставить("КодОбработкиЗапроса");
	СтрокаМаркировки.Вставить("ПредставлениеРезультатаПроверки");
	СтрокаМаркировки.Вставить("РезультатПроверки");
	СтрокаМаркировки.Вставить("РезультатПроверкиОИСМ");
	СтрокаМаркировки.Вставить("СтатусТовара");
	СтрокаМаркировки.Вставить("ТекстОшибки");
	СтрокаМаркировки.Вставить("ЗначениеОтраслевогоРеквизита");
	СтрокаМаркировки.Вставить("РезультатПроверкиРазрешительногоРежима");
	СтрокаМаркировки.Вставить("ТекстОшибкиПроверки");
	
	Для Каждого СтрокаТоваров Из СписокКодовМаркировки.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаКодаМаркировки Из СтрокаТоваров.ПолучитьЭлементы() Цикл
			
			СтрокаКМ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтрокаМаркировки);
			ЗаполнитьЗначенияСвойств(СтрокаКМ, СтрокаКодаМаркировки);
			КодыМаркировки.Добавить(СтрокаКМ);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписатьПроверкуКодовМаркировкиВДокумент(Документ, КодыМаркировки);
	
	ОповеститьОбИзменении(Документ);
	ЗакрытьФорму = Истина;
	
	Если РежимПробитияЧека И ОтменаПробитияПослеЗаписи Тогда
		
		ПараметрыЗакрытия = Новый Структура;
		ПараметрыЗакрытия.Вставить("ОтменаПробитияЧека", Истина);
		Закрыть(ПараметрыЗакрытия);
		
	Иначе
	
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьПроверкуКодовМаркировкиВДокумент(Документ, КодыМаркировки)
	
	
	// Получим объект документа
	ДокументОбъект = Документ.ПолучитьОбъект();
	
	// Пройдемся по табличной части кодов маркировки и запишем результат в соответствующую строку
	СтруктураПоиска = Новый Структура("ИдентификаторТовара,КодМаркировки");
	
	Для Каждого СтрокаКодаМаркировки Из КодыМаркировки Цикл
		
		// Найдем строку в табличной части документа
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаКодаМаркировки);
		НайденныеСтроки = ДокументОбъект.КодыМаркировки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаКодаМаркировки,, "ИдентификаторТовара,КодМаркировки");
			
		КонецЦикла;
		
	КонецЦикла;
	
	УправлениеДиалогомВызовСервера.ЗаписатьОбъект(
		ДокументОбъект,
		Истина,
		Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВопросаПередЗакрытием(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗакрытьФорму = Ложь;
	ОтменаПробитияЧека = Ложь;
	ОтменаПробитияПослеЗаписи = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуРазрешительногоРежима(СписокПроверкиКодовМаркировки)
	
	КодыМаркировкиДляПроверки = СписокКодовМаркировкиДляРазрешительногоРежима(СписокПроверкиКодовМаркировки);
	Если КодыМаркировкиДляПроверки.Количество() = 0 Тогда
		
		ВывестиТекущееСостояниеПроверкиВРазрешительномРежиме();
		ВыполнитьПроверкуКодовМаркировкиНаККТ(СписокПроверкиКодовМаркировки);
		Возврат;
		
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ДлительнаяОперация;
	Элементы.НадписьДлительнойОперации.Заголовок = НСтр("ru = 'Выполняется проверка в разрешительном режиме
		|Пожалуйста, подождите...'");
	
	// Перед проверкой очистим предыдущие проверки
	Для Каждого ТекущаяСтрока Из СписокПроверкиКодовМаркировки Цикл
		
		ТекущаяСтрока.ЗначениеОтраслевогоРеквизита = "";
		ТекущаяСтрока.РезультатПроверкиРазрешительногоРежима = 0;
		ТекущаяСтрока.СостояниеПроверкиРазрешительногоРежима = "";
		ТекущаяСтрока.ТекстОшибкиПроверки = "";
		
	КонецЦикла;
	
	ПараметрыЗавершения = Новый Структура();
	ПараметрыЗавершения.Вставить("СписокПроверкиКодовМаркировки", СписокПроверкиКодовМаркировки);
	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить(
		"ОбработчикЗавершения",
		Новый ОписаниеОповещения("ЗавершитьРазрешительныйРежим", ЭтотОбъект, ПараметрыЗавершения));
	ПараметрыПроверки.Вставить("КодыМаркировки", КодыМаркировкиДляПроверки);
	ПараметрыПроверки.Вставить("Организация", ОрганизацияДокумента);
	ПараметрыПроверки.Вставить("Документ", Документ);
	
	ОбменССистемойМаркировкиКлиент.НачатьПроверкуВРазрешительномРежиме(ЭтотОбъект, ПараметрыПроверки);
	
КонецПроцедуры // НачатьПроверкуРазрешительногоРежима()

&НаКлиенте
Функция СписокКодовМаркировкиДляРазрешительногоРежима(СписокПроверкиКодовМаркировки)
	
	КодыМаркировкиСРазрешительнымРежимом = Новый Массив;
	
	Для Каждого СтрокаКодМаркировки Из СписокПроверкиКодовМаркировки Цикл
		
		Если СтрокаКодМаркировки.ИспользоватьРазрешительныйРежим Тогда
			
			Если ЭтоЧекКоррекции И ЗначениеЗаполнено(СтрокаКодМаркировки.ЗначениеОтраслевогоРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			КодыМаркировкиСРазрешительнымРежимом.Добавить(СтрокаКодМаркировки.КодМаркировки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КодыМаркировкиСРазрешительнымРежимом;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьРазрешительныйРежим(РезультатПроверки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатПроверки = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Возникла непредвиденная ошибка при проверке кодов маркировки в разрешительном режиме.'"));
		ВыполнитьПроверкуКодовМаркировкиНаККТ(ДополнительныеПараметры.СписокПроверкиКодовМаркировки);
		Возврат;
		
	КонецЕсли;
	
	Если РезультатПроверки.Свойство("ПодробноеПредставлениеОшибки")
		И ЗначениеЗаполнено(РезультатПроверки.ПодробноеПредставлениеОшибки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.ПодробноеПредставлениеОшибки);
		
	КонецЕсли;
	
	Если РезультатПроверки.Статус <> "Выполнено" Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Проверка в разрешительном режиме не выполнено.'"));
		ВыполнитьПроверкуКодовМаркировкиНаККТ(ДополнительныеПараметры.СписокПроверкиКодовМаркировки);
		Возврат;
		
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(РезультатПроверки.АдресРезультата);
	
	Если Не ПустаяСтрока(Результат.ТекстОшибки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		
	КонецЕсли;
	
	ВывестиТекущееСостояниеПроверкиВРазрешительномРежиме(Результат.КодыМаркировки);
	ВыполнитьПроверкуКодовМаркировкиНаККТ(ДополнительныеПараметры.СписокПроверкиКодовМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТекущееСостояниеПроверкиВРазрешительномРежиме(РезультатПроверки = Неопределено)
	
	Если РезультатПроверки = Неопределено Тогда
		
		РезультатПроверки = Новый Соответствие();
		
	КонецЕсли;
	
	ПредставлениеСтатусов = МенеджерОборудованияАвтосалонКлиентСервер.ОформлениеРезультатаПроверкиКодовМаркировки();
	
	// Заполняем данные для каждого кода маркировки
	Для Каждого СтрокаНоменклатуры Из СписокКодовМаркировки.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаКодаМаркировки Из СтрокаНоменклатуры.ПолучитьЭлементы() Цикл
			
			Если Не СтрокаКодаМаркировки.ИспользоватьРазрешительныйРежим Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ДанныеПроверки = РезультатПроверки.Получить(СтрокаКодаМаркировки.КодМаркировки);
			
			Если ДанныеПроверки <> Неопределено Тогда
				
				СтрокаКодаМаркировки.ТекстОшибкиПроверки = ДанныеПроверки.ТекстОшибки;
				Если ПустаяСтрока(СтрокаКодаМаркировки.ТекстОшибкиПроверки) Тогда
					СтрокаКодаМаркировки.РезультатПроверкиРазрешительногоРежима = 1;
				Иначе
					СтрокаКодаМаркировки.РезультатПроверкиРазрешительногоРежима = 2;
				КонецЕсли;
				СтрокаКодаМаркировки.ЗначениеОтраслевогоРеквизита = ДанныеПроверки.ЗначениеОтраслевогоРеквизита;
				
			КонецЕсли;
			
			Если СтрокаКодаМаркировки.РезультатПроверкиРазрешительногоРежима = 1 Тогда
				ИмяСтатуса = "Выполнено";
			ИначеЕсли СтрокаКодаМаркировки.РезультатПроверкиРазрешительногоРежима = 2 Тогда
				ИмяСтатуса = "Ошибка";
			Иначе
				ИмяСтатуса = "НеПроверено";
			КонецЕсли;
			
			ПредставлениеПроверки = ПредставлениеСтатусов.Получить(ИмяСтатуса);
			СтрокаКодаМаркировки.СостояниеПроверкиРазрешительногоРежима = ПредставлениеПроверки.Представление;
			СтрокаКодаМаркировки.КартинкаСостоянияРазрешительногоРежима = ПредставлениеПроверки.Картинка;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле =
		Новый ПолеКомпоновкиДанных(Элементы.СписокКодовМаркировкиСостояниеПроверкиРазрешительногоРежима.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКодовМаркировки.ИспользоватьРазрешительныйРежим");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКодовМаркировки.КодМаркировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не применяется>'"));
	
КонецПроцедуры

#КонецОбласти
