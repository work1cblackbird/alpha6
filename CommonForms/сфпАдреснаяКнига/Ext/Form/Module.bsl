#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере"
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ТекущийСправочник") Тогда
		ЭтаФорма.ТекущийСправочник = Параметры.ТекущийСправочник;
	КонецЕсли;	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии"
//
Процедура ПриОткрытии(Отказ)
	МассивСтруктурСправочников = ПолучитьМассивСтруктурСправочников();
	Если МассивСтруктурСправочников.Количество() = 0 Тогда
		Отказ = Истина;
	Иначе
		Элементы.ТекущийСправочник.СписокВыбора.Очистить();
		Для Каждого ЭлементМассива Из МассивСтруктурСправочников Цикл
			Элементы.ТекущийСправочник.СписокВыбора.Добавить(ЭлементМассива.Имя, ЭлементМассива.Синоним);
		КонецЦикла;	
		Элементы.ТекущийСправочник.СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		Если ПустаяСтрока(ТекущийСправочник) Тогда
			ТекущийСправочник = Элементы.ТекущийСправочник.СписокВыбора[0].Значение;
		ИначеЕсли Элементы.ТекущийСправочник.СписокВыбора.НайтиПоЗначению(ТекущийСправочник) = Неопределено Тогда			
			ТекущийСправочник = Элементы.ТекущийСправочник.СписокВыбора[0].Значение;
		КонецЕсли;	
		ТекущийСправочникОбработкаВыбора(Неопределено, ТекущийСправочник, Истина);
	КонецЕсли;
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения"
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "СофтФон_OnAllLinesInfo" Тогда
		Если ТекущийСправочник = "Пользователи" Тогда
			ОбновитьСостоянияЛиний(Параметр);
			ПодключитьОбработчикОжидания("ПолучитьСостоянияЛиний", 3.0, Истина);
		Иначе
			ОтключитьОбработчикОжидания("ПолучитьСостоянияЛиний"); 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаОповещения()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "ТекущийСправочник"
//
Процедура ТекущийСправочникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Владелец = Неопределено;
	ИмяВладельца = ПолучитьВладельца(ВыбранноеЗначение);
	Если ЗначениеЗаполнено(ИмяВладельца) Тогда
		Элементы.Владелец.Видимость = Истина;
		Элементы.Владелец.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + ИмяВладельца);
	Иначе
		Элементы.Владелец.Видимость = Ложь;
	КонецЕсли;
	ТекущийСправочник = ВыбранноеЗначение;
	Если ТекущийСправочник = "Пользователи" Тогда
		ПодключитьОбработчикОжидания("ПолучитьСостоянияЛиний", 0.1, Истина);
	Иначе
		ОтключитьОбработчикОжидания("ПолучитьСостоянияЛиний"); 
	КонецЕсли;
	ВладелецПриИзменении(Элемент);	
КонецПроцедуры // ТекущийСправочникОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Владелец"
//
Процедура ВладелецПриИзменении(Элемент)
	Контакты.Очистить();
	СписокТелефонов.Очистить();
	ПозвонитьПоНомеру = "";
	МассивКонтактов = ПолучитьМассивКонтактов(ТекущийСправочник, Владелец);
	Для Каждого ЭлементМассива Из МассивКонтактов Цикл
		НоваяСтрока = Контакты.Добавить();
		НоваяСтрока.Ссылка		= ЭлементМассива;
		НоваяСтрока.Картинка	= 2;
		Если ТекущийСправочник = "Пользователи" Тогда
			НоваяСтрока.ВнутреннийНомер = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;	
	ТекущийКонтакт = Неопределено;
КонецПроцедуры // ВладелецПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "Владелец"
//
Процедура ВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь);
	Если ЗначениеЗаполнено(Владелец) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока",	Владелец);
	КонецЕсли;	
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);	
	ОткрытьФорму("Справочник." + ИмяВладельца + ".ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры // ВладелецНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Очистка" элемента формы "Владелец"
//
Процедура ВладелецОчистка(Элемент, СтандартнаяОбработка)
	Владелец = Неопределено;
	ВладелецПриИзменении(Элемент);
КонецПроцедуры // ВладелецОчистка()

&НаКлиенте
// Процедура - обработчик события "Выбор" таблицы формы "Контакты"
//
Процедура КонтактыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбратьКонтакт();
КонецПроцедуры // КонтактыВыбор()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "Контакты"
//
Процедура КонтактыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикКонтактыПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры // КонтактыПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчики события "Выбор" элемента формы "СписокТелефонов"
//
Процедура СписокТелефоновВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбратьКонтакт();
КонецПроцедуры // СписокТелефоновВыбор()

&НаКлиенте
// Процедура - обработчики события "ПриАктивизацииСтроки" элемента формы "СписокТелефонов"
//
Процедура СписокТелефоновПриАктивизацииСтроки(Элемент)
	ТД = Элементы.СписокТелефонов.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		ПозвонитьПоНомеру = "";
	Иначе
		ПозвонитьПоНомеру = ТД.Представление;
	КонецЕсли;
КонецПроцедуры // СписокТелефоновПриАктивизацииСтроки()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик команды формы "Позвонить"
//
Процедура Позвонить(Команда)
	ВыбратьКонтакт();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
// Функция возвращает массив структур имен и сининимов справочников, имеющих табличную часть "КонтактнаяИнформация"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив имен справочников
//
Функция ПолучитьМассивСтруктурСправочников()
	МассивСтруктурСправочников = Новый Массив;
	УстановитьПривилегированныйРежим(Истина); 	
	Для Каждого ТекущийТип Из Метаданные.РегистрыСведений.сфпНомераТелефоновДляПоиска.Измерения.Объект.Тип.Типы() Цикл
		ТекущийСправочник = Новый(ТекущийТип); 
		СтруктураСправочника = Новый Структура;
		СтруктураСправочника.Вставить("Имя",		ТекущийСправочник.Метаданные().Имя);
		СтруктураСправочника.Вставить("Синоним",	ТекущийСправочник.Метаданные().Синоним);
		МассивСтруктурСправочников.Добавить(СтруктураСправочника);	
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь); 	
	Возврат МассивСтруктурСправочников;
КонецФункции // ПолучитьМассивСтруктурСправочников()

&НаСервереБезКонтекста
// Функция возвращает массив элементов переданного справочника
//
// Параметры:
//	Справочник	- Строка			- Имя справочника в конфигурации
//	Владелец	- СправочникСсылка	- Владелец справочника
//
// Возвращаемое значение:
//	Массив	- Массив элементов справочника
//
Функция ПолучитьМассивКонтактов(Справочник, Владелец = Неопределено)
	МассивКонтактов = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.Текст = "";
 	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Получатели.Ссылка
	               |ИЗ
	               |	Справочник." + Справочник + " КАК Получатели
	               |ГДЕ
	               |	НЕ Получатели.ПометкаУдаления";
	УстановитьПривилегированныйРежим(Истина); 	
	Если ЗначениеЗаполнено(Владелец) И (Метаданные.Справочники[Справочник].Владельцы.Количество() > 0) Тогда
		Запрос.Текст = Запрос.Текст + "
				   |	И Получатели.Владелец = &Владелец";
	КонецЕсли;	
	УстановитьПривилегированныйРежим(Ложь); 	
	Запрос.Текст = Запрос.Текст + "
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Получатели.Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Ссылка.ЭтоГруппа Тогда
			МассивКонтактов.Добавить(Выборка.Ссылка);
		КонецЕсли;	
	КонецЦикла;	
	Возврат МассивКонтактов;
КонецФункции // ПолучитьМассивКонтактов()

&НаСервереБезКонтекста
// Функция возвращает владельца переданного справочника
//
// Параметры:
//	Справочник	- Строка	- Имя справочника в конфигурации
//
// Возвращаемое значение:
//	Строка	- Имя справочника-владельца в конфигурации
//
Функция ПолучитьВладельца(Справочник)
	ВладелецСправочника = "";
	УстановитьПривилегированныйРежим(Истина); 	
	Для Каждого ТекущийВладелец Из Метаданные.Справочники[Справочник].Владельцы Цикл
		ВладелецСправочника = ТекущийВладелец.Имя;
		Прервать;
	КонецЦикла;	
	УстановитьПривилегированныйРежим(Ложь); 	
	Возврат ВладелецСправочника;
КонецФункции // ПолучитьВладельца()	
	
&НаСервере
// Процедура добавляет в таблицу телефонов объекта его внутренний номер
//
// Параметры:
//	Ссылка	- Произвольный	- Ссылка на владельца телефонов
//
Процедура ДобавитьВнутреннийНомер(Ссылка)
	ВнутреннийНомер = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(Ссылка);
	Если ПустаяСтрока(ВнутреннийНомер) Тогда Возврат; КонецЕсли;
	Попытка
		ВнутреннийНомер = Число(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(Ссылка.сфпТекущийВнутреннийНомер));
	Исключение
		ВнутреннийНомер = 0;
	КонецПопытки;	
	Если ВнутреннийНомер = 0 Тогда Возврат; КонецЕсли;
	ОтборНомера = Новый Структура;
	ОтборНомера.Вставить("Представление", ВнутреннийНомер);
	МассивСтрок = СписокТелефонов.НайтиСтроки(ОтборНомера); 
	Если МассивСтрок.Количество() > 0 Тогда Возврат; КонецЕсли;
	НоваяСтрока					= СписокТелефонов.Вставить(0);
	НоваяСтрока.Вид 			= НСтр("ru='Внутренний номер'");
	НоваяСтрока.Представление	= ВнутреннийНомер;
	НоваяСтрока.Ссылка 			= Ссылка;
	ПозвонитьПоНомеру = СписокТелефонов[0].Представление;
КонецПроцедуры // ДобавитьВнутреннийНомер()
	
&НаСервере
// Процедура заполняет таблицу телефонов для объекта
//
// Параметры:
//	Ссылка	- Произвольный	- ссылка на владельца телефонов
//
Процедура ЗаполнитьТаблицуТелефонов(Ссылка)
	СписокТелефонов.Очистить();
	МассивТелефонов = сфпСофтФонПроСервер.сфпПолучитьМассивТелефоновИФаксов(Ссылка);
	Для Каждого ЭлементМассива Из МассивТелефонов Цикл
		НоваяСтрока					= СписокТелефонов.Добавить();
		НоваяСтрока.Вид 			= ЭлементМассива.Вид;
		НоваяСтрока.Представление	= ЭлементМассива.Представление;
		НоваяСтрока.Ссылка 			= Ссылка;
	КонецЦикла;
	Если ТекущийСправочник = "Пользователи" Тогда
		ДобавитьВнутреннийНомер(Ссылка);
	КонецЕсли;
	Если СписокТелефонов.Количество() = 0 Тогда
		ПозвонитьПоНомеру = "";
	Иначе
		ПозвонитьПоНомеру = СписокТелефонов[0].Представление;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьТаблицуТелефонов()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части "Контакты"
//
// Параметры:
//	Нет.
//
Процедура ОбработчикКонтактыПриАктивизацииСтроки()
	ТД = Элементы.Контакты.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущийКонтакт = ТД.Ссылка Тогда
		Возврат;
	КонецЕсли;
	ТекущийКонтакт = ТД.Ссылка;
	ЗаполнитьТаблицуТелефонов(ТД.Ссылка);
КонецПроцедуры // ОбработчикКонтактыПриАктивизацииСтроки()

&НаКлиенте
// Процедура выполняет действия после выбора номера телефона
//
// Параметры:
//	Нет.
//
Процедура ВыбратьКонтакт()
	Если ПустаяСтрока(ПозвонитьПоНомеру) Тогда
		Возврат;
	ИначеЕсли СписокТелефонов.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли ПозвонитьПоНомеру = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер() Тогда
		Возврат;
	КонецЕсли;
	ВыбранныйКонтакт = Новый Структура;
	ВыбранныйКонтакт.Вставить("Контакт",		СписокТелефонов[0].Ссылка);
	ВыбранныйКонтакт.Вставить("НомерТелефона",	ПозвонитьПоНомеру);
	Закрыть(ВыбранныйКонтакт);
КонецПроцедуры // ВыбратьКонтакт()

&НаКлиенте
// Процедура обновляет состояния внутренних линий
//
// Параметры:
//	МассивЛиний	- Массив	- Массив структур с описанием линий
//
Процедура ОбновитьСостоянияЛиний(МассивЛиний)
	Для Каждого ЭлементМассива Из МассивЛиний Цикл
		Если ПустаяСтрока(ЭлементМассива.Number) Тогда Продолжить; КонецЕсли;
		ПараметрыОтбора = Новый Структура("ВнутреннийНомер", ЭлементМассива.Number);
		МассивСтрок = Контакты.НайтиСтроки(ПараметрыОтбора);	
		Для Каждого НайденнаяСтрока Из МассивСтрок Цикл
			НайденнаяСтрока.Картинка = ЭлементМассива.LineState - 1;
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры // ОбновитьСостоянияЛиний()	

&НаКлиенте
// Процедура получает состояния внутренних линий
//
// Параметры:
//	Нет.
//
Процедура ПолучитьСостоянияЛиний()
	ОтключитьОбработчикОжидания("ПолучитьСостоянияЛиний"); 
	сфпСофтФонПроКлиент.сфпПолучитьСостоянияЛиний();
КонецПроцедуры // ПолучитьСостоянияЛиний()	

#КонецОбласти