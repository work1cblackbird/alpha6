// Модуль общей формы "Параметры документа"

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Производим чтение основных входных параметров
	ВладелецОбъект               = Параметры.Объект;
	МетаданныеОбъекта            = Параметры.Объект.Ссылка.Метаданные();
	ИмяОбъекта                   = МетаданныеОбъекта.Имя;
	Операция                     = Параметры.Операция;
	ПоказыватьПараметрыДокумента = Параметры.ПоказыватьПараметрыДокумента;
	
	МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
	
	// Получим неотображаемые реквизиты
	Попытка
		НеотображаемыеРеквизиты = МодульМенеджера.ПолучитьНеотображаемыеРеквизиты(ВладелецОбъект);
	Исключение
		НеотображаемыеРеквизиты = Новый Массив;
	КонецПопытки;
	Если ТипЗнч(Параметры.НеотображаемыеРеквизиты) = Тип("Массив") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеотображаемыеРеквизиты, Параметры.НеотображаемыеРеквизиты, Истина);
	КонецЕсли;
	
	// Получим дополнительные параметры
	Попытка
		ДопПараметры = МодульМенеджера.ПолучитьДопПараметрыОткрытияФормыПараметров(ВладелецОбъект);
	Исключение
		ДопПараметры = Новый Структура;
	КонецПопытки;
	Если ТипЗнч(Параметры.ДопПараметры) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДопПараметры, Параметры.ДопПараметры);
	КонецЕсли;
	
	ИспользуютсяАвтоматическиеИРучныеСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки")
		= Перечисления.СкидкиСпособыВыбора.АвтоматическиеИРучныеСкидки;
	
	// Восстановим параметры отображения диалога для текущей операции
	КлючСохраненияПоложенияОкна = Операция;
	
	// Произведем добавление реквизита формы описывающего объект подобный владельцу
	ДобавляемыеРеквизиты = Новый Массив();
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументОбъект", Новый ОписаниеТипов("ДокументОбъект." + ИмяОбъекта)));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КопияОбъекта",   Новый ОписаниеТипов("ДокументОбъект." + ИмяОбъекта)));
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ИсходныйОбъект = ДанныеФормыВЗначение(ВладелецОбъект, Тип("ДокументОбъект." + ИмяОбъекта));
	ЗначениеВРеквизитФормы(ИсходныйОбъект, "ДокументОбъект");
	ЗначениеВРеквизитФормы(ИсходныйОбъект, "КопияОбъекта");
	
	// Получим обязательные реквизиты
	Если НЕ ЯвляетсяБСПДокументом(Параметры.Объект.Ссылка) Тогда
		ОбязательныеРеквизиты = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Параметры.Объект.Ссылка).ПолучитьОбязательныеРеквизиты(Параметры.Объект);
		Для каждого ЭлементФормы Из Элементы Цикл
			Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") И (ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода) Тогда
				
				// Автоотметка незаполненного возможна только для полей ввода
				Если ОбязательныеРеквизиты.Найти(ЭлементФормы.Имя) <> Неопределено Тогда
					РеквизитОбязательный = Истина;
				Иначе
					РеквизитОбязательный = Ложь;
				КонецЕсли;
				
				ЭлементФормы.ОтметкаНезаполненного = РеквизитОбязательный;
				ЭлементФормы.АвтоОтметкаНезаполненного = РеквизитОбязательный;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Заполним владельца карточки
	Если ЕстьРеквизит(ВладелецОбъект, "Контрагент") Тогда
		ВладелецКарты = ВладелецОбъект.Контрагент;
	КонецЕсли;
	
	// Производим заполнение данных формы на основании переданного объекта
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВладелецОбъект);
	
	// Устанавливаем видимость элементов управления формы в зависимости от наличия аналогичных в исходном объекте.
	Элементы.ДокументОснование       .Видимость = ЕстьРеквизит(ВладелецОбъект, "ДокументОснование");
	Элементы.Проект                  .Видимость = ЕстьРеквизит(ВладелецОбъект, "Проект");
	Элементы.Менеджер                .Видимость = ЕстьРеквизит(ВладелецОбъект, "Менеджер");
	Элементы.ТипЦен                  .Видимость = ЕстьРеквизит(ВладелецОбъект, "ТипЦен");
	Элементы.ВалютаУпрУчета          .Видимость = ЕстьРеквизит(ВладелецОбъект, "КурсВалютыУпр");
	Элементы.КурсВалютыУпр           .Видимость = ЕстьРеквизит(ВладелецОбъект, "КурсВалютыУпр");
	Элементы.ВалютаВзаиморасчетов    .Видимость = ЕстьРеквизит(ВладелецОбъект, "КурсВалютыВзаиморасчетов");
	Элементы.КурсВалютыВзаиморасчетов.Видимость = ЕстьРеквизит(ВладелецОбъект, "КурсВалютыВзаиморасчетов");
	Элементы.Карточка                .Видимость = ЕстьРеквизит(ВладелецОбъект, "Карточка");
	Элементы.РегламентированныйУчет  .Видимость = ЕстьРеквизит(ВладелецОбъект, "РегламентированныйУчет");
	Элементы.НадписьРегламентированныйУчет.Видимость = ЕстьРеквизит(ВладелецОбъект, "РегламентированныйУчет");
	Элементы.СкидкаНаценка           .Видимость = ЕстьРеквизит(ВладелецОбъект, "СкидкаНаценка");
	Элементы.СкидкаНаценкаРаботы     .Видимость = ЕстьРеквизит(ВладелецОбъект, "СкидкаНаценкаРаботы");
	Элементы.ТипЦенРабот             .Видимость = ЕстьРеквизит(ВладелецОбъект, "ТипЦенРабот");
	Элементы.ВалютаДокумента         .Видимость = ЕстьРеквизит(ВладелецОбъект, "ВалютаДокумента");
	Элементы.КурсДокумента           .Видимость = ЕстьРеквизит(ВладелецОбъект, "КурсДокумента");
	Элементы.БлокироватьПерерасчетСкидок    .Видимость = ЕстьРеквизит(ВладелецОбъект, "БлокироватьПерерасчетСкидок");
	Элементы.ДатаСоздания            .Видимость = ЕстьРеквизит(ВладелецОбъект, "ДатаСоздания");
	Элементы.ДатаОперации            .Видимость = ЕстьРеквизит(ВладелецОбъект, "ДатаОперации");
	Элементы.Автор                   .Видимость = ЕстьРеквизит(ВладелецОбъект, "Автор");
	
	Элементы.ПодписантОтОрганизации  .Видимость = ЕстьРеквизит(ВладелецОбъект, "ПодписантОтОрганизации");
	Элементы.ПодписантОтКонтрагента  .Видимость = ЕстьРеквизит(ВладелецОбъект, "ПодписантОтКонтрагента");
	
	Элементы.ПоказыватьПараметрыДокумента.Видимость = НЕ ЯвляетсяБСПДокументом(Параметры.Объект.Ссылка);
	
	// Для ряда документов (План поступления ДС, Обслуживание актива,Ввод остатков товаров) реквизит Договор не обязателен
	// для заполнения. Как следствие, в таких случаях ненужный и не заполненный реквизит КурсВалютыВзаиморасчетов вызывает ошибку.
	// Уберем для заполнения эти реквизиты в случаях не заполненности Договора.
	
	Элементы.ВалютаВзаиморасчетов    .Видимость = Элементы.ВалютаВзаиморасчетов.Видимость И ЗначениеЗаполнено(ВладелецОбъект.ДоговорВзаиморасчетов);
	Элементы.КурсВалютыВзаиморасчетов.Видимость = Элементы.ВалютаВзаиморасчетов.Видимость;
	
	СкрытьОтображениеРеквизитов(НеотображаемыеРеквизиты);
	
	// Рассчитаем отдельно некоторые параметры операции
	Заголовок = "Параметры: " + Операция;
	Время = '00010101' + (ВладелецОбъект.Дата - НачалоДня(ВладелецОбъект.Дата));
	
	Если Элементы.ДокументОснование.Видимость Тогда
		Элементы.ДокументОснование.ОграничениеТипа = МетаданныеОбъекта.Реквизиты.ДокументОснование.Тип;
	КонецЕсли;
	Если НЕ Элементы.ТипЦен.Видимость Тогда
		Элементы.Переместить(Элементы.ВалютаКурсВзаиморасчетов, Элементы.ЦеныВалютаЛево);
		Элементы.ЦеныВалюта.Заголовок = НСтр("ru = 'Валюта и курс'");
	КонецЕсли;
	Если Элементы.ВалютаУпрУчета.Видимость Тогда
		ВалютаУпрУчета = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	КонецЕсли;
	Если Элементы.ВалютаВзаиморасчетов.Видимость И ЕстьРеквизит(ВладелецОбъект, "ДоговорВзаиморасчетов") Тогда
		ВалютаВзаиморасчетов = ВладелецОбъект.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	// Установим свойство "ТолькоПросмотр" для реквизитов в зависимости от установленных прав.
	ЗапретитьРедактированиеВалютыДокумента = 
			ПолучитьЗначениеПараметраСтруктуры(ДопПараметры, "ЗапретитьРедактированиеВалютыДокумента", Ложь);
	Элементы.Карточка       .ТолькоПросмотр = 
			НЕ (ПраваИНастройкиПользователя.Значение("РазрешитьРучнойВыборКарточки",      ЭтотОбъект.ДокументОбъект));
	Элементы.ВалютаДокумента.ТолькоПросмотр = 
			НЕ (ПраваИНастройкиПользователя.Значение("РазрешитьИзменениеВалютыДокумента", ЭтотОбъект.ДокументОбъект)) 
				ИЛИ ЗапретитьРедактированиеВалютыДокумента;
	Элементы.КурсДокумента  .ТолькоПросмотр = 
			НЕ (ПраваИНастройкиПользователя.Значение("РазрешитьИзменениеКурсаДокумента",  ЭтотОбъект.ДокументОбъект)) 
				ИЛИ ЗапретитьРедактированиеВалютыДокумента;
	Элементы.ВалютаУпрУчета .ТолькоПросмотр = НЕ (Элементы.ВалютаУпрУчета.Видимость 
			И ПраваИНастройкиПользователя.Значение("РедактированиеКурсаУправленческойВалютыВДокументах", ЭтотОбъект.ДокументОбъект)) 
				ИЛИ ЗапретитьРедактированиеВалютыДокумента;
	Элементы.КурсВалютыУпр  .ТолькоПросмотр = Элементы.ВалютаУпрУчета.ТолькоПросмотр;
	
	ИспользоватьРасчетныйТипЦен = ПолучитьЗначениеПараметраСтруктуры(
		ДопПараметры,
		"ИспользоватьРасчетныйТипЦен",
		Истина);
	
	// Установим доступность поля Скидки в зависимости от того, разрешены ли пользователю ручные скидки.
	Если Элементы.СкидкаНаценка.Видимость Тогда
		СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", ЭтотОбъект.ДокументОбъект);
		Элементы.СкидкаНаценка.ТолькоПросмотр = НЕ (СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидки 
					ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеИРучныеСкидки 
					ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов);
	КонецЕсли;
	
	Если Элементы.СкидкаНаценкаРаботы.Видимость Тогда
		Элементы.СкидкаНаценкаРаботы.ТолькоПросмотр = Элементы.СкидкаНаценка.ТолькоПросмотр;
	КонецЕсли;
	
	// Инициализируем меню управления временем текущего документа
	СписокВыбораВремени = Элементы.Время.СписокВыбора;
	СписокВыбораВремени.Добавить("ПередПредыдущим", НСтр("ru = 'Перед предыдущим документом'"));
	СписокВыбораВремени.Добавить("ЗаСледующим",     НСтр("ru = 'За следующим документом'"));
	СписокВыбораВремени.Добавить("НачалоДня",       НСтр("ru = 'Перед первым документом'"));
	СписокВыбораВремени.Добавить("КонецДня",        НСтр("ru = 'За последним документом'"));
	СписокВыбораВремени.Добавить("ТекущееВремя",    НСтр("ru = 'Текущее время'"));
	СписокВыбораВремени.Добавить("ДатаСоздания",    НСтр("ru = 'Дата создания:'") + " " + ДатаСоздания);
	СписокВыбораВремени.Добавить("ДатаОперации",    НСтр("ru = 'Дата операции:'") + " " + ДатаОперации);
	
	// Проверим возможность штрихкодирования документа
	ИспользованиеШтрихКодов = ШтрихкодированиеВызовСервера.ИспользоватьШтрихкодирование(Ссылка);
	Если ИспользованиеШтрихКодов И Параметры.Свойство("Штрихкод") Тогда
		ШтрихКод = Параметры.Штрихкод;
	КонецЕсли;
	Элементы.ШтрихКод.ТолькоПросмотр = (НЕ ИспользованиеШтрихКодов);
	
	// Отбор для документа основание
	Если ЕстьРеквизит(ВладелецОбъект, "ДокументОснование") И Не Элементы.Найти("ДокументОснование")=Неопределено Тогда
		
		// параметры выбора по объекту
		Для Каждого ТекПараметрВыбора Из МетаданныеОбъекта.Реквизиты.ДокументОснование.ПараметрыВыбора Цикл
			УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.ДокументОснование.ПараметрыВыбора, ТекПараметрВыбора.Имя, ТекПараметрВыбора.Значение);
		КонецЦикла;
		
		// параметры выбора по форме
		ПараметрыВыбора = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПараметрыВыбораДокументаОснование", Неопределено);
		Если ПараметрыВыбора <> Неопределено Тогда
			Для Каждого ПараметрВыбора Из ПараметрыВыбора Цикл
				УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.ДокументОснование.ПараметрыВыбора, ПараметрВыбора.Имя, ПараметрВыбора.Значение);
			КонецЦикла;
		КонецЕсли;
		
		// ограничение типа на форме
		ОграничениеТипа = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ОграничениеТипаДокументаОснование", Неопределено);
		Если ЗначениеЗаполнено(ОграничениеТипа) Тогда
			Элементы.ДокументОснование.ОграничениеТипа = ОграничениеТипа;
		КонецЕсли;
		
		// ограничение выбора для документа Событие
		Если МетаданныеОбъекта.ВводитсяНаОсновании.Содержит(Метаданные.Документы.Событие)
			И ЗначениеЗаполнено(ПраваИНастройкиПользователя.Значение("РезультатВзаимодействия", ЭтотОбъект)) Тогда
			Если МетаданныеОбъекта.Синоним <> Строка(ПраваИНастройкиПользователя.Значение("РезультатВзаимодействия", ЭтотОбъект)) Тогда
				Для Каждого Перечисление Из Перечисления.ДокументыОбработкиСобытия Цикл
					Если МетаданныеОбъекта.Синоним = Строка(Перечисление) Тогда
						ТипыВводаНаОсновании = Элементы.ДокументОснование.ОграничениеТипа.Типы();
						НомерСтрокиТипаСобытие = ТипыВводаНаОсновании.Найти(Тип("ДокументСсылка.Событие"));
						Если НомерСтрокиТипаСобытие <> Неопределено Тогда
							ТипыВводаНаОсновании.Удалить(ТипыВводаНаОсновании.Найти(Тип("ДокументСсылка.Событие")));
							Элементы.ДокументОснование.ОграничениеТипа = Новый ОписаниеТипов(ТипыВводаНаОсновании);
							Если ТипыВводаНаОсновании.Количество() = 0 Тогда
								Элементы.ДокументОснование.Доступность = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Элементы.Найти("ТипЦен")=Неопределено Тогда
		
		// Отбор для типа цен
		Если Справочники.ХозОперации.СоответствуетВидуОперации(ХозОперация, Перечисления.ВидыОперацийДоговора.Покупка) Тогда
			УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.ТипЦен.ПараметрыВыбора, "Отбор.Закупка", Истина);
		ИначеЕсли Справочники.ХозОперации.СоответствуетВидуОперации(ХозОперация, Перечисления.ВидыОперацийДоговора.Продажа) Тогда
			УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.ТипЦен.ПараметрыВыбора, "Отбор.Продажа", Истина);
		КонецЕсли;
		
		Если НЕ ИспользоватьРасчетныйТипЦен Тогда
			УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.ТипЦен.ПараметрыВыбора, "Отбор.Рассчитывается", Ложь);
		КонецЕсли;
		
		// Отбор для выбора типа цен по применению
		Если ЕстьРеквизит(ВладелецОбъект, "ТипЦен") Тогда
			
			Для Каждого ТекОтбор Из МетаданныеОбъекта.Реквизиты.ТипЦен.ПараметрыВыбора Цикл
				Если ТекОтбор.Имя = "Отбор.ДляРабот" Тогда
					УправлениеДиалогомСервер.ОбновитьПараметрВыбора(ЭтотОбъект.Элементы.ТипЦен.ПараметрыВыбора, "Отбор.ДляРабот",       ТекОтбор.Значение);
				ИначеЕсли ТекОтбор.Имя = "Отбор.ДляАвтомобилей" Тогда
					УправлениеДиалогомСервер.ОбновитьПараметрВыбора(ЭтотОбъект.Элементы.ТипЦен.ПараметрыВыбора, "Отбор.ДляАвтомобилей", ТекОтбор.Значение);
				ИначеЕсли ТекОтбор.Имя = "Отбор.ДляТоваров" Тогда
					УправлениеДиалогомСервер.ОбновитьПараметрВыбора(ЭтотОбъект.Элементы.ТипЦен.ПараметрыВыбора, "Отбор.ДляТоваров",     ТекОтбор.Значение);
				КонецЕсли;
				Если ТекОтбор.Имя = "Отбор.Рассчитывается" Тогда
					УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.ТипЦен.ПараметрыВыбора, "Отбор.Рассчитывается", ТекОтбор.Значение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если Элементы.ТипЦенРабот.Видимость Тогда
			УправлениеДиалогомСервер.ОбновитьПараметрВыбора(ЭтотОбъект.Элементы.ТипЦенРабот.ПараметрыВыбора, "Отбор.ДляРабот", Истина);
		КонецЕсли;
		
	КонецЕсли;

	Если Элементы.Проект.Видимость Тогда
		Элементы.Проект.Доступность = (НЕ ПраваИНастройкиПользователя.Значение(
			"КонтролироватьСоответствиеПроектов", ЭтотОбъект.ДокументОбъект)=Перечисления.ВидыКонтроля.Запрещать);
		
		Если Не ЗначениеЗаполнено(Проект) Тогда          
			Проект = ПодразделениеКомпании.ОсновнойПроект; 
			ПроектПриИзмененииНаСервере(Новый Структура);	
		КонецЕсли;
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СкидкаНаценка",
		"Доступность",
		НЕ БлокироватьПерерасчетСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СкидкаНаценкаРаботы",
		"Доступность",
		НЕ БлокироватьПерерасчетСкидок
	);
	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// установим видимость реквизитов по владельцу формы
	Если Элементы.КурсВалютыВзаиморасчетов.Видимость И Элементы.ВалютаВзаиморасчетов.Видимость Тогда
		Элементы.КурсВалютыВзаиморасчетов.Видимость = ((НЕ ВладелецФормы.Элементы.Найти("ДоговорВзаиморасчетов")=Неопределено) И ВладелецФормы.Элементы.ДоговорВзаиморасчетов.Видимость);
		Элементы.ВалютаВзаиморасчетов.Видимость     = Элементы.КурсВалютыВзаиморасчетов.Видимость;
	КонецЕсли;
	
	Если (НЕ ТолькоПросмотр) И (НЕ ВладелецФормы.Элементы.Найти("ПараметрыДокумента")=Неопределено) Тогда
		ТолькоПросмотр = ВладелецФормы.Элементы.ПараметрыДокумента.ТолькоПросмотр;
	КонецЕсли;	
КонецПроцедуры // ПриОткрытии()

// Обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить.
//
// Параметры:
//  ИмяСобытия - Строка       - Имя, идентифицирующее событие.
//  Параметр   - Произвольный - Параметр сообщения.
//  Источник   - Произвольный - Источник события.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВводДоступен() И ИмяСобытия = "ScanData" Тогда
		
		ПолученныйШтрихкод = ШтрихкодированиеКлиент.ПолучитьШтрихкодИзПараметровОборудования(ИмяСобытия, Параметр);
		Если ЗначениеЗаполнено(ПолученныйШтрихкод) Тогда
			ПараметрыДействия = Новый Структура;
			ШтрихкодированиеКлиент.ОбработатьПолныйШтрихкод(ПолученныйШтрихкод, ПараметрыДействия);
			
			Если ИспользованиеШтрихКодов И НЕ Элементы.Штрихкод.ТолькоПросмотр Тогда
				
				// Подставим считанный штрихкод
				Штрихкод = ПараметрыДействия.Штрихкод;
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Установлен штрихкод  документа %1.'"), ШтрихКод)
				);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

// Обработчик события возникающего на сервере при необходимости проверки заполнения реквизитов при записи в форме.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Получим и установим перечень обязательных к заполнению реквизитов.
	Если Не ЯвляетсяБСПДокументом(Ссылка) Тогда
		ОбязательныеРеквизиты = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка).
		ПолучитьОбязательныеРеквизиты(ЭтотОбъект["ДокументОбъект"]);
		Для Каждого ОбязательныйРеквизит Из ОбязательныеРеквизиты Цикл
			Если Не ПроверяемыеРеквизиты.Найти(ОбязательныйРеквизит) = Неопределено Тогда
				ПроверяемыеРеквизиты.Добавить(ОбязательныйРеквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Удалим невидимые реквизиты из массива проверяемых реквизитов.
	ЭлементыПроверяемыхРеквизитов = СтрРазделить("Автор,ВалютаДокумента,Дата,КурсВалютыВзаиморасчетов,КурсВалютыУпр,КурсДокумента,
		|Организация,ПодразделениеКомпании,ТипЦен", ",|" + Символы.ПС, Ложь);
	Для Каждого ИмяЭлемента Из ЭлементыПроверяемыхРеквизитов Цикл
		
		Если Не Элементы[ИмяЭлемента].Видимость Тогда
			ИндексЭлемента = ПроверяемыеРеквизиты.Найти(ИмяЭлемента);
			Если Не ИндексЭлемента = Неопределено Тогда
				ПроверяемыеРеквизиты.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ТипЦенРабот" в контексте сервера.
//
&НаСервере
Процедура ТипЦенРаботПриИзмененииНаСервере(ПараметрыДействия)
	
	ЭтотОбъект.ДокументОбъект.ТипЦенРабот = ТипЦенРабот;
	Документы[ИмяОбъекта].ТипЦенРаботПриИзменении(ЭтотОбъект.ДокументОбъект, ПараметрыДействия);
	ОбновитьДанныеФормы(ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "ТипЦенРабот".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТипЦенРаботПриИзменении(Элемент)
	ПараметрыДействия = Новый Структура;
	ТипЦенРаботПриИзмененииНаСервере(ПараметрыДействия);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "Дата" в контексте сервера.
//
&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия)
	
	// Вызываем обработчик изменения данных объекта
	Документы[ИмяОбъекта].ДатаПриИзменении(ЭтотОбъект.ДокументОбъект, ПараметрыДействия);
	ОбновитьДанныеФормы(ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Дата".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ПроверитьНомерДокумента() <> 0 Тогда
		
		Номер = "";
		
	КонецЕсли;
	
	ПараметрыДействия = Новый Структура;
	
	Если ИмяОбъекта = "ИзменениеЦен" Тогда
		ДатаПриИзмененииНаСервере(ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ПодразделениеКомпании" в контексте сервера.
//
&НаСервере
Процедура ПодразделениеКомпанииПриИзмененииНаСервере(ПараметрыДействия)
	
	// Вызываем обработчик изменения данных объекта
	ЭтотОбъект.ДокументОбъект.ПодразделениеКомпании = ПодразделениеКомпании;
	Документы[ИмяОбъекта].ПодразделениеКомпанииПриИзменении(ЭтотОбъект.ДокументОбъект, ПараметрыДействия);
	
	Если Элементы.Проект.Видимость И ЗначениеЗаполнено(ПодразделениеКомпании.ОсновнойПроект) Тогда 
		Проект = ПодразделениеКомпании.ОсновнойПроект;
		ПроектПриИзмененииНаСервере(Новый Структура);		
	КонецЕсли;
	
	ОбновитьДанныеФормы(ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ПодразделениеКомпании".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ПодразделениеКомпанииПриИзмененииНаСервере(ПараметрыДействия);
	Если ПараметрыДействия.Свойство("НоваяВалюта") Тогда
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияПодразделениеКомпанииПриИзменении", ЭтотОбъект, Новый Структура("НоваяВалюта",ПараметрыДействия.НоваяВалюта));
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Установить валюту документа равной валюте выбранного подразделения?'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Организация" в контексте сервера.
//
&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере(ПараметрыДействия)
	
	ЭтотОбъект.ДокументОбъект.Организация = Организация;
	Документы[ИмяОбъекта].ОрганизацияПриИзменении(ЭтотОбъект.ДокументОбъект, ПараметрыДействия);
	ОбновитьДанныеФормы(ПараметрыДействия);
	
	Если ПраваИНастройкиПользователя.Значение("КонтролироватьСоответствиеОрганизацииПодразделения", ЭтотОбъект.ДокументОбъект)
		И (НЕ ПодразделениеКомпании.Пустая()) И (ПодразделениеКомпании.Организация <> Организация) Тогда
		// Если при выборе организации подразделение не принадлежит ей сообщение об ошибке
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='" + ПодразделениеКомпании.Наименование 
			+ " " + НСтр("ru = 'не принадлежит'") + " " + Организация.Наименование + "'"), , "ПодразделениеКомпании");
		Элементы.Организация.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	ИначеЕсли (ПодразделениеКомпании.Организация = Организация) Тогда
		Элементы.Организация.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Организация".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ОрганизацияПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Автор" в контексте сервера.
//
&НаСервере
Процедура АвторПриИзмененииНаСервере(ПараметрыДействия)
	
	ЭтотОбъект.ДокументОбъект.Автор = Автор;
	Документы[ИмяОбъекта].АвторПриИзменении(ЭтотОбъект.ДокументОбъект, ПараметрыДействия);
	ОбновитьДанныеФормы(ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Автор".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвторПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	АвторПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Штрихкод".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ШтрихКодПриИзменении(Элемент)
	
	Отказ = Ложь;
	ШтрихкодированиеКлиент.ПроверкаШтрихкодовПередЗаписью(ЭтотОбъект, Штрихкод, Ссылка, Отказ);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Штрихкод" в контексте сервера.
//
&НаСервере
Процедура ШтрихКодНачалоВыбораНаСервере()
	
	// Создание нового штрих-кода
	ШтрихКод = ШтрихкодированиеВызовСервера.СформироватьНовыйШтрихкод(ЭтотОбъект.ДокументОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры // ШтрихКодНачалоВыбораНаСервере()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Штрихкод".
//
&НаКлиенте
Процедура ШтрихКодНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ШтрихКод) Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияПриСменеШтрихкода", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Создать новый штрихкод документа?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ШтрихКодНачалоВыбораНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ШтрихКодНачалоВыбора()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Проект" в контексте сервера.
//
&НаСервере
Процедура ПроектПриИзмененииНаСервере(ПараметрыДействия)
		
	ОсновнойПроектДоговора = ?(ЕстьРеквизит(ЭтотОбъект.ДокументОбъект, "ДоговорВзаиморасчетов"),
		ЭтотОбъект.ДокументОбъект.ДоговорВзаиморасчетов.ОсновнойПроект, Справочники.Проекты.ПустаяСсылка());
	Если ЗначениеЗаполнено(ОсновнойПроектДоговора) И ЗначениеЗаполнено(Проект) И (ОсновнойПроектДоговора <> Проект)
		И ПраваИНастройкиПользователя.Значение("КонтролироватьСоответствиеПроектов", ЭтотОбъект.ДокументОбъект) = Перечисления.ВидыКонтроля.Предупреждать Тогда
		ОбщегоНазначения.СообщитьПользователю(" " + НСтр("ru='Проект'") + " """ + Проект.Наименование + """ " 
			+ НСтр("ru = 'не принадлежит договору'") + " """ + ЭтотОбъект.ДокументОбъект.ДоговорВзаиморасчетов.Наименование
			+ """. Установлен основной проект договора.",);
		Проект = ОсновнойПроектДоговора;
	КонецЕсли;
	
	ЭтотОбъект.ДокументОбъект.Проект = Проект;
	Документы[ИмяОбъекта].ПроектПриИзменении(ЭтотОбъект.ДокументОбъект, ПараметрыДействия);
	ОбновитьДанныеФормы(ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Проект".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ПроектПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ТипЦен" в контексте сервера.
//
&НаСервере
Процедура ТипЦенПриИзмененииНаСервере(ПараметрыДействия)
	
	Если НЕ ИспользоватьРасчетныйТипЦен И ТипЦен.Рассчитывается Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Использование расчетных типов цен запрещено.'"), ЭтотОбъект.Ссылка, "ТипЦен");
		ТипЦен = ЭтотОбъект.ДокументОбъект.ТипЦен;
		
	КонецЕсли;
	
	ЭтотОбъект.ДокументОбъект.ТипЦен = ТипЦен;
	Документы[ИмяОбъекта].ТипЦенПриИзменении(ЭтотОбъект.ДокументОбъект, ПараметрыДействия);
	ОбновитьДанныеФормы(ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ТипЦен".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ТипЦенПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ВалютаДокумента" в контексте сервера.
//
&НаСервере
Процедура ВалютаДокументаПриИзмененииНаСервере(ПараметрыДействия)
	
	ЭтотОбъект.ДокументОбъект.ВалютаДокумента = ВалютаДокумента;
	Документы[ИмяОбъекта].ВалютаДокументаПриИзменении(ЭтотОбъект.ДокументОбъект, ПараметрыДействия);
	ОбновитьДанныеФормы(ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ВалютаДокумента".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ВалютаДокументаПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "КурсДокумента" в контексте сервера.
//
&НаСервере
Процедура КурсДокументаПриИзмененииНаСервере(ПараметрыДействия)
	
	ЭтотОбъект.ДокументОбъект.КурсДокумента = КурсДокумента;
	Документы[ИмяОбъекта].КурсДокументаПриИзменении(ЭтотОбъект.ДокументОбъект, ПараметрыДействия);
	ОбновитьДанныеФормы(ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "КурсДокумента".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КурсДокументаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КурсДокументаПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Документ основание" в контексте сервера.
//
&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере(ПараметрыДействия)
	
	ЭтотОбъект.ДокументОбъект.ДокументОснование = ДокументОснование;
	Документы[ИмяОбъекта].ДокументОснованиеПриИзменении(ЭтотОбъект.ДокументОбъект, ПараметрыДействия);
	ОбновитьДанныеФормы(ПараметрыДействия);
	
КонецПроцедуры // ДокументОснованиеПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	СсылкаНаВладельца = ЭтотОбъект.КопияОбъекта.Ссылка;
	
	Если НЕ СсылкаНаВладельца.Пустая() И ДокументОснование = СсылкаНаВладельца Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя вводить документ на основании самого себя.'"));
		ДокументОснование = Неопределено;
		Возврат;
	КонецЕсли;
	
	ПараметрыДействия = Новый Структура;
	ДокументОснованиеПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Время".
//
&НаСервере
Процедура ВремяОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	// Получим возможный варианты изменения времени
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	Документ.Дата
				   |ИЗ
				   |	Документ."+ИмяОбъекта+" КАК Документ
				   |ГДЕ
				   |	НЕ Документ.Ссылка = &Ссылка
				   |	И Документ.Дата МЕЖДУ &НаДатуНачалоДня И &НаДатуКонецДня";
	Запрос.УстановитьПараметр("НаДатуНачалоДня",НачалоДня(?(ЗначениеЗаполнено(Дата),Дата,ТекущаяДатаСеанса())));
	Запрос.УстановитьПараметр("НаДатуКонецДня",КонецДня(?(ЗначениеЗаполнено(Дата),Дата,ТекущаяДатаСеанса())));
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	ТаблицаВремени = Запрос.Выполнить().Выгрузить();
	
	Если ВыбранноеЗначение = "НачалоДня" И ТаблицаВремени.Количество()>0 Тогда
		
		ВыбранноеЗначение = ТаблицаВремени[0].Дата-1;
		
	ИначеЕсли ВыбранноеЗначение = "КонецДня" И ТаблицаВремени.Количество()>0 Тогда
		
		ВыбранноеЗначение = ТаблицаВремени[ТаблицаВремени.Количество()-1].Дата+1;
		
	Иначе
		
		// Определим время следующего и предыдущего документов
		ВремяСледующего = Дата;
		ВремяПрошлого = Дата;
		Для Каждого СтрокаВремени Из ТаблицаВремени Цикл
			Если СтрокаВремени.Дата > ВремяСледующего Тогда
				ВремяСледующего = СтрокаВремени.Дата;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаВремени Из ТаблицаВремени Цикл
			Если СтрокаВремени.Дата < Дата Тогда
				ВремяПрошлого = СтрокаВремени.Дата;
			КонецЕсли;
		КонецЦикла;
		
		Если ВыбранноеЗначение = "ПередПредыдущим" И ВремяПрошлого <> Дата Тогда
			ВыбранноеЗначение = ВремяПрошлого-1;
		ИначеЕсли ВыбранноеЗначение = "ЗаСледующим" И ВремяСледующего <> Дата Тогда
			ВыбранноеЗначение = ВремяСледующего+1;
		Иначе
			ВыбранноеЗначение = Время;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ВремяОбработкаВыбораНаСервере()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Время".
//
&НаКлиенте
Процедура ВремяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Установим дату в зависимости от выбранного значения
	Если ВыбранноеЗначение = "ТекущееВремя" Тогда
		
		ВыбранноеЗначение = ОбщегоНазначенияКлиент.ДатаСеанса();
		
	ИначеЕсли ВыбранноеЗначение = "ДатаСоздания" Тогда
		
		ВыбранноеЗначение = ДатаСоздания;
		
	ИначеЕсли ВыбранноеЗначение = "ДатаОперации" Тогда
		
		ВыбранноеЗначение = ДатаОперации;
		
	Иначе
		
		// Обработаем в контексте сервера
		ВремяОбработкаВыбораНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
	ПолученноеВремя = ВыбранноеЗначение - НачалоДня(ВыбранноеЗначение);
	Дата = НачалоДня(Дата)+ПолученноеВремя;
	
КонецПроцедуры //ВремяОбработкаВыбора()

&НаКлиенте
Процедура БлокироватьПерерасчетСкидокПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СкидкаНаценка",
		"Доступность",
		НЕ БлокироватьПерерасчетСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СкидкаНаценкаРаботы",
		"Доступность",
		НЕ БлокироватьПерерасчетСкидок
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего на клиенте при нажатии кнопки "Применить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Применить(Команда)
	
	// Производим формирование полной даты документа
	Дата = НачалоДня(Дата) + (Время - НачалоДня(Время));
	
	// Инициализируем переменные нужные для анализа изменений в форме
	ИзмененныеРеквизиты = Новый Структура;
	
	// Производим анализа изменений внесенных пользователем в форму
	Для Каждого Реквизит Из Элементы Цикл
		Если ТипЗнч(Реквизит)=Тип("ПолеФормы") И Реквизит.Видимость И ЭтотОбъект.КопияОбъекта.Свойство(Реквизит.Имя) И (НЕ ЭтотОбъект[Реквизит.Имя]=ЭтотОбъект.КопияОбъекта[Реквизит.Имя]) Тогда
			ИзмененныеРеквизиты.Вставить(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	// Проверим корректность заполнения формы
	Если (НЕ ПроверитьЗаполнение()) Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим значение измененных реквизитов документа
	ПараметрыЗакрытия = Новый Структура();
	ПараметрыЗакрытия.Вставить("ИзмененныеРеквизиты",          ИзмененныеРеквизиты);
	ПараметрыЗакрытия.Вставить("ПоказыватьПараметрыДокумента", ПоказыватьПараметрыДокумента);
	
	Если ТребуетсяУстановкаЦен Тогда
		ПараметрыЗакрытия.Вставить("ТребуетсяУстановкаЦен", ТребуетсяУстановкаЦен);
	КонецЕсли;
	
	Если ТребуетсяУстановкаЦенРабот Тогда
		ПараметрыЗакрытия.Вставить("ТребуетсяУстановкаЦенРабот", ТребуетсяУстановкаЦенРабот);
	КонецЕсли;
	
	Если ТребуетсяПересчетЦен Тогда
		ПараметрыЗакрытия.Вставить("ТребуетсяПересчетЦен", ТребуетсяПересчетЦен);
		ПараметрыЗакрытия.Вставить("СтарыйКурс",           ЭтотОбъект.КопияОбъекта.КурсДокумента);
	КонецЕсли;
	
	Если ТребуетсяУстановкаДатыНачала Тогда
		ПараметрыЗакрытия.Вставить("ТребуетсяУстановкаДатыНачала", ТребуетсяУстановкаДатыНачала);
	КонецЕсли;
	
	// Вернем в форму владельца информацию о новом штрихкоде
	Если ИспользованиеШтрихКодов Тогда
		
		ПараметрыЗакрытия.Вставить("ШтрихКод", ШтрихКод);
		
	КонецЕсли;
	
	// Закрываем форму параметров
	Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры // Применить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура  СкрытьОтображениеРеквизитов(НеотображаемыеРеквизиты)
	
	Если НеотображаемыеРеквизиты <> Неопределено Тогда 
		
		Для Каждого Реквизит ИЗ НеотображаемыеРеквизиты Цикл
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Реквизит, "Видимость", Ложь);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Процедура определяет ситуацию, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в это м случае
// присваивает документу новый уникальный номер.
//
// Возвращаемое значение:
//  Число - разность дат.
//
&НаСервере
Функция ПроверитьНомерДокумента()
	
	Возврат ОбработкаРеквизитовДокументаСервер.ПроверитьПериодНумерацииДокумента(
		ЭтотОбъект.ДокументОбъект.Ссылка,
		ЭтотОбъект.ДокументОбъект.Дата,
		Дата
	);
	
КонецФункции // ПроверитьНомерДокумента()

&НаСервере
Процедура ОбновитьДанныеФормы(ПараметрыДействия)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЭтотОбъект.ДокументОбъект, , "Ссылка");
	
	Если ПараметрыДействия.Свойство("ТребуетсяПересчетЦен") Тогда
		ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен", ЛОЖЬ);
	КонецЕсли;
	
	Если ПараметрыДействия.Свойство("ТребуетсяУстановкаЦен") Тогда
		ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", ЛОЖЬ);
	КонецЕсли;
	
	Если ПараметрыДействия.Свойство("ТребуетсяУстановкаЦенРабот") Тогда
		ТребуетсяУстановкаЦенРабот = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦенРабот", ЛОЖЬ);
	КонецЕсли;
	
	Если ПараметрыДействия.Свойство("ТребуетсяУстановкаДатыНачала") Тогда
		ТребуетсяУстановкаДатыНачала = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаДатыНачала", ЛОЖЬ);
	КонецЕсли;
	
	Если ПараметрыДействия.Свойство("ТребуетсяЗаполнитьНаОсновании") Тогда
		ТребуетсяЗаполнитьНаОсновании = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяЗаполнитьНаОсновании", ЛОЖЬ);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДанныеФормы()

// Обработчик события возникающего при выполнении оповещения.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияПриСменеШтрихкода(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		ШтрихКодНачалоВыбораНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияПриСменеШтрихкода()

// Обработчик события возникающего при выполнении оповещения.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияПриИзмененииШтрихкода(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		ШтрихКод = ДополнительныеПараметры.Штрихкод;
		Элементы.ШтрихКод.ОбновитьТекстРедактирования();
	Иначе
		ШтрихКод = "";
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияПриСменеШтрихкода()

// Обработчик события возникающего при выполнении оповещения.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияПодразделениеКомпанииПриИзменении(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		ВалютаДокумента = ДополнительныеПараметры.НоваяВалюта;
		ВалютаДокументаПриИзменении(Элементы.ПодразделениеКомпании);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияПодразделениеКомпанииПриИзменении()

// Производит настройку блокировки элементов формы.
//
&НаСервере
Процедура БлокироватьЭлементыФормы()
	
	// Для Документов заблокируем редактирование Номера
	ЭлементСуществует = НЕ (Элементы.Найти("Номер") = Неопределено);
	Если ЭлементСуществует И Ссылка <> Неопределено И Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка.Ссылка)) Тогда
		Элементы.Номер.Доступность = ПраваИНастройкиПользователя.Значение(
			"РазрешитьРедактированиеНомеровДокументов", ЭтотОбъект
		);
	КонецЕсли;
	
	// Проверим блокировку объекта для редактирования другим пользователем.
	ОбъектЗаблокированДляРедактирования =
		УправлениеДиалогомСервер.ПроверитьЗапретРедактированияДанных(Параметры.Объект.Ссылка, Параметры.ИдентификаторФормы);
	
	// получаем право на открытие
	РедактированиеФормыРазрешено = ПраваИНастройкиПользователя.Значение(
		"ОткрытиеФормыПараметрыДокументаВРежимеРедактирование", Параметры.Объект
	);
	ТолькоПросмотр = НЕ РедактированиеФормыРазрешено ИЛИ НЕ ПравоДоступа("Изменение", Параметры.Объект.Ссылка.Метаданные())
		ИЛИ ОбъектЗаблокированДляРедактирования ИЛИ (Параметры.Свойство("ТолькоПросмотр") И Параметры.ТолькоПросмотр);
	
КонецПроцедуры // БлокироватьЭлементыФормы()

// Определяет, является ли переданная в функцию ссылка документом БСП.
//
// Параметры:
//  ОбъектСсылка  - Ссылка - для которой необходимо выполняется проверка.
//
// Возвращаемое значение:
//   Булево   - истина, если переданная ссылка является взаимодействием.
//
&НаСервере
Функция ЯвляетсяБСПДокументом(ОбъектСсылка)
	
	Если ТипЗнч(ОбъектСсылка) = Тип("Тип") Тогда
		ТипОбъекта = ОбъектСсылка;
	Иначе
		ТипОбъекта = ТипЗнч(ОбъектСсылка);
	КонецЕсли;
	
	Возврат ТипОбъекта = Тип("ДокументСсылка.Встреча")
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.ЗапланированноеВзаимодействие")
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.ТелефонныйЗвонок")
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.СообщениеSMS")
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.Анкета")
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.НазначениеОпросов");
	
КонецФункции //ЯвляетсяБСПДокументом()

#КонецОбласти
///////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

