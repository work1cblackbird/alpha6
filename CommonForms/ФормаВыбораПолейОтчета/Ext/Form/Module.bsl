// Модуль формы "Форма выбора полей отчета"

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ВидПолей") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Вставить содержимое обработчика.
	Если Параметры.Свойство("СхемаКомпоновки") Тогда
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Параметры.СхемаКомпоновки));
		СхемаКомпоновки = Параметры.СхемаКомпоновки;
		
		Если Параметры.Свойство("КомпоновщикНастроек") Тогда 
			КомпоновкаДанныхКлиентСервер.СкопироватьНастройкиКомпоновкиДанных(
				КомпоновщикНастроек.Настройки,
				Параметры.КомпоновщикНастроек.Настройки
		);
		
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("КомпоновщикНастроекИзНоменклатуры") Тогда
		КомпоновщикНастроек = Параметры.КомпоновщикНастроекИзНоменклатуры;
	КонецЕсли;
	
	ВидПолей = Параметры.ВидПолей;
	Если ВидПолей = "Реквизиты" ИЛИ ВидПолей = "Ресурсы" ИЛИ ВидПолей = "Показатель" Тогда
		Элементы.ГруппаПоляВыбора.ТекущаяСтраница = Элементы.ГруппаВыбор;
	ИначеЕсли ВидПолей = "Отбор" Тогда
		Элементы.ГруппаПоляВыбора.ТекущаяСтраница = Элементы.ГруппаОтбор;
		ВидыСравненияОтбора.Очистить();
		Для Каждого ТекущийВидСравнения Из ВидСравненияКомпоновкиДанных Цикл
			ВидыСравненияОтбора.Добавить(ТекущийВидСравнения, ПолучитьПолноеИмяПредопределенногоЗначения(ТекущийВидСравнения));
		КонецЦикла;
	ИначеЕсли ВидПолей = "Порядок" Тогда
		Элементы.ГруппаПоляВыбора.ТекущаяСтраница = Элементы.ГруппаПорядок;
	ИначеЕсли ВидПолей = "ПоляГруппировки" ИЛИ ВидПолей = "Точки" ИЛИ ВидПолей = "Серии" Тогда
		Элементы.ГруппаПоляВыбора.ТекущаяСтраница = Элементы.ГруппаПоляГруппировки;
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(Параметры, "ЕстьРеквизиты", Истина) Тогда
			Элементы.ПанельРеквизитов.Видимость = Ложь;
			Элементы.ДополнительныеПоля.Видимость = Ложь;
		КонецЕсли;
		
		Если Параметры.Свойство("АдресТаблицы") Тогда
			ЗаполнитьКоллекциюИзХранилища(Параметры.АдресТаблицы);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидПолей = "Точки" ИЛИ ВидПолей = "Серии" Тогда
		Элементы.ПанельРеквизитов.Видимость   = Ложь;
		Элементы.ДополнительныеПоля.Видимость = Ложь;
		Элементы.ТипГруппировки.Видимость     = Ложь;
	КонецЕсли;
	
	// Получим настройки для текущей строки структуры настроек
	СтрокаНастроек = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока = КомпоновщикНастроек.Настройки.ПолучитьИдентификаторПоОбъекту(СтрокаНастроек);
	
	Параметры.Свойство("ТекущееПоле", ТекущееПоле);
	
	Если Параметры.Свойство("ГруппировкиСтруктуры") Тогда
		ГруппировкиСтруктуры.ЗагрузитьЗначения(Параметры.ГруппировкиСтруктуры);
	КонецЕсли;
	
	Если Параметры.Свойство("ПоляВыбора") Тогда
		Для Каждого ТекущаяСтрока Из Параметры.ПоляВыбора Цикл
			НоваяСтрока = СтрокаНастроек.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			НоваяСтрока.Использование = ТекущаяСтрока.Использование;
			НоваяСтрока.Поле          = ТекущаяСтрока.Поле;
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("ПоляГруппировки") Тогда
		Для Каждого ТекущаяСтрока Из Параметры.ПоляГруппировки Цикл
			НоваяСтрока = СтрокаНастроек.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			НоваяСтрока.Использование  = ТекущаяСтрока.Использование;
			НоваяСтрока.Поле           = ТекущаяСтрока.Поле;
			НоваяСтрока.ТипГруппировки = ТекущаяСтрока.ТипГруппировки;
			НоваяСтрока.ТипДополнения  = ТекущаяСтрока.ТипДополнения;
			НоваяСтрока.НачалоПериода  = ТекущаяСтрока.НачалоПериода;
			НоваяСтрока.КонецПериода   = ТекущаяСтрока.КонецПериода;
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("ПоляПорядка") Тогда
		Для Каждого ТекущаяСтрока Из Параметры.ПоляПорядка Цикл
			НоваяСтрока = СтрокаНастроек.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			НоваяСтрока.Использование     = ТекущаяСтрока.Использование;
			НоваяСтрока.Поле              = ТекущаяСтрока.Поле;
			НоваяСтрока.ТипУпорядочивания = ТекущаяСтрока.ТипУпорядочивания;
		КонецЦикла;
	КонецЕсли;
	
	Параметры.Свойство("ВидСравнения",   ВидСравненияОтбора);
	Параметры.Свойство("ТипГруппировки", ТипГруппировки);
	
	Если ТипГруппировки = "" Тогда
		ТипГруппировки = "ТипГруппировкиКомпоновкиДанных.Элементы";
	КонецЕсли;
	
	Если ВидСравненияОтбора = "" Тогда
		ВидСравненияОтбора = "ВидСравненияКомпоновкиДанных.Равно";
	КонецЕсли;
	
КонецПроцедуры //ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТипЗнч(ТекущееПоле) = Тип("ПолеКомпоновкиДанных") Тогда
		Если ВидПолей = "Реквизиты" ИЛИ ВидПолей = "Ресурсы" ИЛИ ВидПолей = "Показатель" Тогда
			ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(ТекущееПоле);
			Если НЕ ДоступноеПоле = Неопределено Тогда
				ИдентификаторСтроки = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.ПолучитьИдентификаторПоОбъекту(ДоступноеПоле);
				Элементы.ДоступныеПоляВыбора.ТекущаяСтрока = ИдентификаторСтроки;
			КонецЕсли;
		ИначеЕсли ВидПолей = "Отбор" Тогда
			ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(ТекущееПоле);
			Если НЕ ДоступноеПоле = Неопределено Тогда
				ИдентификаторСтроки = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.ПолучитьИдентификаторПоОбъекту(ДоступноеПоле);
				Элементы.ДоступныеПоляОтбора.ТекущаяСтрока = ИдентификаторСтроки;
			КонецЕсли;
		ИначеЕсли ВидПолей = "Порядок" Тогда
			ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.НайтиПоле(ТекущееПоле);
			Если НЕ ДоступноеПоле = Неопределено Тогда
				ИдентификаторСтроки = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.ПолучитьИдентификаторПоОбъекту(ДоступноеПоле);
				Элементы.ДоступныеПоляПорядка.ТекущаяСтрока = ИдентификаторСтроки;
			КонецЕсли;
		ИначеЕсли ВидПолей = "ПоляГруппировки" ИЛИ ВидПолей = "Точки" ИЛИ ВидПолей = "Серии" Тогда
			ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(ТекущееПоле);
			Если НЕ ДоступноеПоле = Неопределено Тогда
				ИдентификаторСтроки = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.ПолучитьИдентификаторПоОбъекту(ДоступноеПоле);
				Элементы.ДоступныеПоляГруппировок.ТекущаяСтрока = ИдентификаторСтроки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// в 8.3.6 ошибка, иначе не отображается
	ВидСравненияОтбора = ВидСравненияОтбора;
	
	Если ВидПолей = "Реквизиты" Тогда
		
		Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
			ДоступныеПоляВыбора = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора;
			ОграниченияИспользованияПолей = Элементы.ДоступныеПоляВыбора.ОграниченияИспользования;
			
			Для Каждого ЭлементСписка Из ГруппировкиСтруктуры Цикл
				
				ПолеГруппировки = ЭлементСписка.Значение;
				ПоляВетки       = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеГруппировки);
				
				РодительГруппировки = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(ПолеГруппировки);
				Пока НЕ РодительГруппировки = Неопределено Цикл
					Если РодительГруппировки.Родитель = Неопределено Тогда
						Для Каждого ТекПоле Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
							
							Если НЕ ГруппировкиСтруктуры.НайтиПоЗначению(ТекПоле.Поле) = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
							НовоеОграничение.Поле        = ТекПоле.Поле;
							НовоеОграничение.Доступность = Ложь;
						КонецЦикла;
					Иначе
						Для Каждого ТекПоле Из РодительГруппировки.Родитель.Элементы Цикл
							
							Если НЕ ГруппировкиСтруктуры.НайтиПоЗначению(ТекПоле.Поле) = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							
							НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
							НовоеОграничение.Поле        = ТекПоле.Поле;
							НовоеОграничение.Доступность = Ложь;
						КонецЦикла;
					КонецЕсли;
					РодительГруппировки = РодительГруппировки.Родитель;
				КонецЦикла;
				
			КонецЦикла;
		Иначе
			// установим текущую строку
			Для Каждого ЭлементСписка Из ГруппировкиСтруктуры Цикл
				ПолеГруппировки = ЭлементСписка.Значение;
				ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеГруппировки);
				ИдентификаторСтроки = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.ПолучитьИдентификаторПоОбъекту(ДоступноеПоле);
				Элементы.ДоступныеПоляВыбора.ТекущаяСтрока = ИдентификаторСтроки;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ВидПолей = "Ресурсы" ИЛИ ВидПолей = "Показатель" Тогда
		
		Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
			ДоступныеПоляВыбора = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора;
			ОграниченияИспользованияПолей = Элементы.ДоступныеПоляВыбора.ОграниченияИспользования;
			
			Если  НЕ ОписаниеОповещенияОЗакрытии.Модуль.КлючОбъекта = "Отчет.ПечатьРеестра" 
				И НЕ ОписаниеОповещенияОЗакрытии.Модуль.КлючОбъекта = "Отчет.СтоимостнаяОценкаСкладаВЦенахКомпании" Тогда
				УстановитьОграничения(ДоступныеПоляВыбора.Элементы, ОграниченияИспользованияПолей);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидПолей = "Порядок" Тогда
		
		Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
			ДоступныеПоляПорядка          = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка;
			ОграниченияИспользованияПолей = Элементы.ДоступныеПоляПорядка.ОграниченияИспользования;
			
			Для Каждого ЭлементСписка Из ГруппировкиСтруктуры Цикл
				
				ПолеГруппировки = ЭлементСписка.Значение;
				
				ПоляВетки = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.НайтиПоле(ПолеГруппировки);
				
				РодительГруппировки = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(ПолеГруппировки);
				Пока НЕ РодительГруппировки = Неопределено Цикл
					Если РодительГруппировки.Родитель = Неопределено Тогда
						Для Каждого ТекПоле Из КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.Элементы Цикл
							
							Если НЕ ГруппировкиСтруктуры.НайтиПоЗначению(ТекПоле.Поле) = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							
							НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
							НовоеОграничение.Поле        = ТекПоле.Поле;
							НовоеОграничение.Доступность = Ложь;
						КонецЦикла;
					Иначе
						Для Каждого ТекПоле Из РодительГруппировки.Родитель.Элементы Цикл
							
							Если НЕ ГруппировкиСтруктуры.НайтиПоЗначению(ТекПоле.Поле) = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							
							НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
							НовоеОграничение.Поле        = ТекПоле.Поле;
							НовоеОграничение.Доступность = Ложь;
						КонецЦикла;
					КонецЕсли;
					РодительГруппировки = РодительГруппировки.Родитель;
				КонецЦикла;
				
			КонецЦикла;
		Иначе
			// установим текущую строку 
			Для Каждого ЭлементСписка Из ГруппировкиСтруктуры Цикл
				ПолеГруппировки = ЭлементСписка.Значение;
				ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.НайтиПоле(ПолеГруппировки);
				ИдентификаторСтроки = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.ПолучитьИдентификаторПоОбъекту(ДоступноеПоле);
				Элементы.ДоступныеПоляПорядка.ТекущаяСтрока = ИдентификаторСтроки;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступныеПоляВыбора

// Обработчик события возникающего при двойном щелчке мыши (нажатии клавиши Enter) в ячейке "Поле" таблицы "Доступные
// поля выбора".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                  - Значение выбранной строки.
//  Поле                 - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево    - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ДоступныеПоляВыбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Результат = Неопределено;
	
	СтандартнаяОбработка = Ложь;
	ВыбранноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.ПолучитьОбъектПоИдентификатору(ВыбраннаяСтрока);
	Если НЕ ВыбранноеПоле = Неопределено Тогда
		
		Если ВыбранноеПоле.Папка Тогда
			Если Элементы.ДоступныеПоляВыбора.Развернут(ВыбраннаяСтрока) Тогда
				Элементы.ДоступныеПоляВыбора.Свернуть(ВыбраннаяСтрока);
			Иначе
				Элементы.ДоступныеПоляВыбора.Развернуть(ВыбраннаяСтрока);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ЗаголовокПоля = ПолучитьЗаголовокПоля(ВыбранноеПоле);
		Результат = Новый Структура();
		Результат.Вставить("Поле",      ВыбранноеПоле.Поле);
		Результат.Вставить("Заголовок", ЗаголовокПоля);
		Результат.Вставить("ВидПолей",  ВидПолей);
		Результат.Вставить("Папка",     Ложь);
		
	КонецЕсли;
	
	Закрыть(Результат);
	
КонецПроцедуры //ДоступныеПоляВыбораВыбор()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступныеПоляПорядка

// Обработчик события возникающего при двойном щелчке мыши (нажатии клавиши Enter) в ячейке таблицы "Доступные поля порядка".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                  - Значение выбранной строки.
//  Поле                 - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево    - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ДоступныеПоляПорядкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Результат = Неопределено;
	
	СтандартнаяОбработка = Ложь;
	ВыбранноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.ПолучитьОбъектПоИдентификатору(ВыбраннаяСтрока);
	Если НЕ ВыбранноеПоле = Неопределено Тогда
		
		Если ВыбранноеПоле.Папка Тогда
			Если Элементы.ДоступныеПоляПорядка.Развернут(ВыбраннаяСтрока) Тогда
				Элементы.ДоступныеПоляПорядка.Свернуть(ВыбраннаяСтрока);
			Иначе
				Элементы.ДоступныеПоляПорядка.Развернуть(ВыбраннаяСтрока);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ЗаголовокПоля = ПолучитьЗаголовокПоля(ВыбранноеПоле);
		Результат = Новый Структура("Поле, Заголовок, ВидПолей", ВыбранноеПоле.Поле, ЗаголовокПоля, ВидПолей);
		
	КонецЕсли;
	
	Закрыть(Результат);
	
КонецПроцедуры //ДоступныеПоляПорядкаВыбор()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступныеПоляГруппировок

// Обработчик события возникающего при двойном щелчке мыши (нажатии клавиши Enter) в ячейке "Поле" таблицы "Доступные
// поля группировок".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                  - Значение выбранной строки.
//  Поле                 - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево    - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ДоступныеПоляГруппировокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Результат = Неопределено;
	
	ВыбранноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.ПолучитьОбъектПоИдентификатору(ВыбраннаяСтрока);
	Если ВыбранноеПоле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеПоле.Папка Тогда
		Если Элементы.ДоступныеПоляГруппировок.Развернут(ВыбраннаяСтрока) Тогда
			Элементы.ДоступныеПоляГруппировок.Свернуть(ВыбраннаяСтрока);
		Иначе
			Элементы.ДоступныеПоляГруппировок.Развернуть(ВыбраннаяСтрока);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗаголовокПоля = ПолучитьЗаголовокПоля(ВыбранноеПоле);
	Результат = Новый Структура();
	Результат.Вставить("Поле",           ВыбранноеПоле.Поле);
	Результат.Вставить("Заголовок",      ЗаголовокПоля);
	Результат.Вставить("ТипГруппировки", ТипГруппировки);
	Результат.Вставить("ВидПолей",       ВидПолей);

	АдресТаблицы = ПоместитьДополнительныеПоляВХранилище();
	Результат.Вставить("АдресТаблицы", АдресТаблицы);
	
	Закрыть(Результат);
	
КонецПроцедуры //ДоступныеПоляГруппировокВыбор()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступныеПоляОтбора

// Обработчик события возникающего при двойном щелчке мыши (нажатии клавиши Enter) в ячейке "Поле" таблицы "Доступные
// поля отбора".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                  - Значение выбранной строки.
//  Поле                 - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево    - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ДоступныеПоляОтбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	Результат = Неопределено;
	
	ВыбранноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.ПолучитьОбъектПоИдентификатору(ВыбраннаяСтрока);
	Если НЕ ВыбранноеПоле = Неопределено Тогда
		
		Если НЕ ОтчетыПлатформаВызовСервера.ДействиеОтбораВозможноВыполнить(ВыбранноеПоле.Поле) Тогда
			Возврат;
		КонецЕсли;
		
		Если ВыбранноеПоле.Папка Тогда
			Если Элементы.ДоступныеПоляОтбора.Развернут(ВыбраннаяСтрока) Тогда
				Элементы.ДоступныеПоляОтбора.Свернуть(ВыбраннаяСтрока);
			Иначе
				Элементы.ДоступныеПоляОтбора.Развернуть(ВыбраннаяСтрока);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Если Элементы.ВидСравненияОтбора.СписокВыбора.НайтиПоЗначению(ВидСравненияОтбора) = Неопределено Тогда
			ВидСравненияОтбора = Элементы.ВидСравненияОтбора.СписокВыбора[0].Значение;
		КонецЕсли;
		
		ЗаголовокПоля = ПолучитьЗаголовокПоля(ВыбранноеПоле);
		Результат = Новый Структура();
		Результат.Вставить("Поле",         ВыбранноеПоле.Поле);
		Результат.Вставить("Заголовок",    ЗаголовокПоля);
		Результат.Вставить("ВидСравнения", ВидСравненияОтбора);
		Результат.Вставить("ВидПолей",     ВидПолей);
		
	КонецЕсли;
	
	Закрыть(Результат);
	
КонецПроцедуры //ДоступныеПоляОтбораВыбор()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступныеПоляОтбора

// Обработчик события возникающего на клиенте при активизации строки доступных полей отбора.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДоступныеПоляОтбораПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ДоступныеПоляОтбора.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоступноеПолеОтбора = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.ПолучитьОбъектПоИдентификатору(ТекущаяСтрока);
	
	Если ДоступноеПолеОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоступноеПолеОтбора.Папка Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Элементы.ВидСравненияОтбора.СписокВыбора;
	СписокВыбора.Очистить();
	
	Для Каждого ДоступноеСравнения Из ДоступноеПолеОтбора.ДоступныеВидыСравнения Цикл
		
		ПолеПоиска = ВидыСравненияОтбора.НайтиПоЗначению(ДоступноеСравнения.Значение);
		Если ПолеПоиска = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокВыбора.Добавить(ПолеПоиска.Представление, Строка(ПолеПоиска.Значение));
		
	КонецЦикла;
	
КонецПроцедуры //ДоступныеПоляОтбораПриАктивизацииСтроки()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеПоля

// Обработчик события возникающего при двойном щелчке мыши (нажатии клавиши Enter) в ячейке таблицы.
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                  - Значение выбранной строки.
//  Поле                 - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево    - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ДополнительныеПоляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ДоступныеПоляГруппировок.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.ПолучитьОбъектПоИдентификатору(ТекущаяСтрока);
	Если ВыбранноеПоле = Неопределено ИЛИ ВыбранноеПоле.Папка Тогда
		Возврат;
	КонецЕсли;
	
	МассивГруппировок = Новый Массив;
	МассивГруппировок.Добавить(ВыбранноеПоле.Поле);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СхемаКомпоновки",      СхемаКомпоновки);
	СтруктураПараметров.Вставить("КомпоновщикНастроек", КомпоновщикНастроек);
	Если НЕ Элементы.ДополнительныеПоля.ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров.Вставить("ТекущееПоле", Элементы.ДополнительныеПоля.ТекущиеДанные.Поле);
	КонецЕсли;
	СтруктураПараметров.Вставить("ВидПолей",               "Реквизиты");
	СтруктураПараметров.Вставить("ГруппировкиСтруктуры",   МассивГруппировок);
	СтруктураПараметров.Вставить("ИдентификаторВладельца", УникальныйИдентификатор);
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещенияВыбораПоля", ЭтотОбъект);
	ОткрытьФорму(
		"ОбщаяФорма.ФормаВыбораПолейОтчета",
		СтруктураПараметров,
		Элемент,
		, , ,
		ОписаниеОповещенияВыбораПоля,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры //ДополнительныеПоляВыбор()

// Обработчик события возникающего на клиенте перед началом интерактивного добавления строки.
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ       - Булево       - Признак отказа от создания формы.
//  Копирование - Булево       - Определяет режим копирования.
//  Родитель    - Ссылка       - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  Группа      - Булево       - Признак добавления группы.
//  Параметр    - Произвольный - Параметр команды, выполняемой при добавлении строки в таблицу.
//
&НаКлиенте
Процедура ДополнительныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекущаяСтрока = Элементы.ДоступныеПоляГруппировок.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.ПолучитьОбъектПоИдентификатору(ТекущаяСтрока);
	Если ВыбранноеПоле = Неопределено ИЛИ ВыбранноеПоле.Папка Тогда
		Возврат;
	КонецЕсли;
	
	МассивГруппировок = Новый Массив;
	МассивГруппировок.Добавить(ВыбранноеПоле.Поле);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СхемаКомпоновки",        СхемаКомпоновки);
	СтруктураПараметров.Вставить("КомпоновщикНастроек",    КомпоновщикНастроек);
	СтруктураПараметров.Вставить("ВидПолей",               "Реквизиты");
	СтруктураПараметров.Вставить("ГруппировкиСтруктуры",   МассивГруппировок);
	СтруктураПараметров.Вставить("ИдентификаторВладельца", УникальныйИдентификатор);
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещенияНовоеПолеВыбора", ЭтотОбъект);
	ОткрытьФорму(
		"ОбщаяФорма.ФормаВыбораПолейОтчета",
		СтруктураПараметров,
		Элемент,
		, , ,
		ОписаниеОповещенияВыбораПоля,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры //ДополнительныеПоляПередНачаломДобавления()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события, возникающего на клиенте при выполнении команды "Подбор реквизитов".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПодборРеквизитов(Команда)
	
	ТекущаяСтрока = Элементы.ДоступныеПоляГруппировок.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.ПолучитьОбъектПоИдентификатору(ТекущаяСтрока);
	Если ВыбранноеПоле = Неопределено ИЛИ ВыбранноеПоле.Папка Тогда
		Возврат;
	КонецЕсли;
	
	МассивГруппировок = Новый Массив;
	МассивГруппировок.Добавить(ВыбранноеПоле.Поле);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СхемаКомпоновки", СхемаКомпоновки);
	СтруктураПараметров.Вставить("КомпоновщикНастроек", КомпоновщикНастроек);
	СтруктураПараметров.Вставить("ВидПолей",        "Реквизиты");
	СтруктураПараметров.Вставить("ИдентификаторВладельца", УникальныйИдентификатор);
	
	Если НЕ Элементы.ДополнительныеПоля.ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров.Вставить("ТекущееПоле", Элементы.ДополнительныеПоля.ТекущиеДанные.Поле);
	КонецЕсли;
	
	АдресТаблицы = ПоместитьДополнительныеПоляВХранилище();
	СтруктураПараметров.Вставить("АдресТаблицы", АдресТаблицы);
	
	СтруктураПараметров.Вставить("ГруппировкиСтруктуры", МассивГруппировок);
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеПодбораПолей", ЭтотОбъект);
	ОткрытьФорму(
		"ОбщаяФорма.ФормаПодбораПолейОтчета",
		СтруктураПараметров,
		ЭтотОбъект,
		, , ,
		ОписаниеОповещенияВыбораПоля,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // ПодборРеквизитов()

// Обработчик события возникающего на клиенте при выполнении команды "Выбрать".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Выбрать(Команда)
	
	Результат = Неопределено;
	Если ВидПолей = "Реквизиты" ИЛИ ВидПолей = "Показатель" ИЛИ ВидПолей = "Ресурсы" Тогда
		ИдентификаторОбъекта = Элементы.ДоступныеПоляВыбора.ТекущаяСтрока;
		
		Если ИдентификаторОбъекта = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.ПолучитьОбъектПоИдентификатору(ИдентификаторОбъекта);
		
		Если ВыбранноеПоле = Неопределено ИЛИ (НЕ ВыбранноеПоле.Ресурс И (ВидПолей = "Показатель" ИЛИ ВидПолей = "Ресурсы")) Тогда
			Возврат;
		КонецЕсли;
		
		ЗаголовокПоля = ПолучитьЗаголовокПоля(ВыбранноеПоле);
		Результат = Новый Структура();
		Результат.Вставить("Поле",      ВыбранноеПоле.Поле);
		Результат.Вставить("Заголовок", ЗаголовокПоля);
		Результат.Вставить("ВидПолей",  ВидПолей);
		Результат.Вставить("Папка",     Ложь);
		
		Если ВыбранноеПоле.Папка Тогда
			Результат.Вставить("Папка", Истина);
			
			АдресТаблицы = ПоместитьДоступныеПоляВыбораВХранилище(ИдентификаторОбъекта);
			Результат.Вставить("АдресТаблицы", АдресТаблицы);
		КонецЕсли;
		
	ИначеЕсли ВидПолей = "Отбор" Тогда
		ИдентификаторОбъекта = Элементы.ДоступныеПоляОтбора.ТекущаяСтрока;
		
		Если ИдентификаторОбъекта = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.ПолучитьОбъектПоИдентификатору(ИдентификаторОбъекта);
		
		Если ВыбранноеПоле = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ОтчетыПлатформаВызовСервера.ДействиеОтбораВозможноВыполнить(ВыбранноеПоле.Поле) Тогда
			Возврат;
		КонецЕсли;
		
		Если ВыбранноеПоле.Папка Тогда
			Если Элементы.ДоступныеПоляВыбора.Развернут(ИдентификаторОбъекта) Тогда
				Элементы.ДоступныеПоляВыбора.Свернуть(ИдентификаторОбъекта);
			Иначе
				Элементы.ДоступныеПоляВыбора.Развернуть(ИдентификаторОбъекта);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Если Элементы.ВидСравненияОтбора.СписокВыбора.НайтиПоЗначению(ВидСравненияОтбора) = Неопределено Тогда
			ВидСравненияОтбора = Элементы.ВидСравненияОтбора.СписокВыбора[0].Значение;
		КонецЕсли;
		
		ЗаголовокПоля = ПолучитьЗаголовокПоля(ВыбранноеПоле);
		
		Результат = Новый Структура();
		Результат.Вставить("Поле",         ВыбранноеПоле.Поле);
		Результат.Вставить("Заголовок",    ЗаголовокПоля);
		Результат.Вставить("ВидСравнения", ВидСравненияОтбора);
		Результат.Вставить("ВидПолей",     ВидПолей);
		
	ИначеЕсли ВидПолей = "Порядок" Тогда
		ИдентификаторОбъекта = Элементы.ДоступныеПоляПорядка.ТекущаяСтрока;
		
		Если ИдентификаторОбъекта = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.ПолучитьОбъектПоИдентификатору(ИдентификаторОбъекта);
		
		Если ВыбранноеПоле = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ВыбранноеПоле.Папка Тогда
			Если Элементы.ДоступныеПоляПорядка.Развернут(ИдентификаторОбъекта) Тогда
				Элементы.ДоступныеПоляПорядка.Свернуть(ИдентификаторОбъекта);
			Иначе
				Элементы.ДоступныеПоляПорядка.Развернуть(ИдентификаторОбъекта);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		ЗаголовокПоля = ПолучитьЗаголовокПоля(ВыбранноеПоле);
		Результат = Новый Структура("Поле, Заголовок, ВидПолей", ВыбранноеПоле.Поле, ЗаголовокПоля, ВидПолей);
		
	ИначеЕсли ВидПолей = "ПоляГруппировки" ИЛИ ВидПолей = "Точки" ИЛИ ВидПолей = "Серии" Тогда
		ИдентификаторОбъекта = Элементы.ДоступныеПоляГруппировок.ТекущаяСтрока;
		
		Если ИдентификаторОбъекта = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.ПолучитьОбъектПоИдентификатору(ИдентификаторОбъекта);
		
		Если ВыбранноеПоле = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ВыбранноеПоле.Папка Тогда
			Если Элементы.ДоступныеПоляГруппировок.Развернут(ИдентификаторОбъекта) Тогда
				Элементы.ДоступныеПоляГруппировок.Свернуть(ИдентификаторОбъекта);
			Иначе
				Элементы.ДоступныеПоляГруппировок.Развернуть(ИдентификаторОбъекта);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ЗаголовокПоля = ПолучитьЗаголовокПоля(ВыбранноеПоле);
		Результат = Новый Структура();
		Результат.Вставить("Поле",           ВыбранноеПоле.Поле);
		Результат.Вставить("Заголовок",      ЗаголовокПоля);
		Результат.Вставить("ТипГруппировки", ТипГруппировки);
		Результат.Вставить("ВидПолей",       ВидПолей);
		
		АдресТаблицы = ПоместитьДополнительныеПоляВХранилище();
		Результат.Вставить("АдресТаблицы", АдресТаблицы);
		
	КонецЕсли;
	
	Закрыть(Результат);
	
КонецПроцедуры //Выбрать()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОповещениеПодбораПолей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗакрытия.ВидПолей = "Реквизиты" Тогда
		
		ЗаполнитьКоллекциюИзХранилища(РезультатЗакрытия.АдресТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ОповещениеПодбораПолей()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОповещенияВыбораПоля(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Если РезультатЗакрытия.ВидПолей = "Реквизиты" Тогда
		
		ТекущиеДанные = Элементы.ДополнительныеПоля.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.Заголовок     = РезультатЗакрытия.Заголовок;
		ТекущиеДанные.Поле          = РезультатЗакрытия.Поле;
		ТекущиеДанные.Папка         = РезультатЗакрытия.Папка;
		ТекущиеДанные.Использование = Истина;
		
		ТекущаяСтрока = Элементы.ДополнительныеПоля.ТекущаяСтрока;
		
		Если РезультатЗакрытия.Папка Тогда
			ЗаполнитьЭлементыГруппыИзХранилища(РезультатЗакрытия.АдресТаблицы, ТекущаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ОповещенияВыбораПоля()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОповещенияНовоеПолеВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДополнительныеПоля.ТекущиеДанные;
	
	ЭлементыПоказателей = ДополнительныеПоля.ПолучитьЭлементы();
	
	НовоеПоле = ЭлементыПоказателей.Добавить();
	НовоеПоле.Использование = Истина;
	НовоеПоле.Заголовок     = РезультатЗакрытия.Заголовок;
	НовоеПоле.Поле          = РезультатЗакрытия.Поле;
	НовоеПоле.Папка         = РезультатЗакрытия.Папка;
	
	ТекущаяСтрока = НовоеПоле.ПолучитьИдентификатор();
	
	Если РезультатЗакрытия.Папка Тогда
		ЗаполнитьЭлементыГруппыИзХранилища(РезультатЗакрытия.АдресТаблицы, ТекущаяСтрока);
	КонецЕсли;
	
	Элементы.ДополнительныеПоля.ТекущаяСтрока = ТекущаяСтрока;
	
КонецПроцедуры //Подключаемый_ОповещенияНовоеПолеВыбора()

&НаСервере
Процедура ЗаполнитьЭлементыГруппыИзХранилища(АдресТаблицы, ТекущаяСтрока)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияФормы = ДополнительныеПоля.НайтиПоИдентификатору(ТекущаяСтрока);
	ОбъектКоллекции = ПолучитьИзВременногоХранилища(АдресТаблицы);
	ОтчетыПлатформаСервер.ЗаполнитьНастройкиОтчета(ЭтотОбъект, КоллекцияФормы.ПолучитьЭлементы(), ОбъектКоллекции.Строки);
	
КонецПроцедуры //ЗаполнитьЭлементыГруппыИзХранилища()

// Процедура заполняет коллекцию формы из временного хранилища.
//
&НаСервере
Процедура ЗаполнитьКоллекциюИзХранилища(АдресТаблицы)
	
	КоллекцияФормы = ДополнительныеПоля.ПолучитьЭлементы();
	КоллекцияФормы.Очистить();
	
	Если Не ЭтоАдресВременногоХранилища(АдресТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектКоллекции = ПолучитьИзВременногоХранилища(АдресТаблицы);
	ОбъектКоллекции = ОбъектКоллекции.Строки;
	
	ОтчетыПлатформаСервер.ЗаполнитьНастройкиОтчета(ЭтотОбъект, КоллекцияФормы, ОбъектКоллекции);
	
КонецПроцедуры // ЗаполнитьКоллекциюИзХранилища()

// Формирует заголовок возвращаемого поля.
//
&НаКлиенте
Функция ПолучитьЗаголовокПоля(ДоступноеПоле)
	
	ЗаголовокПоля = ОтчетыПлатформаКлиентСервер.ПолучитьЗаголовокПоля(ДоступноеПоле);
	
	Если ВидПолей = "Отбор" Тогда
		ЗаголовокПоля = ПолучитьПредставлениеЭлементаОтбора(ЗаголовокПоля);
	ИначеЕсли ВидПолей = "ПоляГруппировки" И (НЕ ТипГруппировки = "ТипГруппировкиКомпоновкиДанных.Элементы") Тогда
		ЗаголовокПоля = ЗаголовокПоля + " " + Элементы.ТипГруппировки.СписокВыбора.НайтиПоЗначению(ТипГруппировки).Представление;
	КонецЕсли;
	
	СписокРеквизитов = "";
	Для каждого Строка Из ДополнительныеПоля.ПолучитьЭлементы() Цикл
		СписокРеквизитов = СписокРеквизитов + ?(СписокРеквизитов = "", "", ",") + Строка.Заголовок;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СписокРеквизитов) Тогда
		ЗаголовокПоля = ЗаголовокПоля + " (" + СписокРеквизитов + ")";
	КонецЕсли;
	
	Возврат ЗаголовокПоля;
	
КонецФункции //ПолучитьЗаголовокПоля()

// Получает представления переданного поля.
//
&НаКлиенте
Функция ПолучитьПредставлениеЭлементаОтбора(ПредставлениеПоля)
	
	ТекущийВидСравнения = ПредопределенноеЗначение(ВидСравненияОтбора);
	
	// Формируем массив описания частей отбора
	ЭлементыПредставленияОтбора = Новый Массив;
	
	ЭлементыПредставленияОтбора.Добавить(Строка(ПредставлениеПоля));
	
	ПредставлениеСравнения = "";
	// Производим формирование секции видов сравнения
	Если ТекущийВидСравнения=Неопределено ИЛИ ТекущийВидСравнения=ВидСравненияКомпоновкиДанных.Равно ИЛИ ТекущийВидСравнения=ВидСравненияКомпоновкиДанных.Содержит ИЛИ ТекущийВидСравнения=ВидСравненияКомпоновкиДанных.ВИерархии ИЛИ ТекущийВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке ИЛИ ТекущийВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		// Формирование представлений для прямых видов условий производить не будем
		
	ИначеЕсли ТекущийВидСравнения=ВидСравненияКомпоновкиДанных.Больше Тогда
		ПредставлениеСравнения = " (>)";
	ИначеЕсли ТекущийВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		ПредставлениеСравнения = " (>=)";
	ИначеЕсли ТекущийВидСравнения=ВидСравненияКомпоновкиДанных.Меньше Тогда
		ПредставлениеСравнения = " (<)";
	ИначеЕсли ТекущийВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		ПредставлениеСравнения = " (<=)";
	ИначеЕсли ТекущийВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно ИЛИ ТекущийВидСравнения=ВидСравненияКомпоновкиДанных.НеВИерархии ИЛИ ТекущийВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке ИЛИ ТекущийВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		ПредставлениеСравнения = " (НЕ)";
	Иначе
		ПредставлениеСравнения = " ("+Строка(ТекущийВидСравнения)+")";
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ЭлементыПредставленияОтбора.Добавить(ПредставлениеСравнения);
	Иначе
		ЭлементыПредставленияОтбора.Добавить(" ");
		ЭлементыПредставленияОтбора.Добавить(Новый ФорматированнаяСтрока(ПредставлениеСравнения,
											 Новый Шрифт(Элементы.ДоступныеПоляОтбора.Шрифт, , , Истина)));
	КонецЕсли;
	
	// Возвращаем сформированное представление текущего элемента отбора
	Возврат Новый ФорматированнаяСтрока(ЭлементыПредставленияОтбора);
	
КонецФункции // ПолучитьПредставлениеЭлементаОтбора()

// Функция помещает коллекцию доступных полей во временное хранилище и возвращает адрес.
//
&НаСервере
Функция ПоместитьДоступныеПоляВыбораВХранилище(ИдентификаторОбъекта)
	
	Результат = "";
	
	ДеревоПолей = Новый ДеревоЗначений;
	ДеревоПолей.Колонки.Добавить("Использование");
	ДеревоПолей.Колонки.Добавить("Поле");
	ДеревоПолей.Колонки.Добавить("Заголовок");
	ДеревоПолей.Колонки.Добавить("Папка");
	ДеревоПолей.Колонки.Добавить("Расположение");
	
	ВыбранноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.ПолучитьОбъектПоИдентификатору(ИдентификаторОбъекта);
	
	ОтчетыПлатформаСервер.ЗаполнитьНастройкиОтчета(ЭтотОбъект, ДеревоПолей.Строки, ВыбранноеПоле.Элементы);
	
	Если ДеревоПолей.Строки.Количество()> 0 Тогда
		Результат = ПоместитьВоВременноеХранилище(ДеревоПолей, ИдентификаторВладельца);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПоместитьДополнительныеПоляВХранилище()

// Функция помещает коллекцию формы во временное хранилище и возвращает адрес 
//
&НаСервере
Функция ПоместитьДополнительныеПоляВХранилище()
	
	Результат = "";
	
	ОбъектКоллекции = РеквизитФормыВЗначение("ДополнительныеПоля");
	
	Если ОбъектКоллекции.Строки.Количество()>0 Тогда
		Результат = ПоместитьВоВременноеХранилище(ОбъектКоллекции, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПоместитьДополнительныеПоляВХранилище()

&НаКлиенте
Процедура УстановитьОграничения(ДоступныеПоляВыбора, ОграниченияИспользованияПолей, УстановленоОграничение = Ложь)
	
	УстановленоОграничениеДляПапки = Истина;
	
	Для Каждого ТекПоле Из ДоступныеПоляВыбора Цикл
		
		Если ТекПоле.Папка Тогда
			ПустаяГруппа = Ложь;
			УстановитьОграничения(ТекПоле.Элементы, ОграниченияИспользованияПолей, ПустаяГруппа);
			Если НЕ ПустаяГруппа Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекПоле.Ресурс Тогда
			УстановленоОграничениеДляПапки = Ложь;
			Продолжить;
		КонецЕсли;
		
		УстановленоОграничение = Истина;
		
		НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
		НовоеОграничение.Поле        = ТекПоле.Поле;
		НовоеОграничение.Доступность = Ложь;
		
	КонецЦикла;
	
	УстановленоОграничение = УстановленоОграничение И УстановленоОграничениеДляПапки;
	
КонецПроцедуры //УстановитьОграничения()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

