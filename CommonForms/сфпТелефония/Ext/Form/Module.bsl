#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Метаданные.Справочники.Найти("КонтактныеЛицаПартнеров") <> Неопределено Тогда
		ЗначениеПустогоКонтакта = Справочники["КонтактныеЛицаПартнеров"].ПустаяСсылка();
		
	ИначеЕсли Метаданные.Справочники.Найти("КонтактныеЛица") <> Неопределено Тогда
		ЗначениеПустогоКонтакта = Справочники["КонтактныеЛица"].ПустаяСсылка();
		
	ИначеЕсли Метаданные.Справочники.Найти("_ДемоКонтактныеЛицаПартнеров") <> Неопределено Тогда
		ЗначениеПустогоКонтакта = Справочники["_ДемоКонтактныеЛицаПартнеров"].ПустаяСсылка();
		
	Иначе
		ЗначениеПустогоКонтакта = "";
	КонецЕсли;	
	ТелефонныеЗвонки.Параметры.УстановитьЗначениеПараметра("ПустойКонтакт", ЗначениеПустогоКонтакта);	
	
	ТекущийПользовательАдминистратор = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("сфпУправлениеМаршрутизацией");
	ТекущийПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
		
	ЗаполнитьПерсональныеНастройкиНаСервере();
	
	ЦветФонаКнопки = ЦветаСтиля.сфпСерыйДляВторостепенныхФункций;
	ЦветФонаВыбраннойКнопки = ЦветаСтиля.сфпОсновнойГолубой;
	
	МассивДействийЗвонка = сфпСофтФонПроСерверПереопределяемый.сфпПолучитьМассивДоступныхДействий();
	Для Каждого ТекДействие Из МассивДействийЗвонка Цикл
		Элементы.НастройкаДействиеВходящийЗвонок.СписокВыбора.Добавить(ТекДействие.Наименование, ТекДействие.Наименование);
		Элементы.НастройкаДействиеИсходящийЗвонок.СписокВыбора.Добавить(ТекДействие.Наименование, ТекДействие.Наименование);
		
		Если ПустаяСтрока(ТекДействие.Действие) ИЛИ ТекДействие.Действие = "сфпОткрытьПанельЗвонка" Тогда
			Продолжить;
		КонецЕсли;
		
		ДействияПоЗвонку.Добавить(ТекДействие.Действие, ТекДействие.Наименование);
	КонецЦикла;	
	
	ПринадлежностьЗвонка = 1;
	
	//ТекущиеПодчиненныеПодразделения.ЗагрузитьЗначения(сфпСофтФонПроСерверПовтИсп.ПолучитьПодразделенияВКоторыхРуководитель(ТекущийПользователь));
	//Если ТекущиеПодчиненныеПодразделения.Количество() = 0 Тогда
	//	Элементы.ГруппаФильтрЗвонковПоПринадлежности.Видимость = Ложь;
	//КонецЕсли;
	
	МассивПрослушиваемыхПользователей = сфпСофтФонПроСервер.сфпПолучитьМассивПрослушиваемыхПользователей(ТекущийПользователь);
	
	ТекПозиция = МассивПрослушиваемыхПользователей.Найти(ТекущийПользователь);
	Если ТекПозиция <> Неопределено Тогда
		МассивПрослушиваемыхПользователей.Удалить(ТекПозиция);
	КонецЕсли;	
	ТекущиеПрослушиваемыеПользователи.ЗагрузитьЗначения(МассивПрослушиваемыхПользователей);
	Если ТекущиеПрослушиваемыеПользователи.Количество() = 0 Тогда
		Элементы.ГруппаФильтрЗвонковПоПринадлежности.Видимость = Ложь;
	КонецЕсли;
	
	Если ТелефонныеЗвонки.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() > 0 Тогда
		  ЭлементыСпискаОтбора = ТелефонныеЗвонки.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Иначе ЭлементыСпискаОтбора = ТелефонныеЗвонки.Отбор.Элементы;
	КонецЕсли;

	Для Каждого ТекущийОтбор Из ЭлементыСпискаОтбора Цикл
		Если ТекущийОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Если ТекущийОтбор.Представление = "Все звонки" Тогда
				Для Каждого ПодчиненныйОтбор Из ТекущийОтбор.Элементы Цикл
					Если ПодчиненныйОтбор.Представление = "Мои звонки" Тогда
						Для Каждого ЭлементГруппы Из ПодчиненныйОтбор.Элементы Цикл
							ЭлементГруппы.ПравоеЗначение = ТекущийПользователь;
						КонецЦикла;

					ИначеЕсли ПодчиненныйОтбор.Представление = "Мои подразделения" Тогда
						Для Каждого ЭлементГруппы Из ПодчиненныйОтбор.Элементы Цикл
							ЭлементГруппы.ПравоеЗначение = ТекущиеПодчиненныеПодразделения;
						КонецЦикла;
						
					ИначеЕсли ПодчиненныйОтбор.Представление = "Контролируемые пользователи" Тогда
						Для Каждого ЭлементГруппы Из ПодчиненныйОтбор.Элементы Цикл
							ЭлементГруппы.ПравоеЗначение = ТекущиеПрослушиваемыеПользователи;
						КонецЦикла;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
        КонецЕсли;
	КонецЦикла;

	ИспользуетсяОблачнаяАТС = Константы.сфпИспользоватьОблачнуюТелефонию.Получить();
	
	ДоступностьКомандAPI = сфпСофтФонПроСервер.ПолучитьДоступностьКомандAPI();
	ДоступностьКомандAPI_Ответ = ДоступностьКомандAPI.Ответ;
	ДоступностьКомандAPI_Завершить = ДоступностьКомандAPI.Завершить;
	ДоступностьКомандAPI_Пауза = ДоступностьКомандAPI.Пауза;
	ДоступностьКомандAPI_Перевод = ДоступностьКомандAPI.Перевод;
	
	// АльфаАвто
	// Сделано до исправления ошибки - почему не инициализирован отбор
	НовыйОтбор = АбонентыТелефонныхКниг.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТелефоннаяКнига");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.Использование = Ложь;
	// Конец АльфаАвто
	
КонецПроцедуры	//	ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЛиниюПользователя();
		
	ФильтрЗвонковПоВиду("Все", Ложь);
	ФильтрЗвонковПоПериоду("Сегодня");
	
	ОтобразатьКонтактыНомеронабиратель(Истина);

	ПроверитьНеобходимостьНастройки();
	
	ТекГруппировка = АбонентыТелефонныхКниг.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ТекГруппировка.Использование = Истина;
	ТекГруппировка.Поле = Новый ПолеКомпоновкиДанных("ТелефоннаяКнига");
	
	Если ТребуетсяНастройка И ТекущийПользовательАдминистратор Тогда
		НастройкиТелефонииОбщии();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьНастройки()
	
	ТребуетсяНастройка = сфпСофтФонПроСервер.сфпТребуетсяНастройкаТелефонии();
	
	Элементы.ГруппаФильтрЗвонковПоПринадлежности.Доступность = НЕ ТребуетсяНастройка;
	Элементы.ДополнениеТелефонныеЗвонкиСтрокаПоиска.Доступность = НЕ ТребуетсяНастройка;
	Элементы.ПрослушатьЗапись.Доступность = НЕ ТребуетсяНастройка;
	Элементы.СформироватьОтчет.Доступность = НЕ ТребуетсяНастройка;
	
	Элементы.ГруппаЗвонкиПанель.Видимость = НЕ ТребуетсяНастройка;
	Элементы.ДекорацияНеобходимостьНастройки.Видимость = ТребуетсяНастройка;
	
	Если ТекущийПользовательАдминистратор Тогда
		Элементы.ДекорацияНеобходимостьНастройки.Заголовок = "Необходимо выполнить настройку телефонии.";

	Иначе	
		Элементы.ДекорацияНеобходимостьНастройки.Заголовок = "Для настройки телефонии обратитесь к администратору.";
		Элементы.НастройкиТелефонииОбщии.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ НастройкаИспользоватьСофтФон Тогда
		НастройкиТелефонииПерсональные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЛиниюПользователя() Экспорт
	
	ЗаголовокСтатуса = "Нет линии";

	Если ИспользуетсяОблачнаяАТС Тогда
		ДанныеПользователя = сфпЛицензированиеСервер.ДанныеПользователяАТС(ТекущийПользователь);
		ВнутреннийНомер = ДанныеПользователя.ВнутреннийНомер;

	Иначе
		ВнутреннийНомер = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ТекущийПользователь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВнутреннийНомер) Тогда
		ЗаголовокСтатуса = "Линия " + ВнутреннийНомер;
	КонецЕсли;
	
	Элементы.КартинкаСтатусЛинииОнлайн.Видимость = НЕ ТребуетсяНастройка;
	Элементы.КартинкаСтатусЛинииОфлайн.Видимость = ТребуетсяНастройка;
		
	Элементы.ДекорацияСтатусТекущегоПодключения.Заголовок = ЗаголовокСтатуса;
	
	ДоступностьКомандAPI = сфпСофтФонПроСервер.ПолучитьДоступностьКомандAPI();
	ДоступностьКомандAPI_Ответ = ДоступностьКомандAPI.Ответ;
	ДоступностьКомандAPI_Завершить = ДоступностьКомандAPI.Завершить;
	ДоступностьКомандAPI_Пауза = ДоступностьКомандAPI.Пауза;
	ДоступностьКомандAPI_Перевод = ДоступностьКомандAPI.Перевод;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	сфпСофтФонПроКлиент.ОбработкаОповещенияПанелиЗвонка(ЭтаФорма, ИмяСобытия, Параметр, Источник, ИспользуетсяОблачнаяАТС);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СписокТелефонныхЗвонков

&НаКлиенте
Процедура ТелефонныеЗвонкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТелефонныеЗвонки.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииФормыТелефонногоЗвонка", ЭтаФорма);
		ПоказатьЗначение(Оповещение, ТекДанные.Ссылка);
		//ПараметрыФормы = Новый Структура("Ключ", ТекДанные.Ссылка);
		//ОткрытьФорму("Документ.ТелефонныйЗвонок.Форма.сфпФормаДокумента", ПараметрыФормы, ЭтаФорма,,,, Оповещение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыТелефонногоЗвонка(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Элементы.ТелефонныеЗвонки.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура АбонентыТелефонныхКнигВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекДанные.Свойство("ГруппировкаСтроки") Тогда
	    НастроитьОтображениеКонтактов("Развернуть", ТекДанные.ГруппировкаСтроки.Ключ);

	ИначеЕсли НЕ ЗначениеЗаполнено(ИдентификаторЗвонка) И (ЗначениеЗаполнено(ТекДанные.НомерТелефона) ИЛИ ЗначениеЗаполнено(ТекДанные.ВнутреннийНомер)) Тогда
		Если Элементы.АбонентыТелефонныхКниг.ТекущийЭлемент = Элементы.АбонентыТелефонныхКнигВнутреннийНомер ИЛИ Элементы.АбонентыТелефонныхКниг.ТекущийЭлемент = Элементы.АбонентыТелефонныхКнигНомерТелефона Тогда
			ТекущийЭлементДанныхКонтактаЗвонка = ТекущийЭлементДанныхКонтакта;
			ТекущаяЯчейкаДанныхКонтактаЗвонка = ТекущаяЯчейкаДанныхКонтакта;
			ПоднятьТрубку(, ТекущийЗвонокНомерАбонента);

		Иначе
			ПоднятьТрубку();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АбонентыТелефонныхКнигПриАктивизацииЯчейки(Элемент = Неопределено)
	сфпСофтФонПроКлиент.ПанельЗвонка_АбонентыТелефонныхКнигПриАктивизацииЯчейки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура АбонентыТелефонныхКнигПередРазворачиванием(Элемент, Строка, Отказ)
	
	Отказ = Истина;
	// АльфаАвто
	// Если разворачивать список с 2мя и более группировками верхнего уровня - падает с дампом.
	//НастроитьОтображениеКонтактов("Развернуть", Строка.Ключ);
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекДанные.Свойство("ГруппировкаСтроки") Тогда
		НастроитьОтображениеКонтактов("Развернуть", Строка.Ключ);
	Иначе
		НастроитьОтображениеКонтактов("Свернуть", Строка.Ключ);
	КонецЕсли;
	// Конец АльфаАвто
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СписокВыбора = Новый СписокЗначений();
	СписокВыбора.Добавить("сфпЕженедельныйОтчет", "Еженедельный отчет по звонкам");
	СписокВыбора.Добавить("сфпОтчетПоВсемЗвонкам", "Отчет по всем звонкам");
	СписокВыбора.Добавить("сфпОтчетПоПропущеннымЗвонкам", "Отчет по пропущенным звонкам");
	СписокВыбора.Добавить("сфпОтчетПоСовершеннымЗвонкам", "Отчёт по совершенным звонкам");
	
	Оповещение = Новый ОписаниеОповещения("СформироватьОтчетПродолжить", ЭтаФорма);
	ПоказатьВыборИзМеню(Оповещение, СписокВыбора, Элементы.СформироватьОтчет);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетПродолжить(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПараметрыФормы = Новый Структура();
		//ПараметрыФормы.Вставить("Отбор", Новый Структура("Клиент", СтруктураЗвонка.Контакт));
		//ПараметрыФормы.Вставить("КлючВарианта",	"ПоКлиентам");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
		ОткрытьФорму("Отчет." + ВыбранныйЭлемент.Значение + ".Форма", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоЗвонков()
	сфпСофтФонПроКлиент.Телефония_ОбновитьКоличествоЗвонков(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает текущие отборы списка Телефонных звонков
//
// Параметры:
//	Нет.
//
Процедура УстановитьОтборыТелефонныхЗвонков()
	
	Если ТелефонныеЗвонки.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() > 0 Тогда
    	  ЭлементыСпискаОтбора = ТелефонныеЗвонки.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Иначе ЭлементыСпискаОтбора = ТелефонныеЗвонки.Отбор.Элементы;
	КонецЕсли;
	
	Для Каждого ТекущийОтбор Из ЭлементыСпискаОтбора Цикл
		Если ТекущийОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Если ТекущийОтбор.Представление = "Входящие" Тогда
				ТекущийОтбор.Использование = (ТекущийФильтрЗвонков = "Входящие");

			ИначеЕсли ТекущийОтбор.Представление = "Исходящие" Тогда
				ТекущийОтбор.Использование = (ТекущийФильтрЗвонков = "Исходящие");

			ИначеЕсли ТекущийОтбор.Представление = "Пропущенные" Тогда
				ТекущийОтбор.Использование	= (ТекущийФильтрЗвонков = "Пропущенные");

			ИначеЕсли ТекущийОтбор.Представление = "Период звонков" Тогда
				Если НЕ ПустаяСтрока(ТекущийПериодЗвонков) Тогда
					Если НЕ ЗначениеЗаполнено(НачалоПериодаЗвонков) И НЕ ЗначениеЗаполнено(КонецПериодаЗвонков) Тогда
						ТекущийОтбор.Использование = Ложь;

					Иначе	
						ТекущийОтбор.Использование = Истина;
						
						Для Каждого ЭлементГруппы Из ТекущийОтбор.Элементы Цикл
							Если ЭлементГруппы.Представление = "Начало периода" Тогда
								ЭлементГруппы.ПравоеЗначение = НачалоПериодаЗвонков;
								ЭлементГруппы.Использование = ЗначениеЗаполнено(НачалоПериодаЗвонков);

							ИначеЕсли ЭлементГруппы.Представление = "Конец периода" Тогда
								ЭлементГруппы.ПравоеЗначение = КонецПериодаЗвонков;
								ЭлементГруппы.Использование = ЗначениеЗаполнено(КонецПериодаЗвонков);
							КонецЕсли;	
						КонецЦикла;
					КонецЕсли;	
					
				Иначе
		            ТекущийОтбор.Использование = Ложь;
				КонецЕсли;
				
			ИначеЕсли ТекущийОтбор.Представление = "Все звонки" Тогда
				Для Каждого ПодчиненныйОтбор Из ТекущийОтбор.Элементы Цикл
					Если ПодчиненныйОтбор.Представление = "Мои звонки" Тогда
						Если ПринадлежностьЗвонка = 2 Тогда
							ПодчиненныйОтбор.Использование = Ложь;

						Иначе
							ПодчиненныйОтбор.Использование = Истина;
						КонецЕсли;

					ИначеЕсли ПодчиненныйОтбор.Представление = "Мои подразделения" Тогда
						Если ПринадлежностьЗвонка = 1 Тогда
							ПодчиненныйОтбор.Использование = Ложь;
							
						ИначеЕсли ТекущиеПодчиненныеПодразделения.Количество() > 0 Тогда
							ПодчиненныйОтбор.Использование = Истина;
						КонецЕсли;
						
					ИначеЕсли ПодчиненныйОтбор.Представление = "Контролируемые пользователи" Тогда
						Если ПринадлежностьЗвонка = 1 Тогда
							ПодчиненныйОтбор.Использование = Ложь;

						ИначеЕсли ТекущиеПрослушиваемыеПользователи.Количество() > 0 Тогда
							ПодчиненныйОтбор.Использование = Истина;
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
        КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьОтборыТелефонныхЗвонков()

&НаКлиенте
Процедура ТелефонныеЗвонкиПриАктивизацииСтроки(Элемент = Неопределено)
	сфпСофтФонПроКлиент.Телефония_ТелефонныеЗвонкиПриАктивизацииСтроки(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область ОбработчикиКомандФормы

#Область ПанельЗвонков

&НаКлиенте
Процедура ПрослушатьЗапись(Команда)
	
	ТекДанные = Элементы.ТелефонныеЗвонки.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ПараметрыЗвонка = Новый Структура("ИдентификаторЗвонка, ИдентификаторЗаписи, Ответственный, ДатаНачала, НомерТелефона, ВнутреннийНомер",
			ТекДанные.сфпИдентификаторЗвонка, ТекДанные.сфпИдентификаторЗаписи, ТекДанные.Ответственный, ТекДанные.Дата, ТекДанные.АбонентКакСвязаться, ТекДанные.ВнутреннийНомер);
		сфпСофтФонПроКлиент.НачатьПрослушиваниеЗаписиРазговора(ПараметрыЗвонка, ЭтаФорма, Элементы.ПрослушатьЗапись);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкиТелефонииПерсональные(Команда = Неопределено)

	ЗаполнитьПерсональныеНастройкиНаСервере();

	НастройкаПривязатьВнутреннийНомерПриИзменении();
	
	Элементы.СтраницыПанель.ТекущаяСтраница = Элементы.СтраницаПерсональныеНастройки;
	Элементы.ГруппаПравая.Видимость = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)

	Настройки = Новый Структура();
	Настройки.Вставить("сфпИспользоватьСофтФон", НастройкаИспользоватьСофтФон);
	Настройки.Вставить("сфпЗакрыватьПанельПриЗавершенииРаботы", НастройкаЗакрыватьПанельПриЗавершенииРаботы);
	Настройки.Вставить("сфпПривязатьВнутреннийНомер", НастройкаПривязатьВнутреннийНомер);
	Настройки.Вставить("сфпЛогинНаСерверСофтФон", НастройкаЛогинНаСерверСофтФон);
	Настройки.Вставить("сфпПарольНаСерверСофтФон", НастройкаПарольНаСерверСофтФон);
	Настройки.Вставить("сфпДействиеПриВходящемЗвонке", НастройкаДействиеВходящийЗвонок);
	Настройки.Вставить("сфпДействиеПриИсходящемЗвонке", НастройкаДействиеИсходящийЗвонок);
	
	Если НастройкаПривязатьВнутреннийНомер Тогда
		Настройки.Вставить("сфпТекущийВнутреннийНомер", НастройкаТекущийВнутреннийНомер);
	КонецЕсли;
	
	СохранитьНастройкиНаСервере(ТекущийПользователь, Настройки);
	
	сфпСофтФонПроКлиент.сфпДобавитьГлобальныйПараметр("сфпЗакрыватьПанельПриЗавершенииРаботы", сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпЗакрыватьПанельПриЗавершенииРаботы"));
	
	Элементы.СтраницыПанель.ТекущаяСтраница = Элементы.СтраницаПанельЗвонка;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если НастройкаИспользоватьСофтФон Тогда
		сфпСофтФонПроКлиент.сфпПодключитьСофтФон();

	Иначе
		сфпСофтФонПроКлиент.сфпОтключитьСофтФон();
	КонецЕсли;
	
	ОбновитьЛиниюПользователя();

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНастройки(Команда)
	Элементы.СтраницыПанель.ТекущаяСтраница = Элементы.СтраницаПанельЗвонка;
КонецПроцедуры

&НаКлиенте
Процедура ПоднятьТрубку(Команда = Неопределено, ВыбранныйНомерКонтакта = Неопределено)
	
	СтруктураЗвонка = Новый Структура("НомераТелефонов,АбонентКонтакт,ДанныеЗаполнения,ИдентификаторЗвонка", Новый СписокЗначений());
	
	Если ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
		Если НЕ ИспользуетсяОблачнаяАТС Тогда
			сфпПанельУправления.AnswerCall(ТекущийЗвонокНомерЛинии, ИдентификаторЗвонка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НабранныйНомер) Тогда
			СтруктураЗвонка.НомераТелефонов.Добавить(НабранныйНомер);
			НабранныйНомер = "";
		КонецЕсли;
	
	Иначе
		Если ЗначениеЗаполнено(НабранныйНомер) Тогда
			СтруктураЗвонка.НомераТелефонов.Добавить(НабранныйНомер);
			НабранныйНомер = "";
		
		ИначеЕсли ТекущийЭлементДанныхКонтакта = "ТелефонныеЗвонки" Тогда
			ТекДанные = Элементы.ТелефонныеЗвонки.ТекущиеДанные;
			Если ТекДанные <> Неопределено Тогда
				Если ЗначениеЗаполнено(ТекДанные.АбонентКакСвязаться) Тогда
					СтруктураЗвонка.НомераТелефонов.Добавить(ТекДанные.АбонентКакСвязаться);
					СтруктураЗвонка.АбонентКонтакт = ТекДанные.АбонентКонтакт;
					СтруктураЗвонка.ДанныеЗаполнения = Новый Структура("ВзаимодействиеОснование", ТекДанные.Ссылка);
				КонецЕсли;	
			КонецЕсли;
			
		ИначеЕсли ТекущийЭлементДанныхКонтакта = "АбонентыТелефонныхКниг" Тогда
			ТекДанные = Элементы.АбонентыТелефонныхКниг.ТекущиеДанные;
			Если ТекДанные <> Неопределено Тогда
				Если ЗначениеЗаполнено(ТекДанные.Контакт) Тогда
					СтруктураЗвонка.АбонентКонтакт = ТекДанные.Контакт;
					
				ИначеЕсли ЗначениеЗаполнено(ТекДанные.ИдентификаторАТС) Тогда
					СтруктураЗвонка.АбонентКонтакт = ТекДанные.ИдентификаторАТС;	
				КонецЕсли;
					
				Если ЗначениеЗаполнено(ВыбранныйНомерКонтакта) Тогда
					СтруктураЗвонка.НомераТелефонов.Добавить(ВыбранныйНомерКонтакта);
					
				ИначеЕсли ЗначениеЗаполнено(ТекДанные.Контакт) Тогда
					ТелефоныКонтакта = сфпСофтФонПроСервер.сфпПолучитьМассивТелефоновИФаксов(ТекДанные.Контакт);
					Для Каждого Телефон Из ТелефоныКонтакта Цикл
						СтруктураЗвонка.НомераТелефонов.Добавить(Телефон.Представление, СокрЛП(Телефон.Вид) + ": " + Телефон.Представление);
					КонецЦикла;
					
				Иначе
					Если ТекущаяЯчейкаДанныхКонтакта = "АбонентыТелефонныхКнигНомерТелефона" Тогда
						Если ЗначениеЗаполнено(ТекДанные.НомерТелефона) Тогда
							СтруктураЗвонка.НомераТелефонов.Добавить(ТекДанные.НомерТелефона);
						КонецЕсли;	
						
					ИначеЕсли ТекущаяЯчейкаДанныхКонтакта = "АбонентыТелефонныхКнигВнутреннийНомер" Тогда
						Если ЗначениеЗаполнено(ТекДанные.ВнутреннийНомер) Тогда
							СтруктураЗвонка.НомераТелефонов.Добавить(ТекДанные.ВнутреннийНомер);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(НабранныйНомер) Тогда
			СтруктураЗвонка.НомераТелефонов.Добавить(НабранныйНомер);
			НабранныйНомер = "";
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураЗвонка.НомераТелефонов.Количество() > 0 Тогда
		Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.АбонентКонтакт) Тогда
			ГолыйНомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(СтруктураЗвонка.НомераТелефонов[0].Значение);
			МассивЗвонящих = сфпСофтФонПроСервер.сфпНайтиОбъектВРегистреПоТелефону(ГолыйНомерТелефона);
			Если МассивЗвонящих.Количество() > 0 Тогда
				СтруктураЗвонка.АбонентКонтакт = МассивЗвонящих[0];
			КонецЕсли;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
			Если ИспользуетсяОблачнаяАТС Тогда
				Если ТекущийЗвонокДлительность = '00010101' Тогда
					РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводНеотвеченногоЗвонка", ИдентификаторЗвонка, СтруктураЗвонка.НомераТелефонов[0].Значение, ВнутреннийНомер, Истина);
					
				Иначе
					РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводОтвеченногоЗвонка", ИдентификаторЗвонка, СтруктураЗвонка.НомераТелефонов[0].Значение, ВнутреннийНомер, Истина);
				КонецЕсли;
			КонецЕсли;	
			
		Иначе	
			Если СтруктураЗвонка.НомераТелефонов.Количество() > 0 Тогда
				Если СтруктураЗвонка.НомераТелефонов.Количество() > 1 Тогда
					Оповещение = Новый ОписаниеОповещения("ПриВыбореНомера", ЭтаФорма, СтруктураЗвонка);
					ПоказатьВыборИзМеню(Оповещение, СтруктураЗвонка.НомераТелефонов);
					
				Иначе
					ПриВыбореНомера(СтруктураЗвонка.НомераТелефонов[0], СтруктураЗвонка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореНомера(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("НомерТелефона", ВыбранныйЭлемент.Значение);
		Если сфпСофтФонПроКлиент.сфпПозвонить(ВыбранныйЭлемент.Значение, ДополнительныеПараметры.АбонентКонтакт, ДополнительныеПараметры.ДанныеЗаполнения) Тогда
			//ОбработкаОповещенияПанелиЗвонка(ЭтаФорма, "сфпНовыйИсходящийЗвонок", ДополнительныеПараметры, ЭтаФорма);

		Иначе
		    ТекущийЗвонокНомерАбонента = "";
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПоложитьТрубку(Команда)
	
	Если ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
		Если ИспользуетсяОблачнаяАТС Тогда
			сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ЗавершениеВызова", ИдентификаторЗвонка);

		Иначе	
			Если ИдентификаторПереводимогоЗвонка = "" Тогда
				// Завершаем звонок
				сфпПанельУправления.DropCall(ТекущийЗвонокНомерЛинии, ИдентификаторЗвонка);

			Иначе
				// Отменяем перевод звонка
				сфпПанельУправления.CancelTransferCall(ТекущийЗвонокНомерЛинии, ИдентификаторПереводимогоЗвонка, "");
			КонецЕсли;	
			
			ИдентификаторПереводимогоЗвонка = "";
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьЗвонок(Команда)
	
	ПоказатьНомеронабиратель();
	ЭтаФорма.ТекущийЭлемент = Элементы.НабранныйНомер;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДействие(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПриВыбореДействияПоЗвонку", ЭтаФорма);
	ПоказатьВыборИзМеню(Оповещение, ДействияПоЗвонку, Элементы.ВыбратьДействиеДа);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореДействияПоЗвонку(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		СтруктураЗвонка = Новый Структура();
		Если ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
			МассивЗвонящих = Новый Массив();
			МассивЗвонящих.Добавить(ТекущийЗвонокКонтакт);
				
			СтруктураЗвонка = Новый Структура("ИдентификаторЗвонка,Контакт,НомерТелефона,НовыйЗвонок,МассивЗвонящих,ВходящийЗвонок,КонтактПредставление",
				ИдентификаторЗвонка, ТекущийЗвонокКонтакт, ТекущийЗвонокНомерАбонента, ТекущийЗвонок, МассивЗвонящих, ТекущийЗвонокВходящий, ТекущийЗвонокПредставлениеКонтакта);
			
		Иначе
			ТекДанные = Элементы.ТелефонныеЗвонки.ТекущиеДанные;
			Если ТекДанные <> Неопределено Тогда
				МассивЗвонящих = Новый Массив();
				МассивЗвонящих.Добавить(ТекДанные.АбонентКонтакт);
				
				СтруктураЗвонка = Новый Структура("ИдентификаторЗвонка,Контакт,НомерТелефона,НовыйЗвонок,МассивЗвонящих,ВходящийЗвонок,КонтактПредставление",
					ТекДанные.сфпИдентификаторЗвонка, ТекДанные.АбонентКонтакт, ТекДанные.АбонентКакСвязаться, ТекДанные.Ссылка, МассивЗвонящих, ТекДанные.Входящий, ТекДанные.АбонентКонтакт);
				// АльфаАвто
				Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
					СтруктураЗвонка.Контакт = ТекДанные.Клиент;
				КонецЕсли;
				// Конец АльфаАвто
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураЗвонка.Свойство("ИдентификаторЗвонка") Тогда
			ИндексДействия = 1 + ДействияПоЗвонку.Индекс(ВыбранныйЭлемент);
			сфпСофтФонПроКлиентПереопределяемый.сфпВыполнитьДоступноеДействие(ИндексДействия, СтруктураЗвонка);
		КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодтвердитьПереводНажатие(Элемент)
	
	Если ИспользуетсяОблачнаяАТС Тогда
		Если ЗначениеЗаполнено(ИдентификаторЗвонка) И ЗначениеЗаполнено(НабранныйНомер) Тогда
			Если ТекущийЗвонокДлительность = '00010101' Тогда
				РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводНеотвеченногоЗвонка", ИдентификаторЗвонка, НабранныйНомер, ВнутреннийНомер, Ложь);
				
			Иначе
				РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводОтвеченногоЗвонка", ИдентификаторЗвонка, НабранныйНомер, ВнутреннийНомер, Ложь);
			КонецЕсли;
			
			Если РезультатЗапроса.Успешно Тогда
				НабранныйНомер = "";
				Элементы.ДекорацияПодтвердитьПеревод.Видимость = Ложь;
			КонецЕсли;	
		КонецЕсли;

	Иначе	
		Если ИдентификаторПереводимогоЗвонка = "" Тогда
			Если ИдентификаторЗвонка <> 0 И ЗначениеЗаполнено(НабранныйНомер) Тогда
				сфпПанельУправления.RedirectCall(ТекущийЗвонокНомерЛинии, ИдентификаторЗвонка, НабранныйНомер, "");
				НабранныйНомер = "";
			КонецЕсли;

		Иначе
			// Подтверждаем перевод звонка
			сфпПанельУправления.FinishTransferCall(ТекущийЗвонокНомерЛинии, ИдентификаторПереводимогоЗвонка, "");

			ИдентификаторПереводимогоЗвонка = "";
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНомеронабирательНабратьНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ИдентификаторЗвонка) И ЗначениеЗаполнено(НабранныйНомер) Тогда
		Если ИспользуетсяОблачнаяАТС Тогда
			РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводОтвеченногоЗвонка", ИдентификаторЗвонка, НабранныйНомер, ВнутреннийНомер, Истина);
			Если РезультатЗапроса.Успешно Тогда
				ИдентификаторПереводимогоЗвонка = ИдентификаторЗвонка;
				НабранныйНомер = "";
				Элементы.НомеронабирательНабрать.Видимость = Ложь;
			КонецЕсли;
		
		Иначе	
			сфпПанельУправления.StartTransferCall(ТекущийЗвонокНомерЛинии, ИдентификаторЗвонка, НабранныйНомер, "");
			ИдентификаторПереводимогоЗвонка = ИдентификаторЗвонка;
			НабранныйНомер = "";
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразатьКонтактыНомеронабиратель(ПоказатьКонтакты)
	
	Элементы.ПоказатьКонтакты.ЦветФона = ?(ПоказатьКонтакты, ЦветФонаВыбраннойКнопки, ЦветФонаКнопки);
	Элементы.ПоказатьКонтакты.ЦветРамки = Элементы.ПоказатьКонтакты.ЦветФона;
	
	Элементы.ПоказатьНомеронабиратель.ЦветФона = ?(НЕ ПоказатьКонтакты, ЦветФонаВыбраннойКнопки, ЦветФонаКнопки);
	Элементы.ПоказатьНомеронабиратель.ЦветРамки = Элементы.ПоказатьНомеронабиратель.ЦветФона;
	Элементы.ПоказатьНомеронабиратель.Картинка = ?(ПоказатьКонтакты, БиблиотекаКартинок.сфпПанельЗвонка_НомеронабирательНет, БиблиотекаКартинок.сфпПанельЗвонка_НомеронабирательДа);
	
	Элементы.СтраницыКонтактыНомеронабиратель.ТекущаяСтраница = ?(ПоказатьКонтакты, Элементы.СтраницаКонтакты, Элементы.СтраницаНомеронабиратель);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтакты(Команда)
	ОтобразатьКонтактыНомеронабиратель(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНомеронабиратель(Команда = Неопределено)
	ОтобразатьКонтактыНомеронабиратель(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НомеронабирательПриВводеНомера(ВведенныйНомер = Неопределено)
	
	Если ВведенныйНомер = Неопределено Тогда
		ИмяЭлемента = СтрЗаменить(ЭтаФорма.ТекущийЭлемент.Имя, "Номеронабиратель", "");
		Если ИмяЭлемента = "Символ1" Тогда
			ВведенноеЗначение = "*";

		ИначеЕсли ИмяЭлемента = "Символ2" Тогда
			ВведенноеЗначение = "#";

		Иначе
			ВведенноеЗначение = Число(ИмяЭлемента);
		КонецЕсли;
	
		НабранныйНомер = НабранныйНомер + ВведенноеЗначение;
		ТекущийЗвонокНомерАбонента = НабранныйНомер;
		
	Иначе
		ТекущийЗвонокНомерАбонента = ВведенныйНомер;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
		Элементы.ДекорацияНомеронабирательНабрать.Видимость = ЗначениеЗаполнено(НабранныйНомер) И (ТекущийЗвонокСостояние = 8 ИЛИ ТекущийЗвонокСостояние = 10 ИЛИ ТекущийЗвонокСостояние = 15);
		Элементы.ДекорацияПодтвердитьПеревод.Видимость = ЗначениеЗаполнено(НабранныйНомер) И ((ТекущийЗвонокСостояние <> 8 И ТекущийЗвонокСостояние <> 15) ИЛИ (ТекущийЗвонокСостояние = 10));
		
	Иначе
		ТекДанные = Элементы.ТелефонныеЗвонки.ТекущиеДанные;
		
		ТекущийЗвонокПредставлениеКонтакта = "";
		ТекущийЗвонокВладелецКонтакта = "";
					
		Если ПустаяСтрока(ТекущийЗвонокНомерАбонента) И Элементы.ДекорацияОтветДа.Видимость И ТекДанные = Неопределено Тогда
			Элементы.ДекорацияОтветНет.Видимость = Истина;
			Элементы.ДекорацияОтветДа.Видимость = Ложь;
			
		ИначеЕсли НЕ Элементы.ДекорацияОтветДа.Видимость Тогда
			Элементы.ДекорацияОтветНет.Видимость = Ложь;
			Элементы.ДекорацияОтветДа.Видимость = Истина;
		КонецЕсли;
		
		Элементы.ДекорацияНомеронабирательНабрать.Видимость = Ложь;
		Элементы.ДекорацияПодтвердитьПеревод.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомеронабирательНажатие(Команда)
	НомеронабирательПриВводеНомера();
КонецПроцедуры

&НаКлиенте
Процедура НомеронабирательУдалитьНажатие(Элемент)
	
	НабранныйНомер = Лев(НабранныйНомер, СтрДлина(НабранныйНомер) - 1);
	
	НомеронабирательПриВводеНомера(НабранныйНомер);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗвонка) И ПустаяСтрока(НабранныйНомер) Тогда
		ТелефонныеЗвонкиПриАктивизацииСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НабранныйНомерПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
		ТекущийЗвонокНомерАбонента = НабранныйНомер;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НабранныйНомерИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	НомеронабирательПриВводеНомера(Текст);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьДлительностьРазговораПанелиЗвонка() Экспорт
	ТекущийЗвонокДлительность = '00010101' + (ТекущаяДата() - ТекущийЗвонокНачалоРазговора);	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПеревод(Команда)

	Если ИспользуетсяОблачнаяАТС Тогда
		Если ЗначениеЗаполнено(ИдентификаторЗвонка) И ЗначениеЗаполнено(НабранныйНомер) Тогда
			Если ТекущийЗвонокДлительность = '00010101' Тогда
				РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводНеотвеченногоЗвонка", ИдентификаторЗвонка, НабранныйНомер, ВнутреннийНомер, Ложь);
				
			Иначе
				РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводОтвеченногоЗвонка", ИдентификаторЗвонка, НабранныйНомер, ВнутреннийНомер, Ложь);
			КонецЕсли;
			
			Если РезультатЗапроса.Успешно Тогда
				НабранныйНомер = "";
				Элементы.ДекорацияПодтвердитьПеревод.Видимость = Ложь;
			КонецЕсли;	
		КонецЕсли;

	Иначе	
		Если ИдентификаторПереводимогоЗвонка = "" Тогда
			Если ИдентификаторЗвонка <> 0 И ЗначениеЗаполнено(НабранныйНомер) Тогда
				сфпПанельУправления.RedirectCall(ТекущийЗвонокНомерЛинии, ИдентификаторЗвонка, НабранныйНомер, "");
				НабранныйНомер = "";
			КонецЕсли;

		Иначе
			// Подтверждаем перевод звонка
			сфпПанельУправления.FinishTransferCall(ТекущийЗвонокНомерЛинии, ИдентификаторПереводимогоЗвонка, "");

			ИдентификаторПереводимогоЗвонка = "";
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура НомеронабирательНабрать(Команда)
	
	Если ЗначениеЗаполнено(ИдентификаторЗвонка) И ЗначениеЗаполнено(НабранныйНомер) Тогда
		Если ИспользуетсяОблачнаяАТС Тогда
			РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводОтвеченногоЗвонка", ИдентификаторЗвонка, НабранныйНомер, ВнутреннийНомер, Истина);
			Если РезультатЗапроса.Успешно Тогда
				НабранныйНомер = "";
				Элементы.НомеронабирательНабрать.Видимость = Ложь;
			КонецЕсли;

        Иначе
			сфпПанельУправления.StartTransferCall(ТекущийЗвонокНомерЛинии, ИдентификаторЗвонка, НабранныйНомер, "");
			ИдентификаторПереводимогоЗвонка = ИдентификаторЗвонка;
			НабранныйНомер = "";
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НастройкиТелефонииОбщии(Команда = Неопределено)
	
	Оповещение = Новый ОписаниеОповещения("НастройкиТелефонииОбщииПриЗакрытии", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.сфпОбщиеНастройки",, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТелефонииОбщииПриЗакрытии(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ПроверитьНеобходимостьНастройки();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиНаСервере(Пользователь, Настройки)
	
	// АльфаАвто
	УстановитьПривилегированныйРежим(Истина);
	// Конец АльфаАвто
	
	Если Метаданные.РегистрыСведений.Найти("CRM_НастройкиПользователей") <> Неопределено Тогда
		ИмяРегистраНастроек = "CRM_НастройкиПользователей";
		ИмяПВХНастроек = "CRM_НастройкиПользователей";
		
	ИначеЕсли Метаданные.РегистрыСведений.Найти("сфпНастройкиПользователей") <> Неопределено Тогда
		ИмяРегистраНастроек = "сфпНастройкиПользователей";
		ИмяПВХНастроек = "сфпНастройкиПользователей";

	ИначеЕсли Метаданные.РегистрыСведений.Найти("ПраваИНастройки") <> Неопределено Тогда
		ИмяРегистраНастроек = "ПраваИНастройки";
		ИмяПВХНастроек = "ПраваИНастройки";
		
	Иначе
		ИмяРегистраНастроек = "сфпНастройкиПользователей";
		ИмяПВХНастроек = "сфпНастройкиПользователей";
	КонецЕсли;
	
	Для Каждого Настройка Из Настройки Цикл
		МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
		
		ТекНастройкаПВХ = ПланыВидовХарактеристик[ИмяПВХНастроек][Настройка.Ключ];
		
		Если ИмяРегистраНастроек = "ПраваИНастройки" Тогда
			МенеджерЗаписи.ПользовательПрофиль = Пользователь;
			МенеджерЗаписи.ПравоНастройка = ТекНастройкаПВХ;
			МенеджерЗаписи.Объект = "";

		Иначе
			МенеджерЗаписи.Пользователь = Пользователь;
			МенеджерЗаписи.Настройка = ТекНастройкаПВХ;
		КонецЕсли;
		
		МенеджерЗаписи.Значение = Настройка.Значение;
		МенеджерЗаписи.Записать();
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПерсональныеНастройкиНаСервере()

	Настройки = Новый Структура();
	Настройки.Вставить("сфпИспользоватьСофтФон", "НастройкаИспользоватьСофтФон");
	Настройки.Вставить("сфпЗакрыватьПанельПриЗавершенииРаботы", "НастройкаЗакрыватьПанельПриЗавершенииРаботы");
	Настройки.Вставить("сфпПривязатьВнутреннийНомер", "НастройкаПривязатьВнутреннийНомер");
	Настройки.Вставить("сфпТекущийВнутреннийНомер", "НастройкаТекущийВнутреннийНомер");
	Настройки.Вставить("сфпЛогинНаСерверСофтФон", "НастройкаЛогинНаСерверСофтФон");
	Настройки.Вставить("сфпПарольНаСерверСофтФон", "НастройкаПарольНаСерверСофтФон");
	Настройки.Вставить("сфпДействиеПриВходящемЗвонке", "НастройкаДействиеВходящийЗвонок");
	Настройки.Вставить("сфпДействиеПриИсходящемЗвонке", "НастройкаДействиеИсходящийЗвонок");
	
	Для Каждого Настройка Из Настройки Цикл
		ЗначениеНастройки = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя(Настройка.Ключ, ТекущийПользователь);
		
		ЭтаФорма[Настройка.Значение] = ЗначениеНастройки;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковПоВиду(Фильтр, УстановитьОтбор = Истина)
	
	ТекущийФильтрЗвонков = Фильтр;

	Элементы.ФильтрЗвонковПоВидуПропущенные.ЦветФона = ?(ТекущийФильтрЗвонков = "Пропущенные", ЦветФонаВыбраннойКнопки, ЦветФонаКнопки);
	Элементы.ФильтрЗвонковПоВидуПропущенные.ЦветРамки = Элементы.ФильтрЗвонковПоВидуПропущенные.ЦветФона;
	
	Элементы.ФильтрЗвонковПоВидуВходящие.ЦветФона = ?(ТекущийФильтрЗвонков = "Входящие", ЦветФонаВыбраннойКнопки, ЦветФонаКнопки);
	Элементы.ФильтрЗвонковПоВидуВходящие.ЦветРамки = Элементы.ФильтрЗвонковПоВидуВходящие.ЦветФона;
	
	Элементы.ФильтрЗвонковПоВидуИсходящие.ЦветФона = ?(ТекущийФильтрЗвонков = "Исходящие", ЦветФонаВыбраннойКнопки, ЦветФонаКнопки);
	Элементы.ФильтрЗвонковПоВидуИсходящие.ЦветРамки = Элементы.ФильтрЗвонковПоВидуИсходящие.ЦветФона;
	
	Элементы.ФильтрЗвонковПоВидуВсе.ЦветФона = ?(ТекущийФильтрЗвонков = "Все", ЦветФонаВыбраннойКнопки, ЦветФонаКнопки);
	Элементы.ФильтрЗвонковПоВидуВсе.ЦветРамки = Элементы.ФильтрЗвонковПоВидуВсе.ЦветФона;

	Если УстановитьОтбор Тогда
		УстановитьОтборыТелефонныхЗвонков();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковВсе(Команда)
	ФильтрЗвонковПоВиду("Все");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковПропущенные(Команда)
	ФильтрЗвонковПоВиду("Пропущенные");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковВходящие(Команда)
	ФильтрЗвонковПоВиду("Входящие");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковИсходящие(Команда)
	ФильтрЗвонковПоВиду("Исходящие");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковПоПериоду(Фильтр)
	
	ТекущийПериодЗвонков = Фильтр;
	
	ЭлементыФильтра = Новый Массив();
	ЭлементыФильтра.Добавить("Период");
	ЭлементыФильтра.Добавить("Месяц");
	ЭлементыФильтра.Добавить("Неделя");
	ЭлементыФильтра.Добавить("Вчера");
	ЭлементыФильтра.Добавить("Сегодня");
	
	Для Каждого ЭлементФильтра Из ЭлементыФильтра Цикл
		ЭлементВыбран = (ТекущийПериодЗвонков = ЭлементФильтра);
				
		ТекЭлемент = Элементы["ФильтрЗвонковПоПериоду" + ЭлементФильтра];
		ТекЭлемент.Шрифт = Новый Шрифт(ТекЭлемент.Шрифт,,, ЭлементВыбран,, ЭлементВыбран);
	КонецЦикла;
	
	ТекЭлемент = Элементы.ТекущийЗвонокПустойАватар;
	ТекЭлемент.Шрифт = Новый Шрифт(ТекЭлемент.Шрифт,,, Истина,, Истина);
	ТекЭлемент.Шрифт = Новый Шрифт(ТекЭлемент.Шрифт,,, Ложь,, Ложь);
				
	ЗаголовокЭлементаПериод = "Период";
	
	Если ТекущийПериодЗвонков = "Месяц" Тогда
		НачалоПериодаЗвонков = НачалоМесяца(ТекущаяДата());
		КонецПериодаЗвонков = КонецМесяца(НачалоПериодаЗвонков);
		
	ИначеЕсли ТекущийПериодЗвонков = "Неделя" Тогда
		НачалоПериодаЗвонков = НачалоНедели(ТекущаяДата());
		КонецПериодаЗвонков = КонецНедели(НачалоПериодаЗвонков);
		
	ИначеЕсли ТекущийПериодЗвонков = "Вчера" Тогда
		НачалоПериодаЗвонков = НачалоДня(ТекущаяДата()) - 86400;
		КонецПериодаЗвонков = КонецДня(НачалоПериодаЗвонков);
		
	ИначеЕсли ТекущийПериодЗвонков = "Сегодня" Тогда
		НачалоПериодаЗвонков = НачалоДня(ТекущаяДата());
		КонецПериодаЗвонков = КонецДня(НачалоПериодаЗвонков);
		
	ИначеЕсли ТекущийПериодЗвонков = "Период" Тогда
		НачалоПериодаЗвонков = ПериодЗвонков.ДатаНачала;
		КонецПериодаЗвонков = ПериодЗвонков.ДатаОкончания;
		
		ЗаголовокЭлементаПериод = ПредставлениеПериода(ПериодЗвонков.ДатаНачала, ПериодЗвонков.ДатаОкончания);
	КонецЕсли;
	
	Элементы.ФильтрЗвонковПоПериодуПериод.Заголовок = ЗаголовокЭлементаПериод;

	ОбновитьКоличествоЗвонков();
	УстановитьОтборыТелефонныхЗвонков();

КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковСегодня(Команда)
	ФильтрЗвонковПоПериоду("Сегодня");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковВчера(Команда)
	ФильтрЗвонковПоПериоду("Вчера");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковНеделя(Команда)
	ФильтрЗвонковПоПериоду("Неделя");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковМесяц(Команда)
	ФильтрЗвонковПоПериоду("Месяц");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковПериод(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ФильтрЗвонковПериодПродолжить", ЭтаФорма);
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала = ПериодЗвонков.ДатаНачала;
	Диалог.Период.ДатаОкончания = ПериодЗвонков.ДатаОкончания;
	Диалог.Показать(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковПериодПродолжить(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		ПериодЗвонков.ДатаНачала = Период.ДатаНачала;
		ПериодЗвонков.ДатаОкончания = Период.ДатаОкончания;

		ФильтрЗвонковПоПериоду("Период");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковПоПринадлежности(Фильтр)
	
	СписокВыбора = Новый СписокЗначений();
	СписокВыбора.Добавить(1, "Мои звонки", (ПринадлежностьЗвонка = 1), БиблиотекаКартинок.сфпФильтрМоиЗвонки);
	
	Если ТекущиеПодчиненныеПодразделения.Количество() > 0 Тогда
		СписокВыбора.Добавить(2, "Звонки моего подразделения", (ПринадлежностьЗвонка = 2), БиблиотекаКартинок.сфпФильтрЗвонкиМоегоПодразделения);
		СписокВыбора.Добавить(0, "Все звонки", (ПринадлежностьЗвонка = 0), БиблиотекаКартинок.сфпФильтрМоиЗвонкиИПодразделения);
		
	ИначеЕсли ТекущиеПрослушиваемыеПользователи.Количество() > 0 Тогда
		СписокВыбора.Добавить(2, "Звонки контролируемых пользователей", (ПринадлежностьЗвонка = 2), БиблиотекаКартинок.сфпФильтрЗвонкиМоегоПодразделения);
		СписокВыбора.Добавить(0, "Все звонки", (ПринадлежностьЗвонка = 0), БиблиотекаКартинок.сфпФильтрМоиЗвонкиИПодразделения);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ФильтрЗвонковПоПринадлежностиПродолжить", ЭтаФорма);	
	ПоказатьВыборИзМеню(Оповещение, СписокВыбора, Элементы.ФильтрЗвонковПоПринадлежности);

КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковПоПринадлежностиПродолжить(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПринадлежностьЗвонка = ВыбранныйЭлемент.Значение;
		Элементы.КартинкаФильтрЗвонковПоПринадлежности.Подсказка = ВыбранныйЭлемент.Представление;
		Элементы.КартинкаФильтрЗвонковПоПринадлежности.Картинка = ВыбранныйЭлемент.Картинка;
		
		ОбновитьКоличествоЗвонков();
		УстановитьОтборыТелефонныхЗвонков();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеКонтактов(Режим, Группировка = "")
	
	Если ТипЗнч(Группировка) <> Тип("Строка") И ТипЗнч(Группировка) <> Тип("СправочникСсылка.сфпТелефонныеКниги") Тогда
		Возврат;
	КонецЕсли;

	ТекущаяГруппировкаКонтактов.Очистить();
	
	Если АбонентыТелефонныхКниг.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() > 0 Тогда
		  ОтборТелефоннаяКнига = АбонентыТелефонныхКниг.КомпоновщикНастроек.Настройки.Отбор.Элементы[0];
	Иначе ОтборТелефоннаяКнига = АбонентыТелефонныхКниг.Отбор.Элементы[0];
	КонецЕсли;	
	
	Если Режим = "Развернуть" Тогда
		НоваяСтрока = ТекущаяГруппировкаКонтактов.Добавить();
		НоваяСтрока.Группировка = Группировка;
		
		Элементы.ТекущаяГруппировкаКонтактов.Видимость = Истина;

		Элементы.АбонентыТелефонныхКнигКонтактПредставление.ГиперссылкаЯчейки = Ложь;
		
		АбонентыТелефонныхКниг.Группировка.Элементы[0].Использование = Ложь;
		
		ОтборТелефоннаяКнига.Использование = Истина;
		ОтборТелефоннаяКнига.ПравоеЗначение = Группировка;
		
	Иначе
		Элементы.АбонентыТелефонныхКниг.ТекущаяСтрока = Неопределено;

		Элементы.ТекущаяГруппировкаКонтактов.Видимость = Ложь;
		
		Элементы.АбонентыТелефонныхКнигКонтактПредставление.ГиперссылкаЯчейки = Истина;
		
		АбонентыТелефонныхКниг.Группировка.Элементы[0].Использование = Истина;
		
		ОтборТелефоннаяКнига.Использование = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКонтакт(Команда)
	
	ТекДанные = Элементы.АбонентыТелефонныхКниг.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ТипЗнч(ТекДанные) = Тип("ДанныеФормыСтруктура") Тогда
		Попытка ПоказатьЗначение(, ТекДанные.Контакт);
		Исключение КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяГруппировкаКонтактовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НастроитьОтображениеКонтактов("Свернуть");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПривязатьВнутреннийНомерПриИзменении(Элемент = Неопределено)
	
	Элементы.НастройкаПривязатьВнутреннийНомер.Заголовок = "Привязать внутренний номер";
	Если НастройкаПривязатьВнутреннийНомер Тогда
		Элементы.НастройкаПривязатьВнутреннийНомер.Заголовок = Элементы.НастройкаПривязатьВнутреннийНомер.Заголовок + ":";
	КонецЕсли;
	
	Элементы.НастройкаТекущийВнутреннийНомер.Видимость = НастройкаПривязатьВнутреннийНомер;
	Элементы.НастройкаЛогинНаСерверСофтФон.Видимость = НастройкаПривязатьВнутреннийНомер;
	Элементы.НастройкаПарольНаСерверСофтФон.Видимость = НастройкаПривязатьВнутреннийНомер;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаТекущийВнутреннийНомерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТекущийНомер", НастройкаТекущийВнутреннийНомер);
	Оповещение = Новый ОписаниеОповещения("ПриВыбореВнутреннегоНомера", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.сфпСписокВнутреннихНомеров", ПараметрыФормы, Элемент,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореВнутреннегоНомера(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура УдержаниеЗвонка(Команда)
	
	Если ИспользуетсяОблачнаяАТС Тогда
		// Зарезервировано на будущее
		РазрешенаПауза = Истина;
	
    Иначе
		Если ТекущийЗвонокСостояние = 10 Тогда 
			сфпПанельУправления.UnHoldCall(ТекущийЗвонокНомерЛинии, ИдентификаторЗвонка);

		Иначе
			ИД = Формат(Число(ИдентификаторЗвонка), "ЧГ=");
			сфпПанельУправления.HoldCall("6170", ИД);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ОбновитьКоличествоЗвонков();
	Элементы.ТелефонныеЗвонки.Обновить();
	
КонецПроцедуры

#КонецОбласти 
